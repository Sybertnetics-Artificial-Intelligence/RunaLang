Note:
Runa CLI: Argument Parser
Parses command line arguments, flags, and options for the unified CLI
:End Note

Import "../../stdlib/collections/list" as List
Import "../../stdlib/collections/dict" as Dict
Import "../../stdlib/string/format" as Format

Type called "ParsedArgs":
    command as String
    subcommand as Optional[String]
    arguments as List[String]
    flags as Dictionary[String, Boolean]
    options as Dictionary[String, String]
    help_requested as Boolean

Process called "parse_arguments" that takes args as List[String] returns ParsedArgs:
    Note: Parse command line arguments into structured format
    
    Let result be dictionary with:
        "command" as none
        "subcommand" as none
        "arguments" as list containing nothing
        "flags" as dictionary with:
        "options" as dictionary with:
        "help_requested" as false
    
    If length of args is equal to 0:
        Set result with "help_requested" as true
        Return result
    
    Let i be 0
    While i is less than length of args:
        Let arg be args get i
        
        Note: Check for help flags
        If arg is equal to "--help" or arg is equal to "-h":
            Set result with "help_requested" as true
        
        Note: Check for long flags (--flag)
        Otherwise if arg starts with "--":
            Let flag_name be arg substring from 2
            If contains_equals(flag_name):
                Let parts be split_on_equals(flag_name)
                Let key be parts get 0
                Let value be parts get 1
                Let options be result get "options"
                Set options with key as value
            Otherwise:
                Let flags be result get "flags"
                Set flags with flag_name as true
        
        Note: Check for short flags (-f)
        Otherwise if arg starts with "-" and length of arg is greater than 1:
            Let flag_chars be arg substring from 1
            Let flags be result get "flags"
            For each char in flag_chars:
                Set flags with char as true
        
        Note: First non-flag argument is the command
        Otherwise if not result get "command":
            Set result with "command" as arg
        
        Note: Second non-flag argument is the subcommand
        Otherwise if not result get "subcommand":
            Set result with "subcommand" as arg
        
        Note: Remaining arguments are additional parameters
        Otherwise:
            Let arguments be result get "arguments"
            Add arg to arguments
        
        Set i to i plus 1
    
    Return result

Process called "get_help_text" that takes command as Optional[String] returns String:
    Note: Generate help text for commands
    
    If not command:
        Return get_general_help()
    
    If command is equal to "new":
        Return get_new_help()
    Otherwise if command is equal to "build":
        Return get_build_help()
    Otherwise if command is equal to "run":
        Return get_run_help()
    Otherwise if command is equal to "test":
        Return get_test_help()
    Otherwise if command is equal to "get":
        Return get_get_help()
    Otherwise if command is equal to "publish":
        Return get_publish_help()
    Otherwise if command is equal to "doctor":
        Return get_doctor_help()
    Otherwise if command is equal to "serve":
        Return get_serve_help()
    Otherwise if command is equal to "translate":
        Return get_translate_help()
    Otherwise:
        Return "Unknown command: " plus command plus "\n" plus get_general_help()

Process called "get_general_help" returns String:
    Return "Runa - The AI-First Programming Language\n" plus
           "Usage: runa <COMMAND> [OPTIONS]\n" plus
           "\n" plus
           "Commands:\n" plus
           "  new       Create a new Runa project\n" plus
           "  build     Compile the project\n" plus
           "  run       Run the project\n" plus
           "  test      Run project tests\n" plus
           "  get       Add a dependency\n" plus
           "  publish   Publish to registry\n" plus
           "  doctor    AI-powered code analysis\n" plus
           "  translate Language token translation\n" plus
           "  serve     Start installer server\n" plus
           "\n" plus
           "Options:\n" plus
           "  -h, --help     Show help information\n" plus
           "  -v, --version  Show version information\n" plus
           "\n" plus
           "Use 'runa <command> --help' for more information about a command.\n"

Process called "get_new_help" returns String:
    Return "Create a new Runa project\n" plus
           "\n" plus
           "Usage: runa new <NAME>\n" plus
           "\n" plus
           "Arguments:\n" plus
           "  <NAME>    Name of the project\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa new my-project\n" plus
           "  runa new awesome-app\n"

Process called "get_build_help" returns String:
    Return "Compile the Runa project\n" plus
           "\n" plus
           "Usage: runa build [OPTIONS]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --release     Build in release mode (optimized)\n" plus
           "  --target      Specify target architecture\n" plus
           "  --verbose     Show detailed compilation output\n" plus
           "  --canon       Use canonical syntax mode (default)\n" plus
           "  --developer   Use developer syntax mode\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa build\n" plus
           "  runa build --release\n" plus
           "  runa build --developer  # Compile with developer mode syntax\n"

Process called "get_run_help" returns String:
    Return "Run the Runa project\n" plus
           "\n" plus
           "Usage: runa run [OPTIONS] [-- ARGS]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --release     Run release build\n" plus
           "  --no-build    Skip building before run\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa run\n" plus
           "  runa run --release\n" plus
           "  runa run -- arg1 arg2\n"

Process called "get_test_help" returns String:
    Return "Run project tests\n" plus
           "\n" plus
           "Usage: runa test [OPTIONS]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --release     Run tests in release mode\n" plus
           "  --filter      Filter tests by name\n" plus
           "  --verbose     Show detailed test output\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa test\n" plus
           "  runa test --filter basic\n"

Process called "get_get_help" returns String:
    Return "Add a package dependency\n" plus
           "\n" plus
           "Usage: runa get <PACKAGE>[@VERSION] [OPTIONS]\n" plus
           "\n" plus
           "Arguments:\n" plus
           "  <PACKAGE>     Package name\n" plus
           "  [@VERSION]    Version constraint (optional)\n" plus
           "\n" plus
           "Options:\n" plus
           "  --dev         Add as development dependency\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa get json-parser\n" plus
           "  runa get http-client@^2.1.0\n" plus
           "  runa get test-utils --dev\n"

Process called "get_publish_help" returns String:
    Return "Publish package to registry\n" plus
           "\n" plus
           "Usage: runa publish [OPTIONS]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --yes         Skip confirmation prompt\n" plus
           "  --skip-tests  Skip running tests\n" plus
           "  --dry-run     Validate without publishing\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa publish\n" plus
           "  runa publish --yes\n"

Process called "get_doctor_help" returns String:
    Return "AI-powered code analysis\n" plus
           "\n" plus
           "Usage: runa doctor [OPTIONS]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --deep-ai     Run deep AI analysis\n" plus
           "  --explain     Show detailed explanations\n" plus
           "  --fix         Apply suggested fixes\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa doctor\n" plus
           "  runa doctor --deep-ai --explain\n"

Process called "get_serve_help" returns String:
    Return "Start the smart installer server\n" plus
           "\n" plus
           "Usage: runa serve [OPTIONS]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --port <PORT>  Port to listen on (default: 8080)\n" plus
           "  --host <HOST>  Host to bind to (default: 0.0.0.0)\n" plus
           "\n" plus
           "The installer server provides cross-platform installation\n" plus
           "scripts for Unix (shell) and Windows (PowerShell).\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa serve\n" plus
           "  runa serve --port 3000\n"

Process called "get_translate_help" returns String:
    Return "Translate Runa tokens between languages (production-ready)\n" plus
           "\n" plus
           "Usage: runa translate [OPTIONS] <FROM_LANG> <TO_LANG> [INPUT] [OUTPUT]\n" plus
           "\n" plus
           "Options:\n" plus
           "  --from=<LANG>       Source language code (alternative to positional)\n" plus
           "  --to=<LANG>         Target language code (alternative to positional)\n" plus
           "  --detect            Auto-detect source language\n" plus
           "  --in-place          Modify files in place\n" plus
           "  --output=<FILE>     Write output to file\n" plus
           "\n" plus
           "Supported languages: en, hi, ja, es, zh, ru\n" plus
           "\n" plus
           "Examples:\n" plus
           "  runa translate en ja input.runa output.runa\n" plus
           "  runa translate --from=jp --to=es app.runa --in-place\n"

Process called "validate_arguments" that takes parsed as ParsedArgs returns Dictionary:
    Note: Validate parsed arguments for correctness
    
    Let command be parsed get "command"
    Let errors be list containing nothing
    
    If not command:
        Add "Command is required" to errors
        Return dictionary with:
            "valid" as false
            "errors" as errors
    
    Note: Validate command-specific requirements
    If command is equal to "new":
        If not parsed get "subcommand":
            Add "Project name is required for 'new' command" to errors
    
    If command is equal to "get":
        If not parsed get "subcommand":
            Add "Package name is required for 'get' command" to errors
    
    Note: Check for unknown flags
    Let valid_flags be get_valid_flags_for_command(command)
    Let flags be parsed get "flags"
    
    For each flag_name and value in flags:
        If not list_contains(valid_flags, flag_name):
            Add "Unknown flag: --" plus flag_name to errors
    
    Return dictionary with:
        "valid" as length of errors is equal to 0
        "errors" as errors

Process called "get_valid_flags_for_command" that takes command as String returns List[String]:
    If command is equal to "build":
        Return list containing "release", "verbose", "target"
    Otherwise if command is equal to "run":
        Return list containing "release", "no-build"
    Otherwise if command is equal to "test":
        Return list containing "release", "filter", "verbose"
    Otherwise if command is equal to "get":
        Return list containing "dev"
    Otherwise if command is equal to "publish":
        Return list containing "yes", "skip-tests", "dry-run"
    Otherwise if command is equal to "doctor":
        Return list containing "deep-ai", "explain", "fix"
    Otherwise if command is equal to "translate":
        Return list containing "from", "to", "detect", "in-place", "output"
    Otherwise if command is equal to "serve":
        Return list containing "port", "host"
    Otherwise:
        Return list containing nothing

Process called "contains_equals" that takes str as String returns Boolean:
    Note: Check if string contains equals sign
    If index_of(str, "=") is greater than or equal to 0: Return true
    Return false

Process called "split_on_equals" that takes str as String returns List[String]:
    Note: Split string on equals sign
    Let pos be index_of(str, "=")
    If pos is less than 0:
        Return list containing str, ""
    Let key be substring(str, 0, pos)
    Let value be substring(str, pos plus 1, length of str)
    Return list containing key, value

Process called "list_contains" that takes list as List[String] and item as String returns Boolean:
    For each element in list:
        If element is equal to item:
            Return true
    Return false