Note:
Runa Installation Script Generator
Generates platform-specific installation scripts with error handling and verification
:End Note

Import "./platform_detection" as Platform

Process called "generate_unix_script" that takes platform_info as PlatformInfo returns String:
    Note: Generate shell script for Unix-like systems (Linux, macOS)
    
    Let script_header be generate_unix_header()
    Let platform_detection be generate_unix_platform_detection()
    Let download_logic be generate_unix_download_logic(platform_info)
    Let installation_logic be generate_unix_installation_logic(platform_info)
    Let verification_logic be generate_unix_verification_logic()
    let cleanup_logic be generate_unix_cleanup_logic()
    
    Return script_header plus "\n\n" plus
           platform_detection plus "\n\n" plus
           download_logic plus "\n\n" plus
           installation_logic plus "\n\n" plus
           verification_logic plus "\n\n" plus
           cleanup_logic

Process called "generate_windows_script" that takes platform_info as PlatformInfo returns String:
    Note: Generate PowerShell script for Windows
    
    Let script_header be generate_windows_header()
    Let platform_detection be generate_windows_platform_detection()
    Let download_logic be generate_windows_download_logic(platform_info)
    Let installation_logic be generate_windows_installation_logic(platform_info)
    Let verification_logic be generate_windows_verification_logic()
    Let cleanup_logic be generate_windows_cleanup_logic()
    
    Return script_header plus "\n\n" plus
           platform_detection plus "\n\n" plus
           download_logic plus "\n\n" plus
           installation_logic plus "\n\n" plus
           verification_logic plus "\n\n" plus
           cleanup_logic

Process called "generate_unix_header" returns String:
    Return "#!/bin/bash\n" plus
           "# Runa Installation Script\n" plus
           "# The AI-First Programming Language\n" plus
           "# \n" plus
           "# Usage: curl -fsSL https://install.runalang.org/sh | sh\n" plus
           "\n" plus
           "set -e  # Exit on any error\n" plus
           "set -u  # Exit on undefined variables\n" plus
           "\n" plus
           "# Colors for output\n" plus
           "RED='\\033[0;31m'\n" plus
           "GREEN='\\033[0;32m'\n" plus
           "YELLOW='\\033[1;33m'\n" plus
           "BLUE='\\033[0;34m'\n" plus
           "NC='\\033[0m' # No Color\n" plus
           "\n" plus
           "# Logging functions\n" plus
           "info() { echo -e \"${BLUE}[INFO]${NC} $1\"; }\n" plus
           "success() { echo -e \"${GREEN}[SUCCESS]${NC} $1\"; }\n" plus
           "warning() { echo -e \"${YELLOW}[WARNING]${NC} $1\"; }\n" plus
           "error() { echo -e \"${RED}[ERROR]${NC} $1\" >&2; }\n" plus
           "fatal() { error \"$1\"; exit 1; }\n" plus
           "\n" plus
           "info \"ðŸš€ Starting Runa installation...\""

Process called "generate_unix_platform_detection" returns String:
    Return "# Platform detection\n" plus
           "detect_platform() {\n" plus
           "    OS=\"$(uname -s)\"\n" plus
           "    ARCH=\"$(uname -m)\"\n" plus
           "    \n" plus
           "    case \"$OS\" in\n" plus
           "        Linux*)\n" plus
           "            PLATFORM=\"linux\"\n" plus
           "            ;;\n" plus
           "        Darwin*)\n" plus
           "            PLATFORM=\"darwin\"\n" plus
           "            ;;\n" plus
           "        *)\n" plus
           "            fatal \"Unsupported operating system: $OS\"\n" plus
           "            ;;\n" plus
           "    esac\n" plus
           "    \n" plus
           "    case \"$ARCH\" in\n" plus
           "        x86_64|amd64)\n" plus
           "            ARCH=\"x64\"\n" plus
           "            ;;\n" plus
           "        arm64|aarch64)\n" plus
           "            ARCH=\"arm64\"\n" plus
           "            ;;\n" plus
           "        armv7*)\n" plus
           "            ARCH=\"arm\"\n" plus
           "            ;;\n" plus
           "        *)\n" plus
           "            fatal \"Unsupported architecture: $ARCH\"\n" plus
           "            ;;\n" plus
           "    esac\n" plus
           "    \n" plus
           "    info \"Detected platform: $PLATFORM-$ARCH\"\n" plus
           "}\n" plus
           "\n" plus
           "detect_platform"

Process called "generate_unix_download_logic" that takes platform_info as PlatformInfo returns String:
    Let version be "0.1.0-alpha"
    
    Return "# Download configuration\n" plus
           "VERSION=\"" plus version plus "\"\n" plus
           "BASE_URL=\"https://github.com/sybertnetics/runa/releases/download/v${VERSION}\"\n" plus
           "BINARY_NAME=\"runa-${VERSION}-${PLATFORM}-${ARCH}\"\n" plus
           "DOWNLOAD_URL=\"${BASE_URL}/${BINARY_NAME}\"\n" plus
           "INSTALL_DIR=\"/usr/local/bin\"\n" plus
           "TEMP_DIR=\"$(mktemp -d)\"\n" plus
           "\n" plus
           "# Download function\n" plus
           "download_runa() {\n" plus
           "    info \"Downloading Runa ${VERSION} for ${PLATFORM}-${ARCH}...\"\n" plus
           "    \n" plus
           "    # Try curl first, then wget\n" plus
           "    if command -v curl >/dev/null 2>&1; then\n" plus
           "        if ! curl -fsSL \"$DOWNLOAD_URL\" -o \"${TEMP_DIR}/runa\"; then\n" plus
           "            fatal \"Failed to download with curl. Please check your internet connection.\"\n" plus
           "        fi\n" plus
           "    elif command -v wget >/dev/null 2>&1; then\n" plus
           "        if ! wget -q \"$DOWNLOAD_URL\" -O \"${TEMP_DIR}/runa\"; then\n" plus
           "            fatal \"Failed to download with wget. Please check your internet connection.\"\n" plus
           "        fi\n" plus
           "    else\n" plus
           "        fatal \"Neither curl nor wget found. Please install one of them first.\"\n" plus
           "    fi\n" plus
           "    \n" plus
           "    # Verify download\n" plus
           "    if [ ! -f \"${TEMP_DIR}/runa\" ] || [ ! -s \"${TEMP_DIR}/runa\" ]; then\n" plus
           "        fatal \"Downloaded file is empty or corrupted\"\n" plus
           "    fi\n" plus
           "    \n" plus
           "    success \"Download completed successfully\"\n" plus
           "}\n" plus
           "\n" plus
           "download_runa"

Process called "generate_unix_installation_logic" that takes platform_info as PlatformInfo returns String:
    Return "# Installation function\n" plus
           "install_runa() {\n" plus
           "    info \"Installing Runa to ${INSTALL_DIR}...\"\n" plus
           "    \n" plus
           "    # Make binary executable\n" plus
           "    chmod +x \"${TEMP_DIR}/runa\"\n" plus
           "    \n" plus
           "    # Check if we need sudo for installation\n" plus
           "    if [ -w \"$INSTALL_DIR\" ]; then\n" plus
           "        cp \"${TEMP_DIR}/runa\" \"${INSTALL_DIR}/runa\"\n" plus
           "    else\n" plus
           "        info \"Requesting sudo privileges for system installation...\"\n" plus
           "        if ! sudo cp \"${TEMP_DIR}/runa\" \"${INSTALL_DIR}/runa\"; then\n" plus
           "            error \"Failed to install to system directory. Trying user install...\"\n" plus
           "            \n" plus
           "            # Fallback to user installation\n" plus
           "            USER_INSTALL_DIR=\"$HOME/.local/bin\"\n" plus
           "            mkdir -p \"$USER_INSTALL_DIR\"\n" plus
           "            cp \"${TEMP_DIR}/runa\" \"${USER_INSTALL_DIR}/runa\"\n" plus
           "            INSTALL_DIR=\"$USER_INSTALL_DIR\"\n" plus
           "            \n" plus
           "            warning \"Installed to user directory: $USER_INSTALL_DIR\"\n" plus
           "            warning \"Make sure $USER_INSTALL_DIR is in your PATH\"\n" plus
           "        fi\n" plus
           "    fi\n" plus
           "    \n" plus
           "    success \"Runa installed to ${INSTALL_DIR}/runa\"\n" plus
           "}\n" plus
           "\n" plus
           "install_runa"

Process called "generate_unix_verification_logic" returns String:
    Return "# Verification function\n" plus
           "verify_installation() {\n" plus
           "    info \"Verifying installation...\"\n" plus
           "    \n" plus
           "    if ! command -v runa >/dev/null 2>&1; then\n" plus
           "        if [ \"$INSTALL_DIR\" = \"$HOME/.local/bin\" ]; then\n" plus
           "            warning \"Runa is not in PATH. Add the following to your shell profile:\"\n" plus
           "            echo \"export PATH=\\\"$HOME/.local/bin:\\$PATH\\\"\"\n" plus
           "            echo \"\"\n" plus
           "            echo \"Then run: source ~/.bashrc (or ~/.zshrc)\"\n" plus
           "        else\n" plus
           "            error \"Runa installation may have failed. Binary not found in PATH.\"\n" plus
           "            return 1\n" plus
           "        fi\n" plus
           "    fi\n" plus
           "    \n" plus
           "    # Test the installation\n" plus
           "    if \"${INSTALL_DIR}/runa\" version >/dev/null 2>&1; then\n" plus
           "        success \"Installation verified successfully!\"\n" plus
           "        \n" plus
           "        echo \"\"\n" plus
           "        echo \"ðŸŽ‰ Runa is now installed!\"\n" plus
           "        echo \"\"\n" plus
           "        echo \"Get started with:\"\n" plus
           "        echo \"  runa new my-project\"\n" plus
           "        echo \"  cd my-project\"\n" plus
           "        echo \"  runa run\"\n" plus
           "        echo \"\"\n" plus
           "        echo \"For help: runa --help\"\n" plus
           "        echo \"AI analysis: runa doctor\"\n" plus
           "    else\n" plus
           "        error \"Installation verification failed\"\n" plus
           "        return 1\n" plus
           "    fi\n" plus
           "}\n" plus
           "\n" plus
           "verify_installation"

Process called "generate_unix_cleanup_logic" returns String:
    Return "# Cleanup function\n" plus
           "cleanup() {\n" plus
           "    if [ -n \"${TEMP_DIR:-}\" ] && [ -d \"$TEMP_DIR\" ]; then\n" plus
           "        rm -rf \"$TEMP_DIR\"\n" plus
           "    fi\n" plus
           "}\n" plus
           "\n" plus
           "# Set trap for cleanup on exit\n" plus
           "trap cleanup EXIT\n" plus
           "\n" plus
           "info \"Installation completed successfully!\""

Process called "generate_windows_header" returns String:
    Return "# Runa Installation Script for Windows\n" plus
           "# The AI-First Programming Language\n" plus
           "#\n" plus
           "# Usage: irm https://install.runalang.org/ps1 | iex\n" plus
           "\n" plus
           "$ErrorActionPreference = 'Stop'\n" plus
           "\n" plus
           "# Colors for output\n" plus
           "function Write-Info { param($Message) Write-Host \"[INFO] $Message\" -ForegroundColor Blue }\n" plus
           "function Write-Success { param($Message) Write-Host \"[SUCCESS] $Message\" -ForegroundColor Green }\n" plus
           "function Write-Warning { param($Message) Write-Host \"[WARNING] $Message\" -ForegroundColor Yellow }\n" plus
           "function Write-Error { param($Message) Write-Host \"[ERROR] $Message\" -ForegroundColor Red }\n" plus
           "function Write-Fatal { param($Message) Write-Error $Message; exit 1 }\n" plus
           "\n" plus
           "Write-Info \"ðŸš€ Starting Runa installation...\""

Process called "generate_windows_platform_detection" returns String:
    Return "# Platform detection\n" plus
           "function Detect-Platform {\n" plus
           "    $arch = $env:PROCESSOR_ARCHITECTURE\n" plus
           "    if ($env:PROCESSOR_ARCHITEW6432) {\n" plus
           "        $arch = $env:PROCESSOR_ARCHITEW6432\n" plus
           "    }\n" plus
           "    \n" plus
           "    switch ($arch) {\n" plus
           "        \"AMD64\" { $global:Arch = \"x64\" }\n" plus
           "        \"ARM64\" { $global:Arch = \"arm64\" }\n" plus
           "        \"x86\" { $global:Arch = \"x86\" }\n" plus
           "        default { Write-Fatal \"Unsupported architecture: $arch\" }\n" plus
           "    }\n" plus
           "    \n" plus
           "    $global:Platform = \"windows\"\n" plus
           "    Write-Info \"Detected platform: $Platform-$Arch\"\n" plus
           "}\n" plus
           "\n" plus
           "Detect-Platform"

Process called "generate_windows_download_logic" that takes platform_info as PlatformInfo returns String:
    Let version be "0.1.0-alpha"
    
    Return "# Download configuration\n" plus
           "$Version = \"" plus version plus "\"\n" plus
           "$BaseUrl = \"https://github.com/sybertnetics/runa/releases/download/v$Version\"\n" plus
           "$BinaryName = \"runa-$Version-$Platform-$Arch.exe\"\n" plus
           "$DownloadUrl = \"$BaseUrl/$BinaryName\"\n" plus
           "$InstallDir = \"$env:USERPROFILE\\.runa\\bin\"\n" plus
           "$TempFile = [System.IO.Path]::GetTempFileName() + \".exe\"\n" plus
           "\n" plus
           "# Download function\n" plus
           "function Download-Runa {\n" plus
           "    Write-Info \"Downloading Runa $Version for $Platform-$Arch...\"\n" plus
           "    \n" plus
           "    try {\n" plus
           "        # Use .NET WebClient for download\n" plus
           "        $webClient = New-Object System.Net.WebClient\n" plus
           "        $webClient.DownloadFile($DownloadUrl, $TempFile)\n" plus
           "        $webClient.Dispose()\n" plus
           "        \n" plus
           "        # Verify download\n" plus
           "        if (-not (Test-Path $TempFile) -or (Get-Item $TempFile).Length -eq 0) {\n" plus
           "            Write-Fatal \"Downloaded file is empty or corrupted\"\n" plus
           "        }\n" plus
           "        \n" plus
           "        Write-Success \"Download completed successfully\"\n" plus
           "    }\n" plus
           "    catch {\n" plus
           "        Write-Fatal \"Failed to download: $($_.Exception.Message)\"\n" plus
           "    }\n" plus
           "}\n" plus
           "\n" plus
           "Download-Runa"

Process called "generate_windows_installation_logic" that takes platform_info as PlatformInfo returns String:
    Return "# Installation function\n" plus
           "function Install-Runa {\n" plus
           "    Write-Info \"Installing Runa to $InstallDir...\"\n" plus
           "    \n" plus
           "    try {\n" plus
           "        # Create installation directory\n" plus
           "        if (-not (Test-Path $InstallDir)) {\n" plus
           "            New-Item -ItemType Directory -Force -Path $InstallDir | Out-Null\n" plus
           "        }\n" plus
           "        \n" plus
           "        # Copy binary to installation directory\n" plus
           "        $DestPath = Join-Path $InstallDir \"runa.exe\"\n" plus
           "        Copy-Item $TempFile $DestPath -Force\n" plus
           "        \n" plus
           "        # Add to PATH if not already present\n" plus
           "        $userPath = [Environment]::GetEnvironmentVariable(\"PATH\", \"User\")\n" plus
           "        if ($userPath -notlike \"*$InstallDir*\") {\n" plus
           "            Write-Info \"Adding Runa to PATH...\"\n" plus
           "            $newPath = \"$userPath;$InstallDir\"\n" plus
           "            [Environment]::SetEnvironmentVariable(\"PATH\", $newPath, \"User\")\n" plus
           "            Write-Success \"Added to PATH - restart your terminal to use 'runa' command\"\n" plus
           "        }\n" plus
           "        \n" plus
           "        Write-Success \"Runa installed to $DestPath\"\n" plus
           "    }\n" plus
           "    catch {\n" plus
           "        Write-Fatal \"Installation failed: $($_.Exception.Message)\"\n" plus
           "    }\n" plus
           "}\n" plus
           "\n" plus
           "Install-Runa"

Process called "generate_windows_verification_logic" returns String:
    Return "# Verification function\n" plus
           "function Verify-Installation {\n" plus
           "    Write-Info \"Verifying installation...\"\n" plus
           "    \n" plus
           "    try {\n" plus
           "        $runaPath = Join-Path $InstallDir \"runa.exe\"\n" plus
           "        \n" plus
           "        # Test the installation\n" plus
           "        $version = & $runaPath version 2>$null\n" plus
           "        if ($LASTEXITCODE -eq 0) {\n" plus
           "            Write-Success \"Installation verified successfully!\"\n" plus
           "            \n" plus
           "            Write-Host \"\"\n" plus
           "            Write-Host \"ðŸŽ‰ Runa is now installed!\" -ForegroundColor Green\n" plus
           "            Write-Host \"\"\n" plus
           "            Write-Host \"Get started with:\"\n" plus
           "            Write-Host \"  runa new my-project\"\n" plus
           "            Write-Host \"  cd my-project\"\n" plus
           "            Write-Host \"  runa run\"\n" plus
           "            Write-Host \"\"\n" plus
           "            Write-Host \"For help: runa --help\"\n" plus
           "            Write-Host \"AI analysis: runa doctor\"\n" plus
           "            Write-Host \"\"\n" plus
           "            Write-Warning \"Note: Restart your terminal to use the 'runa' command globally\"\n" plus
           "        }\n" plus
           "        else {\n" plus
           "            Write-Error \"Installation verification failed\"\n" plus
           "        }\n" plus
           "    }\n" plus
           "    catch {\n" plus
           "        Write-Error \"Verification failed: $($_.Exception.Message)\"\n" plus
           "    }\n" plus
           "}\n" plus
           "\n" plus
           "Verify-Installation"

Process called "generate_windows_cleanup_logic" returns String:
    Return "# Cleanup function\n" plus
           "function Cleanup {\n" plus
           "    if (Test-Path $TempFile) {\n" plus
           "        try {\n" plus
           "            Remove-Item $TempFile -Force\n" plus
           "        }\n" plus
           "        catch {\n" plus
           "            # Ignore cleanup errors\n" plus
           "        }\n" plus
           "    }\n" plus
           "}\n" plus
           "\n" plus
           "# Ensure cleanup happens\n" plus
           "try {\n" plus
           "    # Main installation completed\n" plus
           "    Write-Info \"Installation completed successfully!\"\n" plus
           "}\n" plus
           "finally {\n" plus
           "    Cleanup\n" plus
           "}"