Note:
Runa Smart Installer Server
Detects platform, architecture, and provides appropriate installation scripts
Designed for single-command installation across all platforms
:End Note

Import "../../../stdlib/http/server" as HTTP
Import "../../../stdlib/io/console" as Console
Import "../../../stdlib/json/json" as JSON
Import "../../../stdlib/os/os" as OS
Import "./platform_detection" as Platform
Import "./script_generator" as ScriptGen

Type called "InstallRequest":
    user_agent as String
    platform as Optional[String]
    arch as Optional[String]
    shell as Optional[String]
    version as Optional[String]

Type called "InstallResponse":
    script_type as String
    script_content as String
    download_url as String
    checksum as String
    platform_info as Dictionary[String, String]

Process called "start_installer_server" that takes port as Integer returns Integer:
    Console.print("üöÄ Starting Runa Smart Installer Server")
    Console.print("Port: " plus string_from_integer(port))
    Console.print("Platform Detection: Enabled")
    Console.print("Cross-Platform Support: Unix (sh), Windows (ps1)")
    Console.print("")
    
    Let server_config be dictionary with:
        "port" as port
        "host" as "0.0.0.0"
        "max_connections" as 100
        "timeout" as 30.0
    
    Let routes be create_installer_routes()
    
    Let server_result be HTTP.start_server(server_config, routes)
    
    If server_result get "success":
        Console.print("‚úì Installer server started successfully")
        Console.print("Install URL: https://install.runalang.org/")
        Console.print("Usage:")
        Console.print("  Unix: curl -fsSL https://install.runalang.org/sh | sh")
        Console.print("  Windows: irm https://install.runalang.org/ps1 | iex")
        Return 0
    Otherwise:
        Console.print_error("Failed to start server: " plus server_result get "error")
        Return 1

Process called "create_installer_routes" returns Dictionary:
    Return dictionary with:
        "GET /" as handle_root_request
        "GET /sh" as handle_unix_install
        "GET /ps1" as handle_windows_install
        "GET /install" as handle_smart_install
        "GET /detect" as handle_platform_detect
        "GET /health" as handle_health_check
        "GET /version" as handle_version_info

Process called "handle_root_request" that takes request as Dictionary returns Dictionary:
    Note: Provide installation instructions and platform detection
    
    Let html_content be generate_install_page()
    
    Return dictionary with:
        "status" as 200
        "headers" as dictionary with:
            "Content-Type" as "text/html"
            "Cache-Control" as "public, max-age=300"
        "body" as html_content

Process called "handle_unix_install" that takes request as Dictionary returns Dictionary:
    Note: Generate Unix shell script for installation
    
    Let platform_info be Platform.detect_platform_from_request(request)
    Console.print("Unix install request from: " plus platform_info get "platform" plus "/" plus platform_info get "arch")
    
    Let script_content be ScriptGen.generate_unix_script(platform_info)
    
    Return dictionary with:
        "status" as 200
        "headers" as dictionary with:
            "Content-Type" as "text/plain"
            "Cache-Control" as "public, max-age=3600"
        "body" as script_content

Process called "handle_windows_install" that takes request as Dictionary returns Dictionary:
    Note: Generate PowerShell script for Windows installation
    
    Let platform_info be Platform.detect_platform_from_request(request)
    Console.print("Windows install request from: " plus platform_info get "platform" plus "/" plus platform_info get "arch")
    
    Let script_content be ScriptGen.generate_windows_script(platform_info)
    
    Return dictionary with:
        "status" as 200
        "headers" as dictionary with:
            "Content-Type" as "text/plain"
            "Cache-Control" as "public, max-age=3600"
        "body" as script_content

Process called "handle_smart_install" that takes request as Dictionary returns Dictionary:
    Note: Auto-detect platform and provide appropriate installer
    
    Let platform_info be Platform.detect_platform_from_request(request)
    Let platform be platform_info get "platform"
    
    If platform is equal to "windows":
        Return handle_windows_install(request)
    Otherwise:
        Return handle_unix_install(request)

Process called "handle_platform_detect" that takes request as Dictionary returns Dictionary:
    Note: Return platform detection information as JSON
    
    Let platform_info be Platform.detect_platform_from_request(request)
    Let json_response be JSON.stringify(platform_info)
    
    Return dictionary with:
        "status" as 200
        "headers" as dictionary with:
            "Content-Type" as "application/json"
            "Cache-Control" as "no-cache"
        "body" as json_response

Process called "handle_health_check" that takes request as Dictionary returns Dictionary:
    Note: Health check endpoint for monitoring
    
    Let health_info be dictionary with:
        "status" as "healthy"
        "service" as "runa-installer"
        "version" as "1.0.0"
        "timestamp" as get_iso_timestamp()
        "uptime" as get_server_uptime()
    
    Return dictionary with:
        "status" as 200
        "headers" as dictionary with:
            "Content-Type" as "application/json"
        "body" as JSON.stringify(health_info)

Process called "handle_version_info" that takes request as Dictionary returns Dictionary:
    Note: Provide version and release information
    
    Let version_info be dictionary with:
        "latest_version" as "0.1.0-alpha"
        "release_channel" as "alpha"
        "download_base_url" as "https://github.com/sybertnetics/runa/releases"
        "supported_platforms" as list containing:
            "linux-x64", "linux-arm64", "darwin-x64", "darwin-arm64", "windows-x64"
    
    Return dictionary with:
        "status" as 200
        "headers" as dictionary with:
            "Content-Type" as "application/json"
            "Cache-Control" as "public, max-age=1800"
        "body" as JSON.stringify(version_info)

Process called "generate_install_page" returns String:
    Return "<!DOCTYPE html>\n" plus
           "<html>\n" plus
           "<head>\n" plus
           "    <title>Install Runa - The AI-First Programming Language</title>\n" plus
           "    <style>\n" plus
           "        body { font-family: -apple-system, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n" plus
           "        .install-command { background: #1e1e1e; color: #00ff00; padding: 15px; border-radius: 5px; font-family: monospace; }\n" plus
           "        .platform { margin: 20px 0; }\n" plus
           "    </style>\n" plus
           "</head>\n" plus
           "<body>\n" plus
           "    <h1>üöÄ Install Runa</h1>\n" plus
           "    <p>The AI-First Programming Language designed for the future of development.</p>\n" plus
           "    \n" plus
           "    <div class=\"platform\">\n" plus
           "        <h2>üêß Linux / macOS</h2>\n" plus
           "        <div class=\"install-command\">curl -fsSL https://install.runalang.org/sh | sh</div>\n" plus
           "    </div>\n" plus
           "    \n" plus
           "    <div class=\"platform\">\n" plus
           "        <h2>ü™ü Windows PowerShell</h2>\n" plus
           "        <div class=\"install-command\">irm https://install.runalang.org/ps1 | iex</div>\n" plus
           "    </div>\n" plus
           "    \n" plus
           "    <div class=\"platform\">\n" plus
           "        <h2>üìã Manual Installation</h2>\n" plus
           "        <p>Download the latest release from <a href=\"https://github.com/sybertnetics/runa/releases\">GitHub Releases</a></p>\n" plus
           "    </div>\n" plus
           "    \n" plus
           "    <h2>‚ú® What you get</h2>\n" plus
           "    <ul>\n" plus
           "        <li>Unified <code>runa</code> CLI tool</li>\n" plus
           "        <li>AI-powered code analysis with <code>runa doctor</code></li>\n" plus
           "        <li>Modern package manager and dependency resolver</li>\n" plus
           "        <li>Cross-platform development environment</li>\n" plus
           "        <li>Integration with major IDEs and editors</li>\n" plus
           "    </ul>\n" plus
           "    \n" plus
           "    <h2>üéØ Getting Started</h2>\n" plus
           "    <div class=\"install-command\">\n" plus
           "        runa new my-project<br>\n" plus
           "        cd my-project<br>\n" plus
           "        runa run\n" plus
           "    </div>\n" plus
           "</body>\n" plus
           "</html>"

Process called "get_iso_timestamp" returns String:
    Note: Get current timestamp in ISO format
    Return "2024-01-01T00:00:00Z"  Note: Placeholder

Process called "get_server_uptime" returns String:
    Note: Get server uptime in human-readable format
    Return "1h 23m 45s"  Note: Placeholder

Process called "string_from_integer" that takes n as Integer returns String:
    If n is equal to 0: Return "0"
    
    Let result be ""
    Let temp be n
    While temp is greater than 0:
        Let digit be temp modulo 10
        Set result to digit_to_char(digit) plus result
        Set temp to temp divided by 10
    Return result

Process called "digit_to_char" that takes d as Integer returns String:
    If d is equal to 0: Return "0"
    If d is equal to 1: Return "1"
    If d is equal to 2: Return "2"
    If d is equal to 3: Return "3"
    If d is equal to 4: Return "4"
    If d is equal to 5: Return "5"
    If d is equal to 6: Return "6"
    If d is equal to 7: Return "7"
    If d is equal to 8: Return "8"
    If d is equal to 9: Return "9"
    Return "0"