Note:
Runa Platform Detection System
Intelligently detects platform, architecture, and environment from HTTP requests
:End Note

Import "../../../stdlib/string/text" as Text
Import "../../../stdlib/collections/dict" as Dict

Type called "PlatformInfo":
    platform as String  Note: "linux", "darwin", "windows"
    arch as String      Note: "x64", "arm64", "x86"
    distro as Optional[String]  Note: "ubuntu", "debian", "fedora", etc.
    version as Optional[String]
    shell as String     Note: "bash", "zsh", "powershell", "cmd"
    package_manager as Optional[String]  Note: "apt", "yum", "brew", "choco"

Process called "detect_platform_from_request" that takes request as Dictionary returns PlatformInfo:
    Note: Detect platform information from HTTP request headers
    
    Let headers be request get "headers" or dictionary with:
    Let user_agent be headers get "User-Agent" or ""
    Let accept_language be headers get "Accept-Language" or ""
    
    Note: Parse User-Agent for platform/arch information
    Let platform_info be parse_user_agent(user_agent)
    
    Note: Enhance with additional detection methods
    enhance_platform_detection(platform_info, headers)
    
    Return platform_info

Process called "parse_user_agent" that takes user_agent as String returns PlatformInfo:
    Note: Parse User-Agent string for platform information
    
    Let platform be "linux"  Note: Default
    Let arch be "x64"        Note: Default
    Let shell be "bash"      Note: Default
    
    Note: Detect Windows
    If user_agent contains "Windows NT":
        Set platform to "windows"
        Set shell to "powershell"
        
        If user_agent contains "WOW64" or user_agent contains "Win64" or user_agent contains "x64":
            Set arch to "x64"
        Otherwise:
            Set arch to "x86"
    
    Note: Detect macOS
    Otherwise if user_agent contains "Darwin" or user_agent contains "Mac OS X" or user_agent contains "Macintosh":
        Set platform to "darwin"
        Set shell to "zsh"  Note: Default shell on modern macOS
        
        If user_agent contains "Intel":
            Set arch to "x64"
        Otherwise if user_agent contains "ARM64" or user_agent contains "Apple Silicon":
            Set arch to "arm64"
        Otherwise:
            Note: Assume Intel for older user agents
            Set arch to "x64"
    
    Note: Detect Linux distributions
    Otherwise if user_agent contains "Linux":
        Set platform to "linux"
        Set shell to "bash"
        
        If user_agent contains "x86_64" or user_agent contains "amd64":
            Set arch to "x64"
        Otherwise if user_agent contains "aarch64" or user_agent contains "arm64":
            Set arch to "arm64"
        Otherwise if user_agent contains "armv7" or user_agent contains "armhf":
            Set arch to "arm"
        Otherwise:
            Set arch to "x64"  Note: Default assumption
    
    Note: Detect cURL (common in automated scripts)
    If user_agent starts with "curl/":
        Note: cURL typically means Unix-like system
        If platform is equal to "windows":
            Note: Unlikely, but possible with Windows cURL
            Set shell to "cmd"
    
    Return dictionary with:
        "platform" as platform
        "arch" as arch
        "distro" as detect_linux_distro(user_agent)
        "version" as extract_version_info(user_agent)
        "shell" as shell
        "package_manager" as get_default_package_manager(platform)

Process called "enhance_platform_detection" that takes platform_info as PlatformInfo and headers as Dictionary returns Nothing:
    Note: Enhance platform detection with additional header analysis
    
    Let accept_header be headers get "Accept" or ""
    Let x_requested_with be headers get "X-Requested-With" or ""
    
    Note: Detect automated installation (likely server/CI environment)
    If accept_header contains "*/*" and not accept_header contains "text/html":
        Note: Likely automated script - adjust recommendations
        If platform_info get "platform" is equal to "linux":
            Set platform_info with "shell" as "bash"
            Set platform_info with "package_manager" as "apt"  Note: Most common
    
    Note: Detect CI environments
    If headers get "CI" or headers get "GITHUB_ACTIONS" or headers get "TRAVIS":
        Note: Running in CI - prefer non-interactive installation
        Set platform_info with "ci_environment" as true

Process called "detect_linux_distro" that takes user_agent as String returns Optional[String]:
    Note: Attempt to detect Linux distribution from User-Agent
    
    If user_agent contains "Ubuntu":
        Return "ubuntu"
    Otherwise if user_agent contains "Debian":
        Return "debian"
    Otherwise if user_agent contains "Fedora":
        Return "fedora"
    Otherwise if user_agent contains "CentOS":
        Return "centos"
    Otherwise if user_agent contains "Red Hat" or user_agent contains "RHEL":
        Return "rhel"
    Otherwise if user_agent contains "SUSE":
        Return "suse"
    Otherwise if user_agent contains "Arch":
        Return "arch"
    Otherwise:
        Return none

Process called "extract_version_info" that takes user_agent as String returns Optional[String]:
    Note: Extract OS version information where possible
    
    If user_agent contains "Windows NT":
        If user_agent contains "Windows NT 10.0":
            Return "10/11"
        Otherwise if user_agent contains "Windows NT 6.3":
            Return "8.1"
        Otherwise if user_agent contains "Windows NT 6.2":
            Return "8"
        Otherwise if user_agent contains "Windows NT 6.1":
            Return "7"
    
    If user_agent contains "Mac OS X":
        Note: Extract macOS version if available
        Return extract_macos_version(user_agent)
    
    Return none

Process called "extract_macos_version" that takes user_agent as String returns Optional[String]:
    Note: Extract macOS version from User-Agent
    Note: Format: "Mac OS X 10_15_7" -> "10.15.7"
    
    If user_agent contains "Mac OS X":
        Note: Simple extraction - would need proper regex in production
        If user_agent contains "10_15":
            Return "10.15 (Catalina)"
        Otherwise if user_agent contains "11_":
            Return "11.x (Big Sur)"
        Otherwise if user_agent contains "12_":
            Return "12.x (Monterey)"
        Otherwise if user_agent contains "13_":
            Return "13.x (Ventura)"
        Otherwise if user_agent contains "14_":
            Return "14.x (Sonoma)"
    
    Return none

Process called "get_default_package_manager" that takes platform as String returns Optional[String]:
    If platform is equal to "darwin":
        Return "brew"
    Otherwise if platform is equal to "windows":
        Return "choco"
    Otherwise if platform is equal to "linux":
        Return "apt"  Note: Most common, will be refined based on distro
    Otherwise:
        Return none

Process called "get_download_url" that takes platform_info as PlatformInfo and version as String returns String:
    Note: Generate download URL for specific platform and architecture
    
    Let base_url be "https://github.com/sybertnetics/runa/releases/download/"
    Let platform be platform_info get "platform"
    Let arch be platform_info get "arch"
    
    Let filename be "runa-" plus version plus "-" plus platform plus "-" plus arch
    
    If platform is equal to "windows":
        Set filename to filename plus ".exe"
    
    Return base_url plus "v" plus version plus "/" plus filename

Process called "get_install_script_type" that takes platform_info as PlatformInfo returns String:
    Let platform be platform_info get "platform"
    
    If platform is equal to "windows":
        Return "powershell"
    Otherwise:
        Return "shell"

Process called "should_use_sudo" that takes platform_info as PlatformInfo returns Boolean:
    Note: Determine if installation requires sudo privileges
    
    Let platform be platform_info get "platform"
    
    If platform is equal to "windows":
        Return false  Note: Windows uses elevation differently
    
    Note: For Unix-like systems, typically need sudo for system-wide install
    Return true

Process called "get_recommended_install_path" that takes platform_info as PlatformInfo returns String:
    Note: Get recommended installation path for the platform
    
    Let platform be platform_info get "platform"
    
    If platform is equal to "windows":
        Return "%USERPROFILE%\\.runa\\bin"
    Otherwise if platform is equal to "darwin":
        Return "/usr/local/bin"
    Otherwise:
        Return "/usr/local/bin"

Process called "supports_package_manager_install" that takes platform_info as PlatformInfo returns Boolean:
    Note: Check if platform supports package manager installation
    
    Let package_manager be platform_info get "package_manager"
    
    Return package_manager is not none and 
           (package_manager is equal to "brew" or 
            package_manager is equal to "apt" or 
            package_manager is equal to "yum" or
            package_manager is equal to "choco")