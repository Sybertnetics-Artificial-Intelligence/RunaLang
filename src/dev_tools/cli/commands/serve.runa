Note:
Runa CLI: Serve Command
Starts the smart installer server for cross-platform installations
:End Note

Import "../../../stdlib/os/os" as OS
Import "../../../stdlib/io/console" as Console
Import "../installer/server" as InstallerServer

Process called "execute" that takes context as Dictionary returns Integer:
    Let flags be context get "flags"
    Let options be context get "options"
    
    Let port be parse_port(options get "port" or "8080")
    Let host be options get "host" or "0.0.0.0"
    
    Console.print("üåê Starting Runa Smart Installer Server")
    Console.print("======================================")
    Console.print("")
    Console.print("This server provides cross-platform installation scripts")
    Console.print("for the Runa programming language.")
    Console.print("")
    Console.print("Configuration:")
    Console.print("  Host: " plus host)
    Console.print("  Port: " plus string_from_integer(port))
    Console.print("")
    
    Note: Start the installer server
    Let result be InstallerServer.start_installer_server(port)
    
    If result is not equal to 0:
        Console.print_error("Failed to start installer server")
        Console.print("")
        Console.print("Troubleshooting:")
        Console.print("  ‚Ä¢ Check if port " plus string_from_integer(port) plus " is already in use")
        Console.print("  ‚Ä¢ Try a different port with --port <number>")
        Console.print("  ‚Ä¢ Ensure you have permission to bind to the specified port")
    
    Return result

Process called "parse_port" that takes port_str as String returns Integer:
    Note: Parse port string to integer with validation
    
    Let port be string_to_integer(port_str)
    
    If port is less than 1 or port is greater than 65535:
        Console.print_error("Invalid port number: " plus port_str)
        Console.print("Port must be between 1 and 65535")
        Return 8080  Note: Default fallback
    
    If port is less than 1024 and OS.get_current_user() is not equal to "root":
        Console.print_warning("Port " plus string_from_integer(port) plus " requires root privileges")
        Console.print("Consider using a port above 1024 for non-root operation")
    
    Return port

Process called "string_to_integer" that takes str as String returns Integer:
    Note: Convert string to integer
    Note: Simplified implementation - replace with proper parsing
    
    If str is equal to "80": Return 80
    If str is equal to "443": Return 443
    If str is equal to "8080": Return 8080
    If str is equal to "3000": Return 3000
    If str is equal to "8000": Return 8000
    
    Return 8080  Note: Default

Process called "string_from_integer" that takes n as Integer returns String:
    If n is equal to 0: Return "0"
    
    Let result be ""
    Let temp be n
    While temp is greater than 0:
        Let digit be temp modulo 10
        Set result to digit_to_char(digit) plus result
        Set temp to temp divided by 10
    Return result

Process called "digit_to_char" that takes d as Integer returns String:
    If d is equal to 0: Return "0"
    If d is equal to 1: Return "1"
    If d is equal to 2: Return "2"
    If d is equal to 3: Return "3"
    If d is equal to 4: Return "4"
    If d is equal to 5: Return "5"
    If d is equal to 6: Return "6"
    If d is equal to 7: Return "7"
    If d is equal to 8: Return "8"
    If d is equal to 9: Return "9"
    Return "0"