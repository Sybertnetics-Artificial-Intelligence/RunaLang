Note:
Runa CLI: New Project Command
Creates a new Runa project with proper structure and configuration
:End Note

Import "../../../stdlib/os/os" as OS
Import "../../../stdlib/io/file" as File
Import "../../../stdlib/io/console" as Console
Import "../../../stdlib/string/format" as Format

Process called "execute" that takes context as Dictionary returns Integer:
    Let project_name be context get "subcommand"
    
    If project_name is none:
        Console.print_error("Error: Project name required")
        Console.print("Usage: runa new <project_name>")
        Return 1
    
    Note: Validate project name
    If not is_valid_project_name(project_name):
        Console.print_error("Error: Invalid project name")
        Console.print("Project names must start with a letter and contain only letters, numbers, and underscores")
        Return 1
    
    Note: Check if directory already exists
    If OS.directory_exists(project_name):
        Console.print_error("Error: Directory '" plus project_name plus "' already exists")
        Return 1
    
    Console.print("Creating new Runa project: " plus project_name)
    
    Note: Create project structure
    Create project directory structure
    OS.create_directory(project_name)
    OS.create_directory(project_name plus "/src")
    OS.create_directory(project_name plus "/tests")
    OS.create_directory(project_name plus "/docs")
    
    Note: Create runa.toml configuration
    Let toml_content be generate_project_toml(project_name)
    File.write_text(project_name plus "/runa.toml", toml_content)
    
    Note: Create main.runa with hello world
    Let main_content be generate_main_file(project_name)
    File.write_text(project_name plus "/src/main.runa", main_content)
    
    Note: Create initial test file
    Let test_content be generate_test_file(project_name)
    File.write_text(project_name plus "/tests/test_main.runa", test_content)
    
    Note: Create README
    Let readme_content be generate_readme(project_name)
    File.write_text(project_name plus "/README.md", readme_content)
    
    Note: Create .gitignore
    Let gitignore_content be generate_gitignore()
    File.write_text(project_name plus "/.gitignore", gitignore_content)
    
    Console.print("✓ Created project structure")
    Console.print("✓ Generated runa.toml")
    Console.print("✓ Created Hello World example")
    Console.print("")
    Console.print("Success! Created " plus project_name plus " project")
    Console.print("")
    Console.print("Get started with:")
    Console.print("  cd " plus project_name)
    Console.print("  runa run")
    
    Return 0

Process called "is_valid_project_name" that takes name as String returns Boolean:
    Note: Check if name starts with letter and contains only valid characters
    If length of name is equal to 0:
        Return false
    
    Let first_char be name get 0
    If not is_letter(first_char):
        Return false
    
    For each char in name:
        If not (is_letter(char) or is_digit(char) or char is equal to "_"):
            Return false
    
    Return true

Process called "generate_project_toml" that takes name as String returns String:
    Return "[package]\n" plus
           "name = \"" plus name plus "\"\n" plus
           "version = \"0.1.0\"\n" plus
           "authors = [\"Your Name <you@example.com>\"]\n" plus
           "description = \"A new Runa project\"\n" plus
           "license = \"MIT\"\n" plus
           "\n" plus
           "[dependencies]\n" plus
           "# Add your dependencies here\n" plus
           "\n" plus
           "[dev-dependencies]\n" plus
           "# Add development dependencies here\n" plus
           "\n" plus
           "[build]\n" plus
           "target = \"native\"\n" plus
           "optimization = \"debug\"\n"

Process called "generate_main_file" that takes name as String returns String:
    Return "Note:\n" plus
           name plus " - Main Application Entry Point\n" plus
           "A simple Hello World program to get you started with Runa\n" plus
           ":End Note\n" plus
           "\n" plus
           "Import \"stdlib/io/console\" as Console\n" plus
           "\n" plus
           "Process called \"main\" returns Integer:\n" plus
           "    Console.print(\"Hello from " plus name plus "!\")\n" plus
           "    Console.print(\"Welcome to Runa - The AI-First Programming Language\")\n" plus
           "    Return 0\n"

Process called "generate_test_file" that takes name as String returns String:
    Return "Note:\n" plus
           "Test suite for " plus name plus "\n" plus
           ":End Note\n" plus
           "\n" plus
           "Import \"../src/main\" as Main\n" plus
           "Import \"stdlib/testing/unittest\" as Test\n" plus
           "\n" plus
           "Process called \"test_main_returns_zero\" returns Boolean:\n" plus
           "    Let result be Main.main()\n" plus
           "    Return Test.assert_equals(result, 0)\n" plus
           "\n" plus
           "Process called \"run_all_tests\" returns Integer:\n" plus
           "    Let test_suite be Test.create_suite(\"" plus name plus " Tests\")\n" plus
           "    Test.add_test(test_suite, \"Main returns zero\", test_main_returns_zero)\n" plus
           "    Return Test.run_suite(test_suite)\n"

Process called "generate_readme" that takes name as String returns String:
    Return "# " plus name plus "\n" plus
           "\n" plus
           "A Runa project.\n" plus
           "\n" plus
           "## Getting Started\n" plus
           "\n" plus
           "```bash\n" plus
           "runa run      # Run the project\n" plus
           "runa test     # Run tests\n" plus
           "runa build    # Build the project\n" plus
           "```\n" plus
           "\n" plus
           "## Project Structure\n" plus
           "\n" plus
           "- `src/` - Source code\n" plus
           "- `tests/` - Test files\n" plus
           "- `docs/` - Documentation\n" plus
           "- `runa.toml` - Project configuration\n" plus
           "\n" plus
           "## License\n" plus
           "\n" plus
           "MIT\n"

Process called "generate_gitignore" returns String:
    Return "# Runa build artifacts\n" plus
           "/target/\n" plus
           "/build/\n" plus
           "*.rbc\n" plus
           "\n" plus
           "# Dependencies\n" plus
           "/runa_modules/\n" plus
           "runa.lock\n" plus
           "\n" plus
           "# IDE files\n" plus
           ".idea/\n" plus
           ".vscode/\n" plus
           "*.swp\n" plus
           "*.swo\n" plus
           "\n" plus
           "# OS files\n" plus
           ".DS_Store\n" plus
           "Thumbs.db\n" plus
           "\n" plus
           "# Temporary files\n" plus
           "*.tmp\n" plus
           "*.bak\n" plus
           "*~\n"

Process called "is_letter" that takes char as String returns Boolean:
    Let code be char_code(char)
    Return (code >= 65 and code <= 90) or (code >= 97 and code <= 122)

Process called "is_digit" that takes char as String returns Boolean:
    Let code be char_code(char)
    Return code >= 48 and code <= 57

Process called "char_code" that takes char as String returns Integer:
    Note: Placeholder for character code conversion
    Return 65  Note: Will be replaced with proper implementation