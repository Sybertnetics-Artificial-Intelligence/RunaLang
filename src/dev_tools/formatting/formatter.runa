Note:
Runa Formatter: Canonicalization Pass for Operator System

This formatter rewrites symbolic operators and deprecated phrases
into canonical natural language forms, unless configured otherwise.
:End Note

Import "../cli/main.runa" as CLI
Import "../../stdlib/string/format.runa" as Str
Import "../../stdlib/io/console.runa" as Console

Type called "FormatterConfig":
    operator_style as String  Note: "natural" (default) or "symbolic"

Process called "load_formatter_config" that takes project_root as Optional[String] returns FormatterConfig:
    Let cfg be CLI.load_project_config(project_root)
    Let formatting as Dictionary[String, Any]
    If cfg has key "formatting":
        Set formatting to cfg at key "formatting"
    Otherwise:
        Set formatting to dictionary containing
    
    Let style be "natural"
    If formatting has key "operator_style":
        Set style to formatting at key "operator_style"
    
    Return FormatterConfig with:
        operator_style as style

Process called "format_source" that takes source_code as String and project_root as Optional[String] returns String:
    Let config be load_formatter_config(project_root)
    If config.operator_style is equal to "symbolic":
        Return source_code
    
    Return canonicalize_operators with source_code as source_code

Process called "canonicalize_operators" that takes source_code as String returns String:
    Note: Simple, safe text-level canonicalization using ordered replacements
    Let out be source_code
    
    Note: Two-character operators first
    Set out to replace_all with string as out and old as "<=" and new as " is less than or equal to "
    Set out to replace_all with string as out and old as ">=" and new as " is greater than or equal to "
    Set out to replace_all with string as out and old as "!=" and new as " is not equal to "
    
    Note: Single-character arithmetic and comparison (math-only)
    Set out to replace_all with string as out and old as " + " and new as " plus "
    Set out to replace_all with string as out and old as " - " and new as " minus "
    Set out to replace_all with string as out and old as " * " and new as " multiplied by "
    Set out to replace_all with string as out and old as " / " and new as " divided by "
    Set out to replace_all with string as out and old as " < " and new as " is less than "
    Set out to replace_all with string as out and old as " > " and new as " is greater than "
    
    Note: Deprecated phrase fix (canonicalize equality)
    Set out to replace_all with string as out and old as " is equal to " and new as " equals "

    Note: String concatenation canonicalization heuristics
    Note: Replace literal + identifier patterns with 'joined with'
    Set out to replace_all with string as out and old as '"' and new as '"'  # no-op placeholder for quoting
    Note: Safe subset: "..." plus x -> "..." joined with x
    Set out to regex_replace_all with string as out and pattern as '"([^"\\]|\\.)*"\s+plus\s+' and replacement as '"$1" joined with '
    Set out to regex_replace_all with string as out and pattern as '"([^"\\]|\\.)*"\s*\+\s*' and replacement as '"$1" joined with '

    Note: And the reverse: x plus "..." -> x joined with "..."
    Set out to regex_replace_all with string as out and pattern as '\splus\s+"([^"\\]|\\.)*"' and replacement as ' joined with "$1"'
    Set out to regex_replace_all with string as out and pattern as '\s\+\s*"([^"\\]|\\.)*"' and replacement as ' joined with "$1"'

    Note: Canonicalize legacy concatenation phrases
    Set out to replace_all with string as out and old as " concatenated with " and new as " joined with "
    Set out to replace_all with string as out and old as " followed by " and new as " joined with "
    
    Return squeeze_spaces with text as out

Process called "squeeze_spaces" that takes text as String returns String:
    Note: Collapse redundant spaces introduced by replacements
    Let out be text
    While out contains "  ":
        Set out to replace_all with string as out and old as "  " and new as " "
    Return out


