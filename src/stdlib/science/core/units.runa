Note:
science/core/units.runa
Unit Systems and Dimensional Conversions

This module provides comprehensive unit system management including SI, CGS,
Imperial, and specialized physics unit systems. Implements dimensional analysis,
automatic unit conversion, and consistency checking for scientific calculations.
Supports both coherent and non-coherent unit systems with proper handling of
scaling factors and unit prefixes.

Key Features:
- Complete SI base and derived unit definitions with proper relationships
- CGS electromagnetic unit variants (Gaussian, ESU, EMU, mixed systems)
- Imperial and US customary units with exact conversion factors
- Natural units for high-energy physics (ℏ=c=k_B=1)
- Planck units and atomic units for fundamental physics
- Dimensional analysis with automatic consistency checking
- Unit prefix handling (micro, nano, kilo, mega, etc.)
- Compound unit parsing and simplification
- Temperature scale conversions (Celsius, Fahrenheit, Kelvin, Rankine)
- Angle units (radians, degrees, gradians, arcminutes, arcseconds)

Dimensional Analysis:
Units are represented using seven fundamental dimensions following SI:
length [L], mass [M], time [T], electric current [I], thermodynamic
temperature [Θ], amount of substance [N], luminous intensity [J].
All derived units can be expressed as products of these base dimensions.

Unit System Philosophy:
Each unit system maintains internal consistency while providing exact
conversion factors to other systems. Electromagnetic units require
special handling due to different conventions for electric and magnetic
quantities in different systems.
:End Note

Import "dev/debug/errors/core" as Errors
Import "science/core/constants" as Constants

Note: =====================================================================
Note: UNIT SYSTEM DATA STRUCTURES
Note: =====================================================================

Type called "Unit":
    name as String
    symbol as String
    dimension_vector as List[Integer]
    scale_factor as String
    offset as String
    system as String
    is_base_unit as Boolean
    definition as String

Type called "UnitSystem":
    name as String
    base_units as Dictionary[String, Unit]
    derived_units as Dictionary[String, Unit]
    electromagnetic_convention as String
    rationalization as Boolean
    coherent as Boolean

Type called "Quantity":
    value as String
    unit as Unit
    uncertainty as String
    significant_figures as Integer

Type called "Dimension":
    length as Integer
    mass as Integer
    time as Integer
    current as Integer
    temperature as Integer
    amount as Integer
    luminous_intensity as Integer

Type called "ConversionFactor":
    from_unit as Unit
    to_unit as Unit
    multiplicative_factor as String
    additive_offset as String
    exact as Boolean

Type called "UnitPrefix":
    name as String
    symbol as String
    power_of_ten as Integer
    exact as Boolean

Note: =====================================================================
Note: SI UNIT SYSTEM OPERATIONS
Note: =====================================================================

Process called "create_si_system" returns UnitSystem:
    Note: Create International System of Units with seven base units
    Note: Meter, kilogram, second, ampere, kelvin, mole, candela
    Note: TODO: Implement SI unit system creation
    Throw Errors.NotImplemented with "SI unit system creation not yet implemented"

Process called "get_si_base_units" returns Dictionary[String, Unit]:
    Note: Return seven SI base units with exact definitions
    Note: Includes post-2019 redefinition based on fundamental constants
    Note: TODO: Implement SI base units
    Throw Errors.NotImplemented with "SI base units not yet implemented"

Process called "get_si_derived_units" returns Dictionary[String, Unit]:
    Note: Return SI derived units (newton, joule, watt, pascal, etc.)
    Note: Coherent units derived from base units without numerical factors
    Note: TODO: Implement SI derived units
    Throw Errors.NotImplemented with "SI derived units not yet implemented"

Process called "get_si_prefixes" returns Dictionary[String, UnitPrefix]:
    Note: Return SI prefixes from yocto (10⁻²⁴) to yotta (10²⁴)
    Note: Includes both decimal and binary prefixes where applicable
    Note: TODO: Implement SI prefixes
    Throw Errors.NotImplemented with "SI prefixes not yet implemented"

Process called "apply_si_prefix" that takes unit as Unit, prefix as String returns Unit:
    Note: Apply SI prefix to unit, creating scaled version
    Note: Handles special cases like kilogram base unit with kilo prefix
    Note: TODO: Implement SI prefix application
    Throw Errors.NotImplemented with "SI prefix application not yet implemented"

Note: =====================================================================
Note: CGS UNIT SYSTEM OPERATIONS
Note: =====================================================================

Process called "create_cgs_gaussian_system" returns UnitSystem:
    Note: Create CGS Gaussian unit system for electromagnetic calculations
    Note: Symmetric treatment of electric and magnetic quantities
    Note: TODO: Implement CGS Gaussian system
    Throw Errors.NotImplemented with "CGS Gaussian system not yet implemented"

Process called "create_cgs_esu_system" returns UnitSystem:
    Note: Create CGS electrostatic unit system (ESU or statcgs)
    Note: Electric quantities in statcoulombs, magnetic derived
    Note: TODO: Implement CGS ESU system
    Throw Errors.NotImplemented with "CGS ESU system not yet implemented"

Process called "create_cgs_emu_system" returns UnitSystem:
    Note: Create CGS electromagnetic unit system (EMU or abcgs)
    Note: Magnetic quantities in abamperes, electric derived
    Note: TODO: Implement CGS EMU system
    Throw Errors.NotImplemented with "CGS EMU system not yet implemented"

Process called "get_cgs_base_units" returns Dictionary[String, Unit]:
    Note: Return CGS base units: centimeter, gram, second
    Note: Mechanical base units common to all CGS variants
    Note: TODO: Implement CGS base units
    Throw Errors.NotImplemented with "CGS base units not yet implemented"

Process called "convert_electromagnetic_cgs_si" that takes quantity as Quantity, target_system as String returns Quantity:
    Note: Convert electromagnetic quantities between CGS and SI systems
    Note: Handles complex conversion factors involving √(4π) terms
    Note: TODO: Implement CGS-SI electromagnetic conversion
    Throw Errors.NotImplemented with "CGS-SI electromagnetic conversion not yet implemented"

Note: =====================================================================
Note: IMPERIAL AND US CUSTOMARY UNITS OPERATIONS
Note: =====================================================================

Process called "create_imperial_system" returns UnitSystem:
    Note: Create Imperial unit system (UK) with exact conversion factors
    Note: Historical British units with some variations from US customary
    Note: TODO: Implement Imperial unit system
    Throw Errors.NotImplemented with "Imperial unit system not yet implemented"

Process called "create_us_customary_system" returns UnitSystem:
    Note: Create US customary unit system with NIST-defined conversions
    Note: Based on Mendenhall Order and subsequent redefinitions
    Note: TODO: Implement US customary system
    Throw Errors.NotImplemented with "US customary system not yet implemented"

Process called "get_length_units_imperial" returns Dictionary[String, Unit]:
    Note: Return Imperial/US length units (inch, foot, yard, mile, etc.)
    Note: Includes survey units and nautical units where applicable
    Note: TODO: Implement Imperial length units
    Throw Errors.NotImplemented with "Imperial length units not yet implemented"

Process called "get_mass_units_imperial" returns Dictionary[String, Unit]:
    Note: Return Imperial/US mass units (ounce, pound, stone, ton, etc.)
    Note: Distinguishes between avoirdupois, troy, and apothecary systems
    Note: TODO: Implement Imperial mass units
    Throw Errors.NotImplemented with "Imperial mass units not yet implemented"

Process called "get_volume_units_imperial" returns Dictionary[String, Unit]:
    Note: Return Imperial/US volume units (fluid ounce, pint, quart, gallon, etc.)
    Note: Handles US vs Imperial gallon differences
    Note: TODO: Implement Imperial volume units
    Throw Errors.NotImplemented with "Imperial volume units not yet implemented"

Note: =====================================================================
Note: NATURAL AND FUNDAMENTAL UNIT SYSTEMS OPERATIONS
Note: =====================================================================

Process called "create_natural_units" returns UnitSystem:
    Note: Create natural unit system where ℏ = c = k_B = 1
    Note: High-energy physics convention reducing unit conversions
    Note: TODO: Implement natural units system
    Throw Errors.NotImplemented with "Natural units system not yet implemented"

Process called "create_planck_units" returns UnitSystem:
    Note: Create Planck unit system where ℏ = c = G = k_B = ε₀ = 1
    Note: Fundamental units based on universal constants only
    Note: TODO: Implement Planck units system
    Throw Errors.NotImplemented with "Planck units system not yet implemented"

Process called "create_atomic_units" returns UnitSystem:
    Note: Create atomic unit system where ℏ = mₑ = e = 4πε₀ = 1
    Note: Convenient for atomic and molecular physics calculations
    Note: TODO: Implement atomic units system
    Throw Errors.NotImplemented with "Atomic units system not yet implemented"

Process called "create_nuclear_units" returns UnitSystem:
    Note: Create nuclear unit system with MeV and fermi as base units
    Note: Energy in MeV, length in femtometers for nuclear physics
    Note: TODO: Implement nuclear units system
    Throw Errors.NotImplemented with "Nuclear units system not yet implemented"

Process called "natural_unit_conversion" that takes quantity as Quantity, target_system as String returns Quantity:
    Note: Convert between natural unit systems and conventional units
    Note: Restores proper powers of ℏ, c, etc. in conventional systems
    Note: TODO: Implement natural unit conversion
    Throw Errors.NotImplemented with "Natural unit conversion not yet implemented"

Note: =====================================================================
Note: DIMENSIONAL ANALYSIS OPERATIONS
Note: =====================================================================

Process called "get_dimensions" that takes unit as Unit returns Dimension:
    Note: Extract dimensional vector from unit definition
    Note: Returns powers of fundamental dimensions [L^a M^b T^c ...]
    Note: TODO: Implement dimension extraction
    Throw Errors.NotImplemented with "Dimension extraction not yet implemented"

Process called "check_dimensional_consistency" that takes quantities as List[Quantity], operation as String returns Boolean:
    Note: Verify dimensional consistency of mathematical operations
    Note: Ensures addition/subtraction of same dimensions, proper products
    Note: TODO: Implement dimensional consistency check
    Throw Errors.NotImplemented with "Dimensional consistency check not yet implemented"

Process called "dimensional_analysis" that takes expression as String, variables as Dictionary[String, Unit] returns Dimension:
    Note: Perform dimensional analysis on mathematical expression
    Note: Derives dimensions of result from input variable dimensions
    Note: TODO: Implement dimensional analysis
    Throw Errors.NotImplemented with "Dimensional analysis not yet implemented"

Process called "find_dimensionless_groups" that takes variables as Dictionary[String, Unit] returns List[String]:
    Note: Find dimensionless groups using Buckingham π theorem
    Note: Determines independent dimensionless combinations of variables
    Note: TODO: Implement dimensionless group finding
    Throw Errors.NotImplemented with "Dimensionless group finding not yet implemented"

Process called "unit_simplification" that takes compound_unit as Unit returns Unit:
    Note: Simplify compound units to canonical form
    Note: Cancels like terms and expresses in base or derived units
    Note: TODO: Implement unit simplification
    Throw Errors.NotImplemented with "Unit simplification not yet implemented"

Note: =====================================================================
Note: UNIT CONVERSION OPERATIONS
Note: =====================================================================

Process called "convert_units" that takes quantity as Quantity, target_unit as Unit returns Quantity:
    Note: Convert quantity between compatible units with dimensional checking
    Note: Applies scale factors and offsets, propagates uncertainties
    Note: TODO: Implement unit conversion
    Throw Errors.NotImplemented with "Unit conversion not yet implemented"

Process called "get_conversion_factor" that takes from_unit as Unit, to_unit as Unit returns ConversionFactor:
    Note: Calculate exact conversion factor between compatible units
    Note: Returns multiplicative factor and additive offset if needed
    Note: TODO: Implement conversion factor calculation
    Throw Errors.NotImplemented with "Conversion factor calculation not yet implemented"

Process called "batch_unit_conversion" that takes quantities as List[Quantity], target_system as String returns List[Quantity]:
    Note: Convert multiple quantities to consistent unit system
    Note: Maintains relationships and dimensional consistency across conversions
    Note: TODO: Implement batch unit conversion
    Throw Errors.NotImplemented with "Batch unit conversion not yet implemented"

Process called "temperature_conversion" that takes temperature as Quantity, target_scale as String returns Quantity:
    Note: Convert between temperature scales (K, °C, °F, °R, °Ré, etc.)
    Note: Handles both absolute and difference conversions properly
    Note: TODO: Implement temperature conversion
    Throw Errors.NotImplemented with "Temperature conversion not yet implemented"

Process called "angle_conversion" that takes angle as Quantity, target_unit as String returns Quantity:
    Note: Convert between angle units (rad, deg, grad, arcmin, arcsec, etc.)
    Note: Handles both planar angles and solid angles
    Note: TODO: Implement angle conversion
    Throw Errors.NotImplemented with "Angle conversion not yet implemented"

Note: =====================================================================
Note: UNIT PARSING AND FORMATTING OPERATIONS
Note: =====================================================================

Process called "parse_unit_string" that takes unit_string as String returns Unit:
    Note: Parse unit string like "kg⋅m/s²" or "lb⋅ft/s^2" into Unit object
    Note: Handles various notation conventions and precedence rules
    Note: TODO: Implement unit string parsing
    Throw Errors.NotImplemented with "Unit string parsing not yet implemented"

Process called "format_unit" that takes unit as Unit, notation as String returns String:
    Note: Format unit in specified notation (LaTeX, Unicode, ASCII, etc.)
    Note: Handles superscripts, multiplication symbols, fraction bars
    Note: TODO: Implement unit formatting
    Throw Errors.NotImplemented with "Unit formatting not yet implemented"

Process called "parse_quantity_string" that takes quantity_string as String returns Quantity:
    Note: Parse complete quantity like "9.81 m/s²" or "32.2 ft/s^2"
    Note: Extracts numerical value, uncertainty, and unit information
    Note: TODO: Implement quantity string parsing
    Throw Errors.NotImplemented with "Quantity string parsing not yet implemented"

Process called "format_quantity" that takes quantity as Quantity, format_style as String returns String:
    Note: Format quantity with proper significant figures and unit notation
    Note: Handles scientific notation, uncertainty representation, spacing
    Note: TODO: Implement quantity formatting
    Throw Errors.NotImplemented with "Quantity formatting not yet implemented"

Note: =====================================================================
Note: SPECIALIZED UNIT OPERATIONS
Note: =====================================================================

Process called "create_compound_unit" that takes units as List[Unit], powers as List[Integer] returns Unit:
    Note: Create compound unit from product of base units with specified powers
    Note: Handles dimensional algebra and scale factor combination
    Note: TODO: Implement compound unit creation
    Throw Errors.NotImplemented with "Compound unit creation not yet implemented"

Process called "get_reciprocal_unit" that takes unit as Unit returns Unit:
    Note: Create reciprocal unit (per-unit) inverting all dimensional powers
    Note: Useful for rate and density unit construction
    Note: TODO: Implement reciprocal unit creation
    Throw Errors.NotImplemented with "Reciprocal unit creation not yet implemented"

Process called "unit_compatibility_check" that takes unit1 as Unit, unit2 as Unit returns Boolean:
    Note: Check if two units have same dimensions and can be converted
    Note: Enables type checking for unit consistency in calculations
    Note: TODO: Implement unit compatibility check
    Throw Errors.NotImplemented with "Unit compatibility check not yet implemented"

Process called "get_unit_definition" that takes unit_name as String, system as String returns String:
    Note: Return formal definition of unit in terms of base units or constants
    Note: Provides traceability to fundamental standards
    Note: TODO: Implement unit definition lookup
    Throw Errors.NotImplemented with "Unit definition lookup not yet implemented"

Process called "historical_unit_values" that takes unit_name as String returns Dictionary[String, String]:
    Note: Return historical values and redefinitions of unit over time
    Note: Shows evolution of unit definitions and measurement improvements
    Note: TODO: Implement historical unit value tracking
    Throw Errors.NotImplemented with "Historical unit value tracking not yet implemented"