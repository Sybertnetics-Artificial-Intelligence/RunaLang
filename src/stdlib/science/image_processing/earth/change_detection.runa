Note:
science/image_processing/earth/change_detection.runa
Multi-Temporal Change Detection and Monitoring

This module provides comprehensive change detection algorithms for monitoring
Earth system dynamics using multi-temporal satellite and aerial imagery.
Implements various change detection techniques including image differencing,
change vector analysis, post-classification comparison, and advanced
statistical methods for environmental monitoring and land cover change analysis.

Key Features:
- Image differencing and ratio methods for rapid change detection
- Change vector analysis (CVA) for multi-spectral change characterization
- Post-classification comparison with accuracy assessment
- Principal component analysis-based change detection
- Statistical change detection using hypothesis testing
- Time series analysis for gradual change detection
- Breakpoint detection and trend analysis
- Object-based change analysis for high-resolution imagery
- Threshold determination using statistical and manual methods
- Change magnitude and direction analysis

Change Detection Principles:
Change detection identifies differences in Earth's surface between different
time periods by comparing co-registered multi-temporal images. Various
algorithms exploit different aspects of change including radiometric
differences, spectral changes, textural variations, and classification
differences to detect land cover modifications, disturbances, and dynamics.

Technical Considerations:
Effective change detection requires careful preprocessing including geometric
registration, radiometric normalization, atmospheric correction, and
phenological considerations. False changes due to illumination differences,
sensor variations, and seasonal effects must be distinguished from real
land cover changes through appropriate processing and validation.

Applications:
Applications include deforestation monitoring, urban growth analysis,
disaster assessment, agricultural monitoring, coastal change detection,
wetland dynamics, glacier monitoring, and climate change impact assessment.
Multi-temporal analysis enables quantitative assessment of environmental
changes and supports sustainable resource management decisions.
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: CHANGE DETECTION DATA STRUCTURES
Note: =====================================================================

Type called "MultiTemporalDataset":
    image_dates as List[String]
    images as List[List[List[List[String]]]]
    acquisition_metadata as List[Dictionary[String, String]]
    preprocessing_applied as List[String]
    registration_accuracy as List[String]
    radiometric_normalization as Boolean
    seasonal_corrections as Dictionary[String, String]

Type called "ChangeMap":
    change_binary as List[List[Boolean]]
    change_magnitude as List[List[String]]
    change_direction as List[List[String]]
    change_confidence as List[List[String]]
    change_date as List[List[String]]
    change_type as List[List[Integer]]
    no_data_mask as List[List[Boolean]]

Type called "ChangeStatistics":
    total_changed_area as String
    change_rate as String
    change_distribution as Dictionary[Integer, String]
    spatial_patterns as Dictionary[String, String]
    temporal_trends as Dictionary[String, String]
    accuracy_metrics as Dictionary[String, String]

Type called "ChangeVectorAnalysis":
    change_vectors as List[List[List[String]]]
    vector_magnitudes as List[List[String]]
    vector_directions as List[List[String]]
    spectral_change_angle as List[List[String]]
    change_intensity as List[List[String]]
    change_significance as List[List[String]]

Type called "TimeSeriesAnalysis":
    time_series_data as List[List[List[List[String]]]]
    temporal_trends as List[List[List[String]]]
    seasonal_components as List[List[List[String]]]
    breakpoints as List[List[List[String]]]
    anomalies as List[List[List[Boolean]]]
    change_trajectories as Dictionary[String, String]

Type called "ThresholdParameters":
    method as String
    threshold_value as String
    confidence_level as String
    statistical_parameters as Dictionary[String, String]
    adaptive_parameters as Dictionary[String, String]
    validation_metrics as Dictionary[String, String]

Note: =====================================================================
Note: IMAGE DIFFERENCING OPERATIONS
Note: =====================================================================

Process called "simple_image_differencing" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns List[List[List[String]]]:
    Note: Perform simple image differencing between two co-registered images
    Note: Computes pixel-wise differences to identify changed areas
    Note: TODO: Implement simple image differencing
    Throw Errors.NotImplemented with "Simple image differencing not yet implemented"

Process called "image_ratioing" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns List[List[List[String]]]:
    Note: Compute image ratios to normalize for illumination differences
    Note: Uses ratio transformation to reduce effects of lighting variations
    Note: TODO: Implement image ratioing
    Throw Errors.NotImplemented with "Image ratioing not yet implemented"

Process called "normalized_difference" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns List[List[String]]:
    Note: Compute normalized difference index for change detection
    Note: Calculates (T2-T1)/(T2+T1) to normalize for brightness variations
    Note: TODO: Implement normalized difference
    Throw Errors.NotImplemented with "Normalized difference not yet implemented"

Process called "log_ratio_transformation" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns List[List[List[String]]]:
    Note: Apply logarithmic ratio transformation for change detection
    Note: Uses log transformation to handle multiplicative changes
    Note: TODO: Implement log ratio transformation
    Throw Errors.NotImplemented with "Log ratio transformation not yet implemented"

Process called "regression_analysis_change" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns Dictionary[String, String]:
    Note: Use regression analysis to identify changed pixels
    Note: Fits regression model and identifies outliers as changes
    Note: TODO: Implement regression analysis change detection
    Throw Errors.NotImplemented with "Regression analysis change detection not yet implemented"

Note: =====================================================================
Note: CHANGE VECTOR ANALYSIS OPERATIONS
Note: =====================================================================

Process called "change_vector_analysis" that takes pre_image as List[List[List[String]]], post_image as List[List[List[String]]] returns ChangeVectorAnalysis:
    Note: Perform change vector analysis in multi-spectral space
    Note: Computes change vectors and analyzes magnitude and direction
    Note: TODO: Implement change vector analysis
    Throw Errors.NotImplemented with "Change vector analysis not yet implemented"

Process called "change_vector_magnitude" that takes change_vectors as List[List[List[String]]] returns List[List[String]]:
    Note: Calculate magnitude of change vectors in spectral space
    Note: Computes Euclidean distance in multi-dimensional spectral space
    Note: TODO: Implement change vector magnitude
    Throw Errors.NotImplemented with "Change vector magnitude not yet implemented"

Process called "change_vector_direction" that takes change_vectors as List[List[List[String]]] returns List[List[String]]:
    Note: Calculate direction of change vectors for change characterization
    Note: Determines spectral change direction to identify change types
    Note: TODO: Implement change vector direction
    Throw Errors.NotImplemented with "Change vector direction not yet implemented"

Process called "polar_change_vector" that takes cva_result as ChangeVectorAnalysis returns Dictionary[String, List[List[String]]]:
    Note: Convert change vectors to polar coordinates for analysis
    Note: Represents changes as magnitude and angle in polar space
    Note: TODO: Implement polar change vector conversion
    Throw Errors.NotImplemented with "Polar change vector conversion not yet implemented"

Process called "change_vector_clustering" that takes change_vectors as List[List[List[String]]], clustering_method as String returns List[List[Integer]]:
    Note: Cluster change vectors to identify change types
    Note: Groups similar change vectors to characterize change patterns
    Note: TODO: Implement change vector clustering
    Throw Errors.NotImplemented with "Change vector clustering not yet implemented"

Note: =====================================================================
Note: STATISTICAL CHANGE DETECTION OPERATIONS
Note: =====================================================================

Process called "chi_square_change_detection" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns Dictionary[String, String]:
    Note: Apply chi-square test for statistical change detection
    Note: Uses chi-square statistics to test for significant changes
    Note: TODO: Implement chi-square change detection
    Throw Errors.NotImplemented with "Chi-square change detection not yet implemented"

Process called "multivariate_alteration_detection" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns Dictionary[String, String]:
    Note: Apply multivariate alteration detection (MAD) algorithm
    Note: Uses canonical correlation analysis for change detection
    Note: TODO: Implement multivariate alteration detection
    Throw Errors.NotImplemented with "Multivariate alteration detection not yet implemented"

Process called "iteratively_reweighted_mad" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns Dictionary[String, String]:
    Note: Apply iteratively reweighted MAD for robust change detection
    Note: Uses robust statistics to reduce false change detection
    Note: TODO: Implement iteratively reweighted MAD
    Throw Errors.NotImplemented with "Iteratively reweighted MAD not yet implemented"

Process called "covariance_equalization" that takes dataset as MultiTemporalDataset returns MultiTemporalDataset:
    Note: Equalize covariance matrices for improved change detection
    Note: Normalizes statistical properties across different time periods
    Note: TODO: Implement covariance equalization
    Throw Errors.NotImplemented with "Covariance equalization not yet implemented"

Process called "hotelling_t_squared_test" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns List[List[String]]:
    Note: Apply Hotelling's T-squared test for multivariate change detection
    Note: Tests for significant differences in multivariate means
    Note: TODO: Implement Hotelling T-squared test
    Throw Errors.NotImplemented with "Hotelling T-squared test not yet implemented"

Note: =====================================================================
Note: PCA-BASED CHANGE DETECTION OPERATIONS
Note: =====================================================================

Process called "pca_change_detection" that takes dataset as MultiTemporalDataset returns Dictionary[String, String]:
    Note: Apply principal component analysis for change detection
    Note: Uses PCA transformation to identify change components
    Note: TODO: Implement PCA change detection
    Throw Errors.NotImplemented with "PCA change detection not yet implemented"

Process called "differential_pca" that takes image1 as List[List[List[String]]], image2 as List[List[List[String]]] returns Dictionary[String, String]:
    Note: Apply differential PCA to stacked image differences
    Note: Performs PCA on difference images to highlight changes
    Note: TODO: Implement differential PCA
    Throw Errors.NotImplemented with "Differential PCA not yet implemented"

Process called "selective_pca" that takes dataset as MultiTemporalDataset, component_selection as List[Integer] returns Dictionary[String, String]:
    Note: Use selected principal components for change detection
    Note: Selects components most sensitive to changes of interest
    Note: TODO: Implement selective PCA
    Throw Errors.NotImplemented with "Selective PCA not yet implemented"

Process called "temporal_pca" that takes time_series as TimeSeriesAnalysis returns Dictionary[String, String]:
    Note: Apply PCA to temporal dimension of time series data
    Note: Identifies temporal patterns and changes in time series
    Note: TODO: Implement temporal PCA
    Throw Errors.NotImplemented with "Temporal PCA not yet implemented"

Note: =====================================================================
Note: POST-CLASSIFICATION COMPARISON OPERATIONS
Note: =====================================================================

Process called "post_classification_comparison" that takes classification1 as List[List[Integer]], classification2 as List[List[Integer]] returns ChangeMap:
    Note: Compare classified images to detect land cover changes
    Note: Identifies transitions between different land cover classes
    Note: TODO: Implement post-classification comparison
    Throw Errors.NotImplemented with "Post-classification comparison not yet implemented"

Process called "change_matrix_analysis" that takes change_map as ChangeMap, class_names as List[String] returns Dictionary[String, String]:
    Note: Analyze change matrix to quantify class transitions
    Note: Calculates transition probabilities and change statistics
    Note: TODO: Implement change matrix analysis
    Throw Errors.NotImplemented with "Change matrix analysis not yet implemented"

Process called "classification_accuracy_propagation" that takes accuracy1 as Dictionary[String, String], accuracy2 as Dictionary[String, String] returns Dictionary[String, String]:
    Note: Propagate classification accuracies to change detection results
    Note: Estimates change detection accuracy from classification accuracies
    Note: TODO: Implement accuracy propagation
    Throw Errors.NotImplemented with "Accuracy propagation not yet implemented"

Process called "from_to_change_analysis" that takes change_map as ChangeMap returns Dictionary[String, Dictionary[String, String]]:
    Note: Analyze specific change transitions (from class A to class B)
    Note: Quantifies area and patterns of specific land cover transitions
    Note: TODO: Implement from-to change analysis
    Throw Errors.NotImplemented with "From-to change analysis not yet implemented"

Process called "change_trajectory_analysis" that takes multi_temporal_classifications as List[List[List[Integer]]] returns Dictionary[String, String]:
    Note: Analyze change trajectories over multiple time periods
    Note: Identifies complex change sequences and temporal patterns
    Note: TODO: Implement change trajectory analysis
    Throw Errors.NotImplemented with "Change trajectory analysis not yet implemented"

Note: =====================================================================
Note: TIME SERIES CHANGE DETECTION OPERATIONS
Note: =====================================================================

Process called "time_series_breakpoint_detection" that takes time_series as List[List[List[List[String]]]], detection_method as String returns List[List[List[String]]]:
    Note: Detect breakpoints in satellite image time series
    Note: Identifies abrupt changes in temporal trajectories
    Note: TODO: Implement time series breakpoint detection
    Throw Errors.NotImplemented with "Time series breakpoint detection not yet implemented"

Process called "trend_analysis" that takes time_series as List[List[List[List[String]]]] returns List[List[List[String]]]:
    Note: Analyze temporal trends in multi-temporal imagery
    Note: Fits trend models to detect gradual changes over time
    Note: TODO: Implement trend analysis
    Throw Errors.NotImplemented with "Trend analysis not yet implemented"

Process called "seasonal_trend_decomposition" that takes time_series as List[List[List[List[String]]]] returns Dictionary[String, List[List[List[List[String]]]]]:
    Note: Decompose time series into seasonal, trend, and residual components
    Note: Separates seasonal variations from long-term trends and changes
    Note: TODO: Implement seasonal trend decomposition
    Throw Errors.NotImplemented with "Seasonal trend decomposition not yet implemented"

Process called "landtrendr_analysis" that takes time_series as List[List[List[List[String]]]] returns Dictionary[String, String]:
    Note: Apply LandTrendr algorithm for landscape change detection
    Note: Identifies forest disturbance and recovery patterns
    Note: TODO: Implement LandTrendr analysis
    Throw Errors.NotImplemented with "LandTrendr analysis not yet implemented"

Process called "bfast_analysis" that takes time_series as List[List[List[List[String]]]] returns Dictionary[String, String]:
    Note: Apply Breaks For Additive Season and Trend (BFAST) analysis
    Note: Detects multiple breakpoints in seasonal and trend components
    Note: TODO: Implement BFAST analysis
    Throw Errors.NotImplemented with "BFAST analysis not yet implemented"

Process called "ccdc_analysis" that takes time_series as List[List[List[List[String]]]] returns Dictionary[String, String]:
    Note: Apply Continuous Change Detection and Classification algorithm
    Note: Provides continuous monitoring of land cover changes
    Note: TODO: Implement CCDC analysis
    Throw Errors.NotImplemented with "CCDC analysis not yet implemented"

Note: =====================================================================
Note: THRESHOLD DETERMINATION OPERATIONS
Note: =====================================================================

Process called "otsu_thresholding" that takes change_magnitude as List[List[String]] returns ThresholdParameters:
    Note: Determine change threshold using Otsu's method
    Note: Automatically selects threshold minimizing within-class variance
    Note: TODO: Implement Otsu thresholding
    Throw Errors.NotImplemented with "Otsu thresholding not yet implemented"

Process called "statistical_thresholding" that takes change_magnitude as List[List[String]], confidence_level as String returns ThresholdParameters:
    Note: Determine threshold based on statistical distribution of changes
    Note: Uses mean and standard deviation to set significance thresholds
    Note: TODO: Implement statistical thresholding
    Throw Errors.NotImplemented with "Statistical thresholding not yet implemented"

Process called "adaptive_thresholding" that takes change_magnitude as List[List[String]], window_size as Integer returns List[List[String]]:
    Note: Apply adaptive thresholding based on local statistics
    Note: Adjusts threshold locally based on neighborhood characteristics
    Note: TODO: Implement adaptive thresholding
    Throw Errors.NotImplemented with "Adaptive thresholding not yet implemented"

Process called "percentile_thresholding" that takes change_magnitude as List[List[String]], percentile as String returns String:
    Note: Determine threshold based on percentile of change distribution
    Note: Uses specified percentile as change/no-change threshold
    Note: TODO: Implement percentile thresholding
    Throw Errors.NotImplemented with "Percentile thresholding not yet implemented"

Process called "ground_truth_threshold_optimization" that takes change_magnitude as List[List[String]], reference_data as List[List[Boolean]] returns ThresholdParameters:
    Note: Optimize threshold using ground truth reference data
    Note: Maximizes accuracy metrics using validation data
    Note: TODO: Implement ground truth threshold optimization
    Throw Errors.NotImplemented with "Ground truth threshold optimization not yet implemented"

Note: =====================================================================
Note: CHANGE VALIDATION OPERATIONS
Note: =====================================================================

Process called "accuracy_assessment" that takes change_map as ChangeMap, reference_data as List[List[Boolean]] returns Dictionary[String, String]:
    Note: Assess accuracy of change detection results using reference data
    Note: Computes confusion matrix and accuracy metrics
    Note: TODO: Implement accuracy assessment
    Throw Errors.NotImplemented with "Accuracy assessment not yet implemented"

Process called "change_area_estimation" that takes change_map as ChangeMap, sampling_design as Dictionary[String, String] returns Dictionary[String, String]:
    Note: Estimate total area of change with uncertainty quantification
    Note: Uses statistical sampling to estimate change area and confidence intervals
    Note: TODO: Implement change area estimation
    Throw Errors.NotImplemented with "Change area estimation not yet implemented"

Process called "false_change_analysis" that takes change_map as ChangeMap, stable_areas as List[List[Boolean]] returns Dictionary[String, String]:
    Note: Analyze false changes in areas known to be stable
    Note: Quantifies commission errors using stable reference areas
    Note: TODO: Implement false change analysis
    Throw Errors.NotImplemented with "False change analysis not yet implemented"

Process called "temporal_consistency_check" that takes multi_temporal_changes as List[ChangeMap] returns Dictionary[String, String]:
    Note: Check temporal consistency of change detection results
    Note: Validates logical consistency of changes across multiple time periods
    Note: TODO: Implement temporal consistency check
    Throw Errors.NotImplemented with "Temporal consistency check not yet implemented"

Process called "uncertainty_propagation" that takes input_uncertainties as Dictionary[String, String], processing_chain as List[String] returns Dictionary[String, String]:
    Note: Propagate uncertainties through change detection processing chain
    Note: Tracks error propagation from input data to final change results
    Note: TODO: Implement uncertainty propagation
    Throw Errors.NotImplemented with "Uncertainty propagation not yet implemented"

Note: =====================================================================
Note: OBJECT-BASED CHANGE DETECTION OPERATIONS
Note: =====================================================================

Process called "object_based_change_detection" that takes pre_objects as List[Dictionary[String, String]], post_objects as List[Dictionary[String, String]] returns Dictionary[String, String]:
    Note: Detect changes using object-based image analysis
    Note: Compares segmented objects between time periods
    Note: TODO: Implement object-based change detection
    Throw Errors.NotImplemented with "Object-based change detection not yet implemented"

Process called "object_change_characterization" that takes changed_objects as List[Dictionary[String, String]] returns Dictionary[String, String]:
    Note: Characterize changes in terms of object properties
    Note: Analyzes changes in size, shape, spectral, and textural properties
    Note: TODO: Implement object change characterization
    Throw Errors.NotImplemented with "Object change characterization not yet implemented"

Process called "hierarchical_object_change" that takes multi_scale_objects as Dictionary[String, List[Dictionary[String, String]]] returns Dictionary[String, String]:
    Note: Detect changes at multiple spatial scales using object hierarchies
    Note: Analyzes changes from pixel to landscape scale objects
    Note: TODO: Implement hierarchical object change
    Throw Errors.NotImplemented with "Hierarchical object change not yet implemented"

Process called "object_change_attribution" that takes changed_objects as List[Dictionary[String, String]], change_drivers as List[String] returns Dictionary[String, String]:
    Note: Attribute object changes to specific environmental drivers
    Note: Links observed changes to potential causative factors
    Note: TODO: Implement object change attribution
    Throw Errors.NotImplemented with "Object change attribution not yet implemented"

Note: =====================================================================
Note: SPECIALIZED CHANGE DETECTION OPERATIONS
Note: =====================================================================

Process called "forest_change_detection" that takes forest_images as List[List[List[List[String]]]], forest_indices as List[String] returns Dictionary[String, String]:
    Note: Detect forest disturbance and recovery using specialized methods
    Note: Uses forest-specific indices and algorithms for change detection
    Note: TODO: Implement forest change detection
    Throw Errors.NotImplemented with "Forest change detection not yet implemented"

Process called "urban_expansion_detection" that takes urban_images as List[List[List[List[String]]]] returns Dictionary[String, String]:
    Note: Detect urban expansion using built-up area indices
    Note: Monitors urban growth patterns and expansion rates
    Note: TODO: Implement urban expansion detection
    Throw Errors.NotImplemented with "Urban expansion detection not yet implemented"

Process called "water_body_change_detection" that takes water_images as List[List[List[List[String]]]] returns Dictionary[String, String]:
    Note: Detect changes in water bodies using water indices
    Note: Monitors lake levels, river courses, and wetland dynamics
    Note: TODO: Implement water body change detection
    Throw Errors.NotImplemented with "Water body change detection not yet implemented"

Process called "agricultural_change_monitoring" that takes crop_images as List[List[List[List[String]]]], phenology_calendar as Dictionary[String, String] returns Dictionary[String, String]:
    Note: Monitor agricultural changes accounting for crop phenology
    Note: Detects crop type changes, abandonment, and intensification
    Note: TODO: Implement agricultural change monitoring
    Throw Errors.NotImplemented with "Agricultural change monitoring not yet implemented"

Process called "disaster_change_assessment" that takes pre_disaster_image as List[List[List[String]]], post_disaster_image as List[List[List[String]]], disaster_type as String returns Dictionary[String, String]:
    Note: Assess disaster impacts using rapid change detection methods
    Note: Quantifies damage from floods, fires, storms, or other disasters
    Note: TODO: Implement disaster change assessment
    Throw Errors.NotImplemented with "Disaster change assessment not yet implemented"

Note: =====================================================================
Note: CHANGE PATTERN ANALYSIS OPERATIONS
Note: =====================================================================

Process called "spatial_pattern_analysis" that takes change_map as ChangeMap returns Dictionary[String, String]:
    Note: Analyze spatial patterns of detected changes
    Note: Characterizes change fragmentation, connectivity, and clustering
    Note: TODO: Implement spatial pattern analysis
    Throw Errors.NotImplemented with "Spatial pattern analysis not yet implemented"

Process called "change_rate_analysis" that takes multi_temporal_changes as List[ChangeMap], time_intervals as List[String] returns Dictionary[String, String]:
    Note: Analyze rates of change over different time periods
    Note: Quantifies acceleration or deceleration of change processes
    Note: TODO: Implement change rate analysis
    Throw Errors.NotImplemented with "Change rate analysis not yet implemented"

Process called "change_hotspot_identification" that takes change_frequency as List[List[String]], hotspot_criteria as Dictionary[String, String] returns List[List[Boolean]]:
    Note: Identify hotspots of frequent or intensive changes
    Note: Locates areas with high change frequency or magnitude
    Note: TODO: Implement change hotspot identification
    Throw Errors.NotImplemented with "Change hotspot identification not yet implemented"

Process called "change_gradient_analysis" that takes change_map as ChangeMap returns Dictionary[String, String]:
    Note: Analyze gradients and edges in change patterns
    Note: Identifies transition zones and change boundaries
    Note: TODO: Implement change gradient analysis
    Throw Errors.NotImplemented with "Change gradient analysis not yet implemented"

Process called "multiscale_change_analysis" that takes change_maps as Dictionary[String, ChangeMap] returns Dictionary[String, String]:
    Note: Analyze changes at multiple spatial and temporal scales
    Note: Integrates change patterns across different scales of analysis
    Note: TODO: Implement multiscale change analysis
    Throw Errors.NotImplemented with "Multiscale change analysis not yet implemented"