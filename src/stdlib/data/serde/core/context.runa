Note:
data/serde/core/context.runa
Serialization Context Management

This module provides comprehensive context management for serialization and
deserialization operations, handling configuration, state tracking, error
management, and custom handler integration throughout the lifecycle.
:End Note

Import "dev/debug/errors/core" as Errors

Note: ===============================================================================
Note: Core Context Types
Note: ===============================================================================

Note: Primary serialization context for managing operation state
Type called "SerializationContext":
    context_id as String
    parent_context as SerializationContext
    operation_type as OperationType
    configuration as ContextConfiguration
    state as ContextState
    handlers as HandlerRegistry
    metadata as Dictionary[String, String]
    performance_tracker as PerformanceTracker

Note: Primary deserialization context for managing operation state
Type called "DeserializationContext":
    context_id as String
    parent_context as DeserializationContext
    operation_type as OperationType
    configuration as ContextConfiguration
    state as ContextState
    handlers as HandlerRegistry
    metadata as Dictionary[String, String]
    error_recovery as ErrorRecoveryContext

Note: Configuration settings for serialization contexts
Type called "ContextConfiguration":
    format_preferences as List[String]
    validation_level as ValidationLevel
    error_handling_mode as ErrorHandlingMode
    performance_profile as PerformanceProfile
    security_settings as SecuritySettings
    custom_settings as Dictionary[String, String]

Note: Current state information for context operations
Type called "ContextState":
    current_operation as String
    processing_stack as List[ProcessingFrame]
    accumulated_errors as List[ContextError]
    performance_metrics as PerformanceMetrics
    resource_usage as ResourceUsage
    flags as ContextFlags

Note: Registry for custom handlers in contexts
Type called "HandlerRegistry":
    pre_serialization_handlers as List[HandlerRegistration]
    post_serialization_handlers as List[HandlerRegistration]
    pre_deserialization_handlers as List[HandlerRegistration]
    post_deserialization_handlers as List[HandlerRegistration]
    error_handlers as List[ErrorHandlerRegistration]
    validation_handlers as List[ValidationHandlerRegistration]

Note: ===============================================================================
Note: Handler Registration Types
Note: ===============================================================================

Note: Registration information for a custom handler
Type called "HandlerRegistration":
    handler_id as String
    handler_type as HandlerType
    priority as Integer
    conditions as List[HandlerCondition]
    handler_function as FunctionPointer
    configuration as HandlerConfiguration

Note: Registration information for error handlers
Type called "ErrorHandlerRegistration":
    handler_id as String
    error_types as List[String]
    severity_threshold as ErrorSeverity
    recovery_strategy as RecoveryStrategy
    handler_function as FunctionPointer
    fallback_behavior as FallbackBehavior

Note: Registration information for validation handlers
Type called "ValidationHandlerRegistration":
    handler_id as String
    validation_scope as ValidationScope
    validation_rules as List[ValidationRule]
    error_action as ErrorAction
    handler_function as FunctionPointer
    bypass_conditions as List[String]

Note: Condition for handler activation
Type called "HandlerCondition":
    condition_type as ConditionType
    field_path as String
    expected_value as String
    comparison_operator as ComparisonOperator
    logical_operator as LogicalOperator

Note: Configuration for handler behavior
Type called "HandlerConfiguration":
    execution_timeout as Float
    memory_limit as Integer
    retry_policy as RetryPolicy
    logging_level as LoggingLevel
    metrics_collection as Boolean

Note: ===============================================================================
Note: Performance and Tracking Types
Note: ===============================================================================

Note: Performance tracking for context operations
Type called "PerformanceTracker":
    start_time as Float
    operation_times as Dictionary[String, Float]
    memory_snapshots as List[MemorySnapshot]
    throughput_metrics as ThroughputMetrics
    bottleneck_analysis as BottleneckAnalysis
    optimization_suggestions as List[String]

Note: Resource usage tracking for contexts
Type called "ResourceUsage":
    memory_allocated as Integer
    memory_peak as Integer
    cpu_time as Float
    io_operations as Integer
    network_bytes as Integer
    file_handles as Integer

Note: Memory usage snapshot at a point in time
Type called "MemorySnapshot":
    timestamp as Float
    total_allocated as Integer
    heap_usage as Integer
    stack_usage as Integer
    gc_pressure as Float
    allocation_rate as Float

Note: Throughput metrics for operations
Type called "ThroughputMetrics":
    operations_per_second as Float
    bytes_per_second as Float
    items_processed as Integer
    processing_rate as Float
    queue_depth as Integer
    latency_distribution as LatencyDistribution

Note: Analysis of performance bottlenecks
Type called "BottleneckAnalysis":
    identified_bottlenecks as List[Bottleneck]
    critical_path as List[String]
    resource_contention as List[ResourceContention]
    optimization_opportunities as List[OptimizationOpportunity]
    performance_regression as PerformanceRegression

Note: ===============================================================================
Note: Error and Recovery Types
Note: ===============================================================================

Note: Error recovery context for deserialization
Type called "ErrorRecoveryContext":
    recovery_strategy as RecoveryStrategy
    error_history as List[RecoveryAttempt]
    fallback_options as List[FallbackOption]
    recovery_state as RecoveryState
    success_criteria as List[String]
    max_recovery_attempts as Integer

Note: Context-specific error information
Type called "ContextError":
    error_id as String
    error_type as String
    severity as ErrorSeverity
    context_path as String
    error_data as Dictionary[String, String]
    recovery_suggestions as List[String]
    timestamp as Float

Note: Record of a recovery attempt
Type called "RecoveryAttempt":
    attempt_id as String
    strategy_used as RecoveryStrategy
    success as Boolean
    error_encountered as String
    recovery_time as Float
    resources_consumed as ResourceUsage

Note: Fallback option for error recovery
Type called "FallbackOption":
    option_id as String
    option_type as FallbackType
    estimated_success_rate as Float
    performance_impact as Float
    data_loss_risk as DataLossRisk
    implementation as FunctionPointer

Note: Current state of error recovery process
Type called "RecoveryState":
    active_recovery as Boolean
    current_strategy as RecoveryStrategy
    attempts_made as Integer
    partial_success as Boolean
    recovery_progress as Float
    estimated_completion as Float

Note: ===============================================================================
Note: Processing and State Types
Note: ===============================================================================

Note: Frame representing current processing state
Type called "ProcessingFrame":
    frame_id as String
    operation_name as String
    input_type as String
    output_type as String
    start_time as Float
    parent_frame as String
    nested_frames as List[String]

Note: Flags controlling context behavior
Type called "ContextFlags":
    debug_mode as Boolean
    validation_enabled as Boolean
    performance_monitoring as Boolean
    error_collection as Boolean
    handler_tracing as Boolean
    memory_tracking as Boolean

Note: Security settings for context operations
Type called "SecuritySettings":
    encryption_required as Boolean
    signature_verification as Boolean
    access_control_enabled as Boolean
    audit_logging as Boolean
    sandbox_mode as Boolean
    trust_level as TrustLevel

Note: Latency distribution metrics
Type called "LatencyDistribution":
    percentile_50 as Float
    percentile_90 as Float
    percentile_95 as Float
    percentile_99 as Float
    min_latency as Float
    max_latency as Float

Note: Individual bottleneck identification
Type called "Bottleneck":
    bottleneck_type as BottleneckType
    location as String
    severity as Float
    impact_description as String
    suggested_solutions as List[String]
    measurement_confidence as Float

Note: Resource contention analysis
Type called "ResourceContention":
    resource_type as ResourceType
    contention_level as Float
    competing_operations as List[String]
    resolution_strategies as List[String]
    impact_assessment as String

Note: Optimization opportunity identification
Type called "OptimizationOpportunity":
    opportunity_type as OptimizationType
    potential_improvement as Float
    implementation_cost as Float
    risk_assessment as String
    priority_score as Float
    detailed_analysis as String

Note: Performance regression detection
Type called "PerformanceRegression":
    regression_detected as Boolean
    baseline_metrics as PerformanceMetrics
    current_metrics as PerformanceMetrics
    degradation_factor as Float
    root_cause_analysis as List[String]

Note: ===============================================================================
Note: Enum Types for Context Operations
Note: ===============================================================================

Note: Types of serialization operations
Type OperationType is:
    | Serialization
    | Deserialization
    | Validation
    | Transformation
    | Discovery

Note: Types of custom handlers
Type HandlerType is:
    | PreProcessor
    | PostProcessor
    | Transformer
    | Validator
    | ErrorHandler

Note: Validation levels for operations
Type ValidationLevel is:
    | None
    | Basic
    | Strict
    | Comprehensive
    | Custom

Note: Error handling modes for contexts
Type ErrorHandlingMode is:
    | FailFast
    | Collect
    | Recover
    | Ignore
    | Custom

Note: Performance profiles for optimization
Type PerformanceProfile is:
    | Speed
    | Memory
    | Balanced
    | Throughput
    | Latency

Note: Trust levels for security
Type TrustLevel is:
    | Untrusted
    | Limited
    | Trusted
    | FullyTrusted
    | System

Note: Error severity levels
Type ErrorSeverity is:
    | Info
    | Warning
    | Error
    | Critical
    | Fatal

Note: Recovery strategies for error handling
Type RecoveryStrategy is:
    | Retry
    | Fallback
    | Skip
    | Default
    | Custom

Note: Fallback behaviors for handlers
Type FallbackBehavior is:
    | Continue
    | Abort
    | Retry
    | Default
    | Custom

Note: Validation scopes for handlers
Type ValidationScope is:
    | Field
    | Object
    | Collection
    | Global
    | Custom

Note: Condition types for handler activation
Type ConditionType is:
    | FieldValue
    | ObjectType
    | ContextState
    | Performance
    | Custom

Note: Comparison operators for conditions
Type ComparisonOperator is:
    | Equals
    | NotEquals
    | GreaterThan
    | LessThan
    | Contains
    | Matches

Note: Logical operators for combining conditions
Type LogicalOperator is:
    | And
    | Or
    | Not
    | Xor

Note: Logging levels for handlers
Type LoggingLevel is:
    | None
    | Error
    | Warning
    | Info
    | Debug
    | Trace

Note: Types of fallback options
Type FallbackType is:
    | Alternative
    | Default
    | Skip
    | Retry
    | Custom

Note: Data loss risk levels
Type DataLossRisk is:
    | None
    | Low
    | Medium
    | High
    | Complete

Note: Types of performance bottlenecks
Type BottleneckType is:
    | CPU
    | Memory
    | IO
    | Network
    | Contention

Note: Types of system resources
Type ResourceType is:
    | Memory
    | CPU
    | Disk
    | Network
    | Handle

Note: Types of optimization opportunities
Type OptimizationType is:
    | Algorithm
    | DataStructure
    | Caching
    | Parallelization
    | Memory

Note: ===============================================================================
Note: Context Management Operations
Note: ===============================================================================

Note: Create a new serialization context
Process called "create_serialization_context" that takes config as ContextConfiguration returns SerializationContext:
    Note: Initializes a new context for serialization operations
    Note: TODO: Implement context creation with configuration validation
    Throw Errors.NotImplemented

Note: Create a new deserialization context
Process called "create_deserialization_context" that takes config as ContextConfiguration returns DeserializationContext:
    Note: Initializes a new context for deserialization operations
    Note: TODO: Implement context creation with error recovery setup
    Throw Errors.NotImplemented

Note: Create a child context inheriting from parent
Process called "create_child_context" that takes parent as SerializationContext, overrides as ContextConfiguration returns SerializationContext:
    Note: Creates a child context that inherits parent settings with overrides
    Note: TODO: Implement hierarchical context creation and inheritance
    Throw Errors.NotImplemented

Note: Clone an existing context with modifications
Process called "clone_context" that takes source as SerializationContext, modifications as ContextModifications returns SerializationContext:
    Note: Creates a copy of an existing context with specified modifications
    Note: TODO: Implement context cloning with selective modifications
    Throw Errors.NotImplemented

Note: Destroy a context and clean up resources
Process called "destroy_context" that takes context as SerializationContext returns Boolean:
    Note: Properly disposes of context resources and nested contexts
    Note: TODO: Implement safe context destruction with resource cleanup
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Handler Registration Operations
Note: ===============================================================================

Note: Register a custom handler in the context
Process called "register_handler" that takes context as SerializationContext, handler as HandlerRegistration returns Boolean:
    Note: Adds a custom handler to the context's handler registry
    Note: TODO: Implement handler registration with validation and conflict resolution
    Throw Errors.NotImplemented

Note: Unregister a handler from the context
Process called "unregister_handler" that takes context as SerializationContext, handler_id as String returns Boolean:
    Note: Removes a handler from the context's registry
    Note: TODO: Implement handler removal with dependency checking
    Throw Errors.NotImplemented

Note: Register an error handler for specific error types
Process called "register_error_handler" that takes context as SerializationContext, error_handler as ErrorHandlerRegistration returns Boolean:
    Note: Adds an error handler for managing specific error conditions
    Note: TODO: Implement error handler registration with priority ordering
    Throw Errors.NotImplemented

Note: Register a validation handler for data integrity
Process called "register_validation_handler" that takes context as SerializationContext, validation_handler as ValidationHandlerRegistration returns Boolean:
    Note: Adds a validation handler for ensuring data integrity
    Note: TODO: Implement validation handler registration with scope management
    Throw Errors.NotImplemented

Note: Get all registered handlers of a specific type
Process called "get_handlers_by_type" that takes context as SerializationContext, handler_type as HandlerType returns List[HandlerRegistration]:
    Note: Retrieves all handlers matching the specified type
    Note: TODO: Implement handler lookup with filtering and sorting
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Context State Management Operations
Note: ===============================================================================

Note: Push a new processing frame onto the context stack
Process called "push_processing_frame" that takes context as SerializationContext, frame as ProcessingFrame returns Boolean:
    Note: Adds a new frame to track current processing operation
    Note: TODO: Implement frame stack management with overflow protection
    Throw Errors.NotImplemented

Note: Pop the current processing frame from the context stack
Process called "pop_processing_frame" that takes context as SerializationContext returns ProcessingFrame:
    Note: Removes and returns the current processing frame
    Note: TODO: Implement frame stack popping with validation
    Throw Errors.NotImplemented

Note: Get the current processing frame without removing it
Process called "peek_processing_frame" that takes context as SerializationContext returns ProcessingFrame:
    Note: Returns the current processing frame without modifying the stack
    Note: TODO: Implement safe frame peeking with null checking
    Throw Errors.NotImplemented

Note: Update context state with new information
Process called "update_context_state" that takes context as SerializationContext, updates as StateUpdate returns Boolean:
    Note: Applies state updates to the context maintaining consistency
    Note: TODO: Implement atomic state updates with validation
    Throw Errors.NotImplemented

Note: Get current context state snapshot
Process called "get_context_state" that takes context as SerializationContext returns ContextState:
    Note: Returns a snapshot of the current context state
    Note: TODO: Implement state snapshotting with deep copying
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Error Handling Operations
Note: ===============================================================================

Note: Record an error in the context
Process called "record_context_error" that takes context as SerializationContext, error as ContextError returns Boolean:
    Note: Adds an error to the context's error collection
    Note: TODO: Implement error recording with deduplication and categorization
    Throw Errors.NotImplemented

Note: Attempt error recovery using registered strategies
Process called "attempt_error_recovery" that takes context as DeserializationContext, error as ContextError returns RecoveryResult:
    Note: Executes recovery strategies for the specified error
    Note: TODO: Implement comprehensive error recovery with strategy selection
    Throw Errors.NotImplemented

Note: Get all errors accumulated in the context
Process called "get_context_errors" that takes context as SerializationContext returns List[ContextError]:
    Note: Retrieves all errors recorded in the context hierarchy
    Note: TODO: Implement error retrieval with filtering and sorting options
    Throw Errors.NotImplemented

Note: Clear errors from the context
Process called "clear_context_errors" that takes context as SerializationContext returns Boolean:
    Note: Removes all accumulated errors from the context
    Note: TODO: Implement selective error clearing with confirmation
    Throw Errors.NotImplemented

Note: Check if context has any critical errors
Process called "has_critical_errors" that takes context as SerializationContext returns Boolean:
    Note: Determines if the context contains any critical-level errors
    Note: TODO: Implement critical error detection with severity analysis
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Performance Monitoring Operations
Note: ===============================================================================

Note: Start performance tracking for an operation
Process called "start_performance_tracking" that takes context as SerializationContext, operation_name as String returns String:
    Note: Begins tracking performance metrics for the named operation
    Note: TODO: Implement performance tracking initialization with resource monitoring
    Throw Errors.NotImplemented

Note: Stop performance tracking and record results
Process called "stop_performance_tracking" that takes context as SerializationContext, tracking_id as String returns PerformanceResult:
    Note: Ends performance tracking and records the final metrics
    Note: TODO: Implement performance tracking finalization with analysis
    Throw Errors.NotImplemented

Note: Get current performance metrics from context
Process called "get_performance_metrics" that takes context as SerializationContext returns PerformanceMetrics:
    Note: Retrieves current performance metrics from the context
    Note: TODO: Implement real-time metrics collection and aggregation
    Throw Errors.NotImplemented

Note: Analyze performance bottlenecks in context
Process called "analyze_performance_bottlenecks" that takes context as SerializationContext returns BottleneckAnalysis:
    Note: Performs analysis to identify performance bottlenecks
    Note: TODO: Implement bottleneck detection algorithms with ML analysis
    Throw Errors.NotImplemented

Note: Get performance optimization suggestions
Process called "get_optimization_suggestions" that takes context as SerializationContext returns List[OptimizationSuggestion]:
    Note: Provides recommendations for improving performance
    Note: TODO: Implement optimization suggestion engine with cost-benefit analysis
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Context Configuration Operations
Note: ===============================================================================

Note: Update context configuration settings
Process called "update_context_configuration" that takes context as SerializationContext, config_updates as ConfigurationUpdate returns Boolean:
    Note: Applies configuration changes to an existing context
    Note: TODO: Implement configuration updates with validation and rollback
    Throw Errors.NotImplemented

Note: Merge configuration from another context
Process called "merge_context_configuration" that takes target as SerializationContext, source as SerializationContext returns Boolean:
    Note: Merges configuration settings from source context into target
    Note: TODO: Implement configuration merging with conflict resolution
    Throw Errors.NotImplemented

Note: Validate context configuration for consistency
Process called "validate_context_configuration" that takes context as SerializationContext returns ConfigurationValidationResult:
    Note: Checks context configuration for consistency and completeness
    Note: TODO: Implement comprehensive configuration validation
    Throw Errors.NotImplemented

Note: Reset context configuration to defaults
Process called "reset_context_configuration" that takes context as SerializationContext returns Boolean:
    Note: Restores context configuration to default values
    Note: TODO: Implement configuration reset with backup and restore
    Throw Errors.NotImplemented

Note: Export context configuration for reuse
Process called "export_context_configuration" that takes context as SerializationContext returns ContextConfigurationExport:
    Note: Exports context configuration in a reusable format
    Note: TODO: Implement configuration export with serialization
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Advanced Context Operations
Note: ===============================================================================

Note: Create a context transaction for atomic operations
Process called "create_context_transaction" that takes context as SerializationContext returns ContextTransaction:
    Note: Creates a transactional wrapper for atomic context operations
    Note: TODO: Implement context transactions with commit/rollback semantics
    Throw Errors.NotImplemented

Note: Commit a context transaction
Process called "commit_context_transaction" that takes transaction as ContextTransaction returns Boolean:
    Note: Commits all changes made within the transaction
    Note: TODO: Implement transaction commit with consistency validation
    Throw Errors.NotImplemented

Note: Rollback a context transaction
Process called "rollback_context_transaction" that takes transaction as ContextTransaction returns Boolean:
    Note: Reverts all changes made within the transaction
    Note: TODO: Implement transaction rollback with state restoration
    Throw Errors.NotImplemented

Note: Serialize context state for persistence
Process called "serialize_context_state" that takes context as SerializationContext returns SerializedContextState:
    Note: Converts context state to a serializable format for storage
    Note: TODO: Implement context state serialization with compression
    Throw Errors.NotImplemented

Note: Deserialize context state from storage
Process called "deserialize_context_state" that takes serialized_state as SerializedContextState returns SerializationContext:
    Note: Reconstructs context state from serialized format
    Note: TODO: Implement context state deserialization with validation
    Throw Errors.NotImplemented

Note: ===============================================================================
Note: Supporting Types for Advanced Operations
Note: ===============================================================================

Note: Modifications to apply to context
Type called "ContextModifications":
    config_changes as Dictionary[String, String]
    handler_changes as List[HandlerChange]
    state_changes as Dictionary[String, String]
    flag_changes as Dictionary[String, Boolean]
    metadata_changes as Dictionary[String, String]

Note: Update to apply to context state
Type called "StateUpdate":
    operation_updates as Dictionary[String, String]
    metric_updates as Dictionary[String, Float]
    flag_updates as Dictionary[String, Boolean]
    metadata_updates as Dictionary[String, String]
    timestamp as Float

Note: Result of error recovery attempt
Type called "RecoveryResult":
    success as Boolean
    strategy_used as RecoveryStrategy
    recovery_time as Float
    partial_recovery as Boolean
    remaining_errors as List[ContextError]
    next_steps as List[String]

Note: Result of performance tracking
Type called "PerformanceResult":
    operation_name as String
    total_time as Float
    memory_used as Integer
    cpu_time as Float
    io_operations as Integer
    throughput as Float

Note: Optimization suggestion from analysis
Type called "OptimizationSuggestion":
    suggestion_type as OptimizationType
    description as String
    potential_improvement as Float
    implementation_effort as ImplementationEffort
    risk_level as RiskLevel
    detailed_plan as String

Note: Update to context configuration
Type called "ConfigurationUpdate":
    setting_changes as Dictionary[String, String]
    validation_changes as ValidationLevel
    error_handling_changes as ErrorHandlingMode
    performance_changes as PerformanceProfile
    security_changes as SecuritySettings

Note: Result of configuration validation
Type called "ConfigurationValidationResult":
    valid as Boolean
    validation_errors as List[ConfigurationError]
    warnings as List[ConfigurationWarning]
    suggestions as List[String]
    compliance_status as ComplianceStatus

Note: Export format for context configuration
Type called "ContextConfigurationExport":
    configuration_data as Dictionary[String, String]
    export_format as String
    version as String
    metadata as Dictionary[String, String]
    checksum as String

Note: Transaction wrapper for context operations
Type called "ContextTransaction":
    transaction_id as String
    context as SerializationContext
    initial_state as ContextState
    pending_changes as List[ContextChange]
    isolation_level as IsolationLevel

Note: Serialized context state for persistence
Type called "SerializedContextState":
    state_data as Bytes
    format_version as String
    compression_type as CompressionType
    metadata as Dictionary[String, String]
    integrity_hash as String

Note: Change to apply to handler registry
Type called "HandlerChange":
    change_type as ChangeType
    handler_id as String
    handler_registration as HandlerRegistration
    priority_change as Integer
    configuration_change as HandlerConfiguration

Note: Individual context change for transactions
Type called "ContextChange":
    change_id as String
    change_type as String
    target_path as String
    old_value as String
    new_value as String
    timestamp as Float

Note: Configuration error information
Type called "ConfigurationError":
    error_code as String
    field_path as String
    error_message as String
    severity as ConfigurationSeverity
    suggested_fix as String

Note: Configuration warning information
Type called "ConfigurationWarning":
    warning_code as String
    field_path as String
    warning_message as String
    impact as String
    recommendation as String

Note: ===============================================================================
Note: Additional Enum Types
Note: ===============================================================================

Note: Implementation effort levels
Type ImplementationEffort is:
    | Trivial
    | Low
    | Medium
    | High
    | Extreme

Note: Risk levels for suggestions
Type RiskLevel is:
    | VeryLow
    | Low
    | Medium
    | High
    | VeryHigh

Note: Compliance status for validation
Type ComplianceStatus is:
    | Compliant
    | NonCompliant
    | PartiallyCompliant
    | Unknown

Note: Transaction isolation levels
Type IsolationLevel is:
    | ReadUncommitted
    | ReadCommitted
    | RepeatableRead
    | Serializable

Note: Types of context changes
Type ChangeType is:
    | Add
    | Remove
    | Modify
    | Replace

Note: Configuration error severity
Type ConfigurationSeverity is:
    | Info
    | Warning
    | Error
    | Critical

Note: Compression types for serialization
Type CompressionType is:
    | None
    | Gzip
    | Lz4
    | Zstd
    | Custom

Note: ===============================================================================
Note: End of Context Module
Note: ===============================================================================