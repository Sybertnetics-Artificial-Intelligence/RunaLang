Note:
net/web/aether/types/web_types.runa
Core Web Type Definitions for Aether Framework

This module provides the foundational type definitions for the Aether web
framework, including self-validating request and response types, route
definitions with intent handling capabilities, and core web primitives
that enable AI integration through well-defined interfaces.

Key Features:
- Self-validating request and response types with built-in validation rules
- Route types with intent handling hooks for AI integration
- HTTP method and status code type safety
- Header and parameter type definitions with validation
- Content negotiation and media type handling
- Session and authentication type primitives
- Error handling and response generation types
- Middleware and handler interface definitions
- Type-safe URL and path manipulation
- Request/response lifecycle management
- Custom validation rule integration
- Performance monitoring and metrics types

Technical Foundation:
Implements comprehensive web type definitions leveraging Runa's advanced
type system for compile-time safety, runtime validation, and seamless
integration with AI systems through well-defined interfaces and hooks.

Applications:
Essential for building type-safe web applications with the Aether framework,
providing the foundational types for HTTP handling, routing, validation,
and AI integration in web services and applications.
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: CORE WEB TYPE DEFINITIONS
Note: =====================================================================

Type called "HttpMethod":
    method_name as String
    is_safe as Boolean
    is_idempotent as Boolean
    has_body as Boolean
    cache_behavior as String

Type called "HttpStatus":
    code as Integer
    reason_phrase as String
    category as String
    is_error as Boolean
    is_redirect as Boolean

Type called "HttpHeader":
    name as String
    value as String
    is_sensitive as Boolean
    validation_rule as String

Type called "MediaType":
    type_part as String
    subtype_part as String
    parameters as Dictionary[String, String]
    quality as Float
    charset as String

Note: =====================================================================
Note: REQUEST AND RESPONSE TYPES
Note: =====================================================================

Type called "AetherRequest":
    method as HttpMethod
    path as String
    query_parameters as Dictionary[String, List[String]]
    headers as List[HttpHeader]
    body as String
    content_type as MediaType
    content_length as Integer
    remote_address as String
    user_agent as String
    cookies as Dictionary[String, String]
    session_id as String
    request_id as String
    timestamp as Integer
    validation_errors as List[String]
    intent_data as Dictionary[String, String]
    metadata as Dictionary[String, String]

Type called "AetherResponse":
    status as HttpStatus
    headers as List[HttpHeader]
    body as String
    content_type as MediaType
    content_length as Integer
    cookies as Dictionary[String, String]
    cache_control as String
    etag as String
    last_modified as String
    compression as String
    response_time as Integer
    metadata as Dictionary[String, String]

Type called "RequestContext":
    request as AetherRequest
    response as AetherResponse
    session_data as Dictionary[String, String]
    user_data as Dictionary[String, String]
    route_data as Dictionary[String, String]
    middleware_data as Dictionary[String, String]
    performance_metrics as Dictionary[String, Integer]

Note: =====================================================================
Note: ROUTING AND INTENT TYPES
Note: =====================================================================

Type called "RoutePattern":
    pattern as String
    parameter_names as List[String]
    constraints as Dictionary[String, String]
    is_regex as Boolean
    priority as Integer

Type called "RouteIntent":
    intent_type as String
    confidence_threshold as Float
    resolver_hook as String
    fallback_pattern as String
    metadata as Dictionary[String, String]

Type called "AetherRoute":
    route_id as String
    pattern as RoutePattern
    methods as List[HttpMethod]
    handler_name as String
    middleware as List[String]
    intent as RouteIntent
    validation_rules as Dictionary[String, String]
    response_types as List[MediaType]
    documentation as String

Type called "RouteMatch":
    route as AetherRoute
    path_parameters as Dictionary[String, String]
    match_score as Float
    intent_matched as Boolean
    validation_passed as Boolean

Note: =====================================================================
Note: VALIDATION TYPES
Note: =====================================================================

Type called "ValidationRule":
    rule_name as String
    rule_type as String
    parameters as Dictionary[String, String]
    error_message as String
    severity as String

Type called "ValidationResult":
    is_valid as Boolean
    errors as List[String]
    warnings as List[String]
    field_errors as Dictionary[String, List[String]]
    validation_time as Integer

Type called "ValidationType":
    type_name as String
    validation_rules as List[ValidationRule]
    custom_validator as String
    auto_sanitize as Boolean

Note: =====================================================================
Note: AUTHENTICATION AND SESSION TYPES
Note: =====================================================================

Type called "AuthenticationCredentials":
    credential_type as String
    username as String
    password_hash as String
    token as String
    expires_at as Integer
    permissions as List[String]
    metadata as Dictionary[String, String]

Type called "SessionData":
    session_id as String
    user_id as String
    created_at as Integer
    last_accessed as Integer
    expires_at as Integer
    is_authenticated as Boolean
    data as Dictionary[String, String]
    csrf_token as String

Type called "UserContext":
    user_id as String
    username as String
    email as String
    roles as List[String]
    permissions as List[String]
    preferences as Dictionary[String, String]
    session as SessionData

Note: =====================================================================
Note: MIDDLEWARE TYPES
Note: =====================================================================

Type called "MiddlewareConfig":
    middleware_name as String
    order as Integer
    enabled as Boolean
    configuration as Dictionary[String, String]
    condition as String

Type called "MiddlewareResult":
    continue_processing as Boolean
    modified_request as AetherRequest
    modified_response as AetherResponse
    error_response as AetherResponse
    metadata as Dictionary[String, String]

Note: =====================================================================
Note: ERROR AND RESPONSE TYPES
Note: =====================================================================

Type called "WebError":
    error_code as String
    error_type as String
    message as String
    details as Dictionary[String, String]
    stack_trace as List[String]
    request_id as String
    timestamp as Integer

Type called "ErrorResponse":
    error as WebError
    status as HttpStatus
    headers as List[HttpHeader]
    body as String
    content_type as MediaType

Note: =====================================================================
Note: CORE TYPE OPERATIONS
Note: =====================================================================

Process called "create_http_method" that takes method_name as String returns HttpMethod:
    Note: Create HTTP method type with standard properties
    Note: Sets safety, idempotency, and caching behavior based on method
    Note: TODO: Implement HTTP method creation
    Throw Errors.NotImplemented with "HTTP method creation not yet implemented"

Process called "create_request" that takes method as String, path as String, headers as Dictionary[String, String] returns AetherRequest:
    Note: Create new Aether request with validation and preprocessing
    Note: Parses headers, validates structure, and initializes metadata
    Note: TODO: Implement request creation
    Throw Errors.NotImplemented with "Request creation not yet implemented"

Process called "create_response" that takes status_code as Integer returns AetherResponse:
    Note: Create new Aether response with default headers and validation
    Note: Sets appropriate content type and cache headers
    Note: TODO: Implement response creation
    Throw Errors.NotImplemented with "Response creation not yet implemented"

Process called "validate_request_structure" that takes request as AetherRequest returns ValidationResult:
    Note: Validate request structure and required fields
    Note: Checks headers, content type, and basic structure validity
    Note: TODO: Implement request structure validation
    Throw Errors.NotImplemented with "Request structure validation not yet implemented"

Process called "create_route_pattern" that takes pattern as String returns RoutePattern:
    Note: Create route pattern with parameter extraction and constraints
    Note: Parses URL patterns and identifies parameter placeholders
    Note: TODO: Implement route pattern creation
    Throw Errors.NotImplemented with "Route pattern creation not yet implemented"

Process called "create_intent_hook" that takes intent_type as String, resolver_name as String returns RouteIntent:
    Note: Create intent handling hook for AI integration
    Note: Provides interface for external intent resolution systems
    Note: TODO: Implement intent hook creation
    Throw Errors.NotImplemented with "Intent hook creation not yet implemented"

Process called "validate_route_definition" that takes route as AetherRoute returns ValidationResult:
    Note: Validate route definition and configuration
    Note: Checks pattern validity, handler existence, and middleware compatibility
    Note: TODO: Implement route definition validation
    Throw Errors.NotImplemented with "Route definition validation not yet implemented"

Process called "create_validation_rule" that takes rule_type as String, parameters as Dictionary[String, String] returns ValidationRule:
    Note: Create validation rule with parameters and error messages
    Note: Supports built-in and custom validation rule types
    Note: TODO: Implement validation rule creation
    Throw Errors.NotImplemented with "Validation rule creation not yet implemented"

Process called "create_middleware_chain" that takes middleware_configs as List[MiddlewareConfig] returns List[String]:
    Note: Create ordered middleware chain with dependency resolution
    Note: Resolves middleware order and validates compatibility
    Note: TODO: Implement middleware chain creation
    Throw Errors.NotImplemented with "Middleware chain creation not yet implemented"

Process called "create_error_response" that takes error as WebError, status_code as Integer returns ErrorResponse:
    Note: Create standardized error response with appropriate headers
    Note: Formats error data and sets correct status and content type
    Note: TODO: Implement error response creation
    Throw Errors.NotImplemented with "Error response creation not yet implemented"

Process called "parse_content_type" that takes content_type_header as String returns MediaType:
    Note: Parse Content-Type header into structured media type
    Note: Extracts type, subtype, parameters, and quality values
    Note: TODO: Implement content type parsing
    Throw Errors.NotImplemented with "Content type parsing not yet implemented"

Process called "negotiate_content_type" that takes accept_header as String, available_types as List[MediaType] returns MediaType:
    Note: Negotiate content type based on Accept header and available types
    Note: Implements HTTP content negotiation with quality values
    Note: TODO: Implement content type negotiation
    Throw Errors.NotImplemented with "Content type negotiation not yet implemented"

Process called "create_session_context" that takes session_id as String, user_data as Dictionary[String, String] returns SessionData:
    Note: Create session context with security tokens and expiration
    Note: Generates CSRF tokens and sets appropriate timeouts
    Note: TODO: Implement session context creation
    Throw Errors.NotImplemented with "Session context creation not yet implemented"

Process called "validate_authentication" that takes credentials as AuthenticationCredentials returns ValidationResult:
    Note: Validate authentication credentials and permissions
    Note: Checks credential format, expiration, and permission validity
    Note: TODO: Implement authentication validation
    Throw Errors.NotImplemented with "Authentication validation not yet implemented"

Process called "create_request_context" that takes request as AetherRequest, session as SessionData returns RequestContext:
    Note: Create comprehensive request context with session and metadata
    Note: Combines request, session, and routing data into unified context
    Note: TODO: Implement request context creation
    Throw Errors.NotImplemented with "Request context creation not yet implemented"