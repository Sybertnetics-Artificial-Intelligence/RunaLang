Note:
net/http/core/methods.runa
HTTP Method Definitions and Validation

This module provides comprehensive support for HTTP methods as defined in
RFC 9110. Includes standard methods (GET, POST, PUT, DELETE, etc.), method
validation, semantics checking, and support for custom method extensions.
Handles method-specific requirements and constraints.

Key Features:
- Standard HTTP method definitions and constants
- Method validation and format checking
- Semantic constraints for each method (safe, idempotent, cacheable)
- Support for WebDAV and custom method extensions
- Method capability checking and feature detection
- Request/response semantics validation per method
- Security implications analysis for different methods
- Method compatibility checking across HTTP versions
- Extension method registration and management
- Method-specific header requirements validation

Technical Foundation:
Based on RFC 9110 (HTTP Semantics) method definitions with support for
RFC 4918 (WebDAV) extensions. Implements proper method semantics including
safety, idempotency, and cacheability characteristics defined in HTTP
specifications.

Applications:
Essential for HTTP clients, servers, and middleware requiring method
validation, routing, and semantic enforcement. Critical for REST API
implementations, web frameworks, and HTTP protocol compliance checking.
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: HTTP METHOD DATA STRUCTURES
Note: =====================================================================

Type called "HttpMethod":
    name as String
    is_safe as Boolean
    is_idempotent as Boolean
    is_cacheable as Boolean
    allows_body as Boolean
    requires_body as Boolean
    response_can_have_body as Boolean
    defined_in_rfc as String
    common_use_cases as List[String]
    security_considerations as List[String]

Type called "MethodCapabilities":
    supported_methods as List[String]
    extension_methods as Dictionary[String, HttpMethod]
    version_support as Dictionary[String, List[String]]
    security_restrictions as Dictionary[String, List[String]]

Type called "MethodValidationResult":
    is_valid as Boolean
    method_name as String
    validation_errors as List[String]
    warnings as List[String]
    suggested_alternatives as List[String]

Note: =====================================================================
Note: STANDARD METHOD CONSTANTS
Note: =====================================================================

Process called "get_method_definitions" that returns Dictionary[String, HttpMethod]:
    Note: Get complete definitions of all standard HTTP methods
    Note: Includes GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, CONNECT, PATCH
    Note: TODO: Implement standard method definitions
    Throw Errors.NotImplemented with "Standard method definitions not yet implemented"

Process called "get_safe_methods" that returns List[String]:
    Note: Return list of HTTP methods that are considered safe (read-only)
    Note: Safe methods should not cause side effects on the server
    Note: TODO: Implement safe methods list
    Throw Errors.NotImplemented with "Safe methods list not yet implemented"

Process called "get_idempotent_methods" that returns List[String]:
    Note: Return list of HTTP methods that are idempotent
    Note: Multiple identical requests should have same effect as single request
    Note: TODO: Implement idempotent methods list
    Throw Errors.NotImplemented with "Idempotent methods list not yet implemented"

Process called "get_cacheable_methods" that returns List[String]:
    Note: Return list of HTTP methods whose responses can be cached
    Note: Responses to these methods may be stored and reused
    Note: TODO: Implement cacheable methods list
    Throw Errors.NotImplemented with "Cacheable methods list not yet implemented"

Process called "get_body_allowed_methods" that returns List[String]:
    Note: Return list of HTTP methods that allow request bodies
    Note: These methods can include content in the request message
    Note: TODO: Implement body-allowed methods list
    Throw Errors.NotImplemented with "Body-allowed methods list not yet implemented"

Note: =====================================================================
Note: METHOD VALIDATION OPERATIONS
Note: =====================================================================

Process called "validate_method_name" that takes method as String returns MethodValidationResult:
    Note: Validate HTTP method name format and compliance
    Note: Checks character restrictions and length limits
    Note: TODO: Implement method name validation
    Throw Errors.NotImplemented with "Method name validation not yet implemented"

Process called "is_standard_method" that takes method as String returns Boolean:
    Note: Check if method is one of the standard HTTP methods
    Note: Returns true for methods defined in HTTP specifications
    Note: TODO: Implement standard method check
    Throw Errors.NotImplemented with "Standard method check not yet implemented"

Process called "is_extension_method" that takes method as String returns Boolean:
    Note: Check if method is a registered extension method
    Note: Includes WebDAV methods and custom registered extensions
    Note: TODO: Implement extension method check
    Throw Errors.NotImplemented with "Extension method check not yet implemented"

Process called "validate_method_semantics" that takes method as String, has_body as Boolean, response_expected as Boolean returns List[String]:
    Note: Validate method usage against its semantic constraints
    Note: Checks body requirements, response expectations, safety constraints
    Note: TODO: Implement method semantics validation
    Throw Errors.NotImplemented with "Method semantics validation not yet implemented"

Process called "check_method_compatibility" that takes method as String, http_version as String returns Boolean:
    Note: Check if method is compatible with specific HTTP version
    Note: Some methods may not be supported in older HTTP versions
    Note: TODO: Implement method compatibility check
    Throw Errors.NotImplemented with "Method compatibility check not yet implemented"

Note: =====================================================================
Note: METHOD SEMANTIC OPERATIONS
Note: =====================================================================

Process called "is_method_safe" that takes method as String returns Boolean:
    Note: Check if HTTP method is semantically safe (read-only)
    Note: Safe methods should not modify server state
    Note: TODO: Implement method safety check
    Throw Errors.NotImplemented with "Method safety check not yet implemented"

Process called "is_method_idempotent" that takes method as String returns Boolean:
    Note: Check if HTTP method is idempotent
    Note: Multiple identical requests should have same effect
    Note: TODO: Implement method idempotency check
    Throw Errors.NotImplemented with "Method idempotency check not yet implemented"

Process called "is_method_cacheable" that takes method as String returns Boolean:
    Note: Check if responses to this method can be cached
    Note: Determines caching behavior for method responses
    Note: TODO: Implement method cacheability check
    Throw Errors.NotImplemented with "Method cacheability check not yet implemented"

Process called "method_allows_body" that takes method as String returns Boolean:
    Note: Check if method allows request body content
    Note: Some methods prohibit or discourage body content
    Note: TODO: Implement method body allowance check
    Throw Errors.NotImplemented with "Method body allowance check not yet implemented"

Process called "method_requires_body" that takes method as String returns Boolean:
    Note: Check if method requires request body content
    Note: Some methods like POST typically require body content
    Note: TODO: Implement method body requirement check
    Throw Errors.NotImplemented with "Method body requirement check not yet implemented"

Note: =====================================================================
Note: WEBDAV METHOD OPERATIONS
Note: =====================================================================

Process called "get_webdav_methods" that returns List[String]:
    Note: Return list of WebDAV extension methods
    Note: Includes PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK
    Note: TODO: Implement WebDAV methods list
    Throw Errors.NotImplemented with "WebDAV methods list not yet implemented"

Process called "validate_webdav_method" that takes method as String, depth_header as String returns List[String]:
    Note: Validate WebDAV method usage with required headers
    Note: Checks Depth header and other WebDAV-specific requirements
    Note: TODO: Implement WebDAV method validation
    Throw Errors.NotImplemented with "WebDAV method validation not yet implemented"

Process called "is_webdav_method" that takes method as String returns Boolean:
    Note: Check if method is a WebDAV extension method
    Note: Identifies methods defined in RFC 4918 and related specifications
    Note: TODO: Implement WebDAV method identification
    Throw Errors.NotImplemented with "WebDAV method identification not yet implemented"

Process called "get_webdav_method_requirements" that takes method as String returns Dictionary[String, String]:
    Note: Get specific requirements for WebDAV methods
    Note: Returns required headers, body format, and response expectations
    Note: TODO: Implement WebDAV method requirements
    Throw Errors.NotImplemented with "WebDAV method requirements not yet implemented"

Note: =====================================================================
Note: CUSTOM METHOD OPERATIONS
Note: =====================================================================

Process called "register_custom_method" that takes method_definition as HttpMethod returns Boolean:
    Note: Register custom HTTP method with specific semantics
    Note: Allows applications to define domain-specific methods
    Note: TODO: Implement custom method registration
    Throw Errors.NotImplemented with "Custom method registration not yet implemented"

Process called "unregister_custom_method" that takes method_name as String returns Boolean:
    Note: Remove previously registered custom method
    Note: Cleans up method definitions and associated metadata
    Note: TODO: Implement custom method unregistration
    Throw Errors.NotImplemented with "Custom method unregistration not yet implemented"

Process called "get_registered_methods" that returns List[String]:
    Note: Get list of all registered methods (standard + custom)
    Note: Includes built-in methods and application-registered extensions
    Note: TODO: Implement registered methods listing
    Throw Errors.NotImplemented with "Registered methods listing not yet implemented"

Process called "validate_custom_method_definition" that takes definition as HttpMethod returns List[String]:
    Note: Validate custom method definition for consistency and compliance
    Note: Checks semantic constraints and naming conventions
    Note: TODO: Implement custom method definition validation
    Throw Errors.NotImplemented with "Custom method definition validation not yet implemented"

Note: =====================================================================
Note: METHOD ROUTING OPERATIONS
Note: =====================================================================

Process called "match_method_pattern" that takes method as String, pattern as String returns Boolean:
    Note: Check if method matches routing pattern or wildcard
    Note: Supports method-based routing and filtering
    Note: TODO: Implement method pattern matching
    Throw Errors.NotImplemented with "Method pattern matching not yet implemented"

Process called "get_allowed_methods" that takes resource_path as String, capabilities as MethodCapabilities returns List[String]:
    Note: Get list of methods allowed for specific resource
    Note: Based on resource type, permissions, and server capabilities
    Note: TODO: Implement allowed methods determination
    Throw Errors.NotImplemented with "Allowed methods determination not yet implemented"

Process called "build_options_response" that takes allowed_methods as List[String] returns Dictionary[String, String]:
    Note: Build OPTIONS method response with allowed methods
    Note: Creates proper Allow header and CORS preflight response
    Note: TODO: Implement OPTIONS response building
    Throw Errors.NotImplemented with "OPTIONS response building not yet implemented"

Process called "check_method_authorization" that takes method as String, resource as String, credentials as String returns Boolean:
    Note: Check if method is authorized for resource with given credentials
    Note: Enforces method-specific authorization policies
    Note: TODO: Implement method authorization check
    Throw Errors.NotImplemented with "Method authorization check not yet implemented"

Note: =====================================================================
Note: METHOD SECURITY OPERATIONS
Note: =====================================================================

Process called "analyze_method_security_risks" that takes method as String, context as Dictionary[String, String] returns List[String]:
    Note: Analyze security risks associated with method usage
    Note: Identifies potential CSRF, injection, and abuse vectors
    Note: TODO: Implement method security risk analysis
    Throw Errors.NotImplemented with "Method security risk analysis not yet implemented"

Process called "enforce_method_restrictions" that takes method as String, source as String, restrictions as Dictionary[String, String] returns Boolean:
    Note: Enforce security restrictions on method usage
    Note: Applies rate limiting, origin restrictions, and access controls
    Note: TODO: Implement method restriction enforcement
    Throw Errors.NotImplemented with "Method restriction enforcement not yet implemented"

Process called "validate_csrf_protection" that takes method as String, headers as Dictionary[String, List[String]] returns Boolean:
    Note: Validate CSRF protection for state-changing methods
    Note: Checks for proper tokens, origin headers, and referrer validation
    Note: TODO: Implement CSRF protection validation
    Throw Errors.NotImplemented with "CSRF protection validation not yet implemented"

Process called "check_method_rate_limits" that takes method as String, client_id as String, time_window as Integer returns Boolean:
    Note: Check if method usage is within rate limits for client
    Note: Different methods may have different rate limiting policies
    Note: TODO: Implement method rate limit checking
    Throw Errors.NotImplemented with "Method rate limit checking not yet implemented"

Note: =====================================================================
Note: METHOD CONVERSION OPERATIONS
Note: =====================================================================

Process called "convert_method_to_code" that takes method as String returns Integer:
    Note: Convert HTTP method name to numeric code for efficient processing
    Note: Provides fast method comparison and switching
    Note: TODO: Implement method to code conversion
    Throw Errors.NotImplemented with "Method to code conversion not yet implemented"

Process called "convert_code_to_method" that takes code as Integer returns String:
    Note: Convert numeric method code back to method name
    Note: Reverse conversion for method code lookups
    Note: TODO: Implement code to method conversion
    Throw Errors.NotImplemented with "Code to method conversion not yet implemented"

Process called "normalize_method_case" that takes method as String returns String:
    Note: Normalize method name to standard case (typically uppercase)
    Note: HTTP method names are case-sensitive in HTTP/2 and HTTP/3
    Note: TODO: Implement method case normalization
    Throw Errors.NotImplemented with "Method case normalization not yet implemented"

Process called "compare_methods" that takes method1 as String, method2 as String returns Boolean:
    Note: Compare two method names for equality considering case sensitivity
    Note: Handles version-specific case sensitivity rules
    Note: TODO: Implement method comparison
    Throw Errors.NotImplemented with "Method comparison not yet implemented"

Note: =====================================================================
Note: METHOD DOCUMENTATION OPERATIONS
Note: =====================================================================

Process called "get_method_description" that takes method as String returns String:
    Note: Get human-readable description of HTTP method
    Note: Includes purpose, typical usage, and semantic constraints
    Note: TODO: Implement method description retrieval
    Throw Errors.NotImplemented with "Method description retrieval not yet implemented"

Process called "get_method_examples" that takes method as String returns List[String]:
    Note: Get example usage patterns for HTTP method
    Note: Shows common request/response patterns and use cases
    Note: TODO: Implement method examples retrieval
    Throw Errors.NotImplemented with "Method examples retrieval not yet implemented"

Process called "generate_method_documentation" that takes method as String returns Dictionary[String, String]:
    Note: Generate comprehensive documentation for HTTP method
    Note: Includes semantics, constraints, examples, and best practices
    Note: TODO: Implement method documentation generation
    Throw Errors.NotImplemented with "Method documentation generation not yet implemented"