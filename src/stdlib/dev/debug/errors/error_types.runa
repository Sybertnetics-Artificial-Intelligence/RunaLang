Note:
dev/debug/errors/error_types.runa
Standard Error Type Definitions

This module provides comprehensive standard error type definitions for the Runa
language ecosystem. It includes common error categories, domain-specific error
types, and a framework for creating custom error hierarchies.

Key features and capabilities:
- Standard error taxonomy (RuntimeError, TypeError, ValueError, IndexError)
- Domain-specific error types (MathError, IOError, NetworkError, SecurityError)
- Error categorization and classification systems
- Error code standardization and mapping
- Custom error type creation framework
- Error inheritance and polymorphism support
- Integration with core error handling infrastructure
- Performance-optimized error type checking
- Localization support for error type names
- Error type metadata and documentation
- Compatibility with exception handling standards
- Thread-safe error type registration
- Memory-efficient error type management
- Error type versioning for API evolution
- Comprehensive error type validation
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: RUNTIME ERROR TYPES
Note: =====================================================================

Type called "RuntimeError":
    base_error as Errors.BaseError     Note: Core error information and context
    runtime_context as Dictionary[String, String] Note: Runtime-specific debugging context
    execution_phase as String          Note: Phase of execution where error occurred
    resource_state as Dictionary[String, String] Note: Resource states at time of error

Type called "TypeError":
    base_error as Errors.BaseError     Note: Core error information and context
    expected_type as String            Note: Type that was expected by operation
    actual_type as String              Note: Actual type that was encountered
    type_conversion_attempted as Boolean Note: Whether automatic conversion was tried
    type_compatibility_info as Dictionary[String, String] Note: Type system compatibility details

Type called "ValueError":
    base_error as Errors.BaseError     Note: Core error information and context
    invalid_value as String            Note: String representation of invalid value
    expected_range as String           Note: Description of valid value range
    validation_rules as List[String]   Note: Validation rules that were violated
    suggested_values as List[String]   Note: Example values that would be valid

Type called "IndexError":
    base_error as Errors.BaseError     Note: Core error information and context
    index_value as Integer             Note: Index that caused the error
    collection_size as Integer         Note: Size of collection being accessed
    access_type as String              Note: Type of access (read, write, delete)
    valid_index_range as String        Note: Description of valid index range

Type called "MemoryError":
    base_error as Errors.BaseError     Note: Core error information and context
    requested_bytes as Integer         Note: Amount of memory requested
    available_bytes as Integer         Note: Amount of memory available
    memory_pool as String              Note: Memory pool or allocator involved
    allocation_type as String          Note: Type of allocation (heap, stack, static)

Note: =====================================================================
Note: MATHEMATICAL ERROR TYPES
Note: =====================================================================

Type called "MathError":
    base_error as Errors.BaseError     Note: Core error information and context
    operation as String                Note: Mathematical operation that failed
    operands as List[String]           Note: String representation of operands
    mathematical_context as Dictionary[String, String] Note: Mathematical domain context

Type called "DivisionByZeroError":
    math_error as MathError            Note: Base mathematical error information
    numerator as String                Note: Numerator value in division
    denominator_expression as String   Note: Expression that evaluated to zero
    suggested_handling as List[String] Note: Suggested ways to handle division by zero

Type called "GeometryError":
    math_error as MathError            Note: Base mathematical error information
    geometric_object as String         Note: Type of geometric object involved
    invalid_property as String         Note: Geometric property that is invalid
    geometric_constraints as List[String] Note: Constraints that were violated

Type called "AlgebraError":
    math_error as MathError            Note: Base mathematical error information
    algebraic_structure as String      Note: Algebraic structure involved
    operation_validity as String       Note: Why operation is not valid in structure
    algebraic_properties as Dictionary[String, String] Note: Relevant algebraic properties

Note: =====================================================================
Note: I/O AND SYSTEM ERROR TYPES
Note: =====================================================================

Type called "IOError":
    base_error as Errors.BaseError     Note: Core error information and context
    io_operation as String             Note: I/O operation that failed
    resource_path as String            Note: Path or identifier of I/O resource
    system_error_code as Integer       Note: Operating system error code
    resource_state as String           Note: State of resource when error occurred

Type called "FileError":
    io_error as IOError                Note: Base I/O error information
    file_path as String                Note: Full path to file that caused error
    file_permissions as String         Note: File permission flags
    file_size as Integer               Note: File size if available
    file_type as String                Note: Type of file (regular, directory, link)

Type called "NetworkError":
    io_error as IOError                Note: Base I/O error information
    network_operation as String        Note: Network operation that failed
    remote_address as String           Note: Remote address involved in operation
    network_protocol as String         Note: Network protocol being used
    connection_state as String         Note: State of network connection

Type called "SystemError":
    base_error as Errors.BaseError     Note: Core error information and context
    system_call as String              Note: System call that failed
    system_error_code as Integer       Note: Operating system specific error code
    system_context as Dictionary[String, String] Note: System state and context information
    platform_specific_info as Dictionary[String, String] Note: Platform-specific error details

Note: =====================================================================
Note: SECURITY AND VALIDATION ERROR TYPES
Note: =====================================================================

Type called "SecurityError":
    base_error as Errors.BaseError     Note: Core error information and context
    security_violation as String       Note: Type of security violation
    attempted_operation as String      Note: Operation that was attempted
    permission_required as String      Note: Permission or privilege required
    security_context as Dictionary[String, String] Note: Security context at time of error

Type called "ValidationError":
    base_error as Errors.BaseError     Note: Core error information and context
    validation_target as String        Note: What was being validated
    failed_constraints as List[String] Note: Validation constraints that failed
    validation_rules as Dictionary[String, String] Note: Complete set of validation rules
    suggested_corrections as List[String] Note: Suggested corrections to make input valid

Type called "AuthenticationError":
    security_error as SecurityError    Note: Base security error information
    authentication_method as String    Note: Authentication method that failed
    credential_type as String          Note: Type of credentials provided
    failure_reason as String           Note: Specific reason for authentication failure
    retry_allowed as Boolean           Note: Whether retry attempts are permitted

Type called "AuthorizationError":
    security_error as SecurityError    Note: Base security error information
    required_permission as String      Note: Specific permission that was required
    current_permissions as List[String] Note: Permissions currently available
    resource_being_accessed as String  Note: Resource that access was attempted on
    access_level_required as String    Note: Level of access that was required

Note: =====================================================================
Note: ERROR TYPE CREATION AND MANAGEMENT
Note: =====================================================================

Process called "create_runtime_error" that takes message as String, execution_phase as String, context as Dictionary[String, String] returns RuntimeError:
    Note: Create runtime error with execution context and debugging information
    Note: Automatically captures current runtime state and resource information
    Note: Integrates with runtime profiling and monitoring systems
    Note: Supports both synchronous and asynchronous execution contexts
    Note: TODO: Implement runtime error creation with context capture
    Throw Errors.NotImplemented with "Runtime error creation not yet implemented"

Process called "create_type_error" that takes expected_type as String, actual_type as String, operation as String returns TypeError:
    Note: Create type error with detailed type mismatch information
    Note: Provides suggestions for type conversion or correction
    Note: Integrates with type system for accurate type information
    Note: Supports generic types and complex type hierarchies
    Note: TODO: Implement type error creation with type system integration
    Throw Errors.NotImplemented with "Type error creation not yet implemented"

Process called "create_math_error" that takes operation as String, operands as List[String], context as String returns MathError:
    Note: Create mathematical error with operation and operand details
    Note: Provides mathematical context and suggested alternative approaches
    Note: Integrates with mathematical libraries for domain-specific guidance
    Note: Supports both scalar and vector mathematical operations
    Note: TODO: Implement mathematical error creation with domain context
    Throw Errors.NotImplemented with "Math error creation not yet implemented"

Process called "create_custom_error_type" that takes type_name as String, base_type as Errors.BaseError, properties as Dictionary[String, String] returns Dictionary[String, String]:
    Note: Create custom error type extending base error functionality
    Note: Supports inheritance hierarchies and polymorphic error handling
    Note: Enables domain-specific error taxonomies and classifications
    Note: Provides metadata and documentation for custom error types
    Note: TODO: Implement custom error type creation framework
    Throw Errors.NotImplemented with "Custom error type creation not yet implemented"

Note: =====================================================================
Note: ERROR TYPE CLASSIFICATION OPERATIONS
Note: =====================================================================

Process called "classify_error_type" that takes error as Errors.BaseError returns String:
    Note: Classify error into standard category based on error characteristics
    Note: Uses pattern matching and heuristics for automatic classification
    Note: Supports both rule-based and machine learning classification
    Note: Returns standardized error category names
    Note: TODO: Implement error classification algorithms
    Throw Errors.NotImplemented with "Error type classification not yet implemented"

Process called "get_error_category" that takes error_type as String returns String:
    Note: Get broad category for specific error type (runtime, math, io, security)
    Note: Enables high-level error filtering and routing decisions
    Note: Supports hierarchical categorization with multiple levels
    Note: Used by error handling frameworks for dispatch decisions
    Note: TODO: Implement error categorization lookup system
    Throw Errors.NotImplemented with "Error categorization not yet implemented"

Process called "check_error_inheritance" that takes error_type as String, base_type as String returns Boolean:
    Note: Check if error type inherits from or is compatible with base type
    Note: Supports polymorphic error handling and catch block matching
    Note: Handles multiple inheritance and interface compatibility
    Note: Used by exception handling runtime for type matching
    Note: TODO: Implement error type inheritance checking
    Throw Errors.NotImplemented with "Error inheritance checking not yet implemented"

Note: =====================================================================
Note: ERROR CODE AND MAPPING OPERATIONS
Note: =====================================================================

Process called "map_error_code" that takes error_code as String returns Dictionary[String, String]:
    Note: Map error code to detailed error information and documentation
    Note: Provides standardized error code descriptions and resolution guidance
    Note: Supports localization and internationalization of error information
    Note: Maintains backwards compatibility across error code versions
    Note: TODO: Implement error code mapping and documentation system
    Throw Errors.NotImplemented with "Error code mapping not yet implemented"

Process called "generate_error_code" that takes error_category as String, error_subcategory as String returns String:
    Note: Generate standardized error code for new error types
    Note: Ensures uniqueness and follows established naming conventions
    Note: Supports hierarchical error code structures
    Note: Integrates with error documentation and tracking systems
    Note: TODO: Implement error code generation algorithms
    Throw Errors.NotImplemented with "Error code generation not yet implemented"

Process called "validate_error_code" that takes error_code as String returns Boolean:
    Note: Validate error code format and structure compliance
    Note: Checks against established error code conventions and standards
    Note: Prevents duplicate error codes and naming conflicts
    Note: Supports version-specific error code validation rules
    Note: TODO: Implement error code validation logic
    Throw Errors.NotImplemented with "Error code validation not yet implemented"

Note: =====================================================================
Note: ERROR TYPE METADATA AND DOCUMENTATION
Note: =====================================================================

Process called "get_error_type_metadata" that takes error_type as String returns Dictionary[String, String]:
    Note: Get comprehensive metadata for error type including documentation
    Note: Provides usage guidelines, common causes, and resolution strategies
    Note: Includes version information and compatibility notes
    Note: Supports automated documentation generation
    Note: TODO: Implement error type metadata retrieval system
    Throw Errors.NotImplemented with "Error type metadata not yet implemented"

Process called "register_error_type" that takes error_type_definition as Dictionary[String, String] returns Boolean:
    Note: Register new error type with runtime error handling system
    Note: Validates error type definition and integration compatibility
    Note: Updates error type registries and documentation
    Note: Supports dynamic error type registration during runtime
    Note: TODO: Implement error type registration framework
    Throw Errors.NotImplemented with "Error type registration not yet implemented"