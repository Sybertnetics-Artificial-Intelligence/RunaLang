Note:
dev/interop/compat/web/aiohttp.runa
aiohttp Async HTTP Client/Server Compatibility Layer

This module provides compatibility layer for aiohttp asynchronous HTTP functionality in Runa.

Key features and capabilities:
- High-performance async HTTP client and server framework
- Native async/await support for concurrent request processing
- WebSocket support for bidirectional real-time communication
- Client session management with connection pooling and keep-alive
- Server application with middleware and routing capabilities
- Multipart data handling for file uploads and complex forms
- Streaming support for large requests and responses
- SSL/TLS support with custom certificates and verification
- Proxy support with authentication for client requests
- Cookie handling with domain and path validation
- Request and response hooks for custom processing
- Performance optimized with async I/O and connection reuse
- Integration with async context managers and coroutines
- Standards compliance with HTTP/1.1, HTTP/2, and WebSocket protocols
- Platform-specific optimizations for async I/O performance
- Security considerations for async web applications and clients
- Comprehensive error handling for async operations and network issues
- Memory management optimized for async request/response processing
- Thread-safe operations for concurrent async HTTP operations
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: DATA STRUCTURES - ASYNC CLIENT SESSION
Note: =====================================================================

Type called "AsyncClientSession":
    connector as ConnectionConnector            Note: Connection pool and management
    cookie_jar as AsyncCookieJar               Note: Session cookie storage and management
    session_headers as Dictionary[String, String] Note: Default headers for all requests
    skip_auto_headers as Array[String]         Note: Headers to skip from automatic addition
    auth_handler as AsyncAuthHandler           Note: Authentication configuration
    json_serializer as Function               Note: Custom JSON serialization function
    request_class as String                    Note: Custom request class name
    response_class as String                   Note: Custom response class name
    connector_owner as Boolean                 Note: Whether session owns the connector
    auto_decompress as Boolean                 Note: Automatic response decompression
    proxy_config as ProxyConfiguration        Note: Default proxy configuration
    trust_env as Boolean                       Note: Trust environment proxy settings
    requote_redirect_url as Boolean            Note: Requote URLs during redirects
    trace_configs as Array[TraceConfig]        Note: Request tracing configurations
    timeout as ClientTimeout                   Note: Default timeout configuration
    read_bufsize as Integer                    Note: Read buffer size for responses

Type called "AsyncClientRequest":
    method as String                           Note: HTTP method for the request
    url as String                              Note: Target URL for the request
    params as Dictionary[String, Array[String]] Note: URL query parameters
    data as Any                                Note: Request body data
    json_data as Dictionary[String, Any]       Note: JSON request payload
    cookies as Dictionary[String, String]      Note: Request cookies
    headers as Dictionary[String, String]      Note: Custom request headers
    skip_auto_headers as Array[String]         Note: Headers to skip for this request
    auth as AsyncAuthHandler                   Note: Request-specific authentication
    allow_redirects as Boolean                 Note: Whether to follow redirects
    max_redirects as Integer                   Note: Maximum redirects to follow
    compress as String                         Note: Compression method to use
    chunked as Boolean                         Note: Use chunked transfer encoding
    expect100 as Boolean                       Note: Send Expect: 100-continue header
    raise_for_status as Boolean                Note: Raise exception for HTTP errors
    read_until_eof as Boolean                  Note: Read response until EOF
    proxy as String                            Note: Proxy URL for this request
    proxy_auth as AsyncAuthHandler             Note: Proxy authentication
    timeout as ClientTimeout                   Note: Request timeout configuration
    verify_ssl as Boolean                      Note: SSL certificate verification
    fingerprint as String                      Note: SSL certificate fingerprint
    ssl_context as String                      Note: Custom SSL context
    proxy_headers as Dictionary[String, String] Note: Headers to send to proxy
    trace_request_ctx as Dictionary[String, Any] Note: Tracing context data

Note: =====================================================================
Note: DATA STRUCTURES - ASYNC CLIENT RESPONSE
Note: =====================================================================

Type called "AsyncClientResponse":
    version as String                          Note: HTTP version of response
    status as Integer                          Note: HTTP status code
    reason as String                           Note: HTTP status reason phrase
    method as String                           Note: HTTP method of original request
    url as String                              Note: URL of the response
    real_url as String                         Note: Real URL after redirects
    connection as AsyncConnection              Note: Connection used for request
    content as StreamReader                    Note: Response content stream reader
    cookies as AsyncCookieJar                  Note: Cookies received in response
    response_headers as Dictionary[String, String] Note: HTTP response headers
    raw_headers as Array[Array[String]]        Note: Raw header name-value pairs
    links as Dictionary[String, String]        Note: Parsed Link header values
    content_type as String                     Note: Response content type
    charset as String                          Note: Response character encoding
    redirect_history as Array[AsyncClientResponse] Note: Previous responses in redirect chain
    request_info as RequestInfo                Note: Information about original request
    closed as Boolean                          Note: Whether response is closed
    content_disposition as ContentDisposition  Note: Content-Disposition header data

Type called "StreamReader":
    total_bytes as Integer                     Note: Total bytes read from stream
    content_length as Integer                  Note: Expected content length
    exception as String                        Note: Exception encountered during reading
    eof as Boolean                             Note: Whether end of stream reached
    buffer as Array[Integer]                   Note: Internal buffer for stream data

Type called "RequestInfo":
    url as String                              Note: Request URL
    method as String                           Note: HTTP method used
    headers as Dictionary[String, String]      Note: Request headers sent
    real_url as String                         Note: Real URL after processing

Note: =====================================================================
Note: DATA STRUCTURES - ASYNC WEB SERVER
Note: =====================================================================

Type called "AsyncWebApplication":
    router as WebRouter                        Note: URL routing system
    middlewares as Array[Function]             Note: Application middleware stack
    debug_mode as Boolean                      Note: Debug mode enabled
    logger as String                           Note: Application logger name
    event_loop as String                       Note: Event loop reference
    client_max_size as Integer                 Note: Maximum client request size
    handler_args as Dictionary[String, Any]    Note: Default handler arguments
    handler_kwargs as Dictionary[String, Any]  Note: Default handler keyword arguments

Type called "AsyncWebRequest":
    version as String                          Note: HTTP version of request
    method as String                           Note: HTTP method
    url as String                              Note: Request URL
    scheme as String                           Note: URL scheme (http/https)
    host as String                             Note: Request host header
    port as Integer                            Note: Request port number
    path as String                             Note: URL path component
    path_info as String                        Note: Additional path information
    query_string as String                     Note: Raw query string
    query as Dictionary[String, Array[String]] Note: Parsed query parameters
    headers as Dictionary[String, String]      Note: Request headers
    raw_headers as Array[Array[String]]        Note: Raw header pairs
    cookies as Dictionary[String, String]      Note: Request cookies
    content as StreamReader                    Note: Request body stream reader
    body_exists as Boolean                     Note: Whether request has body
    can_read_body as Boolean                   Note: Whether body can be read
    content_type as String                     Note: Request content type
    content_length as Integer                  Note: Request content length
    charset as String                          Note: Request character encoding
    if_modified_since as String                Note: If-Modified-Since header
    if_unmodified_since as String              Note: If-Unmodified-Since header
    if_range as String                         Note: If-Range header
    keep_alive as Boolean                      Note: Connection keep-alive flag
    match_info as Dictionary[String, Any]      Note: Route matching information
    app as AsyncWebApplication                 Note: Application instance
    transport as String                        Note: Transport protocol information
    writer as String                           Note: Response writer reference
    protocol as String                         Note: Protocol handler reference
    rel_url as String                          Note: Relative URL
    is_ssl as Boolean                          Note: Whether connection uses SSL
    forwarded as Array[Dictionary[String, String]] Note: Forwarded header information
    secure as Boolean                          Note: Whether request is secure
    remote as String                           Note: Remote client address

Note: =====================================================================
Note: DATA STRUCTURES - SERVER RESPONSE AND ROUTING
Note: =====================================================================

Type called "AsyncWebResponse":
    body_data as Array[Integer]                Note: Response body bytes
    status as Integer                          Note: HTTP status code
    reason as String                           Note: HTTP status reason phrase
    text_content as String                     Note: Response body as text
    response_headers as Dictionary[String, String] Note: HTTP response headers
    content_type as String                     Note: Response content type
    content_length as Integer                  Note: Response content length
    charset as String                          Note: Response character encoding
    cookies as Dictionary[String, String]      Note: Response cookies to set
    compression as Boolean                     Note: Whether response is compressed
    chunked as Boolean                         Note: Use chunked transfer encoding
    enable_compression as Boolean              Note: Enable compression for response
    force_close as Boolean                     Note: Force connection close
    zlib_executor_size as Integer              Note: Zlib executor buffer size
    zlib_executor as String                    Note: Zlib executor reference

Type called "WebRouter":
    routes as Array[WebRoute]                  Note: Registered routes
    resources as Array[WebResource]            Note: URL resources and handlers

Type called "WebRoute":
    method as String                           Note: HTTP method for route
    path as String                             Note: URL path pattern
    handler as Function                        Note: Route handler function
    name as String                             Note: Route name for URL generation
    expect_handler as Function                 Note: Handler for Expect header

Type called "WebResource":
    name as String                             Note: Resource name
    canonical as String                        Note: Canonical URL pattern
    routes as Array[WebRoute]                  Note: Routes associated with resource

Type called "RouteTableDef":
    routes as Array[WebRoute]                  Note: Collection of route definitions

Note: =====================================================================
Note: DATA STRUCTURES - CONNECTION AND NETWORKING
Note: =====================================================================

Type called "ConnectionConnector":
    connection_limit as Integer                Note: Maximum concurrent connections
    limit_per_host as Integer                  Note: Connection limit per host
    ttl_dns_cache as Integer                   Note: DNS cache TTL in seconds
    use_dns_cache as Boolean                   Note: Enable DNS caching
    family as Integer                          Note: Socket family (IPv4/IPv6)
    ssl_context as String                      Note: SSL context for connections
    local_addr as String                       Note: Local address to bind
    resolver as String                         Note: DNS resolver to use
    keepalive_timeout as Float                 Note: Keep-alive timeout in seconds
    enable_cleanup_closed as Boolean           Note: Enable closed connection cleanup
    force_close as Boolean                     Note: Force connection close
    limit_open_connections as Integer          Note: Open connection limit

Type called "AsyncConnection":
    transport as String                        Note: Transport layer reference
    protocol as String                         Note: Protocol handler reference
    writer as String                           Note: Stream writer reference
    closed as Boolean                          Note: Whether connection is closed

Type called "ClientTimeout":
    total as Float                             Note: Total request timeout
    connect as Float                           Note: Connection timeout
    sock_connect as Float                      Note: Socket connection timeout
    sock_read as Float                         Note: Socket read timeout
    pool_queue_timeout as Float                Note: Connection pool queue timeout

Type called "TraceConfig":
    trace_config_ctx as Dictionary[String, Any] Note: Tracing context data
    on_request_start as Function               Note: Request start callback
    on_request_end as Function                 Note: Request end callback
    on_request_exception as Function           Note: Request exception callback
    on_request_redirect as Function            Note: Request redirect callback
    on_connection_queued_start as Function     Note: Connection queue start callback
    on_connection_queued_end as Function       Note: Connection queue end callback
    on_connection_create_start as Function     Note: Connection create start callback
    on_connection_create_end as Function       Note: Connection create end callback
    on_connection_reuseconn as Function        Note: Connection reuse callback
    on_dns_resolvehost_start as Function       Note: DNS resolution start callback
    on_dns_resolvehost_end as Function         Note: DNS resolution end callback
    on_dns_cache_hit as Function               Note: DNS cache hit callback
    on_dns_cache_miss as Function              Note: DNS cache miss callback

Note: =====================================================================
Note: DATA STRUCTURES - AUTHENTICATION AND COOKIES
Note: =====================================================================

Type called "AsyncAuthHandler":
    auth_type as String                        Note: Authentication scheme type
    login as String                            Note: Login username
    password as String                         Note: Login password
    encoding as String                         Note: Character encoding for credentials

Type called "AsyncCookieJar":
    unsafe as Boolean                          Note: Allow unsafe cookie operations
    quote_cookie as Boolean                    Note: Quote cookie values
    treat_as_secure_origin as Array[String]    Note: Origins to treat as secure

Type called "ContentDisposition":
    disposition_type as String                 Note: Disposition type (attachment, inline)
    parameters as Dictionary[String, String]   Note: Disposition parameters
    filename as String                         Note: Suggested filename
    name as String                             Note: Form field name

Type called "ProxyConfiguration":
    proxy_url as String                        Note: Proxy server URL
    proxy_auth as AsyncAuthHandler             Note: Proxy authentication
    proxy_headers as Dictionary[String, String] Note: Headers to send to proxy

Note: =====================================================================
Note: CORE OPERATIONS - ASYNC CLIENT OPERATIONS
Note: =====================================================================

Process called "create_client_session" that takes config as Dictionary[String, Any] returns AsyncClientSession:
    Note: Create async HTTP client session with connection pooling
    Note: Initializes connector, cookie jar, and default configuration
    Note: Time complexity: O(1), Space complexity: O(1) for session setup
    Note: Sets up connection pool and SSL context for secure connections
    Note: TODO: Implement client session creation with connection pooling and SSL setup
    Throw Errors.NotImplemented with "Async client session creation not yet implemented"

Process called "make_async_get_request" that takes session as AsyncClientSession, url as String, config as Dictionary[String, Any] returns AsyncClientResponse:
    Note: Perform asynchronous HTTP GET request using session
    Note: Handles URL parameter encoding and header processing
    Note: Supports request tracing and performance monitoring
    Note: Manages connection reuse and keep-alive connections
    Note: TODO: Implement async GET request with connection management and tracing
    Throw Errors.NotImplemented with "Async GET request not yet implemented"

Process called "make_async_post_request" that takes session as AsyncClientSession, url as String, data as Any, json_data as Dictionary[String, Any], config as Dictionary[String, Any] returns AsyncClientResponse:
    Note: Perform asynchronous HTTP POST request with data or JSON
    Note: Handles multipart form data and file upload encoding
    Note: Supports streaming request bodies for large data
    Note: Manages content-type headers and encoding automatically
    Note: TODO: Implement async POST request with multipart encoding and streaming
    Throw Errors.NotImplemented with "Async POST request not yet implemented"

Note: =====================================================================
Note: CORE OPERATIONS - ASYNC RESPONSE PROCESSING
Note: =====================================================================

Process called "read_response_text" that takes response as AsyncClientResponse, encoding as Optional[String] returns String:
    Note: Asynchronously read response body as text with encoding detection
    Note: Handles character encoding detection from headers and content
    Note: Supports streaming text reading for large responses
    Note: Provides fallback encoding strategies for malformed content
    Note: TODO: Implement async text reading with encoding detection and streaming
    Throw Errors.NotImplemented with "Async response text reading not yet implemented"

Process called "read_response_json" that takes response as AsyncClientResponse, encoding as Optional[String] returns Dictionary[String, Any]:
    Note: Asynchronously parse response body as JSON data
    Note: Handles JSON deserialization with custom decoder support
    Note: Supports streaming JSON parsing for large responses
    Note: Provides detailed error reporting for malformed JSON
    Note: TODO: Implement async JSON parsing with streaming and error handling
    Throw Errors.NotImplemented with "Async JSON response parsing not yet implemented"

Process called "read_response_bytes" that takes response as AsyncClientResponse returns Array[Integer]:
    Note: Asynchronously read complete response body as bytes
    Note: Handles large response bodies with memory-efficient streaming
    Note: Supports progress tracking and cancellation
    Note: Manages connection cleanup after reading
    Note: TODO: Implement async byte reading with streaming and progress tracking
    Throw Errors.NotImplemented with "Async response bytes reading not yet implemented"

Note: =====================================================================
Note: CORE OPERATIONS - WEB SERVER APPLICATION
Note: =====================================================================

Process called "create_web_application" that takes config as Dictionary[String, Any] returns AsyncWebApplication:
    Note: Create async web application with routing and middleware support
    Note: Initializes router, middleware stack, and application configuration
    Note: Sets up request handling pipeline and error processing
    Note: Configures logging, debugging, and performance monitoring
    Note: TODO: Implement web application creation with routing and middleware setup
    Throw Errors.NotImplemented with "Async web application creation not yet implemented"

Process called "add_web_route" that takes app as AsyncWebApplication, method as String, path as String, handler as Function, config as Dictionary[String, Any] returns WebRoute:
    Note: Add route to web application with path pattern matching
    Note: Handles URL pattern compilation and parameter extraction
    Note: Supports route middleware and request preprocessing
    Note: Provides route naming for URL generation
    Note: TODO: Implement route addition with pattern matching and middleware support
    Throw Errors.NotImplemented with "Web route addition not yet implemented"

Process called "run_web_server" that takes app as AsyncWebApplication, host as String, port as Integer, config as Dictionary[String, Any] returns Boolean:
    Note: Start async web server with request handling and connection management
    Note: Handles connection acceptance and request dispatching
    Note: Supports SSL/TLS termination and secure connections
    Note: Provides server monitoring and graceful shutdown
    Note: TODO: Implement web server with connection handling and SSL support
    Throw Errors.NotImplemented with "Async web server execution not yet implemented"

Note: =====================================================================
Note: SPECIALIZED OPERATIONS - WEB REQUEST AND RESPONSE HANDLING
Note: =====================================================================

Process called "process_web_request" that takes app as AsyncWebApplication, raw_request as Dictionary[String, Any] returns AsyncWebRequest:
    Note: Process incoming web request into structured request object
    Note: Handles request parsing, header validation, and body reading
    Note: Supports multipart form data and file upload processing
    Note: Provides request validation and security filtering
    Note: TODO: Implement web request processing with parsing and validation
    Throw Errors.NotImplemented with "Web request processing not yet implemented"

Process called "create_web_response" that takes content as Any, status as Integer, headers as Dictionary[String, String], content_type as String returns AsyncWebResponse:
    Note: Create web response with content, status, and headers
    Note: Handles response body serialization and encoding
    Note: Supports streaming responses and chunked transfer
    Note: Manages response headers and cookie setting
    Note: TODO: Implement web response creation with serialization and streaming
    Throw Errors.NotImplemented with "Web response creation not yet implemented"

Process called "create_json_web_response" that takes data as Dictionary[String, Any], status as Integer, headers as Dictionary[String, String] returns AsyncWebResponse:
    Note: Create JSON web response with automatic serialization
    Note: Handles JSON encoding with proper content type headers
    Note: Supports custom JSON encoders and date serialization
    Note: Provides error handling for non-serializable data
    Note: TODO: Implement JSON web response with serialization and error handling
    Throw Errors.NotImplemented with "JSON web response creation not yet implemented"

Note: =====================================================================
Note: SPECIALIZED OPERATIONS - WEBSOCKET SUPPORT
Note: =====================================================================

Type called "WebSocketResponse":
    websocket as WebSocketConnection           Note: WebSocket connection object
    protocols as Array[String]                 Note: Negotiated WebSocket protocols
    compress as Integer                        Note: Compression level for messages
    heartbeat as Float                         Note: Heartbeat interval in seconds
    max_msg_size as Integer                    Note: Maximum message size
    timeout as Float                           Note: WebSocket operation timeout
    autoclose as Boolean                       Note: Auto-close on protocol errors
    autoping as Boolean                        Note: Auto-ping for keep-alive

Type called "WebSocketConnection":
    connection_state as String                 Note: WebSocket connection state
    close_code as Integer                      Note: WebSocket close code
    close_reason as String                     Note: WebSocket close reason
    protocol as String                         Note: Negotiated WebSocket protocol
    extensions as Array[String]                Note: WebSocket extensions
    ping_interval as Float                     Note: Ping interval for keep-alive
    pong_timeout as Float                      Note: Pong timeout for responses

Process called "create_websocket_response" that takes request as AsyncWebRequest, protocols as Array[String], compress as Integer returns WebSocketResponse:
    Note: Create WebSocket response from HTTP upgrade request
    Note: Handles WebSocket handshake and protocol negotiation
    Note: Supports compression and extension negotiation
    Note: Provides connection state management and lifecycle handling
    Note: TODO: Implement WebSocket response creation with handshake and negotiation
    Throw Errors.NotImplemented with "WebSocket response creation not yet implemented"

Process called "handle_websocket_message" that takes websocket as WebSocketConnection, message_handler as Function returns Boolean:
    Note: Handle WebSocket message processing with custom handler
    Note: Supports text, binary, and control message types
    Note: Handles message framing and protocol compliance
    Note: Provides error handling and connection recovery
    Note: TODO: Implement WebSocket message handling with protocol compliance
    Throw Errors.NotImplemented with "WebSocket message handling not yet implemented"

Note: =====================================================================
Note: SPECIALIZED OPERATIONS - MULTIPART AND FILE HANDLING
Note: =====================================================================

Process called "create_multipart_writer" that takes boundary as Optional[String] returns Dictionary[String, Any]:
    Note: Create multipart form data writer for file uploads
    Note: Handles multipart boundary generation and content encoding
    Note: Supports nested multipart structures and custom headers
    Note: Provides efficient streaming for large file uploads
    Note: TODO: Implement multipart writer with streaming and boundary management
    Throw Errors.NotImplemented with "Multipart writer creation not yet implemented"

Process called "read_multipart_data" that takes request as AsyncWebRequest returns Array[Dictionary[String, Any]]:
    Note: Read and parse multipart form data from request
    Note: Handles file uploads and form field extraction
    Note: Supports streaming parsing for large multipart data
    Note: Provides field validation and content type detection
    Note: TODO: Implement multipart data parsing with streaming and validation
    Throw Errors.NotImplemented with "Multipart data reading not yet implemented"

Process called "stream_file_response" that takes file_path as String, chunk_size as Integer, headers as Dictionary[String, String] returns AsyncWebResponse:
    Note: Create streaming file response for efficient file serving
    Note: Handles range requests and partial content delivery
    Note: Supports content type detection and caching headers
    Note: Provides efficient memory usage for large files
    Note: TODO: Implement streaming file response with range support and caching
    Throw Errors.NotImplemented with "File streaming response not yet implemented"

Note: =====================================================================
Note: VALIDATION/UTILITY OPERATIONS - ASYNC VALIDATION
Note: =====================================================================

Process called "validate_async_request" that takes request as AsyncWebRequest, validation_rules as Dictionary[String, Any] returns Array[String]:
    Note: Validate async web request against specified rules
    Note: Checks request headers, body, and parameter constraints
    Note: Supports async validation with database or external service checks
    Note: Provides detailed validation error messages and field locations
    Note: TODO: Implement async request validation with external service integration
    Throw Errors.NotImplemented with "Async request validation not yet implemented"

Process called "validate_websocket_upgrade" that takes request as AsyncWebRequest returns Boolean:
    Note: Validate WebSocket upgrade request for protocol compliance
    Note: Checks required headers and protocol version compatibility
    Note: Validates WebSocket key and protocol negotiation
    Note: Provides detailed error reporting for invalid upgrade requests
    Note: TODO: Implement WebSocket upgrade validation with protocol checking
    Throw Errors.NotImplemented with "WebSocket upgrade validation not yet implemented"

Note: =====================================================================
Note: ADVANCED/OPTIMIZATION OPERATIONS - ASYNC PERFORMANCE
Note: =====================================================================

Process called "configure_connection_pool" that takes connector_config as Dictionary[String, Any] returns ConnectionConnector:
    Note: Configure async connection pool for optimal performance
    Note: Handles connection limits, timeouts, and keep-alive settings
    Note: Supports DNS caching and connection reuse strategies
    Note: Provides connection pool monitoring and statistics
    Note: TODO: Implement connection pool configuration with monitoring and optimization
    Throw Errors.NotImplemented with "Connection pool configuration not yet implemented"

Process called "optimize_async_performance" that takes session as AsyncClientSession, optimization_config as Dictionary[String, Any] returns AsyncClientSession:
    Note: Apply performance optimizations to async HTTP operations
    Note: Handles request pipelining and connection multiplexing
    Note: Supports adaptive timeout and retry strategies
    Note: Provides performance monitoring and bottleneck identification
    Note: TODO: Implement async performance optimization with monitoring and adaptive strategies
    Throw Errors.NotImplemented with "Async performance optimization not yet implemented"

Note: =====================================================================
Note: INTEGRATION/EXPORT OPERATIONS - AIOHTTP COMPATIBILITY
Note: =====================================================================

Process called "create_aiohttp_adapter" that takes runa_config as Dictionary[String, Any] returns Dictionary[String, Any]:
    Note: Create adapter for aiohttp library compatibility
    Note: Handles async API translation and coroutine management
    Note: Supports configuration conversion and feature mapping
    Note: Provides backward compatibility and migration support
    Note: TODO: Implement aiohttp adapter with async API translation and compatibility
    Throw Errors.NotImplemented with "aiohttp adapter creation not yet implemented"

Process called "export_aiohttp_compatible" that takes runa_session as AsyncClientSession, export_format as String, compatibility_options as Dictionary[String, Any] returns Dictionary[String, Any]:
    Note: Export Runa async HTTP client to aiohttp-compatible format
    Note: Maintains session configuration and connection pool settings
    Note: Supports WebSocket and multipart feature preservation
    Note: Handles async context manager and coroutine translation
    Note: TODO: Implement bidirectional aiohttp compatibility with async feature preservation
    Throw Errors.NotImplemented with "aiohttp compatibility export not yet implemented"