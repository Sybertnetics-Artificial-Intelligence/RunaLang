Note: Ray distributed computing compatibility layer for Runa
Note: Provides Ray-compatible distributed computing, machine learning, and reinforcement learning

Import "collections" as Collections
Import "errors" as Errors

Note: Ray core runtime and cluster types
Type called "RayContext":
    address as String
    dashboard_url as String
    python_version as String
    ray_version as String
    ray_commit as String
    protocol_version as String
    gcs_address as String
    log_dir as String
    temp_dir as String
    session_dir as String
    node_ip_address as String
    raylet_ip_address as String
    redis_address as String
    object_store_address as String
    raylet_socket_name as String
    webui_url as String
    session_name as String
    namespace as String

Type called "RayCluster":
    head_node_ip as String
    worker_nodes as Array[String]
    total_cpus as Integer
    total_memory as Integer
    total_gpus as Integer
    available_resources as Dictionary[String, Float]
    cluster_resources as Dictionary[String, Float]
    nodes as Array[RayNode]

Type called "RayNode":
    node_id as String
    node_ip as String
    alive as Boolean
    resources as Dictionary[String, Float]
    used_resources as Dictionary[String, Float]
    node_manager_address as String
    node_manager_hostname as String
    node_manager_port as Integer
    object_manager_port as Integer
    object_store_socket_name as String
    raylet_socket_name as String

Type called "RayObjectRef":
    object_id as String
    owner_address as String
    call_site as String

Type called "RayActorHandle":
    actor_id as String
    actor_handle_id as String
    language as String
    function_descriptor as Dictionary[String, Any]
    class_name as String
    actor_method_names as Array[String]
    checkpoint_interval as Integer
    actor_creation_dummy_object_id as String

Note: Ray task and remote function types
Type called "RayRemoteFunction":
    function_name as String
    module_name as String
    class_name as String
    function_hash as String
    max_calls as Integer
    max_retries as Integer
    retry_exceptions as Array[String]
    resources as Dictionary[String, Float]
    accelerator_type as String
    num_cpus as Float
    num_gpus as Float
    memory as Integer
    object_store_memory as Integer
    runtime_env as Dictionary[String, Any]

Type called "RayTask":
    task_id as String
    function_descriptor as Dictionary[String, String]
    args as Array[Any]
    arg_ids as Array[String]
    returns as Array[String]
    required_resources as Dictionary[String, Float]
    language as String
    job_id as String
    actor_id as String

Type called "RayJob":
    job_id as String
    driver_ip_address as String
    driver_pid as Integer
    start_time as Integer
    end_time as Integer
    config as Dictionary[String, Any]

Note: Ray dataset types
Type called "RayDataset":
    name as String
    num_blocks as Integer
    num_rows as Integer
    schema as Dictionary[String, String]
    input_files as Array[String]

Type called "RayDatasetStats":
    num_blocks as Integer
    num_rows as Integer
    total_bytes as Integer
    dataset_bytes as Integer
    dataset_uuid as String
    base_name as String

Note: Ray ML and Tune types
Type called "RayTuneConfig":
    name as String
    local_dir as String
    search_alg as String
    scheduler as String
    num_samples as Integer
    max_t as Integer
    grace_period as Integer
    reduction_factor as Integer
    metric as String
    mode as String
    config as Dictionary[String, Any]
    resources_per_trial as Dictionary[String, Float]
    trial_name_creator as Function
    trial_dirname_creator as Function
    log_to_file as Boolean
    resume as String
    server_port as Integer
    verbose as Integer
    progress_reporter as String
    checkpoint_score_attr as String
    checkpoint_freq as Integer
    checkpoint_at_end as Boolean
    sync_config as Dictionary[String, Any]
    export_formats as Array[String]
    max_failures as Integer
    fail_fast as Boolean
    restore as String
    queue_trials as Boolean
    reuse_actors as Boolean
    trial_executor as String
    raise_on_failed_trial as Boolean

Type called "RayTrialResult":
    trial_id as String
    experiment_id as String
    date as String
    timestamp as Integer
    time_this_iter_s as Float
    time_total_s as Float
    pid as Integer
    hostname as String
    node_ip as String
    config as Dictionary[String, Any]
    logdir as String
    iteration as Integer
    training_iteration as Integer
    episodes_total as Integer
    timesteps_total as Integer
    score as Float
    mean_accuracy as Float
    mean_loss as Float

Note: Initialize Ray
Process called "ray_init" that takes address as String and num_cpus as Integer and num_gpus as Integer and memory as Integer and object_store_memory as Integer and resources as Dictionary[String, Float] and local_mode as Boolean and ignore_reinit_error as Boolean and include_dashboard as Boolean and dashboard_host as String and dashboard_port as Integer and job_config as Dictionary[String, Any] and configure_logging as Boolean and logging_level as String and logging_format as String and log_to_driver as Boolean and namespace as String and runtime_env as Dictionary[String, Any] and storage as String returns RayContext:
    Throw Errors.NotImplemented with "Ray initialization not implemented"

Note: Shutdown Ray
Process called "ray_shutdown" that returns Boolean:
    Throw Errors.NotImplemented with "Ray shutdown not implemented"

Note: Create remote function
Process called "ray_remote" that takes func as Function and num_cpus as Float and num_gpus as Float and memory as Integer and object_store_memory as Integer and resources as Dictionary[String, Float] and accelerator_type as String and max_calls as Integer and max_retries as Integer and retry_exceptions as Array[String] and runtime_env as Dictionary[String, Any] returns RayRemoteFunction:
    Throw Errors.NotImplemented with "Ray remote function not implemented"

Note: Call remote function
Process called "ray_remote_call" that takes remote_func as RayRemoteFunction and args as Array[Any] and kwargs as Dictionary[String, Any] returns RayObjectRef:
    Throw Errors.NotImplemented with "Ray remote call not implemented"

Note: Get object from object store
Process called "ray_get" that takes object_refs as Array[RayObjectRef] and timeout as Float returns Array[Any]:
    Throw Errors.NotImplemented with "Ray get not implemented"

Note: Put object in object store
Process called "ray_put" that takes value as Any returns RayObjectRef:
    Throw Errors.NotImplemented with "Ray put not implemented"

Note: Wait for objects
Process called "ray_wait" that takes object_refs as Array[RayObjectRef] and num_returns as Integer and timeout as Float and fetch_local as Boolean returns Array[Array[RayObjectRef]]:
    Throw Errors.NotImplemented with "Ray wait not implemented"

Note: Create actor
Process called "ray_actor" that takes cls as String and args as Array[Any] and kwargs as Dictionary[String, Any] and num_cpus as Float and num_gpus as Float and memory as Integer and object_store_memory as Integer and resources as Dictionary[String, Float] and accelerator_type as String and max_restarts as Integer and max_task_retries as Integer and name as String and namespace as String and lifetime as String and runtime_env as Dictionary[String, Any] returns RayActorHandle:
    Throw Errors.NotImplemented with "Ray actor creation not implemented"

Note: Kill actor
Process called "ray_kill" that takes actor as RayActorHandle and no_restart as Boolean returns Boolean:
    Throw Errors.NotImplemented with "Ray actor kill not implemented"

Note: Get cluster resources
Process called "ray_cluster_resources" that returns Dictionary[String, Float]:
    Throw Errors.NotImplemented with "Ray cluster resources not implemented"

Note: Get available resources
Process called "ray_available_resources" that returns Dictionary[String, Float]:
    Throw Errors.NotImplemented with "Ray available resources not implemented"

Note: Get cluster nodes
Process called "ray_nodes" that returns Array[RayNode]:
    Throw Errors.NotImplemented with "Ray cluster nodes not implemented"

Note: Create dataset from files
Process called "ray_dataset_read_parquet" that takes paths as Array[String] and filesystem as String and columns as Array[String] and parallelism as Integer and ray_remote_args as Dictionary[String, Any] returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset Parquet reading not implemented"

Note: Create dataset from CSV
Process called "ray_dataset_read_csv" that takes paths as Array[String] and filesystem as String and parallelism as Integer and ray_remote_args as Dictionary[String, Any] and read_options as Dictionary[String, Any] returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset CSV reading not implemented"

Note: Create dataset from JSON
Process called "ray_dataset_read_json" that takes paths as Array[String] and filesystem as String and parallelism as Integer and ray_remote_args as Dictionary[String, Any] returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset JSON reading not implemented"

Note: Create dataset from range
Process called "ray_dataset_range" that takes n as Integer and parallelism as Integer returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset range not implemented"

Note: Map dataset
Process called "ray_dataset_map" that takes dataset as RayDataset and fn as Function and compute as String and num_cpus as Float and num_gpus as Float returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset map not implemented"

Note: Filter dataset
Process called "ray_dataset_filter" that takes dataset as RayDataset and fn as Function and compute as String returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset filter not implemented"

Note: Group dataset
Process called "ray_dataset_groupby" that takes dataset as RayDataset and key as Function returns Dictionary[String, RayDataset]:
    Throw Errors.NotImplemented with "Ray dataset groupby not implemented"

Note: Sort dataset
Process called "ray_dataset_sort" that takes dataset as RayDataset and key as Function and descending as Boolean returns RayDataset:
    Throw Errors.NotImplemented with "Ray dataset sort not implemented"

Note: Collect dataset
Process called "ray_dataset_take" that takes dataset as RayDataset and limit as Integer returns Array[Any]:
    Throw Errors.NotImplemented with "Ray dataset take not implemented"

Note: Write dataset to files
Process called "ray_dataset_write_parquet" that takes dataset as RayDataset and path as String and filesystem as String and try_create_dir as Boolean and arrow_open_stream_args as Dictionary[String, Any] returns Boolean:
    Throw Errors.NotImplemented with "Ray dataset Parquet writing not implemented"

Note: Run Tune experiment
Process called "ray_tune_run" that takes trainable as Function and config as RayTuneConfig and stop as Dictionary[String, Any] and search_alg as String and scheduler as String and num_samples as Integer and resources_per_trial as Dictionary[String, Float] and local_dir as String and name as String and resume as String and sync_config as Dictionary[String, Any] and trial_name_creator as Function and trial_dirname_creator as Function and log_to_file as Boolean and checkpoint_freq as Integer and checkpoint_at_end as Boolean and verbose as Integer and progress_reporter as String and max_failures as Integer and fail_fast as Boolean and restore as String and server_port as Integer and with_server as Boolean and upload_dir as String and export_formats as Array[String] and max_concurrent_trials as Integer and metric as String and mode as String and callbacks as Array[Function] and raise_on_failed_trial as Boolean and queue_trials as Boolean and reuse_actors as Boolean and trial_executor as String and chdir_to_trial_dir as Boolean returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray Tune experiment not implemented"

Note: Create hyperparameter search space
Process called "ray_tune_choice" that takes categories as Array[Any] returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray Tune choice not implemented"

Note: Create uniform distribution
Process called "ray_tune_uniform" that takes lower as Float and upper as Float returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray Tune uniform not implemented"

Note: Create log uniform distribution
Process called "ray_tune_loguniform" that takes lower as Float and upper as Float and base as Float returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray Tune loguniform not implemented"

Note: Create grid search
Process called "ray_tune_grid_search" that takes values as Array[Any] returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray Tune grid search not implemented"

Note: Report training results
Process called "ray_tune_report" that takes metrics as Dictionary[String, Float] and checkpoint as String returns Boolean:
    Throw Errors.NotImplemented with "Ray Tune report not implemented"

Note: Create Serve deployment
Process called "ray_serve_deployment" that takes func as Function and name as String and version as String and num_replicas as Integer and init_args as Array[Any] and init_kwargs as Dictionary[String, Any] and ray_actor_options as Dictionary[String, Any] and user_config as Dictionary[String, Any] and max_concurrent_queries as Integer and autoscaling_config as Dictionary[String, Any] and graceful_shutdown_wait_loop_s as Float and graceful_shutdown_timeout_s as Float and health_check_period_s as Float and health_check_timeout_s as Float returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray Serve deployment not implemented"

Note: Start Serve
Process called "ray_serve_start" that takes detached as Boolean and http_options as Dictionary[String, Any] and dedicated_cpu as Boolean returns Boolean:
    Throw Errors.NotImplemented with "Ray Serve start not implemented"

Note: Deploy Serve application
Process called "ray_serve_run" that takes target as String and config_file as String and working_dir as String returns Boolean:
    Throw Errors.NotImplemented with "Ray Serve run not implemented"

Note: Get Ray version
Process called "ray_version" that returns String:
    Throw Errors.NotImplemented with "Ray version not implemented"

Note: Get Ray status
Process called "ray_status" that returns Dictionary[String, Any]:
    Throw Errors.NotImplemented with "Ray status not implemented"