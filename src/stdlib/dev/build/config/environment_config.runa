Note:
dev/build/config/environment_config.runa
Environment Variable Configuration System

This module provides comprehensive environment variable configuration management for the Runa build system.

Key features and capabilities:
- Environment variable to configuration mapping with type conversion
- Prefix-based environment variable organization and discovery
- Schema-driven environment variable validation and documentation
- Type-safe conversion from strings to various data types
- Required variable validation with detailed error reporting
- Default value handling and fallback mechanisms
- Array and complex type parsing from environment strings
- Documentation generation for environment configuration
- Integration with existing configuration systems
- Case-sensitive and case-insensitive variable handling
:End Note

Import "collections" as Collections
Import "os" as OS
Import "errors" as Errors
Import "strings" as Strings

Note: =====================================================================
Note: DATA STRUCTURES/TYPES
Note: =====================================================================

Type called "EnvVarMapping":
    env_var_name as String              Note: Full environment variable name
    config_key as String                Note: Target configuration key path
    data_type as String                 Note: Expected type: string, integer, float, boolean, array
    default_value as String             Note: Default value if not set
    required as Boolean                 Note: Whether this variable must be present
    description as String               Note: Human-readable description for documentation
    validation_pattern as String        Note: Optional regex pattern for validation
    allowed_values as List[String]      Note: Optional list of allowed values

Type called "EnvConfigSchema":
    prefix as String                    Note: Common prefix for environment variables
    mappings as List[EnvVarMapping]     Note: List of environment variable mappings
    separator as String                 Note: Separator for nested keys (e.g., "__" for MY_APP__DB__HOST)
    case_sensitive as Boolean           Note: Whether variable names are case-sensitive
    allow_unknown as Boolean            Note: Whether to allow unknown prefixed variables
    strip_prefix as Boolean             Note: Whether to strip prefix from config keys

Type called "EnvConfigResult":
    config_data as Dictionary[String, Any] Note: Parsed configuration data
    loaded_vars as Dictionary[String, String] Note: Successfully loaded environment variables
    missing_required as List[String]    Note: Required variables that were not found
    conversion_errors as List[String]   Note: Errors encountered during type conversion
    unknown_vars as List[String]        Note: Unknown prefixed variables found
    warnings as List[String]            Note: Non-critical warnings during loading

Type called "EnvironmentConfigLoader":
    schema as EnvConfigSchema           Note: Configuration schema for environment mapping
    current_environment as Dictionary[String, String] Note: Current environment variables
    type_converters as Dictionary[String, Function] Note: Type conversion functions
    cached_result as EnvConfigResult    Note: Cached loading result for performance

Note: =====================================================================
Note: CORE OPERATIONS
Note: =====================================================================

Process called "create_env_config_loader" that takes schema as EnvConfigSchema returns EnvironmentConfigLoader:
    Note: Creates a new environment configuration loader with specified schema
    Note: Initializes type converters and loads current environment state
    Note: Time complexity: O(n) where n is number of environment variables
    
    Let loader be EnvironmentConfigLoader
    Set loader.schema to schema
    Set loader.current_environment to OS.get_all_environment_variables()
    Set loader.type_converters to Collections.create_dictionary()
    
    Note: Initialize built-in type converters
    Collections.set_dictionary_value(loader.type_converters, "string", convert_to_string)
    Collections.set_dictionary_value(loader.type_converters, "integer", convert_to_integer)
    Collections.set_dictionary_value(loader.type_converters, "float", convert_to_float)
    Collections.set_dictionary_value(loader.type_converters, "boolean", convert_to_boolean)
    Collections.set_dictionary_value(loader.type_converters, "array", convert_to_array)
    
    Note: Initialize empty cached result
    Set loader.cached_result to create_empty_env_result()
    
    Return loader

Process called "load_env_config" that takes loader as EnvironmentConfigLoader returns EnvConfigResult:
    Note: Loads configuration from environment variables using the schema
    Note: Performs type conversion and validation of all mapped variables
    Note: Returns comprehensive result with data, errors, and warnings
    
    Let result be create_empty_env_result()
    
    Note: Process each mapping in the schema
    For Each mapping in loader.schema.mappings:
        Let env_value be get_env_var_with_case_handling(loader, mapping.env_var_name)
        
        Note: Handle missing variables
        If Strings.is_empty(env_value):
            If mapping.required:
                Collections.add_to_list(result.missing_required, mapping.env_var_name)
            Otherwise If Not Strings.is_empty(mapping.default_value):
                Set env_value to mapping.default_value
                Collections.add_to_list(result.warnings, "Using default value for " + mapping.env_var_name)
            Otherwise:
                Continue
        
        Note: Record the loaded variable
        Collections.set_dictionary_value(result.loaded_vars, mapping.env_var_name, env_value)
        
        Note: Validate against allowed values if specified
        If Collections.get_list_size(mapping.allowed_values) > 0:
            If Not Collections.list_contains(mapping.allowed_values, env_value):
                Collections.add_to_list(result.conversion_errors, 
                    mapping.env_var_name + ": value '" + env_value + "' not in allowed values")
                Continue
        
        Note: Validate against pattern if specified
        If Not Strings.is_empty(mapping.validation_pattern):
            If Not Strings.matches_pattern(env_value, mapping.validation_pattern):
                Collections.add_to_list(result.conversion_errors,
                    mapping.env_var_name + ": value does not match required pattern")
                Continue
        
        Note: Convert to target type
        Try:
            Let converted_value be convert_env_value(env_value, mapping.data_type)
            set_nested_config_value(result.config_data, mapping.config_key, converted_value)
        Catch conversion_error:
            Collections.add_to_list(result.conversion_errors, 
                mapping.env_var_name + ": " + conversion_error.message)
    
    Note: Load unknown prefixed variables if allowed
    If loader.schema.allow_unknown:
        Let unknown_vars be find_unknown_prefixed_vars(loader)
        For Each unknown_var in unknown_vars:
            Collections.add_to_list(result.unknown_vars, unknown_var.key)
            Collections.set_dictionary_value(result.config_data, unknown_var.config_key, unknown_var.value)
    
    Note: Cache the result for performance
    Set loader.cached_result to result
    
    Return result

Process called "get_env_var" that takes name as String, default_value as String returns String:
    Note: Retrieves environment variable with fallback to default value
    Note: Handles case sensitivity and provides consistent interface
    Note: Returns default value if variable is not set or empty
    
    Let env_value be OS.get_environment_variable(name)
    
    If Strings.is_empty(env_value):
        Return default_value
    
    Return env_value

Process called "convert_env_value" that takes value as String, target_type as String returns Any:
    Note: Converts string environment variable to typed value
    Note: Supports all common configuration data types
    Note: Throws conversion error if value cannot be converted
    
    If target_type = "string":
        Return value
    Otherwise If target_type = "integer":
        Return convert_to_integer(value)
    Otherwise If target_type = "float":
        Return convert_to_float(value)
    Otherwise If target_type = "boolean":
        Return convert_to_boolean(value)
    Otherwise If target_type = "array":
        Return convert_to_array(value)
    Otherwise:
        Throw Errors.InvalidType with "Unsupported target type: " + target_type

Process called "load_prefixed_vars" that takes prefix as String, separator as String returns Dictionary[String, String]:
    Note: Loads all environment variables with a specific prefix
    Note: Converts prefixed variables to nested configuration structure
    Note: Returns dictionary with configuration-style keys
    
    Let prefixed_vars be Collections.create_dictionary()
    Let all_env_vars be OS.get_all_environment_variables()
    
    For Each env_name in Collections.get_dictionary_keys(all_env_vars):
        If Strings.starts_with(env_name, prefix):
            Let env_value be Collections.get_dictionary_value(all_env_vars, env_name)
            Let config_key be convert_env_name_to_config_key(env_name, prefix, separator)
            Collections.set_dictionary_value(prefixed_vars, config_key, env_value)
    
    Return prefixed_vars

Note: =====================================================================
Note: SPECIALIZED OPERATIONS
Note: =====================================================================

Process called "validate_required_vars" that takes loader as EnvironmentConfigLoader returns List[String]:
    Note: Validates that all required environment variables are present
    Note: Returns list of missing required variables
    Note: Used for pre-flight validation before configuration loading
    
    Let missing_vars be Collections.create_list()
    
    For Each mapping in loader.schema.mappings:
        If mapping.required:
            Let env_value be get_env_var_with_case_handling(loader, mapping.env_var_name)
            If Strings.is_empty(env_value):
                Collections.add_to_list(missing_vars, mapping.env_var_name)
    
    Return missing_vars

Process called "generate_env_docs" that takes schema as EnvConfigSchema returns String:
    Note: Generates human-readable documentation for environment variables
    Note: Creates markdown-formatted documentation with descriptions and examples
    Note: Includes required status, types, and default values
    
    Let doc_builder be Strings.create_string_builder()
    
    Strings.append_line(doc_builder, "# Environment Configuration Variables")
    Strings.append_line(doc_builder, "")
    
    If Not Strings.is_empty(schema.prefix):
        Strings.append_line(doc_builder, "**Prefix:** `" + schema.prefix + "`")
        Strings.append_line(doc_builder, "")
    
    Strings.append_line(doc_builder, "| Variable | Type | Required | Default | Description |")
    Strings.append_line(doc_builder, "|----------|------|----------|---------|-------------|")
    
    For Each mapping in schema.mappings:
        Let required_text be "No"
        If mapping.required:
            Set required_text to "Yes"
        
        Let default_text be mapping.default_value
        If Strings.is_empty(default_text):
            Set default_text to "*(none)*"
        
        Strings.append_line(doc_builder, 
            "| `" + mapping.env_var_name + "` | " + mapping.data_type + " | " + 
            required_text + " | `" + default_text + "` | " + mapping.description + " |")
    
    Return Strings.build_string(doc_builder)

Process called "parse_env_array" that takes value as String, separator as String returns List[String]:
    Note: Parses array value from environment variable string
    Note: Supports custom separators and handles empty values
    Note: Trims whitespace from individual array elements
    
    If Strings.is_empty(value):
        Return Collections.create_list()
    
    Let array_separator be separator
    If Strings.is_empty(array_separator):
        Set array_separator to ","
    
    Let raw_elements be Strings.split(value, array_separator)
    Let parsed_elements be Collections.create_list()
    
    For Each element in raw_elements:
        Let trimmed_element be Strings.trim(element)
        If Not Strings.is_empty(trimmed_element):
            Collections.add_to_list(parsed_elements, trimmed_element)
    
    Return parsed_elements

Process called "parse_env_boolean" that takes value as String returns Boolean:
    Note: Parses boolean value from environment variable string
    Note: Supports multiple boolean representations (true/false, yes/no, 1/0)
    Note: Case-insensitive parsing with comprehensive value recognition
    
    Let normalized_value be Strings.to_lowercase(Strings.trim(value))
    
    Note: True values
    If normalized_value = "true" Or normalized_value = "yes" Or 
       normalized_value = "1" Or normalized_value = "on" Or 
       normalized_value = "enabled" Or normalized_value = "t" Or
       normalized_value = "y":
        Return True
    
    Note: False values
    If normalized_value = "false" Or normalized_value = "no" Or 
       normalized_value = "0" Or normalized_value = "off" Or 
       normalized_value = "disabled" Or normalized_value = "f" Or
       normalized_value = "n":
        Return False
    
    Note: Invalid boolean value
    Throw Errors.InvalidValue with "Cannot parse boolean value: " + value

Note: =====================================================================
Note: VALIDATION/UTILITY OPERATIONS
Note: =====================================================================

Process called "set_env_defaults" that takes loader as EnvironmentConfigLoader returns Boolean:
    Note: Sets default values for environment variables that are not currently set
    Note: Only sets defaults for non-required variables with default values
    Note: Returns success status of default setting operation
    
    Let defaults_set be 0
    
    For Each mapping in loader.schema.mappings:
        If Not mapping.required And Not Strings.is_empty(mapping.default_value):
            Let current_value be get_env_var_with_case_handling(loader, mapping.env_var_name)
            If Strings.is_empty(current_value):
                OS.set_environment_variable(mapping.env_var_name, mapping.default_value)
                Set defaults_set to defaults_set + 1
    
    Note: Update cached environment
    Set loader.current_environment to OS.get_all_environment_variables()
    
    Return defaults_set > 0

Process called "override_with_env" that takes base_config as Dictionary[String, Any], env_result as EnvConfigResult returns Dictionary[String, Any]:
    Note: Overrides base configuration with environment variable values
    Note: Environment variables take precedence over base configuration
    Note: Preserves structure and only overrides existing keys
    
    Let merged_config be Collections.copy_dictionary(base_config)
    
    Note: Apply environment overrides
    For Each config_key in Collections.get_dictionary_keys(env_result.config_data):
        Let env_value be Collections.get_dictionary_value(env_result.config_data, config_key)
        set_nested_config_value(merged_config, config_key, env_value)
    
    Return merged_config

Process called "export_to_env_format" that takes config as Dictionary[String, Any], prefix as String returns Dictionary[String, String]:
    Note: Exports configuration data to environment variable format
    Note: Flattens nested configuration to prefixed environment variables
    Note: Converts all values to strings suitable for environment variables
    
    Let env_vars be Collections.create_dictionary()
    
    Note: Flatten configuration to environment variables
    For Each key in Collections.get_dictionary_keys(config):
        Let value be Collections.get_dictionary_value(config, key)
        Let env_key be convert_config_key_to_env_name(key, prefix)
        Let env_value be convert_value_to_env_string(value)
        Collections.set_dictionary_value(env_vars, env_key, env_value)
    
    Return env_vars

Process called "get_env_var_with_case_handling" that takes loader as EnvironmentConfigLoader, name as String returns String:
    Note: Gets environment variable with case sensitivity handling
    Note: Respects schema case sensitivity settings
    Note: Returns empty string if variable not found
    
    If loader.schema.case_sensitive:
        If Collections.dictionary_has_key(loader.current_environment, name):
            Return Collections.get_dictionary_value(loader.current_environment, name)
    Otherwise:
        Note: Case-insensitive lookup
        Let lowercase_name be Strings.to_lowercase(name)
        For Each env_name in Collections.get_dictionary_keys(loader.current_environment):
            If Strings.to_lowercase(env_name) = lowercase_name:
                Return Collections.get_dictionary_value(loader.current_environment, env_name)
    
    Return ""

Note: =====================================================================
Note: ADVANCED/OPTIMIZATION OPERATIONS
Note: =====================================================================

Process called "create_empty_env_result" that takes nothing returns EnvConfigResult:
    Note: Creates an initialized empty environment configuration result
    Note: Used for consistent initialization across loading operations
    Note: Provides default empty values for all result fields
    
    Let result be EnvConfigResult
    Set result.config_data to Collections.create_dictionary()
    Set result.loaded_vars to Collections.create_dictionary()
    Set result.missing_required to Collections.create_list()
    Set result.conversion_errors to Collections.create_list()
    Set result.unknown_vars to Collections.create_list()
    Set result.warnings to Collections.create_list()
    
    Return result

Process called "convert_to_integer" that takes value as String returns Integer:
    Note: Converts string value to integer with error handling
    Note: Supports various integer formats and validates range
    Note: Throws conversion error for invalid integer strings
    
    Let trimmed_value be Strings.trim(value)
    
    If Strings.is_empty(trimmed_value):
        Throw Errors.InvalidValue with "Cannot convert empty string to integer"
    
    Try:
        Let integer_value be Strings.parse_integer(trimmed_value)
        Return integer_value
    Catch parse_error:
        Throw Errors.InvalidValue with "Cannot convert '" + value + "' to integer: " + parse_error.message

Process called "convert_to_float" that takes value as String returns Float:
    Note: Converts string value to floating point number
    Note: Handles scientific notation and various decimal formats
    Note: Provides comprehensive error messages for invalid formats
    
    Let trimmed_value be Strings.trim(value)
    
    If Strings.is_empty(trimmed_value):
        Throw Errors.InvalidValue with "Cannot convert empty string to float"
    
    Try:
        Let float_value be Strings.parse_float(trimmed_value)
        Return float_value
    Catch parse_error:
        Throw Errors.InvalidValue with "Cannot convert '" + value + "' to float: " + parse_error.message

Process called "convert_to_boolean" that takes value as String returns Boolean:
    Note: Converts string value to boolean using comprehensive parsing
    Note: Delegates to parse_env_boolean for consistent behavior
    Note: Provides clear error messages for invalid boolean values
    
    Return parse_env_boolean(value)

Process called "convert_to_array" that takes value as String returns List[String]:
    Note: Converts string value to array using default comma separator
    Note: Delegates to parse_env_array for consistent behavior
    Note: Returns empty list for empty input values
    
    Return parse_env_array(value, ",")

Process called "convert_to_string" that takes value as String returns String:
    Note: Identity conversion for string values
    Note: Provides consistent interface for type conversion system
    Note: Returns input value unchanged
    
    Return value

Note: =====================================================================
Note: INTEGRATION/EXPORT OPERATIONS
Note: =====================================================================

Process called "set_nested_config_value" that takes config as Dictionary[String, Any], key_path as String, value as Any returns Boolean:
    Note: Sets nested configuration value using dot notation key path
    Note: Creates intermediate dictionaries as needed for deep paths
    Note: Returns success status of the set operation
    
    Let path_parts be Strings.split(key_path, ".")
    Let current_dict be config
    Let parts_count be Collections.get_list_size(path_parts)
    
    Note: Navigate to parent of target key
    For i from 0 to parts_count - 2:
        Let part be Collections.get_list_item(path_parts, i)
        
        If Not Collections.dictionary_has_key(current_dict, part):
            Collections.set_dictionary_value(current_dict, part, Collections.create_dictionary())
        
        Set current_dict to Collections.get_dictionary_value(current_dict, part)
    
    Note: Set the final value
    Let final_key be Collections.get_list_item(path_parts, parts_count - 1)
    Collections.set_dictionary_value(current_dict, final_key, value)
    
    Return True

Process called "convert_env_name_to_config_key" that takes env_name as String, prefix as String, separator as String returns String:
    Note: Converts environment variable name to configuration key
    Note: Strips prefix and converts separators to dot notation
    Note: Handles case conversion and special character mapping
    
    Let config_key be env_name
    
    Note: Remove prefix if present
    If Strings.starts_with(config_key, prefix):
        Set config_key to Strings.substring(config_key, Strings.length(prefix))
        
        Note: Remove leading separator if present
        If Strings.starts_with(config_key, separator):
            Set config_key to Strings.substring(config_key, Strings.length(separator))
    
    Note: Convert separators to dots
    Set config_key to Strings.replace_all(config_key, separator, ".")
    
    Note: Convert to lowercase for consistency
    Set config_key to Strings.to_lowercase(config_key)
    
    Return config_key

Process called "convert_config_key_to_env_name" that takes config_key as String, prefix as String returns String:
    Note: Converts configuration key to environment variable name
    Note: Adds prefix and converts dots to underscores
    Note: Converts to uppercase following environment variable conventions
    
    Let env_name be Strings.to_uppercase(config_key)
    
    Note: Convert dots to underscores
    Set env_name to Strings.replace_all(env_name, ".", "_")
    
    Note: Add prefix if specified
    If Not Strings.is_empty(prefix):
        Set env_name to prefix + "_" + env_name
    
    Return env_name

Process called "convert_value_to_env_string" that takes value as Any returns String:
    Note: Converts configuration value to environment variable string
    Note: Handles all supported configuration types with appropriate formatting
    Note: Returns string representation suitable for environment variables
    
    If Collections.is_string(value):
        Return value
    Otherwise If Collections.is_integer(value) Or Collections.is_float(value):
        Return Strings.convert_to_string(value)
    Otherwise If Collections.is_boolean(value):
        If value:
            Return "true"
        Otherwise:
            Return "false"
    Otherwise If Collections.is_list(value):
        Let string_elements be Collections.create_list()
        For Each element in value:
            Collections.add_to_list(string_elements, Strings.convert_to_string(element))
        Return Strings.join(string_elements, ",")
    Otherwise:
        Return Strings.convert_to_string(value)