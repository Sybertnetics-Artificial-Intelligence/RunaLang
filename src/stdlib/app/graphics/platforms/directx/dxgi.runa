Note:
app/graphics/platforms/directx/dxgi.runa
DXGI Display Management

This module provides DirectX Graphics Infrastructure support including:
- Adapter enumeration and selection
- Output (monitor) enumeration
- Display mode enumeration
- Swap chain creation and management
- Fullscreen transitions
- Multi-adapter support
- HDR display support
- Variable refresh rate
- Desktop duplication API
- Performance monitoring
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: DXGI DATA STRUCTURES
Note: =====================================================================

Type called "DXGIFactory":
    handle as Integer
    version as String
    is_current as Boolean
    allows_tearing as Boolean
    supports_hdr as Boolean

Type called "DXGIAdapter":
    handle as Integer
    description as AdapterDesc
    outputs as List[DXGIOutput]
    video_memory as Integer
    system_memory as Integer
    shared_memory as Integer
    adapter_luid as Integer
    flags as List[String]

Type called "AdapterDesc":
    description as String
    vendor_id as Integer
    device_id as Integer
    subsys_id as Integer
    revision as Integer
    dedicated_video_memory as Integer
    dedicated_system_memory as Integer
    shared_system_memory as Integer
    luid as Integer

Type called "DXGIOutput":
    handle as Integer
    description as OutputDesc
    display_modes as List[DisplayMode]
    desktop_coordinates as Rectangle
    is_attached as Boolean
    rotation as String
    hdr_support as HDRMetadata

Type called "OutputDesc":
    device_name as String
    desktop_rect as Rectangle
    attached_to_desktop as Boolean
    rotation as String
    monitor_handle as Integer

Type called "DisplayMode":
    width as Integer
    height as Integer
    refresh_rate as Rational
    format as String
    scanline_ordering as String
    scaling as String
    stereo as Boolean

Type called "Rational":
    numerator as Integer
    denominator as Integer

Type called "Rectangle":
    left as Integer
    top as Integer
    right as Integer
    bottom as Integer

Type called "DXGISwapChain":
    handle as Integer
    buffers as List[Integer]
    current_buffer as Integer
    desc as SwapChainDesc
    fullscreen_desc as FullscreenDesc
    is_fullscreen as Boolean
    containing_output as Optional[DXGIOutput]

Type called "SwapChainDesc":
    width as Integer
    height as Integer
    format as String
    stereo as Boolean
    sample_count as Integer
    sample_quality as Integer
    buffer_usage as List[String]
    buffer_count as Integer
    scaling as String
    swap_effect as String
    alpha_mode as String
    flags as List[String]

Type called "FullscreenDesc":
    refresh_rate as Rational
    scanline_ordering as String
    scaling as String
    windowed as Boolean

Type called "HDRMetadata":
    red_primary as Tuple[Float, Float]
    green_primary as Tuple[Float, Float]
    blue_primary as Tuple[Float, Float]
    white_point as Tuple[Float, Float]
    max_luminance as Float
    min_luminance as Float
    max_content_light_level as Float
    max_frame_avg_light_level as Float

Note: =====================================================================
Note: FACTORY OPERATIONS
Note: =====================================================================

Process called "create_factory" that takes debug as Boolean returns DXGIFactory:
    Note: Creates DXGI factory
    Placeholder

Process called "create_factory2" that takes flags as List[String] returns DXGIFactory:
    Note: Creates DXGI factory 1.2+
    Placeholder

Process called "enumerate_adapters" that takes factory as DXGIFactory returns List[DXGIAdapter]:
    Note: Enumerates graphics adapters
    Placeholder

Process called "enumerate_warp_adapter" that takes factory as DXGIFactory returns DXGIAdapter:
    Note: Gets WARP software adapter
    Placeholder

Process called "is_current" that takes factory as DXGIFactory returns Boolean:
    Note: Checks if factory is current
    Placeholder

Process called "register_stereo_status_event" that takes factory as DXGIFactory, event as Integer returns Integer:
    Note: Registers for stereo status
    Placeholder

Note: =====================================================================
Note: ADAPTER OPERATIONS
Note: =====================================================================

Process called "get_adapter_desc" that takes adapter as DXGIAdapter returns AdapterDesc:
    Note: Gets adapter description
    Placeholder

Process called "enumerate_outputs" that takes adapter as DXGIAdapter returns List[DXGIOutput]:
    Note: Enumerates adapter outputs
    Placeholder

Process called "check_interface_support" that takes adapter as DXGIAdapter, interface_name as String returns Tuple[Boolean, Integer]:
    Note: Checks interface support
    Placeholder

Process called "get_adapter_by_luid" that takes factory as DXGIFactory, luid as Integer returns DXGIAdapter:
    Note: Gets adapter by LUID
    Placeholder

Process called "query_video_memory_info" that takes adapter as DXGIAdapter, node as Integer, segment as String returns Dictionary[String, Integer]:
    Note: Queries video memory info
    Placeholder

Note: =====================================================================
Note: OUTPUT OPERATIONS
Note: =====================================================================

Process called "get_output_desc" that takes output as DXGIOutput returns OutputDesc:
    Note: Gets output description
    Placeholder

Process called "get_display_mode_list" that takes output as DXGIOutput, format as String, flags as List[String] returns List[DisplayMode]:
    Note: Gets display modes
    Placeholder

Process called "find_closest_matching_mode" that takes output as DXGIOutput, mode as DisplayMode, device as Optional[Integer] returns DisplayMode:
    Note: Finds closest display mode
    Placeholder

Process called "wait_for_vblank" that takes output as DXGIOutput returns Nothing:
    Note: Waits for vertical blank
    Placeholder

Process called "get_gamma_control" that takes output as DXGIOutput returns Dictionary[String, List[Float]]:
    Note: Gets gamma control
    Placeholder

Process called "set_gamma_control" that takes output as DXGIOutput, gamma as Dictionary[String, List[Float]] returns Nothing:
    Note: Sets gamma control
    Placeholder

Process called "take_ownership" that takes output as DXGIOutput, device as Integer, exclusive as Boolean returns Nothing:
    Note: Takes output ownership
    Placeholder

Process called "release_ownership" that takes output as DXGIOutput returns Nothing:
    Note: Releases output ownership
    Placeholder

Note: =====================================================================
Note: SWAP CHAIN CREATION
Note: =====================================================================

Process called "create_swap_chain" that takes factory as DXGIFactory, device as Integer, desc as SwapChainDesc returns DXGISwapChain:
    Note: Creates swap chain
    Placeholder

Process called "create_swap_chain_for_hwnd" that takes factory as DXGIFactory, device as Integer, window as Integer, desc as SwapChainDesc, fullscreen_desc as Optional[FullscreenDesc], restrict_output as Optional[DXGIOutput] returns DXGISwapChain:
    Note: Creates swap chain for window
    Placeholder

Process called "create_swap_chain_for_composition" that takes factory as DXGIFactory, device as Integer, desc as SwapChainDesc returns DXGISwapChain:
    Note: Creates composition swap chain
    Placeholder

Process called "create_swap_chain_for_core_window" that takes factory as DXGIFactory, device as Integer, window as Integer, desc as SwapChainDesc, restrict_output as Optional[DXGIOutput] returns DXGISwapChain:
    Note: Creates UWP swap chain
    Placeholder

Note: =====================================================================
Note: SWAP CHAIN OPERATIONS
Note: =====================================================================

Process called "present" that takes swap_chain as DXGISwapChain, sync_interval as Integer, flags as List[String] returns Integer:
    Note: Presents frame
    Placeholder

Process called "present1" that takes swap_chain as DXGISwapChain, sync_interval as Integer, flags as List[String], params as Dictionary[String, Any] returns Integer:
    Note: Presents with parameters
    Placeholder

Process called "get_buffer" that takes swap_chain as DXGISwapChain, index as Integer returns Integer:
    Note: Gets swap chain buffer
    Placeholder

Process called "resize_buffers" that takes swap_chain as DXGISwapChain, buffer_count as Integer, width as Integer, height as Integer, format as String, flags as List[String] returns Nothing:
    Note: Resizes swap chain buffers
    Placeholder

Process called "resize_target" that takes swap_chain as DXGISwapChain, target as DisplayMode returns Nothing:
    Note: Resizes output target
    Placeholder

Process called "set_fullscreen_state" that takes swap_chain as DXGISwapChain, fullscreen as Boolean, target as Optional[DXGIOutput] returns Nothing:
    Note: Sets fullscreen state
    Placeholder

Process called "get_fullscreen_state" that takes swap_chain as DXGISwapChain returns Tuple[Boolean, Optional[DXGIOutput]]:
    Note: Gets fullscreen state
    Placeholder

Note: =====================================================================
Note: HDR SUPPORT
Note: =====================================================================

Process called "set_hdr_metadata" that takes swap_chain as DXGISwapChain, type as String, metadata as HDRMetadata returns Nothing:
    Note: Sets HDR metadata
    Placeholder

Process called "get_color_space_support" that takes swap_chain as DXGISwapChain, color_space as String returns Boolean:
    Note: Checks color space support
    Placeholder

Process called "set_color_space" that takes swap_chain as DXGISwapChain, color_space as String returns Nothing:
    Note: Sets color space
    Placeholder

Process called "check_hdr_support" that takes output as DXGIOutput returns Dictionary[String, Any]:
    Note: Checks HDR capabilities
    Placeholder

Note: =====================================================================
Note: VARIABLE REFRESH RATE
Note: =====================================================================

Process called "check_tearing_support" that takes factory as DXGIFactory returns Boolean:
    Note: Checks tearing support
    Placeholder

Process called "is_tearing_allowed" that takes swap_chain as DXGISwapChain returns Boolean:
    Note: Checks if tearing allowed
    Placeholder

Process called "set_maximum_frame_latency" that takes swap_chain as DXGISwapChain, latency as Integer returns Nothing:
    Note: Sets max frame latency
    Placeholder

Process called "get_frame_statistics" that takes swap_chain as DXGISwapChain returns Dictionary[String, Any]:
    Note: Gets frame statistics
    Placeholder

Note: =====================================================================
Note: DESKTOP DUPLICATION
Note: =====================================================================

Process called "duplicate_output" that takes output as DXGIOutput, device as Integer returns Integer:
    Note: Creates desktop duplication
    Placeholder

Process called "acquire_next_frame" that takes duplication as Integer, timeout as Integer returns Tuple[Dictionary[String, Any], Integer]:
    Note: Acquires next frame
    Placeholder

Process called "release_frame" that takes duplication as Integer returns Nothing:
    Note: Releases duplicated frame
    Placeholder

Process called "map_desktop_surface" that takes duplication as Integer returns Dictionary[String, Any]:
    Note: Maps desktop surface
    Placeholder

Process called "unmap_desktop_surface" that takes duplication as Integer returns Nothing:
    Note: Unmaps desktop surface
    Placeholder

Note: =====================================================================
Note: PERFORMANCE MONITORING
Note: =====================================================================

Process called "register_occlusion_status_event" that takes factory as DXGIFactory, event as Integer returns Integer:
    Note: Registers occlusion event
    Placeholder

Process called "unregister_occlusion_status" that takes factory as DXGIFactory, cookie as Integer returns Nothing:
    Note: Unregisters occlusion event
    Placeholder

Process called "get_last_present_count" that takes swap_chain as DXGISwapChain returns Integer:
    Note: Gets present count
    Placeholder

Process called "query_resource_residency" that takes device as Integer, resources as List[Integer] returns List[String]:
    Note: Queries resource residency
    Placeholder

Note: =====================================================================
Note: UTILITIES
Note: =====================================================================

Process called "make_window_association" that takes factory as DXGIFactory, window as Integer, flags as List[String] returns Nothing:
    Note: Associates window with factory
    Placeholder

Process called "get_shared_resource_adapter_luid" that takes handle as Integer returns Integer:
    Note: Gets shared resource LUID
    Placeholder

Process called "set_gpu_preference" that takes factory as DXGIFactory, preference as String returns Nothing:
    Note: Sets GPU preference
    Placeholder

Process called "get_debug_interface" that takes nothing returns Integer:
    Note: Gets debug interface
    Placeholder