Note:
app/graphics/platforms/opengl/shaders.runa
GLSL Shader Compilation and Management

This module provides comprehensive GLSL shader handling including:
- Shader compilation and linking
- GLSL source preprocessing
- Shader program management
- Uniform and attribute binding
- Shader storage buffer objects (SSBO)
- Compute shader dispatch
- Shader hot-reloading
- Shader caching and serialization
- SPIR-V support
- Shader reflection and introspection
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: SHADER DATA STRUCTURES
Note: =====================================================================

Type called "GLShader":
    id as Integer
    type as String
    source as String
    is_compiled as Boolean
    compile_log as String
    entry_point as String
    preprocessor_defines as Dictionary[String, String]
    include_paths as List[String]
    spirv_binary as Optional[List[Integer]]

Type called "GLProgram":
    id as Integer
    shaders as List[GLShader]
    is_linked as Boolean
    link_log as String
    uniforms as Dictionary[String, UniformInfo]
    attributes as Dictionary[String, AttributeInfo]
    uniform_blocks as Dictionary[String, UniformBlockInfo]
    storage_blocks as Dictionary[String, StorageBlockInfo]
    active_subroutines as Dictionary[String, Integer]

Type called "UniformInfo":
    location as Integer
    type as String
    size as Integer
    array_stride as Integer
    matrix_stride as Integer
    is_row_major as Boolean
    block_index as Integer
    offset as Integer

Type called "AttributeInfo":
    location as Integer
    type as String
    size as Integer
    normalized as Boolean
    stride as Integer
    offset as Integer

Type called "UniformBlockInfo":
    index as Integer
    binding as Integer
    size as Integer
    uniforms as List[String]
    layout as String

Type called "StorageBlockInfo":
    index as Integer
    binding as Integer
    size as Integer
    variables as List[String]
    access as String

Note: =====================================================================
Note: SHADER COMPILATION
Note: =====================================================================

Process called "create_shader" that takes type as String returns GLShader:
    Note: Creates a new shader object of specified type
    Placeholder

Process called "compile_shader" that takes shader as GLShader, source as String returns Boolean:
    Note: Compiles shader from GLSL source
    Placeholder

Process called "compile_shader_spirv" that takes shader as GLShader, spirv as List[Integer] returns Boolean:
    Note: Compiles shader from SPIR-V binary
    Placeholder

Process called "get_compile_log" that takes shader as GLShader returns String:
    Note: Returns shader compilation log
    Placeholder

Process called "delete_shader" that takes shader as GLShader returns Nothing:
    Note: Deletes a shader object
    Placeholder

Process called "preprocess_shader" that takes source as String, defines as Dictionary[String, String] returns String:
    Note: Preprocesses GLSL source with defines
    Placeholder

Note: =====================================================================
Note: PROGRAM LINKING
Note: =====================================================================

Process called "create_program" that takes nothing returns GLProgram:
    Note: Creates a new shader program
    Placeholder

Process called "attach_shader" that takes program as GLProgram, shader as GLShader returns Nothing:
    Note: Attaches a shader to a program
    Placeholder

Process called "link_program" that takes program as GLProgram returns Boolean:
    Note: Links attached shaders into program
    Placeholder

Process called "validate_program" that takes program as GLProgram returns Boolean:
    Note: Validates program for current state
    Placeholder

Process called "use_program" that takes program as GLProgram returns Nothing:
    Note: Makes program current for rendering
    Placeholder

Process called "delete_program" that takes program as GLProgram returns Nothing:
    Note: Deletes a shader program
    Placeholder

Process called "get_link_log" that takes program as GLProgram returns String:
    Note: Returns program linking log
    Placeholder

Note: =====================================================================
Note: UNIFORM MANAGEMENT
Note: =====================================================================

Process called "get_uniform_location" that takes program as GLProgram, name as String returns Integer:
    Note: Gets location of a uniform variable
    Placeholder

Process called "set_uniform_1f" that takes location as Integer, value as Float returns Nothing:
    Note: Sets a float uniform
    Placeholder

Process called "set_uniform_2f" that takes location as Integer, x as Float, y as Float returns Nothing:
    Note: Sets a vec2 uniform
    Placeholder

Process called "set_uniform_3f" that takes location as Integer, x as Float, y as Float, z as Float returns Nothing:
    Note: Sets a vec3 uniform
    Placeholder

Process called "set_uniform_4f" that takes location as Integer, x as Float, y as Float, z as Float, w as Float returns Nothing:
    Note: Sets a vec4 uniform
    Placeholder

Process called "set_uniform_matrix4f" that takes location as Integer, matrix as List[Float] returns Nothing:
    Note: Sets a 4x4 matrix uniform
    Placeholder

Process called "set_uniform_1i" that takes location as Integer, value as Integer returns Nothing:
    Note: Sets an integer uniform
    Placeholder

Process called "set_uniform_array" that takes location as Integer, values as List[Float] returns Nothing:
    Note: Sets an array uniform
    Placeholder

Note: =====================================================================
Note: ATTRIBUTE MANAGEMENT
Note: =====================================================================

Process called "get_attribute_location" that takes program as GLProgram, name as String returns Integer:
    Note: Gets location of an attribute
    Placeholder

Process called "bind_attribute_location" that takes program as GLProgram, index as Integer, name as String returns Nothing:
    Note: Binds attribute to specific location
    Placeholder

Process called "enable_vertex_attribute" that takes index as Integer returns Nothing:
    Note: Enables a vertex attribute array
    Placeholder

Process called "disable_vertex_attribute" that takes index as Integer returns Nothing:
    Note: Disables a vertex attribute array
    Placeholder

Process called "vertex_attribute_pointer" that takes index as Integer, size as Integer, type as String, normalized as Boolean, stride as Integer, offset as Integer returns Nothing:
    Note: Defines vertex attribute data format
    Placeholder

Note: =====================================================================
Note: UNIFORM BLOCKS
Note: =====================================================================

Process called "get_uniform_block_index" that takes program as GLProgram, name as String returns Integer:
    Note: Gets index of uniform block
    Placeholder

Process called "uniform_block_binding" that takes program as GLProgram, block_index as Integer, binding as Integer returns Nothing:
    Note: Sets binding point for uniform block
    Placeholder

Process called "get_uniform_block_size" that takes program as GLProgram, block_index as Integer returns Integer:
    Note: Gets size of uniform block
    Placeholder

Process called "get_active_uniform_block" that takes program as GLProgram, index as Integer returns UniformBlockInfo:
    Note: Gets information about uniform block
    Placeholder

Note: =====================================================================
Note: SHADER STORAGE BLOCKS
Note: =====================================================================

Process called "get_storage_block_index" that takes program as GLProgram, name as String returns Integer:
    Note: Gets index of shader storage block
    Placeholder

Process called "storage_block_binding" that takes program as GLProgram, block_index as Integer, binding as Integer returns Nothing:
    Note: Sets binding point for storage block
    Placeholder

Process called "get_storage_block_size" that takes program as GLProgram, block_index as Integer returns Integer:
    Note: Gets size of storage block
    Placeholder

Note: =====================================================================
Note: COMPUTE SHADERS
Note: =====================================================================

Process called "dispatch_compute" that takes x as Integer, y as Integer, z as Integer returns Nothing:
    Note: Dispatches compute shader work groups
    Placeholder

Process called "dispatch_compute_indirect" that takes buffer as Integer, offset as Integer returns Nothing:
    Note: Indirect compute dispatch from buffer
    Placeholder

Process called "get_compute_work_group_size" that takes program as GLProgram returns List[Integer]:
    Note: Gets compute shader work group size
    Placeholder

Process called "memory_barrier" that takes barriers as List[String] returns Nothing:
    Note: Inserts memory barrier for compute
    Placeholder

Note: =====================================================================
Note: SHADER REFLECTION
Note: =====================================================================

Process called "get_active_uniforms" that takes program as GLProgram returns Dictionary[String, UniformInfo]:
    Note: Gets all active uniforms in program
    Placeholder

Process called "get_active_attributes" that takes program as GLProgram returns Dictionary[String, AttributeInfo]:
    Note: Gets all active attributes in program
    Placeholder

Process called "get_program_resource" that takes program as GLProgram, interface as String, index as Integer returns Dictionary[String, Any]:
    Note: Gets program resource information
    Placeholder

Process called "get_program_binary" that takes program as GLProgram returns Tuple[List[Integer], Integer]:
    Note: Gets compiled program binary
    Placeholder

Process called "load_program_binary" that takes binary as List[Integer], format as Integer returns GLProgram:
    Note: Loads program from binary
    Placeholder

Note: =====================================================================
Note: SHADER UTILITIES
Note: =====================================================================

Process called "create_shader_from_file" that takes type as String, filepath as String returns GLShader:
    Note: Creates and compiles shader from file
    Placeholder

Process called "create_program_from_files" that takes vertex_path as String, fragment_path as String returns GLProgram:
    Note: Creates program from shader files
    Placeholder

Process called "hot_reload_shader" that takes program as GLProgram, filepath as String returns Boolean:
    Note: Hot-reloads shader from file
    Placeholder

Process called "validate_shader_cache" that takes cache_path as String returns Boolean:
    Note: Validates shader cache integrity
    Placeholder