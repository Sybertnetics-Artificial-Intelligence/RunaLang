Note:
app/graphics/platforms/web/webgpu.runa
WebGPU Integration

This module provides WebGPU graphics API integration including:
- Device and adapter management
- Command encoding and submission
- Pipeline creation (render and compute)
- Buffer and texture resources
- Bind groups and layouts
- Shader modules
- Render passes and bundles
- Compute passes
- Query and timestamp operations
- WebGPU validation and debugging
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: WEBGPU DATA STRUCTURES
Note: =====================================================================

Type called "GPUAdapter":
    handle as Integer
    name as String
    features as List[String]
    limits as GPULimits
    is_fallback_adapter as Boolean

Type called "GPUDevice":
    handle as Integer
    adapter as GPUAdapter
    features as List[String]
    limits as GPULimits
    queue as GPUQueue
    lost_promise as Integer

Type called "GPULimits":
    max_texture_dimension_1d as Integer
    max_texture_dimension_2d as Integer
    max_texture_dimension_3d as Integer
    max_texture_array_layers as Integer
    max_bind_groups as Integer
    max_dynamic_uniform_buffers_per_pipeline_layout as Integer
    max_dynamic_storage_buffers_per_pipeline_layout as Integer
    max_sampled_textures_per_shader_stage as Integer
    max_samplers_per_shader_stage as Integer
    max_storage_buffers_per_shader_stage as Integer
    max_storage_textures_per_shader_stage as Integer
    max_uniform_buffers_per_shader_stage as Integer
    max_uniform_buffer_binding_size as Integer
    max_storage_buffer_binding_size as Integer
    max_buffer_size as Integer
    max_vertex_buffers as Integer
    max_vertex_attributes as Integer
    max_vertex_buffer_array_stride as Integer
    max_compute_workgroup_size_x as Integer
    max_compute_workgroup_size_y as Integer
    max_compute_workgroup_size_z as Integer
    max_compute_invocations_per_workgroup as Integer
    max_compute_workgroups_per_dimension as Integer

Type called "GPUQueue":
    handle as Integer
    device as GPUDevice
    label as String

Type called "GPUBuffer":
    handle as Integer
    size as Integer
    usage as List[String]
    state as String
    label as String

Type called "GPUTexture":
    handle as Integer
    format as String
    dimension as String
    size as GPUExtent3D
    mip_level_count as Integer
    sample_count as Integer
    usage as List[String]
    label as String

Type called "GPUExtent3D":
    width as Integer
    height as Integer
    depth as Integer

Type called "GPUTextureView":
    handle as Integer
    texture as GPUTexture
    format as String
    dimension as String
    aspect as String
    base_mip_level as Integer
    mip_level_count as Integer
    base_array_layer as Integer
    array_layer_count as Integer
    label as String

Type called "GPURenderPipeline":
    handle as Integer
    layout as GPUPipelineLayout
    vertex as GPUVertexState
    primitive as GPUPrimitiveState
    depth_stencil as Optional[GPUDepthStencilState]
    multisample as GPUMultisampleState
    fragment as Optional[GPUFragmentState]
    label as String

Type called "GPUComputePipeline":
    handle as Integer
    layout as GPUPipelineLayout
    compute as GPUComputeStage
    label as String

Type called "GPUShaderModule":
    handle as Integer
    code as String
    source_map as Optional[String]
    label as String

Type called "GPUBindGroup":
    handle as Integer
    layout as GPUBindGroupLayout
    entries as List[GPUBindGroupEntry]
    label as String

Type called "GPUBindGroupLayout":
    handle as Integer
    entries as List[GPUBindGroupLayoutEntry]
    label as String

Type called "GPUPipelineLayout":
    handle as Integer
    bind_group_layouts as List[GPUBindGroupLayout]
    label as String

Type called "GPUCommandEncoder":
    handle as Integer
    device as GPUDevice
    label as String

Type called "GPURenderPassEncoder":
    handle as Integer
    command_encoder as GPUCommandEncoder
    label as String

Type called "GPUComputePassEncoder":
    handle as Integer
    command_encoder as GPUCommandEncoder
    label as String

Type called "GPUCommandBuffer":
    handle as Integer
    label as String

Type called "GPUSampler":
    handle as Integer
    descriptor as GPUSamplerDescriptor
    label as String

Type called "GPUSamplerDescriptor":
    address_mode_u as String
    address_mode_v as String
    address_mode_w as String
    mag_filter as String
    min_filter as String
    mipmap_filter as String
    lod_min_clamp as Float
    lod_max_clamp as Float
    compare as Optional[String]
    max_anisotropy as Integer

Type called "GPUVertexState":
    module as GPUShaderModule
    entry_point as String
    buffers as List[GPUVertexBufferLayout]

Type called "GPUVertexBufferLayout":
    array_stride as Integer
    step_mode as String
    attributes as List[GPUVertexAttribute]

Type called "GPUVertexAttribute":
    format as String
    offset as Integer
    shader_location as Integer

Type called "GPUPrimitiveState":
    topology as String
    strip_index_format as Optional[String]
    front_face as String
    cull_mode as String

Type called "GPUDepthStencilState":
    format as String
    depth_write_enabled as Boolean
    depth_compare as String
    stencil_front as GPUStencilFaceState
    stencil_back as GPUStencilFaceState
    stencil_read_mask as Integer
    stencil_write_mask as Integer
    depth_bias as Integer
    depth_bias_slope_scale as Float
    depth_bias_clamp as Float

Type called "GPUStencilFaceState":
    compare as String
    fail_op as String
    depth_fail_op as String
    pass_op as String

Type called "GPUMultisampleState":
    count as Integer
    mask as Integer
    alpha_to_coverage_enabled as Boolean

Type called "GPUFragmentState":
    module as GPUShaderModule
    entry_point as String
    targets as List[GPUColorTargetState]

Type called "GPUColorTargetState":
    format as String
    blend as Optional[GPUBlendState]
    write_mask as List[String]

Type called "GPUBlendState":
    color as GPUBlendComponent
    alpha as GPUBlendComponent

Type called "GPUBlendComponent":
    operation as String
    src_factor as String
    dst_factor as String

Type called "GPUComputeStage":
    module as GPUShaderModule
    entry_point as String

Type called "GPUBindGroupEntry":
    binding as Integer
    resource as Any

Type called "GPUBindGroupLayoutEntry":
    binding as Integer
    visibility as List[String]
    buffer as Optional[GPUBufferBindingLayout]
    sampler as Optional[GPUSamplerBindingLayout]
    texture as Optional[GPUTextureBindingLayout]
    storage_texture as Optional[GPUStorageTextureBindingLayout]

Type called "GPUBufferBindingLayout":
    type as String
    has_dynamic_offset as Boolean
    min_binding_size as Integer

Type called "GPUSamplerBindingLayout":
    type as String

Type called "GPUTextureBindingLayout":
    sample_type as String
    view_dimension as String
    multisampled as Boolean

Type called "GPUStorageTextureBindingLayout":
    access as String
    format as String
    view_dimension as String

Note: =====================================================================
Note: ADAPTER AND DEVICE
Note: =====================================================================

Process called "request_adapter" that takes options as Dictionary[String, Any] returns GPUAdapter:
    Note: Requests GPU adapter
    Placeholder

Process called "request_device" that takes adapter as GPUAdapter, descriptor as Dictionary[String, Any] returns GPUDevice:
    Note: Requests GPU device
    Placeholder

Process called "get_preferred_canvas_format" that takes adapter as GPUAdapter returns String:
    Note: Gets preferred format
    Placeholder

Process called "configure_canvas_context" that takes context as Integer, device as GPUDevice, format as String, usage as List[String], alpha_mode as String returns Nothing:
    Note: Configures canvas
    Placeholder

Process called "get_current_texture" that takes context as Integer returns GPUTexture:
    Note: Gets current texture
    Placeholder

Note: =====================================================================
Note: BUFFER OPERATIONS
Note: =====================================================================

Process called "create_buffer" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUBuffer:
    Note: Creates buffer
    Placeholder

Process called "map_async" that takes buffer as GPUBuffer, mode as List[String], offset as Integer, size as Integer returns Integer:
    Note: Maps buffer async
    Placeholder

Process called "get_mapped_range" that takes buffer as GPUBuffer, offset as Integer, size as Integer returns Integer:
    Note: Gets mapped range
    Placeholder

Process called "unmap" that takes buffer as GPUBuffer returns Nothing:
    Note: Unmaps buffer
    Placeholder

Process called "destroy_buffer" that takes buffer as GPUBuffer returns Nothing:
    Note: Destroys buffer
    Placeholder

Note: =====================================================================
Note: TEXTURE OPERATIONS
Note: =====================================================================

Process called "create_texture" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUTexture:
    Note: Creates texture
    Placeholder

Process called "create_texture_view" that takes texture as GPUTexture, descriptor as Dictionary[String, Any] returns GPUTextureView:
    Note: Creates texture view
    Placeholder

Process called "destroy_texture" that takes texture as GPUTexture returns Nothing:
    Note: Destroys texture
    Placeholder

Process called "create_sampler" that takes device as GPUDevice, descriptor as GPUSamplerDescriptor returns GPUSampler:
    Note: Creates sampler
    Placeholder

Note: =====================================================================
Note: SHADER MODULES
Note: =====================================================================

Process called "create_shader_module" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUShaderModule:
    Note: Creates shader module
    Placeholder

Process called "get_compilation_info" that takes module as GPUShaderModule returns Dictionary[String, Any]:
    Note: Gets compilation info
    Placeholder

Note: =====================================================================
Note: PIPELINE CREATION
Note: =====================================================================

Process called "create_render_pipeline" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPURenderPipeline:
    Note: Creates render pipeline
    Placeholder

Process called "create_render_pipeline_async" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns Integer:
    Note: Creates pipeline async
    Placeholder

Process called "create_compute_pipeline" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUComputePipeline:
    Note: Creates compute pipeline
    Placeholder

Process called "create_compute_pipeline_async" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns Integer:
    Note: Creates pipeline async
    Placeholder

Note: =====================================================================
Note: BIND GROUPS
Note: =====================================================================

Process called "create_bind_group_layout" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUBindGroupLayout:
    Note: Creates bind group layout
    Placeholder

Process called "create_bind_group" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUBindGroup:
    Note: Creates bind group
    Placeholder

Process called "create_pipeline_layout" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUPipelineLayout:
    Note: Creates pipeline layout
    Placeholder

Note: =====================================================================
Note: COMMAND ENCODING
Note: =====================================================================

Process called "create_command_encoder" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns GPUCommandEncoder:
    Note: Creates command encoder
    Placeholder

Process called "begin_render_pass" that takes encoder as GPUCommandEncoder, descriptor as Dictionary[String, Any] returns GPURenderPassEncoder:
    Note: Begins render pass
    Placeholder

Process called "begin_compute_pass" that takes encoder as GPUCommandEncoder, descriptor as Dictionary[String, Any] returns GPUComputePassEncoder:
    Note: Begins compute pass
    Placeholder

Process called "copy_buffer_to_buffer" that takes encoder as GPUCommandEncoder, source as GPUBuffer, source_offset as Integer, destination as GPUBuffer, destination_offset as Integer, size as Integer returns Nothing:
    Note: Copies buffer to buffer
    Placeholder

Process called "copy_buffer_to_texture" that takes encoder as GPUCommandEncoder, source as Dictionary[String, Any], destination as Dictionary[String, Any], copy_size as GPUExtent3D returns Nothing:
    Note: Copies buffer to texture
    Placeholder

Process called "copy_texture_to_buffer" that takes encoder as GPUCommandEncoder, source as Dictionary[String, Any], destination as Dictionary[String, Any], copy_size as GPUExtent3D returns Nothing:
    Note: Copies texture to buffer
    Placeholder

Process called "copy_texture_to_texture" that takes encoder as GPUCommandEncoder, source as Dictionary[String, Any], destination as Dictionary[String, Any], copy_size as GPUExtent3D returns Nothing:
    Note: Copies texture to texture
    Placeholder

Process called "finish" that takes encoder as GPUCommandEncoder, descriptor as Dictionary[String, Any] returns GPUCommandBuffer:
    Note: Finishes encoding
    Placeholder

Note: =====================================================================
Note: RENDER PASS ENCODING
Note: =====================================================================

Process called "set_pipeline" that takes encoder as GPURenderPassEncoder, pipeline as GPURenderPipeline returns Nothing:
    Note: Sets render pipeline
    Placeholder

Process called "set_bind_group" that takes encoder as GPURenderPassEncoder, index as Integer, bind_group as GPUBindGroup, dynamic_offsets as List[Integer] returns Nothing:
    Note: Sets bind group
    Placeholder

Process called "set_vertex_buffer" that takes encoder as GPURenderPassEncoder, slot as Integer, buffer as GPUBuffer, offset as Integer, size as Integer returns Nothing:
    Note: Sets vertex buffer
    Placeholder

Process called "set_index_buffer" that takes encoder as GPURenderPassEncoder, buffer as GPUBuffer, index_format as String, offset as Integer, size as Integer returns Nothing:
    Note: Sets index buffer
    Placeholder

Process called "draw" that takes encoder as GPURenderPassEncoder, vertex_count as Integer, instance_count as Integer, first_vertex as Integer, first_instance as Integer returns Nothing:
    Note: Draws vertices
    Placeholder

Process called "draw_indexed" that takes encoder as GPURenderPassEncoder, index_count as Integer, instance_count as Integer, first_index as Integer, base_vertex as Integer, first_instance as Integer returns Nothing:
    Note: Draws indexed
    Placeholder

Process called "draw_indirect" that takes encoder as GPURenderPassEncoder, indirect_buffer as GPUBuffer, indirect_offset as Integer returns Nothing:
    Note: Draws indirect
    Placeholder

Process called "end_render_pass" that takes encoder as GPURenderPassEncoder returns Nothing:
    Note: Ends render pass
    Placeholder

Note: =====================================================================
Note: COMPUTE PASS ENCODING
Note: =====================================================================

Process called "set_compute_pipeline" that takes encoder as GPUComputePassEncoder, pipeline as GPUComputePipeline returns Nothing:
    Note: Sets compute pipeline
    Placeholder

Process called "set_compute_bind_group" that takes encoder as GPUComputePassEncoder, index as Integer, bind_group as GPUBindGroup, dynamic_offsets as List[Integer] returns Nothing:
    Note: Sets bind group
    Placeholder

Process called "dispatch_workgroups" that takes encoder as GPUComputePassEncoder, x as Integer, y as Integer, z as Integer returns Nothing:
    Note: Dispatches workgroups
    Placeholder

Process called "dispatch_workgroups_indirect" that takes encoder as GPUComputePassEncoder, indirect_buffer as GPUBuffer, indirect_offset as Integer returns Nothing:
    Note: Dispatches indirect
    Placeholder

Process called "end_compute_pass" that takes encoder as GPUComputePassEncoder returns Nothing:
    Note: Ends compute pass
    Placeholder

Note: =====================================================================
Note: QUEUE OPERATIONS
Note: =====================================================================

Process called "submit" that takes queue as GPUQueue, command_buffers as List[GPUCommandBuffer] returns Nothing:
    Note: Submits commands
    Placeholder

Process called "write_buffer" that takes queue as GPUQueue, buffer as GPUBuffer, buffer_offset as Integer, data as List[Integer], data_offset as Integer, size as Integer returns Nothing:
    Note: Writes to buffer
    Placeholder

Process called "write_texture" that takes queue as GPUQueue, destination as Dictionary[String, Any], data as List[Integer], data_layout as Dictionary[String, Any], size as GPUExtent3D returns Nothing:
    Note: Writes to texture
    Placeholder

Process called "on_submitted_work_done" that takes queue as GPUQueue returns Integer:
    Note: Work done promise
    Placeholder

Note: =====================================================================
Note: QUERY AND DEBUG
Note: =====================================================================

Process called "create_query_set" that takes device as GPUDevice, descriptor as Dictionary[String, Any] returns Integer:
    Note: Creates query set
    Placeholder

Process called "push_debug_group" that takes encoder as Any, group_label as String returns Nothing:
    Note: Pushes debug group
    Placeholder

Process called "pop_debug_group" that takes encoder as Any returns Nothing:
    Note: Pops debug group
    Placeholder

Process called "insert_debug_marker" that takes encoder as Any, marker_label as String returns Nothing:
    Note: Inserts debug marker
    Placeholder