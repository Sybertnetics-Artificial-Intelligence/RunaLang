Note:
app/graphics/platforms/web/webgl.runa
WebGL 1.0/2.0 Integration

This module provides WebGL graphics API integration including:
- WebGL context creation and management
- Shader compilation and linking
- Buffer and texture operations
- Framebuffer and renderbuffer management
- WebGL extensions
- State management
- Draw calls and instancing
- Transform feedback (WebGL 2)
- Uniform buffer objects (WebGL 2)
- WebGL context loss handling
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: WEBGL DATA STRUCTURES
Note: =====================================================================

Type called "WebGLContext":
    handle as Integer
    version as String
    canvas as Integer
    attributes as ContextAttributes
    extensions as List[String]
    max_texture_size as Integer
    max_vertex_attributes as Integer
    max_texture_units as Integer
    max_draw_buffers as Integer
    is_context_lost as Boolean

Type called "ContextAttributes":
    alpha as Boolean
    depth as Boolean
    stencil as Boolean
    antialias as Boolean
    premultiplied_alpha as Boolean
    preserve_drawing_buffer as Boolean
    power_preference as String
    failIfMajorPerformanceCaveat as Boolean
    desynchronized as Boolean

Type called "WebGLShader":
    handle as Integer
    type as String
    source as String
    is_compiled as Boolean
    info_log as String

Type called "WebGLProgram":
    handle as Integer
    vertex_shader as WebGLShader
    fragment_shader as WebGLShader
    is_linked as Boolean
    info_log as String
    uniforms as Dictionary[String, UniformLocation]
    attributes as Dictionary[String, Integer]

Type called "UniformLocation":
    handle as Integer
    name as String
    type as String
    size as Integer

Type called "WebGLBuffer":
    handle as Integer
    target as String
    usage as String
    size as Integer

Type called "WebGLTexture":
    handle as Integer
    target as String
    width as Integer
    height as Integer
    format as String
    type as String
    levels as Integer

Type called "WebGLFramebuffer":
    handle as Integer
    width as Integer
    height as Integer
    attachments as Dictionary[String, Integer]
    is_complete as Boolean

Type called "WebGLRenderbuffer":
    handle as Integer
    format as String
    width as Integer
    height as Integer
    samples as Integer

Type called "WebGLVertexArrayObject":
    handle as Integer
    attributes as List[VertexAttribute]
    element_buffer as Optional[WebGLBuffer]

Type called "VertexAttribute":
    index as Integer
    size as Integer
    type as String
    normalized as Boolean
    stride as Integer
    offset as Integer
    buffer as WebGLBuffer
    divisor as Integer

Note: =====================================================================
Note: CONTEXT CREATION
Note: =====================================================================

Process called "get_context" that takes canvas as Integer, context_type as String, attributes as ContextAttributes returns WebGLContext:
    Note: Gets WebGL context
    Placeholder

Process called "get_webgl_context" that takes canvas as Integer, attributes as ContextAttributes returns WebGLContext:
    Note: Gets WebGL 1.0 context
    Placeholder

Process called "get_webgl2_context" that takes canvas as Integer, attributes as ContextAttributes returns WebGLContext:
    Note: Gets WebGL 2.0 context
    Placeholder

Process called "is_context_lost" that takes context as WebGLContext returns Boolean:
    Note: Checks context loss
    Placeholder

Process called "get_context_attributes" that takes context as WebGLContext returns ContextAttributes:
    Note: Gets context attributes
    Placeholder

Process called "get_supported_extensions" that takes context as WebGLContext returns List[String]:
    Note: Lists supported extensions
    Placeholder

Process called "get_extension" that takes context as WebGLContext, name as String returns Optional[Integer]:
    Note: Gets extension object
    Placeholder

Note: =====================================================================
Note: SHADER OPERATIONS
Note: =====================================================================

Process called "create_shader" that takes context as WebGLContext, type as String returns WebGLShader:
    Note: Creates shader object
    Placeholder

Process called "shader_source" that takes context as WebGLContext, shader as WebGLShader, source as String returns Nothing:
    Note: Sets shader source
    Placeholder

Process called "compile_shader" that takes context as WebGLContext, shader as WebGLShader returns Nothing:
    Note: Compiles shader
    Placeholder

Process called "get_shader_parameter" that takes context as WebGLContext, shader as WebGLShader, pname as String returns Any:
    Note: Gets shader parameter
    Placeholder

Process called "get_shader_info_log" that takes context as WebGLContext, shader as WebGLShader returns String:
    Note: Gets shader info log
    Placeholder

Process called "delete_shader" that takes context as WebGLContext, shader as WebGLShader returns Nothing:
    Note: Deletes shader
    Placeholder

Note: =====================================================================
Note: PROGRAM OPERATIONS
Note: =====================================================================

Process called "create_program" that takes context as WebGLContext returns WebGLProgram:
    Note: Creates program object
    Placeholder

Process called "attach_shader" that takes context as WebGLContext, program as WebGLProgram, shader as WebGLShader returns Nothing:
    Note: Attaches shader to program
    Placeholder

Process called "link_program" that takes context as WebGLContext, program as WebGLProgram returns Nothing:
    Note: Links program
    Placeholder

Process called "use_program" that takes context as WebGLContext, program as WebGLProgram returns Nothing:
    Note: Uses program
    Placeholder

Process called "get_program_parameter" that takes context as WebGLContext, program as WebGLProgram, pname as String returns Any:
    Note: Gets program parameter
    Placeholder

Process called "get_program_info_log" that takes context as WebGLContext, program as WebGLProgram returns String:
    Note: Gets program info log
    Placeholder

Process called "validate_program" that takes context as WebGLContext, program as WebGLProgram returns Nothing:
    Note: Validates program
    Placeholder

Process called "delete_program" that takes context as WebGLContext, program as WebGLProgram returns Nothing:
    Note: Deletes program
    Placeholder

Note: =====================================================================
Note: UNIFORM OPERATIONS
Note: =====================================================================

Process called "get_uniform_location" that takes context as WebGLContext, program as WebGLProgram, name as String returns UniformLocation:
    Note: Gets uniform location
    Placeholder

Process called "uniform1f" that takes context as WebGLContext, location as UniformLocation, x as Float returns Nothing:
    Note: Sets float uniform
    Placeholder

Process called "uniform2f" that takes context as WebGLContext, location as UniformLocation, x as Float, y as Float returns Nothing:
    Note: Sets vec2 uniform
    Placeholder

Process called "uniform3f" that takes context as WebGLContext, location as UniformLocation, x as Float, y as Float, z as Float returns Nothing:
    Note: Sets vec3 uniform
    Placeholder

Process called "uniform4f" that takes context as WebGLContext, location as UniformLocation, x as Float, y as Float, z as Float, w as Float returns Nothing:
    Note: Sets vec4 uniform
    Placeholder

Process called "uniform_matrix4fv" that takes context as WebGLContext, location as UniformLocation, transpose as Boolean, value as List[Float] returns Nothing:
    Note: Sets mat4 uniform
    Placeholder

Process called "uniform1i" that takes context as WebGLContext, location as UniformLocation, x as Integer returns Nothing:
    Note: Sets int uniform
    Placeholder

Note: =====================================================================
Note: BUFFER OPERATIONS
Note: =====================================================================

Process called "create_buffer" that takes context as WebGLContext returns WebGLBuffer:
    Note: Creates buffer
    Placeholder

Process called "bind_buffer" that takes context as WebGLContext, target as String, buffer as WebGLBuffer returns Nothing:
    Note: Binds buffer
    Placeholder

Process called "buffer_data" that takes context as WebGLContext, target as String, data as List[Float], usage as String returns Nothing:
    Note: Uploads buffer data
    Placeholder

Process called "buffer_sub_data" that takes context as WebGLContext, target as String, offset as Integer, data as List[Float] returns Nothing:
    Note: Updates buffer data
    Placeholder

Process called "delete_buffer" that takes context as WebGLContext, buffer as WebGLBuffer returns Nothing:
    Note: Deletes buffer
    Placeholder

Process called "get_buffer_parameter" that takes context as WebGLContext, target as String, pname as String returns Any:
    Note: Gets buffer parameter
    Placeholder

Note: =====================================================================
Note: TEXTURE OPERATIONS
Note: =====================================================================

Process called "create_texture" that takes context as WebGLContext returns WebGLTexture:
    Note: Creates texture
    Placeholder

Process called "bind_texture" that takes context as WebGLContext, target as String, texture as WebGLTexture returns Nothing:
    Note: Binds texture
    Placeholder

Process called "tex_image_2d" that takes context as WebGLContext, target as String, level as Integer, internal_format as String, width as Integer, height as Integer, border as Integer, format as String, type as String, pixels as Optional[List[Integer]] returns Nothing:
    Note: Uploads texture data
    Placeholder

Process called "tex_parameter" that takes context as WebGLContext, target as String, pname as String, param as Any returns Nothing:
    Note: Sets texture parameter
    Placeholder

Process called "generate_mipmap" that takes context as WebGLContext, target as String returns Nothing:
    Note: Generates mipmaps
    Placeholder

Process called "delete_texture" that takes context as WebGLContext, texture as WebGLTexture returns Nothing:
    Note: Deletes texture
    Placeholder

Note: =====================================================================
Note: FRAMEBUFFER OPERATIONS
Note: =====================================================================

Process called "create_framebuffer" that takes context as WebGLContext returns WebGLFramebuffer:
    Note: Creates framebuffer
    Placeholder

Process called "bind_framebuffer" that takes context as WebGLContext, target as String, framebuffer as Optional[WebGLFramebuffer] returns Nothing:
    Note: Binds framebuffer
    Placeholder

Process called "framebuffer_texture_2d" that takes context as WebGLContext, target as String, attachment as String, texture_target as String, texture as WebGLTexture, level as Integer returns Nothing:
    Note: Attaches texture
    Placeholder

Process called "framebuffer_renderbuffer" that takes context as WebGLContext, target as String, attachment as String, renderbuffer_target as String, renderbuffer as WebGLRenderbuffer returns Nothing:
    Note: Attaches renderbuffer
    Placeholder

Process called "check_framebuffer_status" that takes context as WebGLContext, target as String returns String:
    Note: Checks framebuffer status
    Placeholder

Process called "delete_framebuffer" that takes context as WebGLContext, framebuffer as WebGLFramebuffer returns Nothing:
    Note: Deletes framebuffer
    Placeholder

Note: =====================================================================
Note: RENDERBUFFER OPERATIONS
Note: =====================================================================

Process called "create_renderbuffer" that takes context as WebGLContext returns WebGLRenderbuffer:
    Note: Creates renderbuffer
    Placeholder

Process called "bind_renderbuffer" that takes context as WebGLContext, target as String, renderbuffer as WebGLRenderbuffer returns Nothing:
    Note: Binds renderbuffer
    Placeholder

Process called "renderbuffer_storage" that takes context as WebGLContext, target as String, internal_format as String, width as Integer, height as Integer returns Nothing:
    Note: Allocates renderbuffer
    Placeholder

Process called "delete_renderbuffer" that takes context as WebGLContext, renderbuffer as WebGLRenderbuffer returns Nothing:
    Note: Deletes renderbuffer
    Placeholder

Note: =====================================================================
Note: VERTEX ATTRIBUTES
Note: =====================================================================

Process called "get_attrib_location" that takes context as WebGLContext, program as WebGLProgram, name as String returns Integer:
    Note: Gets attribute location
    Placeholder

Process called "vertex_attrib_pointer" that takes context as WebGLContext, index as Integer, size as Integer, type as String, normalized as Boolean, stride as Integer, offset as Integer returns Nothing:
    Note: Sets attribute pointer
    Placeholder

Process called "enable_vertex_attrib_array" that takes context as WebGLContext, index as Integer returns Nothing:
    Note: Enables attribute array
    Placeholder

Process called "disable_vertex_attrib_array" that takes context as WebGLContext, index as Integer returns Nothing:
    Note: Disables attribute array
    Placeholder

Process called "vertex_attrib_divisor" that takes context as WebGLContext, index as Integer, divisor as Integer returns Nothing:
    Note: Sets attribute divisor (WebGL2)
    Placeholder

Note: =====================================================================
Note: DRAWING OPERATIONS
Note: =====================================================================

Process called "clear" that takes context as WebGLContext, mask as List[String] returns Nothing:
    Note: Clears buffers
    Placeholder

Process called "clear_color" that takes context as WebGLContext, r as Float, g as Float, b as Float, a as Float returns Nothing:
    Note: Sets clear color
    Placeholder

Process called "draw_arrays" that takes context as WebGLContext, mode as String, first as Integer, count as Integer returns Nothing:
    Note: Draws arrays
    Placeholder

Process called "draw_elements" that takes context as WebGLContext, mode as String, count as Integer, type as String, offset as Integer returns Nothing:
    Note: Draws elements
    Placeholder

Process called "draw_arrays_instanced" that takes context as WebGLContext, mode as String, first as Integer, count as Integer, instance_count as Integer returns Nothing:
    Note: Draws instanced (WebGL2)
    Placeholder

Process called "draw_elements_instanced" that takes context as WebGLContext, mode as String, count as Integer, type as String, offset as Integer, instance_count as Integer returns Nothing:
    Note: Draws elements instanced
    Placeholder

Note: =====================================================================
Note: STATE MANAGEMENT
Note: =====================================================================

Process called "enable" that takes context as WebGLContext, cap as String returns Nothing:
    Note: Enables capability
    Placeholder

Process called "disable" that takes context as WebGLContext, cap as String returns Nothing:
    Note: Disables capability
    Placeholder

Process called "is_enabled" that takes context as WebGLContext, cap as String returns Boolean:
    Note: Checks if enabled
    Placeholder

Process called "viewport" that takes context as WebGLContext, x as Integer, y as Integer, width as Integer, height as Integer returns Nothing:
    Note: Sets viewport
    Placeholder

Process called "scissor" that takes context as WebGLContext, x as Integer, y as Integer, width as Integer, height as Integer returns Nothing:
    Note: Sets scissor box
    Placeholder

Process called "blend_func" that takes context as WebGLContext, sfactor as String, dfactor as String returns Nothing:
    Note: Sets blend function
    Placeholder

Process called "depth_func" that takes context as WebGLContext, func as String returns Nothing:
    Note: Sets depth function
    Placeholder

Note: =====================================================================
Note: WEBGL2 FEATURES
Note: =====================================================================

Process called "create_vertex_array" that takes context as WebGLContext returns WebGLVertexArrayObject:
    Note: Creates VAO (WebGL2)
    Placeholder

Process called "bind_vertex_array" that takes context as WebGLContext, vao as Optional[WebGLVertexArrayObject] returns Nothing:
    Note: Binds VAO (WebGL2)
    Placeholder

Process called "create_transform_feedback" that takes context as WebGLContext returns Integer:
    Note: Creates transform feedback
    Placeholder

Process called "bind_transform_feedback" that takes context as WebGLContext, target as String, feedback as Integer returns Nothing:
    Note: Binds transform feedback
    Placeholder

Process called "create_query" that takes context as WebGLContext returns Integer:
    Note: Creates query object
    Placeholder

Process called "begin_query" that takes context as WebGLContext, target as String, query as Integer returns Nothing:
    Note: Begins query
    Placeholder

Process called "end_query" that takes context as WebGLContext, target as String returns Nothing:
    Note: Ends query
    Placeholder