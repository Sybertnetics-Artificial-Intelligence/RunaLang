Note:
app/graphics/platforms/metal/shaders.runa
Metal Shader Compilation

This module provides Metal shader compilation and management including:
- Metal Shading Language compilation
- Shader library management
- Function libraries and linking
- Pipeline state creation
- Shader reflection
- Compute pipelines
- Render pipelines
- Shader debugging
- Performance shaders
- Shader archives
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: SHADER DATA STRUCTURES
Note: =====================================================================

Type called "MTLLibrary":
    handle as Integer
    device as Integer
    function_names as List[String]
    label as String
    type as String

Type called "MTLFunction":
    handle as Integer
    name as String
    function_type as String
    patch_type as String
    patch_control_point_count as Integer
    vertex_attributes as List[MTLVertexAttribute]
    stage_input_attributes as List[MTLAttribute]
    constant_values as Dictionary[String, Any]
    label as String

Type called "MTLVertexAttribute":
    name as String
    attribute_index as Integer
    attribute_type as String
    is_active as Boolean
    is_patch_control_point_data as Boolean
    is_patch_data as Boolean

Type called "MTLAttribute":
    name as String
    attribute_index as Integer
    attribute_type as String
    is_active as Boolean

Type called "MTLCompileOptions":
    preprocessor_macros as Dictionary[String, String]
    fast_math_enabled as Boolean
    language_version as String
    library_type as String

Type called "MTLRenderPipelineState":
    handle as Integer
    label as String
    device as Integer
    max_total_threads_per_threadgroup as Integer
    threadgroup_size_matches_pipeline as Boolean

Type called "MTLComputePipelineState":
    handle as Integer
    device as Integer
    max_total_threads_per_threadgroup as Integer
    threadgroup_size_matches_pipeline as Boolean
    static_threadgroup_memory_length as Integer
    label as String

Type called "MTLRenderPipelineDescriptor":
    vertex_function as Optional[MTLFunction]
    fragment_function as Optional[MTLFunction]
    vertex_descriptor as Optional[MTLVertexDescriptor]
    sample_count as Integer
    rasterization_enabled as Boolean
    alpha_to_coverage_enabled as Boolean
    alpha_to_one_enabled as Boolean
    color_attachments as List[MTLColorAttachment]
    depth_attachment_pixel_format as String
    stencil_attachment_pixel_format as String
    label as String

Type called "MTLVertexDescriptor":
    attributes as List[MTLVertexAttributeDescriptor]
    layouts as List[MTLVertexBufferLayoutDescriptor]

Type called "MTLVertexAttributeDescriptor":
    format as String
    offset as Integer
    buffer_index as Integer

Type called "MTLVertexBufferLayoutDescriptor":
    stride as Integer
    step_function as String
    step_rate as Integer

Type called "MTLColorAttachment":
    pixel_format as String
    blending_enabled as Boolean
    source_rgb_blend_factor as String
    destination_rgb_blend_factor as String
    rgb_blend_operation as String
    source_alpha_blend_factor as String
    destination_alpha_blend_factor as String
    alpha_blend_operation as String
    write_mask as List[String]

Type called "MTLFunctionConstantValues":
    values as Dictionary[Integer, Any]
    types as Dictionary[Integer, String]

Note: =====================================================================
Note: LIBRARY CREATION
Note: =====================================================================

Process called "new_default_library" that takes device as Integer returns MTLLibrary:
    Note: Gets default shader library
    Placeholder

Process called "new_library_with_source" that takes device as Integer, source as String, options as MTLCompileOptions returns MTLLibrary:
    Note: Compiles library from source
    Placeholder

Process called "new_library_with_data" that takes device as Integer, data as List[Integer] returns MTLLibrary:
    Note: Creates library from compiled data
    Placeholder

Process called "new_library_with_file" that takes device as Integer, filepath as String returns MTLLibrary:
    Note: Loads library from file
    Placeholder

Process called "new_library_with_url" that takes device as Integer, url as String returns MTLLibrary:
    Note: Loads library from URL
    Placeholder

Note: =====================================================================
Note: FUNCTION MANAGEMENT
Note: =====================================================================

Process called "new_function_with_name" that takes library as MTLLibrary, name as String returns MTLFunction:
    Note: Gets function from library
    Placeholder

Process called "new_function_with_constant_values" that takes library as MTLLibrary, name as String, constant_values as MTLFunctionConstantValues returns MTLFunction:
    Note: Gets specialized function
    Placeholder

Process called "get_function_names" that takes library as MTLLibrary returns List[String]:
    Note: Lists all function names
    Placeholder

Process called "new_function_with_descriptor" that takes library as MTLLibrary, descriptor as Dictionary[String, Any] returns MTLFunction:
    Note: Creates function with descriptor
    Placeholder

Note: =====================================================================
Note: RENDER PIPELINE CREATION
Note: =====================================================================

Process called "new_render_pipeline_state" that takes device as Integer, descriptor as MTLRenderPipelineDescriptor returns MTLRenderPipelineState:
    Note: Creates render pipeline
    Placeholder

Process called "new_render_pipeline_state_with_reflection" that takes device as Integer, descriptor as MTLRenderPipelineDescriptor returns Tuple[MTLRenderPipelineState, Dictionary[String, Any]]:
    Note: Creates pipeline with reflection
    Placeholder

Process called "create_render_pipeline_descriptor" that takes nothing returns MTLRenderPipelineDescriptor:
    Note: Creates pipeline descriptor
    Placeholder

Process called "set_vertex_function" that takes descriptor as MTLRenderPipelineDescriptor, function as MTLFunction returns Nothing:
    Note: Sets vertex function
    Placeholder

Process called "set_fragment_function" that takes descriptor as MTLRenderPipelineDescriptor, function as MTLFunction returns Nothing:
    Note: Sets fragment function
    Placeholder

Note: =====================================================================
Note: COMPUTE PIPELINE CREATION
Note: =====================================================================

Process called "new_compute_pipeline_state" that takes device as Integer, function as MTLFunction returns MTLComputePipelineState:
    Note: Creates compute pipeline
    Placeholder

Process called "new_compute_pipeline_state_with_reflection" that takes device as Integer, function as MTLFunction returns Tuple[MTLComputePipelineState, Dictionary[String, Any]]:
    Note: Creates pipeline with reflection
    Placeholder

Process called "new_compute_pipeline_state_with_descriptor" that takes device as Integer, descriptor as Dictionary[String, Any] returns MTLComputePipelineState:
    Note: Creates pipeline from descriptor
    Placeholder

Process called "get_max_total_threads_per_threadgroup" that takes pipeline as MTLComputePipelineState returns Integer:
    Note: Gets max threads per group
    Placeholder

Process called "get_threadgroup_size_matches_pipeline" that takes pipeline as MTLComputePipelineState returns Boolean:
    Note: Checks threadgroup matching
    Placeholder

Note: =====================================================================
Note: SHADER COMPILATION
Note: =====================================================================

Process called "compile_shader_source" that takes source as String, options as MTLCompileOptions returns Tuple[List[Integer], List[String]]:
    Note: Compiles shader to bytecode
    Placeholder

Process called "preprocess_shader_source" that takes source as String, options as MTLCompileOptions returns String:
    Note: Preprocesses shader source
    Placeholder

Process called "validate_shader_source" that takes source as String returns List[String]:
    Note: Validates shader syntax
    Placeholder

Process called "get_compilation_errors" that takes error_info as List[String] returns List[Dictionary[String, Any]]:
    Note: Parses compilation errors
    Placeholder

Note: =====================================================================
Note: FUNCTION CONSTANTS
Note: =====================================================================

Process called "new_function_constant_values" that takes nothing returns MTLFunctionConstantValues:
    Note: Creates constant values
    Placeholder

Process called "set_constant_value" that takes values as MTLFunctionConstantValues, value as Any, type as String, index as Integer returns Nothing:
    Note: Sets constant value
    Placeholder

Process called "reset_constant_values" that takes values as MTLFunctionConstantValues returns Nothing:
    Note: Resets all constants
    Placeholder

Process called "get_constant_value" that takes values as MTLFunctionConstantValues, index as Integer returns Any:
    Note: Gets constant value
    Placeholder

Note: =====================================================================
Note: VERTEX DESCRIPTORS
Note: =====================================================================

Process called "new_vertex_descriptor" that takes nothing returns MTLVertexDescriptor:
    Note: Creates vertex descriptor
    Placeholder

Process called "set_attribute" that takes descriptor as MTLVertexDescriptor, index as Integer, format as String, offset as Integer, buffer_index as Integer returns Nothing:
    Note: Sets vertex attribute
    Placeholder

Process called "set_layout" that takes descriptor as MTLVertexDescriptor, index as Integer, stride as Integer, step_function as String, step_rate as Integer returns Nothing:
    Note: Sets buffer layout
    Placeholder

Process called "reset_vertex_descriptor" that takes descriptor as MTLVertexDescriptor returns Nothing:
    Note: Resets descriptor
    Placeholder

Note: =====================================================================
Note: SHADER REFLECTION
Note: =====================================================================

Process called "get_vertex_attributes" that takes function as MTLFunction returns List[MTLVertexAttribute]:
    Note: Gets vertex attributes
    Placeholder

Process called "get_stage_input_attributes" that takes function as MTLFunction returns List[MTLAttribute]:
    Note: Gets stage inputs
    Placeholder

Process called "get_function_constants" that takes function as MTLFunction returns Dictionary[String, Any]:
    Note: Gets function constants
    Placeholder

Process called "get_threadgroup_memory_length" that takes function as MTLFunction returns Integer:
    Note: Gets threadgroup memory size
    Placeholder

Note: =====================================================================
Note: LINKED FUNCTIONS
Note: =====================================================================

Process called "new_linked_functions" that takes nothing returns Dictionary[String, Any]:
    Note: Creates linked functions
    Placeholder

Process called "add_linked_function" that takes linked as Dictionary[String, Any], function as MTLFunction returns Nothing:
    Note: Adds function to link
    Placeholder

Process called "set_linked_functions" that takes descriptor as Dictionary[String, Any], linked as Dictionary[String, Any] returns Nothing:
    Note: Sets linked functions
    Placeholder

Note: =====================================================================
Note: BINARY ARCHIVES
Note: =====================================================================

Process called "new_binary_archive" that takes device as Integer, descriptor as Dictionary[String, Any] returns Integer:
    Note: Creates binary archive
    Placeholder

Process called "add_pipeline_to_archive" that takes archive as Integer, descriptor as Dictionary[String, Any] returns Nothing:
    Note: Adds pipeline to archive
    Placeholder

Process called "serialize_archive" that takes archive as Integer returns List[Integer]:
    Note: Serializes archive
    Placeholder

Process called "deserialize_archive" that takes device as Integer, data as List[Integer] returns Integer:
    Note: Deserializes archive
    Placeholder

Note: =====================================================================
Note: SHADER DEBUGGING
Note: =====================================================================

Process called "enable_shader_debugging" that takes options as MTLCompileOptions returns Nothing:
    Note: Enables debug info
    Placeholder

Process called "set_shader_breakpoint" that takes function as MTLFunction, line as Integer returns Nothing:
    Note: Sets breakpoint
    Placeholder

Process called "capture_shader_state" that takes encoder as Integer returns Dictionary[String, Any]:
    Note: Captures shader state
    Placeholder

Process called "validate_pipeline_state" that takes pipeline as Integer returns List[String]:
    Note: Validates pipeline
    Placeholder

Note: =====================================================================
Note: UTILITIES
Note: =====================================================================

Process called "get_language_version" that takes nothing returns String:
    Note: Gets MSL version
    Placeholder

Process called "supports_function_pointers" that takes device as Integer returns Boolean:
    Note: Checks function pointer support
    Placeholder

Process called "supports_dynamic_libraries" that takes device as Integer returns Boolean:
    Note: Checks dynamic library support
    Placeholder

Process called "optimize_library" that takes library as MTLLibrary returns MTLLibrary:
    Note: Optimizes shader library
    Placeholder