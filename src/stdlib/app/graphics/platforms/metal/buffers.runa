Note:
app/graphics/platforms/metal/buffers.runa
Metal Buffer and Texture Management

This module provides Metal buffer and texture operations including:
- Buffer creation and management
- Texture creation and sampling
- Resource options and storage modes
- Blitting and copying operations
- Argument buffers
- Indirect command buffers
- Resource heaps
- Hazard tracking
- Shared memory management
- Sparse resources
:End Note

Import "dev/debug/errors/core" as Errors

Note: =====================================================================
Note: BUFFER DATA STRUCTURES
Note: =====================================================================

Type called "MTLBuffer":
    handle as Integer
    length as Integer
    contents as Optional[Integer]
    storage_mode as String
    cpu_cache_mode as String
    hazard_tracking_mode as String
    label as String
    device as Integer
    allocated_size as Integer

Type called "MTLTexture":
    handle as Integer
    texture_type as String
    pixel_format as String
    width as Integer
    height as Integer
    depth as Integer
    mipmap_level_count as Integer
    sample_count as Integer
    array_length as Integer
    usage as List[String]
    storage_mode as String
    cpu_cache_mode as String
    hazard_tracking_mode as String
    label as String
    is_framebuffer_only as Boolean
    allow_gpu_optimized_contents as Boolean

Type called "MTLTextureDescriptor":
    texture_type as String
    pixel_format as String
    width as Integer
    height as Integer
    depth as Integer
    mipmap_level_count as Integer
    sample_count as Integer
    array_length as Integer
    storage_mode as String
    cpu_cache_mode as String
    usage as List[String]
    resource_options as MTLResourceOptions
    compression_type as String
    swizzle as MTLTextureSwizzle

Type called "MTLResourceOptions":
    cpu_cache_mode as String
    storage_mode as String
    hazard_tracking_mode as String

Type called "MTLTextureSwizzle":
    red as String
    green as String
    blue as String
    alpha as String

Type called "MTLSamplerState":
    handle as Integer
    min_filter as String
    mag_filter as String
    mip_filter as String
    address_mode_s as String
    address_mode_t as String
    address_mode_r as String
    border_color as String
    normalized_coordinates as Boolean
    lod_min_clamp as Float
    lod_max_clamp as Float
    lod_average as Boolean
    max_anisotropy as Integer
    label as String
    compare_function as String
    support_argument_buffers as Boolean

Type called "MTLArgumentBuffer":
    handle as Integer
    buffer as MTLBuffer
    offset as Integer
    encoded_length as Integer

Type called "MTLIndirectCommandBuffer":
    handle as Integer
    size as Integer
    max_command_count as Integer
    resource_usage as List[String]

Type called "MTLHeapDescriptor":
    size as Integer
    storage_mode as String
    cpu_cache_mode as String
    hazard_tracking_mode as String
    type as String

Note: =====================================================================
Note: BUFFER CREATION
Note: =====================================================================

Process called "new_buffer" that takes device as Integer, length as Integer, options as MTLResourceOptions returns MTLBuffer:
    Note: Creates new buffer
    Placeholder

Process called "new_buffer_with_bytes" that takes device as Integer, bytes as List[Integer], length as Integer, options as MTLResourceOptions returns MTLBuffer:
    Note: Creates buffer with data
    Placeholder

Process called "new_buffer_with_bytes_no_copy" that takes device as Integer, bytes as Integer, length as Integer, options as MTLResourceOptions, deallocator as Function returns MTLBuffer:
    Note: Creates buffer without copying
    Placeholder

Process called "new_buffer_from_heap" that takes heap as Integer, length as Integer, options as MTLResourceOptions returns MTLBuffer:
    Note: Creates buffer from heap
    Placeholder

Process called "get_buffer_contents" that takes buffer as MTLBuffer returns Integer:
    Note: Gets buffer CPU pointer
    Placeholder

Process called "did_modify_range" that takes buffer as MTLBuffer, range as Tuple[Integer, Integer] returns Nothing:
    Note: Marks range as modified
    Placeholder

Note: =====================================================================
Note: TEXTURE CREATION
Note: =====================================================================

Process called "new_texture" that takes device as Integer, descriptor as MTLTextureDescriptor returns MTLTexture:
    Note: Creates new texture
    Placeholder

Process called "new_texture_from_heap" that takes heap as Integer, descriptor as MTLTextureDescriptor returns MTLTexture:
    Note: Creates texture from heap
    Placeholder

Process called "new_texture_view" that takes texture as MTLTexture, pixel_format as String, texture_type as String, levels as Tuple[Integer, Integer], slices as Tuple[Integer, Integer] returns MTLTexture:
    Note: Creates texture view
    Placeholder

Process called "new_texture_view_with_swizzle" that takes texture as MTLTexture, pixel_format as String, texture_type as String, levels as Tuple[Integer, Integer], slices as Tuple[Integer, Integer], swizzle as MTLTextureSwizzle returns MTLTexture:
    Note: Creates view with swizzle
    Placeholder

Process called "get_texture_buffer" that takes texture as MTLTexture returns Optional[MTLBuffer]:
    Note: Gets texture's buffer
    Placeholder

Note: =====================================================================
Note: TEXTURE OPERATIONS
Note: =====================================================================

Process called "get_bytes" that takes texture as MTLTexture, bytes as Integer, bytes_per_row as Integer, bytes_per_image as Integer, region as Dictionary[String, Any], mipmap_level as Integer, slice as Integer returns Nothing:
    Note: Copies texture to memory
    Placeholder

Process called "replace_region" that takes texture as MTLTexture, region as Dictionary[String, Any], mipmap_level as Integer, slice as Integer, bytes as List[Integer], bytes_per_row as Integer, bytes_per_image as Integer returns Nothing:
    Note: Updates texture region
    Placeholder

Process called "get_texture_width" that takes texture as MTLTexture, mipmap_level as Integer returns Integer:
    Note: Gets mip level width
    Placeholder

Process called "get_texture_height" that takes texture as MTLTexture, mipmap_level as Integer returns Integer:
    Note: Gets mip level height
    Placeholder

Process called "get_texture_depth" that takes texture as MTLTexture, mipmap_level as Integer returns Integer:
    Note: Gets mip level depth
    Placeholder

Note: =====================================================================
Note: SAMPLER CREATION
Note: =====================================================================

Process called "new_sampler_state" that takes device as Integer, descriptor as Dictionary[String, Any] returns MTLSamplerState:
    Note: Creates sampler state
    Placeholder

Process called "create_sampler_descriptor" that takes nothing returns Dictionary[String, Any]:
    Note: Creates sampler descriptor
    Placeholder

Process called "set_sampler_filter" that takes descriptor as Dictionary[String, Any], min_filter as String, mag_filter as String, mip_filter as String returns Nothing:
    Note: Sets filter modes
    Placeholder

Process called "set_sampler_address_mode" that takes descriptor as Dictionary[String, Any], s as String, t as String, r as String returns Nothing:
    Note: Sets address modes
    Placeholder

Process called "set_sampler_lod_clamp" that takes descriptor as Dictionary[String, Any], min_lod as Float, max_lod as Float returns Nothing:
    Note: Sets LOD clamp range
    Placeholder

Note: =====================================================================
Note: BLIT OPERATIONS
Note: =====================================================================

Process called "copy_from_buffer" that takes encoder as Integer, source as MTLBuffer, source_offset as Integer, source_bytes_per_row as Integer, source_bytes_per_image as Integer, source_size as Dictionary[String, Integer], dest as MTLTexture, dest_offset as Dictionary[String, Integer], dest_level as Integer, dest_slice as Integer returns Nothing:
    Note: Copies buffer to texture
    Placeholder

Process called "copy_from_texture" that takes encoder as Integer, source as MTLTexture, source_slice as Integer, source_level as Integer, source_origin as Dictionary[String, Integer], source_size as Dictionary[String, Integer], dest as MTLBuffer, dest_offset as Integer, dest_bytes_per_row as Integer, dest_bytes_per_image as Integer returns Nothing:
    Note: Copies texture to buffer
    Placeholder

Process called "copy_texture_to_texture" that takes encoder as Integer, source as MTLTexture, source_slice as Integer, source_level as Integer, source_origin as Dictionary[String, Integer], source_size as Dictionary[String, Integer], dest as MTLTexture, dest_slice as Integer, dest_level as Integer, dest_origin as Dictionary[String, Integer] returns Nothing:
    Note: Copies between textures
    Placeholder

Process called "generate_mipmaps" that takes encoder as Integer, texture as MTLTexture returns Nothing:
    Note: Generates mipmaps
    Placeholder

Process called "fill_buffer" that takes encoder as Integer, buffer as MTLBuffer, range as Tuple[Integer, Integer], value as Integer returns Nothing:
    Note: Fills buffer with value
    Placeholder

Note: =====================================================================
Note: ARGUMENT BUFFERS
Note: =====================================================================

Process called "new_argument_encoder" that takes device as Integer, arguments as List[Dictionary[String, Any]] returns Integer:
    Note: Creates argument encoder
    Placeholder

Process called "set_argument_buffer" that takes encoder as Integer, buffer as MTLBuffer, offset as Integer returns Nothing:
    Note: Sets argument buffer
    Placeholder

Process called "set_buffer_argument" that takes encoder as Integer, buffer as MTLBuffer, offset as Integer, index as Integer returns Nothing:
    Note: Sets buffer in arguments
    Placeholder

Process called "set_texture_argument" that takes encoder as Integer, texture as MTLTexture, index as Integer returns Nothing:
    Note: Sets texture in arguments
    Placeholder

Process called "set_sampler_argument" that takes encoder as Integer, sampler as MTLSamplerState, index as Integer returns Nothing:
    Note: Sets sampler in arguments
    Placeholder

Process called "encoded_length" that takes encoder as Integer returns Integer:
    Note: Gets encoded size
    Placeholder

Note: =====================================================================
Note: INDIRECT COMMAND BUFFERS
Note: =====================================================================

Process called "new_indirect_command_buffer" that takes device as Integer, descriptor as Dictionary[String, Any], max_count as Integer returns MTLIndirectCommandBuffer:
    Note: Creates indirect buffer
    Placeholder

Process called "reset_indirect_command_buffer" that takes buffer as MTLIndirectCommandBuffer, range as Tuple[Integer, Integer] returns Nothing:
    Note: Resets command range
    Placeholder

Process called "indirect_render_command" that takes buffer as MTLIndirectCommandBuffer, index as Integer returns Dictionary[String, Any]:
    Note: Gets render command
    Placeholder

Process called "indirect_compute_command" that takes buffer as MTLIndirectCommandBuffer, index as Integer returns Dictionary[String, Any]:
    Note: Gets compute command
    Placeholder

Note: =====================================================================
Note: RESOURCE HEAPS
Note: =====================================================================

Process called "new_heap" that takes device as Integer, descriptor as MTLHeapDescriptor returns Integer:
    Note: Creates resource heap
    Placeholder

Process called "heap_max_available_size" that takes heap as Integer, alignment as Integer returns Integer:
    Note: Gets max available size
    Placeholder

Process called "heap_used_size" that takes heap as Integer returns Integer:
    Note: Gets used heap size
    Placeholder

Process called "heap_current_allocated_size" that takes heap as Integer returns Integer:
    Note: Gets allocated size
    Placeholder

Process called "make_aliasable" that takes resource as Integer returns Nothing:
    Note: Makes resource aliasable
    Placeholder

Note: =====================================================================
Note: HAZARD TRACKING
Note: =====================================================================

Process called "set_hazard_tracking_mode" that takes options as MTLResourceOptions, mode as String returns Nothing:
    Note: Sets hazard tracking
    Placeholder

Process called "get_hazard_tracking_mode" that takes resource as Integer returns String:
    Note: Gets hazard tracking mode
    Placeholder

Process called "make_aliasable_resource" that takes resource as Integer returns Nothing:
    Note: Makes resource aliasable
    Placeholder

Process called "is_aliasable" that takes resource as Integer returns Boolean:
    Note: Checks if aliasable
    Placeholder

Note: =====================================================================
Note: UTILITIES
Note: =====================================================================

Process called "get_recommended_resource_options" that takes cpu_cache_mode as String, storage_mode as String returns MTLResourceOptions:
    Note: Gets recommended options
    Placeholder

Process called "validate_texture_descriptor" that takes descriptor as MTLTextureDescriptor returns List[String]:
    Note: Validates descriptor
    Placeholder

Process called "calculate_buffer_alignment" that takes device as Integer, length as Integer returns Integer:
    Note: Calculates alignment
    Placeholder

Process called "purge_resource" that takes resource as Integer returns Nothing:
    Note: Purges resource memory
    Placeholder