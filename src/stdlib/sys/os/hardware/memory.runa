Note: sys/os/hardware/memory.runa
Note: Memory Information and Management - Cross-platform memory detection
Note: 
Note: This module provides clean memory information gathering by delegating
Note: platform-specific operations to the appropriate platform modules
Note: and focusing only on data structure definitions and parsing.

Import "dev/debug/errors/core" as Errors
Import "sys/os/platform/detection" as PlatformDetect
Import "sys/os/platform/linux" as LinuxPlatform
Import "sys/os/platform/macos" as MacOSPlatform
Import "sys/os/platform/windows" as WindowsPlatform
Import "data/collections/core/map" as MapOps
Import "data/collections/core/list" as ListOps
Import "text/string/conversion" as StringConvert

Note: =====================================================================
Note: MEMORY INFORMATION TYPES
Note: =====================================================================

Type called "MemoryInfo":
    total_physical_mb as Integer
    available_physical_mb as Integer
    used_physical_mb as Integer
    total_swap_mb as Integer
    available_swap_mb as Integer
    used_swap_mb as Integer
    cached_mb as Integer
    buffers_mb as Integer

Type called "ProcessMemoryUsage":
    pid as Integer
    rss_mb as Integer
    vms_mb as Integer
    shared_mb as Integer
    text_mb as Integer
    data_mb as Integer

Note: =====================================================================
Note: CROSS-PLATFORM MEMORY INFORMATION
Note: =====================================================================

Process called "get_memory_info" that takes nothing returns MemoryInfo:
    Note: Get comprehensive memory information for current platform
    
    If PlatformDetect.is_linux():
        Let raw_data be LinuxPlatform.get_proc_meminfo()
        Return parse_memory_info_from_proc_data(raw_data)
    
    If PlatformDetect.is_macos():
        Let raw_data be MacOSPlatform.get_system_profiler_data("SPHardwareDataType")
        Return parse_memory_info_from_profiler_data(raw_data)
    
    If PlatformDetect.is_windows():
        Let raw_data be WindowsPlatform.wmi_get_class_instances("Win32_ComputerSystem")
        Return parse_memory_info_from_wmi_data(raw_data)
    
    Throw Errors.PlatformError with "Unsupported platform for memory information"

Process called "get_process_memory_usage" that takes pid as Integer returns ProcessMemoryUsage:
    Note: Get memory usage for specific process
    
    If pid <= 0:
        Throw Errors.InvalidArgumentError with "Invalid process ID"
    
    If PlatformDetect.is_linux():
        Let raw_data be LinuxPlatform.get_process_proc_info(pid)
        Return parse_process_memory_from_proc_data(pid, raw_data)
    
    If PlatformDetect.is_macos():
        Return create_default_process_memory_usage(pid)
    
    If PlatformDetect.is_windows():
        Let raw_data be WindowsPlatform.get_process_modules(pid)
        Return parse_process_memory_from_windows_data(pid, raw_data)
    
    Throw Errors.PlatformError with "Unsupported platform for process memory usage"

Note: =====================================================================
Note: DATA PARSING FUNCTIONS
Note: =====================================================================

Process called "parse_memory_info_from_proc_data" that takes proc_data as Dictionary[String, Integer] returns MemoryInfo:
    Note: Parse memory information from Linux /proc/meminfo data
    
    If MapOps.is_empty(proc_data):
        Return create_default_memory_info()
    
    Let total_kb be MapOps.get_value_or_default(proc_data, "MemTotal", 0)
    Let available_kb be MapOps.get_value_or_default(proc_data, "MemAvailable", 0)
    Let free_kb be MapOps.get_value_or_default(proc_data, "MemFree", 0)
    Let cached_kb be MapOps.get_value_or_default(proc_data, "Cached", 0)
    Let buffers_kb be MapOps.get_value_or_default(proc_data, "Buffers", 0)
    Let swap_total_kb be MapOps.get_value_or_default(proc_data, "SwapTotal", 0)
    Let swap_free_kb be MapOps.get_value_or_default(proc_data, "SwapFree", 0)
    
    Let total_physical_mb be (total_kb / 1024)
    Let available_physical_mb be (available_kb / 1024)
    Let used_physical_mb be (total_physical_mb - available_physical_mb)
    Let total_swap_mb be (swap_total_kb / 1024)
    Let available_swap_mb be (swap_free_kb / 1024)
    Let used_swap_mb be (total_swap_mb - available_swap_mb)
    Let cached_mb be (cached_kb / 1024)
    Let buffers_mb be (buffers_kb / 1024)
    
    Return MemoryInfo with total_physical_mb = total_physical_mb, 
        available_physical_mb = available_physical_mb, used_physical_mb = used_physical_mb,
        total_swap_mb = total_swap_mb, available_swap_mb = available_swap_mb, 
        used_swap_mb = used_swap_mb, cached_mb = cached_mb, buffers_mb = buffers_mb

Process called "parse_memory_info_from_profiler_data" that takes profiler_data as Dictionary[String, String] returns MemoryInfo:
    Note: Parse memory information from macOS system_profiler data
    
    If MapOps.is_empty(profiler_data):
        Return create_default_memory_info()
    
    Let memory_gb_str be MapOps.get_value_or_default(profiler_data, "memory_gb", "0")
    Let memory_gb be StringConvert.to_integer(memory_gb_str)
    Let total_physical_mb be (memory_gb * 1024)
    
    Return MemoryInfo with total_physical_mb = total_physical_mb, 
        available_physical_mb = (total_physical_mb / 2), used_physical_mb = (total_physical_mb / 2),
        total_swap_mb = 0, available_swap_mb = 0, used_swap_mb = 0, 
        cached_mb = 0, buffers_mb = 0

Process called "parse_memory_info_from_wmi_data" that takes wmi_data as List[Dictionary[String, String]] returns MemoryInfo:
    Note: Parse memory information from Windows WMI data
    
    If ListOps.is_empty(wmi_data):
        Return create_default_memory_info()
    
    Let computer_data be ListOps.get_at_index(wmi_data, 0)
    Let total_physical_str be MapOps.get_value_or_default(computer_data, "TotalPhysicalMemory", "0")
    Let total_physical_bytes be StringConvert.to_integer(total_physical_str)
    Let total_physical_mb be (total_physical_bytes / 1048576)
    
    Return MemoryInfo with total_physical_mb = total_physical_mb, 
        available_physical_mb = (total_physical_mb / 2), used_physical_mb = (total_physical_mb / 2),
        total_swap_mb = 0, available_swap_mb = 0, used_swap_mb = 0, 
        cached_mb = 0, buffers_mb = 0

Process called "parse_process_memory_from_proc_data" that takes pid as Integer, proc_data as Dictionary[String, String] returns ProcessMemoryUsage:
    Note: Parse process memory usage from Linux /proc/[pid]/ data
    
    If MapOps.is_empty(proc_data):
        Return create_default_process_memory_usage(pid)
    
    Let vsize_str be MapOps.get_value_or_default(proc_data, "vsize", "0")
    Let rss_str be MapOps.get_value_or_default(proc_data, "rss", "0")
    
    Let vms_bytes be StringConvert.to_integer(vsize_str)
    Let rss_pages be StringConvert.to_integer(rss_str)
    
    Let vms_mb be (vms_bytes / 1048576)
    Let rss_mb be (rss_pages * 4096 / 1048576)
    
    Return ProcessMemoryUsage with pid = pid, rss_mb = rss_mb, vms_mb = vms_mb,
        shared_mb = 0, text_mb = 0, data_mb = 0

Process called "parse_process_memory_from_windows_data" that takes pid as Integer, modules_data as List[String] returns ProcessMemoryUsage:
    Note: Parse process memory usage from Windows process data
    
    Let module_count be ListOps.length(modules_data)
    Let estimated_mb be (module_count * 10)
    
    Return ProcessMemoryUsage with pid = pid, rss_mb = estimated_mb, vms_mb = estimated_mb,
        shared_mb = 0, text_mb = 0, data_mb = 0

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "create_default_memory_info" that takes nothing returns MemoryInfo:
    Note: Create default memory info when data is unavailable
    
    Return MemoryInfo with total_physical_mb = 0, available_physical_mb = 0, 
        used_physical_mb = 0, total_swap_mb = 0, available_swap_mb = 0, 
        used_swap_mb = 0, cached_mb = 0, buffers_mb = 0

Process called "create_default_process_memory_usage" that takes pid as Integer returns ProcessMemoryUsage:
    Note: Create default process memory usage when data is unavailable
    
    Return ProcessMemoryUsage with pid = pid, rss_mb = 0, vms_mb = 0,
        shared_mb = 0, text_mb = 0, data_mb = 0

Process called "convert_bytes_to_mb" that takes bytes as Integer returns Integer:
    Note: Convert bytes to megabytes
    
    Return (bytes / 1048576)

Process called "convert_kb_to_mb" that takes kb as Integer returns Integer:
    Note: Convert kilobytes to megabytes
    
    Return (kb / 1024)