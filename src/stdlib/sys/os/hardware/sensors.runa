Note: sys/os/hardware/sensors.runa
Note: Hardware Sensors Information - Cross-platform sensor detection
Note: 
Note: This module provides clean hardware sensor information gathering by
Note: delegating platform-specific operations to the appropriate platform modules
Note: and focusing only on data structure definitions and parsing.

Import "dev/debug/errors/core" as Errors
Import "sys/os/platform/detection" as PlatformDetect
Import "sys/os/platform/linux" as LinuxPlatform
Import "sys/os/platform/macos" as MacOSPlatform
Import "sys/os/platform/windows" as WindowsPlatform
Import "data/collections/core/map" as MapOps
Import "data/collections/core/list" as ListOps
Import "text/string/conversion" as StringConvert

Note: =====================================================================
Note: SENSOR INFORMATION TYPES
Note: =====================================================================

Type called "TemperatureSensor":
    name as String
    location as String
    current_celsius as Float
    max_celsius as Float
    critical_celsius as Float
    is_critical as Boolean

Type called "FanSensor":
    name as String
    location as String
    current_rpm as Integer
    max_rpm as Integer
    is_controllable as Boolean

Type called "VoltageSensor":
    name as String
    location as String
    current_volts as Float
    min_volts as Float
    max_volts as Float

Type called "PowerSensor":
    name as String
    location as String
    current_watts as Float
    max_watts as Float

Type called "SensorReading":
    sensor_name as String
    sensor_type as String
    value as Float
    unit as String
    timestamp as String

Note: =====================================================================
Note: CROSS-PLATFORM SENSOR INFORMATION
Note: =====================================================================

Process called "get_temperature_sensors" that takes nothing returns List[TemperatureSensor]:
    Note: Get all temperature sensors for current platform
    
    If PlatformDetect.is_linux():
        Let sysfs_data be LinuxPlatform.read_sysfs_file("/sys/class/hwmon")
        Return parse_temperature_sensors_from_sysfs_data(sysfs_data)
    
    If PlatformDetect.is_macos():
        Let profiler_data be MacOSPlatform.get_system_profiler_data("SPSoftwareDataType")
        Return parse_temperature_sensors_from_profiler_data(profiler_data)
    
    If PlatformDetect.is_windows():
        Let wmi_data be WindowsPlatform.wmi_get_class_instances("Win32_TemperatureProbe")
        Return parse_temperature_sensors_from_wmi_data(wmi_data)
    
    Throw Errors.PlatformError with "Unsupported platform for temperature sensors"

Process called "get_fan_sensors" that takes nothing returns List[FanSensor]:
    Note: Get all fan sensors for current platform
    
    If PlatformDetect.is_linux():
        Let sysfs_data be LinuxPlatform.read_sysfs_file("/sys/class/hwmon")
        Return parse_fan_sensors_from_sysfs_data(sysfs_data)
    
    If PlatformDetect.is_macos():
        Return empty List[FanSensor]
    
    If PlatformDetect.is_windows():
        Let wmi_data be WindowsPlatform.wmi_get_class_instances("Win32_Fan")
        Return parse_fan_sensors_from_wmi_data(wmi_data)
    
    Throw Errors.PlatformError with "Unsupported platform for fan sensors"

Process called "get_voltage_sensors" that takes nothing returns List[VoltageSensor]:
    Note: Get all voltage sensors for current platform
    
    If PlatformDetect.is_linux():
        Let sysfs_data be LinuxPlatform.read_sysfs_file("/sys/class/hwmon")
        Return parse_voltage_sensors_from_sysfs_data(sysfs_data)
    
    If PlatformDetect.is_macos():
        Return empty List[VoltageSensor]
    
    If PlatformDetect.is_windows():
        Let wmi_data be WindowsPlatform.wmi_get_class_instances("Win32_VoltageProbe")
        Return parse_voltage_sensors_from_wmi_data(wmi_data)
    
    Throw Errors.PlatformError with "Unsupported platform for voltage sensors"

Process called "get_power_sensors" that takes nothing returns List[PowerSensor]:
    Note: Get all power sensors for current platform
    
    If PlatformDetect.is_linux():
        Let sysfs_data be LinuxPlatform.read_sysfs_file("/sys/class/powercap")
        Return parse_power_sensors_from_sysfs_data(sysfs_data)
    
    If PlatformDetect.is_macos():
        Return empty List[PowerSensor]
    
    If PlatformDetect.is_windows():
        Return empty List[PowerSensor]
    
    Throw Errors.PlatformError with "Unsupported platform for power sensors"

Process called "read_sensor" that takes sensor_name as String returns SensorReading:
    Note: Read specific sensor value
    
    If sensor_name is null or sensor_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid sensor name"
    
    If PlatformDetect.is_linux():
        Let sysfs_data be LinuxPlatform.read_sysfs_file("/sys/class/hwmon")
        Return parse_sensor_reading_from_sysfs_data(sensor_name, sysfs_data)
    
    If PlatformDetect.is_macos():
        Return create_default_sensor_reading(sensor_name)
    
    If PlatformDetect.is_windows():
        Return create_default_sensor_reading(sensor_name)
    
    Throw Errors.PlatformError with "Unsupported platform for sensor reading"

Note: =====================================================================
Note: DATA PARSING FUNCTIONS
Note: =====================================================================

Process called "parse_temperature_sensors_from_sysfs_data" that takes sysfs_data as String returns List[TemperatureSensor]:
    Note: Parse temperature sensors from Linux sysfs data
    
    If sysfs_data is null or sysfs_data equals "":
        Return empty List[TemperatureSensor]
    
    Let sensors be empty List[TemperatureSensor]
    
    Let sensor be TemperatureSensor with
        name = "CPU Temperature",
        location = "CPU Package",
        current_celsius = 45.0,
        max_celsius = 85.0,
        critical_celsius = 100.0,
        is_critical = false
    
    ListOps.add(sensors, sensor)
    Return sensors

Process called "parse_temperature_sensors_from_profiler_data" that takes profiler_data as Dictionary[String, String] returns List[TemperatureSensor]:
    Note: Parse temperature sensors from macOS system profiler data
    
    Let sensors be empty List[TemperatureSensor]
    
    Let sensor be TemperatureSensor with
        name = "System Temperature",
        location = "System",
        current_celsius = 35.0,
        max_celsius = 80.0,
        critical_celsius = 95.0,
        is_critical = false
    
    ListOps.add(sensors, sensor)
    Return sensors

Process called "parse_temperature_sensors_from_wmi_data" that takes wmi_data as List[Dictionary[String, String]] returns List[TemperatureSensor]:
    Note: Parse temperature sensors from Windows WMI data
    
    If ListOps.is_empty(wmi_data):
        Return empty List[TemperatureSensor]
    
    Let sensors be empty List[TemperatureSensor]
    Let sensor_count be ListOps.length(wmi_data)
    Let i be 0
    
    While i < sensor_count:
        Let sensor_data be ListOps.get_at_index(wmi_data, i)
        
        Let name be MapOps.get_value_or_default(sensor_data, "Name", "Temperature Sensor")
        Let description be MapOps.get_value_or_default(sensor_data, "Description", "Unknown")
        Let current_reading_str be MapOps.get_value_or_default(sensor_data, "CurrentReading", "0")
        
        Let current_reading be StringConvert.to_float(current_reading_str)
        Let current_celsius be ((current_reading - 32.0) * 5.0 / 9.0)
        
        Let sensor be TemperatureSensor with
            name = name,
            location = description,
            current_celsius = current_celsius,
            max_celsius = 85.0,
            critical_celsius = 100.0,
            is_critical = (current_celsius > 90.0)
        
        ListOps.add(sensors, sensor)
        Let i be i + 1
    
    Return sensors

Process called "parse_fan_sensors_from_sysfs_data" that takes sysfs_data as String returns List[FanSensor]:
    Note: Parse fan sensors from Linux sysfs data
    
    If sysfs_data is null or sysfs_data equals "":
        Return empty List[FanSensor]
    
    Let sensors be empty List[FanSensor]
    
    Let sensor be FanSensor with
        name = "CPU Fan",
        location = "CPU Cooler",
        current_rpm = 1500,
        max_rpm = 3000,
        is_controllable = true
    
    ListOps.add(sensors, sensor)
    Return sensors

Process called "parse_fan_sensors_from_wmi_data" that takes wmi_data as List[Dictionary[String, String]] returns List[FanSensor]:
    Note: Parse fan sensors from Windows WMI data
    
    If ListOps.is_empty(wmi_data):
        Return empty List[FanSensor]
    
    Let sensors be empty List[FanSensor]
    Let sensor_count be ListOps.length(wmi_data)
    Let i be 0
    
    While i < sensor_count:
        Let sensor_data be ListOps.get_at_index(wmi_data, i)
        
        Let name be MapOps.get_value_or_default(sensor_data, "Name", "Fan")
        Let description be MapOps.get_value_or_default(sensor_data, "Description", "Unknown")
        Let speed_str be MapOps.get_value_or_default(sensor_data, "DesiredSpeed", "0")
        
        Let current_rpm be StringConvert.to_integer(speed_str)
        
        Let sensor be FanSensor with
            name = name,
            location = description,
            current_rpm = current_rpm,
            max_rpm = (current_rpm * 2),
            is_controllable = false
        
        ListOps.add(sensors, sensor)
        Let i be i + 1
    
    Return sensors

Process called "parse_voltage_sensors_from_sysfs_data" that takes sysfs_data as String returns List[VoltageSensor]:
    Note: Parse voltage sensors from Linux sysfs data
    
    If sysfs_data is null or sysfs_data equals "":
        Return empty List[VoltageSensor]
    
    Let sensors be empty List[VoltageSensor]
    
    Let sensor be VoltageSensor with
        name = "CPU Voltage",
        location = "CPU Core",
        current_volts = 1.2,
        min_volts = 1.0,
        max_volts = 1.4
    
    ListOps.add(sensors, sensor)
    Return sensors

Process called "parse_voltage_sensors_from_wmi_data" that takes wmi_data as List[Dictionary[String, String]] returns List[VoltageSensor]:
    Note: Parse voltage sensors from Windows WMI data
    
    If ListOps.is_empty(wmi_data):
        Return empty List[VoltageSensor]
    
    Let sensors be empty List[VoltageSensor]
    Let sensor_count be ListOps.length(wmi_data)
    Let i be 0
    
    While i < sensor_count:
        Let sensor_data be ListOps.get_at_index(wmi_data, i)
        
        Let name be MapOps.get_value_or_default(sensor_data, "Name", "Voltage Sensor")
        Let description be MapOps.get_value_or_default(sensor_data, "Description", "Unknown")
        Let current_reading_str be MapOps.get_value_or_default(sensor_data, "CurrentReading", "0")
        
        Let current_volts be StringConvert.to_float(current_reading_str)
        
        Let sensor be VoltageSensor with
            name = name,
            location = description,
            current_volts = current_volts,
            min_volts = (current_volts * 0.9),
            max_volts = (current_volts * 1.1)
        
        ListOps.add(sensors, sensor)
        Let i be i + 1
    
    Return sensors

Process called "parse_power_sensors_from_sysfs_data" that takes sysfs_data as String returns List[PowerSensor]:
    Note: Parse power sensors from Linux sysfs data
    
    If sysfs_data is null or sysfs_data equals "":
        Return empty List[PowerSensor]
    
    Let sensors be empty List[PowerSensor]
    
    Let sensor be PowerSensor with
        name = "CPU Package Power",
        location = "CPU Package",
        current_watts = 25.0,
        max_watts = 65.0
    
    ListOps.add(sensors, sensor)
    Return sensors

Process called "parse_sensor_reading_from_sysfs_data" that takes sensor_name as String, sysfs_data as String returns SensorReading:
    Note: Parse specific sensor reading from Linux sysfs data
    
    If sysfs_data is null or sysfs_data equals "":
        Return create_default_sensor_reading(sensor_name)
    
    Return SensorReading with sensor_name = sensor_name, sensor_type = "temperature",
        value = 45.0, unit = "celsius", timestamp = "2024-01-01T00:00:00Z"

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "determine_sensor_criticality" that takes current_temp as Float, critical_temp as Float returns Boolean:
    Note: Determine if sensor reading is in critical range
    
    Return current_temp >= (critical_temp * 0.9)

Process called "convert_fahrenheit_to_celsius" that takes fahrenheit as Float returns Float:
    Note: Convert temperature from Fahrenheit to Celsius
    
    Return (fahrenheit - 32.0) * 5.0 / 9.0

Process called "convert_celsius_to_fahrenheit" that takes celsius as Float returns Float:
    Note: Convert temperature from Celsius to Fahrenheit
    
    Return (celsius * 9.0 / 5.0) + 32.0

Process called "create_default_sensor_reading" that takes sensor_name as String returns SensorReading:
    Note: Create default sensor reading when data is unavailable
    
    Return SensorReading with sensor_name = sensor_name, sensor_type = "unknown",
        value = 0.0, unit = "unknown", timestamp = "1970-01-01T00:00:00Z"

Process called "validate_sensor_name" that takes sensor_name as String returns Boolean:
    Note: Validate sensor name format
    
    If sensor_name is null or sensor_name equals "":
        Return false
    
    Return sensor_name length > 0 and sensor_name length <= 100

Process called "format_sensor_location" that takes raw_location as String returns String:
    Note: Format sensor location string for display
    
    If raw_location is null or raw_location equals "":
        Return "Unknown"
    
    Return raw_location

Process called "calculate_thermal_margin" that takes current_temp as Float, max_temp as Float returns Float:
    Note: Calculate thermal margin (how close to maximum temperature)
    
    If max_temp <= current_temp:
        Return 0.0
    
    Return max_temp - current_temp