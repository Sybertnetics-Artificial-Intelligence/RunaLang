Note: sys/os/hardware/network.runa
Note: Network Hardware Information - Cross-platform network interface detection
Note: 
Note: This module provides clean network hardware information gathering by
Note: delegating platform-specific operations to the appropriate platform modules
Note: and focusing only on data structure definitions and parsing.

Import "dev/debug/errors/core" as Errors
Import "sys/os/platform/detection" as PlatformDetect
Import "sys/os/platform/linux" as LinuxPlatform
Import "sys/os/platform/macos" as MacOSPlatform
Import "sys/os/platform/windows" as WindowsPlatform
Import "data/collections/core/map" as MapOps
Import "data/collections/core/list" as ListOps
Import "text/string/conversion" as StringConvert

Note: =====================================================================
Note: NETWORK HARDWARE TYPES
Note: =====================================================================

Type called "NetworkInterface":
    name as String
    display_name as String
    mac_address as String
    ip_address as String
    status as String
    speed_mbps as Integer
    interface_type as String
    is_wireless as Boolean
    is_up as Boolean

Type called "NetworkStatistics":
    interface_name as String
    bytes_sent as Integer
    bytes_received as Integer
    packets_sent as Integer
    packets_received as Integer
    errors_in as Integer
    errors_out as Integer
    dropped_in as Integer
    dropped_out as Integer

Type called "WirelessInfo":
    interface_name as String
    ssid as String
    signal_strength as Integer
    frequency_mhz as Integer
    security_type as String
    is_connected as Boolean

Note: =====================================================================
Note: CROSS-PLATFORM NETWORK INFORMATION
Note: =====================================================================

Process called "get_network_interfaces" that takes nothing returns List[NetworkInterface]:
    Note: Get list of all network interfaces for current platform
    
    If PlatformDetect.is_linux():
        Let interface_data be LinuxPlatform.get_network_interfaces_proc()
        Return parse_network_interfaces_from_proc_data(interface_data)
    
    If PlatformDetect.is_macos():
        Let interface_data be MacOSPlatform.get_wifi_info()
        Return parse_network_interfaces_from_airport_data(interface_data)
    
    If PlatformDetect.is_windows():
        Let interface_data be WindowsPlatform.get_network_adapters()
        Return parse_network_interfaces_from_windows_data(interface_data)
    
    Throw Errors.PlatformError with "Unsupported platform for network interfaces"

Process called "get_network_statistics" that takes interface_name as String returns NetworkStatistics:
    Note: Get network statistics for specific interface
    
    If interface_name is null or interface_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid interface name"
    
    If PlatformDetect.is_linux():
        Let interface_data be LinuxPlatform.get_network_interfaces_proc()
        Return parse_network_statistics_from_proc_data(interface_name, interface_data)
    
    If PlatformDetect.is_macos():
        Return create_default_network_statistics(interface_name)
    
    If PlatformDetect.is_windows():
        Let interface_data be WindowsPlatform.get_network_adapters()
        Return parse_network_statistics_from_windows_data(interface_name, interface_data)
    
    Throw Errors.PlatformError with "Unsupported platform for network statistics"

Process called "get_wireless_info" that takes interface_name as String returns WirelessInfo:
    Note: Get wireless information for specific interface
    
    If interface_name is null or interface_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid interface name"
    
    If PlatformDetect.is_linux():
        Return create_default_wireless_info(interface_name)
    
    If PlatformDetect.is_macos():
        Let wifi_data be MacOSPlatform.get_wifi_info()
        Return parse_wireless_info_from_airport_data(interface_name, wifi_data)
    
    If PlatformDetect.is_windows():
        Return create_default_wireless_info(interface_name)
    
    Throw Errors.PlatformError with "Unsupported platform for wireless information"

Process called "scan_wireless_networks" that takes nothing returns List[WirelessInfo]:
    Note: Scan for available wireless networks
    
    If PlatformDetect.is_linux():
        Return empty List[WirelessInfo]
    
    If PlatformDetect.is_macos():
        Let scan_data be MacOSPlatform.scan_wifi_networks()
        Return parse_wireless_scan_from_airport_data(scan_data)
    
    If PlatformDetect.is_windows():
        Return empty List[WirelessInfo]
    
    Throw Errors.PlatformError with "Unsupported platform for wireless scanning"

Note: =====================================================================
Note: DATA PARSING FUNCTIONS
Note: =====================================================================

Process called "parse_network_interfaces_from_proc_data" that takes proc_data as List[Dictionary[String, String]] returns List[NetworkInterface]:
    Note: Parse network interfaces from Linux /proc/net/dev data
    
    If ListOps.is_empty(proc_data):
        Return empty List[NetworkInterface]
    
    Let interfaces be empty List[NetworkInterface]
    Let interface_count be ListOps.length(proc_data)
    Let i be 0
    
    While i < interface_count:
        Let interface_data be ListOps.get_at_index(proc_data, i)
        
        Let name be MapOps.get_value_or_default(interface_data, "interface", "unknown")
        Let status be determine_interface_status(name)
        Let interface_type be determine_interface_type(name)
        Let is_wireless be is_wireless_interface(name)
        
        Let interface be NetworkInterface with
            name = name,
            display_name = name,
            mac_address = "00:00:00:00:00:00",
            ip_address = "0.0.0.0",
            status = status,
            speed_mbps = 0,
            interface_type = interface_type,
            is_wireless = is_wireless,
            is_up = (status equals "up")
        
        ListOps.add(interfaces, interface)
        Let i be i + 1
    
    Return interfaces

Process called "parse_network_interfaces_from_airport_data" that takes airport_data as Dictionary[String, String] returns List[NetworkInterface]:
    Note: Parse network interfaces from macOS airport data
    
    If MapOps.is_empty(airport_data):
        Return empty List[NetworkInterface]
    
    Let interfaces be empty List[NetworkInterface]
    
    Let interface be NetworkInterface with
        name = "en0",
        display_name = "Wi-Fi",
        mac_address = MapOps.get_value_or_default(airport_data, "mac_address", "00:00:00:00:00:00"),
        ip_address = "0.0.0.0",
        status = "up",
        speed_mbps = 866,
        interface_type = "WiFi",
        is_wireless = true,
        is_up = true
    
    ListOps.add(interfaces, interface)
    Return interfaces

Process called "parse_network_interfaces_from_windows_data" that takes windows_data as List[Dictionary[String, String]] returns List[NetworkInterface]:
    Note: Parse network interfaces from Windows network adapter data
    
    If ListOps.is_empty(windows_data):
        Return empty List[NetworkInterface]
    
    Let interfaces be empty List[NetworkInterface]
    Let adapter_count be ListOps.length(windows_data)
    Let i be 0
    
    While i < adapter_count:
        Let adapter_data be ListOps.get_at_index(windows_data, i)
        
        Let name be MapOps.get_value_or_default(adapter_data, "name", "unknown")
        Let display_name be MapOps.get_value_or_default(adapter_data, "description", name)
        Let mac_address be MapOps.get_value_or_default(adapter_data, "mac_address", "00:00:00:00:00:00")
        Let status be MapOps.get_value_or_default(adapter_data, "status", "unknown")
        Let speed_str be MapOps.get_value_or_default(adapter_data, "speed", "0")
        
        Let speed_bps be StringConvert.to_integer(speed_str)
        Let speed_mbps be (speed_bps / 1000000)
        Let is_wireless be is_wireless_interface(name)
        
        Let interface be NetworkInterface with
            name = name,
            display_name = display_name,
            mac_address = mac_address,
            ip_address = "0.0.0.0",
            status = status,
            speed_mbps = speed_mbps,
            interface_type = determine_interface_type(name),
            is_wireless = is_wireless,
            is_up = (status equals "Connected")
        
        ListOps.add(interfaces, interface)
        Let i be i + 1
    
    Return interfaces

Process called "parse_network_statistics_from_proc_data" that takes interface_name as String, proc_data as List[Dictionary[String, String]] returns NetworkStatistics:
    Note: Parse network statistics for interface from Linux /proc data
    
    Let interface_data be find_interface_in_proc_data(interface_name, proc_data)
    
    If interface_data is null:
        Return create_default_network_statistics(interface_name)
    
    Let bytes_received_str be MapOps.get_value_or_default(interface_data, "rx_bytes", "0")
    Let bytes_sent_str be MapOps.get_value_or_default(interface_data, "tx_bytes", "0")
    Let packets_received_str be MapOps.get_value_or_default(interface_data, "rx_packets", "0")
    Let packets_sent_str be MapOps.get_value_or_default(interface_data, "tx_packets", "0")
    
    Let bytes_received be StringConvert.to_integer(bytes_received_str)
    Let bytes_sent be StringConvert.to_integer(bytes_sent_str)
    Let packets_received be StringConvert.to_integer(packets_received_str)
    Let packets_sent be StringConvert.to_integer(packets_sent_str)
    
    Return NetworkStatistics with interface_name = interface_name,
        bytes_sent = bytes_sent, bytes_received = bytes_received,
        packets_sent = packets_sent, packets_received = packets_received,
        errors_in = 0, errors_out = 0, dropped_in = 0, dropped_out = 0

Process called "parse_network_statistics_from_windows_data" that takes interface_name as String, windows_data as List[Dictionary[String, String]] returns NetworkStatistics:
    Note: Parse network statistics for interface from Windows adapter data
    
    Return create_default_network_statistics(interface_name)

Process called "parse_wireless_info_from_airport_data" that takes interface_name as String, airport_data as Dictionary[String, String] returns WirelessInfo:
    Note: Parse wireless information from macOS airport data
    
    Let ssid be MapOps.get_value_or_default(airport_data, "ssid", "")
    Let signal_str be MapOps.get_value_or_default(airport_data, "signal_strength", "-50")
    Let signal_strength be StringConvert.to_integer(signal_str)
    
    Return WirelessInfo with interface_name = interface_name, ssid = ssid,
        signal_strength = signal_strength, frequency_mhz = 2400,
        security_type = "WPA2", is_connected = true

Process called "parse_wireless_scan_from_airport_data" that takes scan_data as List[Dictionary[String, String]] returns List[WirelessInfo]:
    Note: Parse wireless scan results from macOS airport data
    
    If ListOps.is_empty(scan_data):
        Return empty List[WirelessInfo]
    
    Let networks be empty List[WirelessInfo]
    Let network_count be ListOps.length(scan_data)
    Let i be 0
    
    While i < network_count:
        Let network_data be ListOps.get_at_index(scan_data, i)
        
        Let ssid be MapOps.get_value_or_default(network_data, "ssid", "")
        Let signal_str be MapOps.get_value_or_default(network_data, "signal", "-70")
        Let signal_strength be StringConvert.to_integer(signal_str)
        
        Let network be WirelessInfo with interface_name = "en0", ssid = ssid,
            signal_strength = signal_strength, frequency_mhz = 2400,
            security_type = "WPA2", is_connected = false
        
        ListOps.add(networks, network)
        Let i be i + 1
    
    Return networks

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "determine_interface_status" that takes interface_name as String returns String:
    Note: Determine interface status based on name and type
    
    If interface_name contains "lo":
        Return "up"
    
    Return "unknown"

Process called "determine_interface_type" that takes interface_name as String returns String:
    Note: Determine interface type based on name
    
    If interface_name starts_with "eth" or interface_name starts_with "en":
        Return "Ethernet"
    If interface_name starts_with "wlan" or interface_name starts_with "wlp":
        Return "WiFi"
    If interface_name starts_with "lo":
        Return "Loopback"
    If interface_name contains "Wi-Fi" or interface_name contains "WiFi":
        Return "WiFi"
    
    Return "Unknown"

Process called "is_wireless_interface" that takes interface_name as String returns Boolean:
    Note: Check if interface is wireless based on name
    
    Return interface_name starts_with "wlan" or interface_name starts_with "wlp" or
           interface_name contains "Wi-Fi" or interface_name contains "WiFi"

Process called "find_interface_in_proc_data" that takes interface_name as String, proc_data as List[Dictionary[String, String]] returns Dictionary[String, String]:
    Note: Find specific interface in Linux /proc data
    
    Let interface_count be ListOps.length(proc_data)
    Let i be 0
    
    While i < interface_count:
        Let interface_data be ListOps.get_at_index(proc_data, i)
        Let name be MapOps.get_value_or_default(interface_data, "interface", "")
        
        If name equals interface_name:
            Return interface_data
        
        Let i be i + 1
    
    Return null

Process called "create_default_network_statistics" that takes interface_name as String returns NetworkStatistics:
    Note: Create default network statistics when data is unavailable
    
    Return NetworkStatistics with interface_name = interface_name,
        bytes_sent = 0, bytes_received = 0, packets_sent = 0, packets_received = 0,
        errors_in = 0, errors_out = 0, dropped_in = 0, dropped_out = 0

Process called "create_default_wireless_info" that takes interface_name as String returns WirelessInfo:
    Note: Create default wireless info when data is unavailable
    
    Return WirelessInfo with interface_name = interface_name, ssid = "",
        signal_strength = -100, frequency_mhz = 0, security_type = "None", is_connected = false