Note: sys/os/platform/windows.runa
Note: Windows-Specific Operations - Pure Windows platform functionality
Note: 
Note: This module provides ONLY operations that are unique to Windows and cannot
Note: be implemented cross-platform. All generic operations are delegated to
Note: appropriate domain modules.

Import "dev/debug/errors/core" as Errors
Import "sys/os/platform/detection" as PlatformDetect
Import "sys/os/core/process" as Process
Import "data/collections/core/map" as MapOps
Import "data/collections/core/list" as ListOps
Import "text/string/core" as StringCore

Note: =====================================================================
Note: WINDOWS REGISTRY OPERATIONS (Windows-specific configuration system)
Note: =====================================================================

Type called "RegistryKey":
    hive as String
    path as String
    access_rights as String

Type called "RegistryHive":
    name as String
    handle as Integer

Process called "registry_read_string" that takes hive as String, path as String, value_name as String returns String:
    Note: Read string value from Windows registry
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null or value_name is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_read_string" that takes reg_hive as String, reg_path as String, reg_value as String returns String
    Return windows_registry_read_string(hive, path, value_name)

Process called "registry_write_string" that takes hive as String, path as String, value_name as String, value as String returns Nothing:
    Note: Write string value to Windows registry
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null or value_name is null or value is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_write_string" that takes reg_hive as String, reg_path as String, reg_value as String, reg_data as String returns Boolean
    Let success be windows_registry_write_string(hive, path, value_name, value)
    
    If not success:
        Throw Errors.OperationError with "Failed to write registry value"

Process called "registry_read_dword" that takes hive as String, path as String, value_name as String returns Integer:
    Note: Read DWORD value from Windows registry
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null or value_name is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_read_dword" that takes reg_hive as String, reg_path as String, reg_value as String returns Integer
    Return windows_registry_read_dword(hive, path, value_name)

Process called "registry_write_dword" that takes hive as String, path as String, value_name as String, value as Integer returns Nothing:
    Note: Write DWORD value to Windows registry
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null or value_name is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_write_dword" that takes reg_hive as String, reg_path as String, reg_value as String, reg_data as Integer returns Boolean
    Let success be windows_registry_write_dword(hive, path, value_name, value)
    
    If not success:
        Throw Errors.OperationError with "Failed to write registry DWORD value"

Process called "registry_create_key" that takes hive as String, path as String returns RegistryKey:
    Note: Create or open Windows registry key
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_create_key" that takes reg_hive as String, reg_path as String returns Boolean
    Let success be windows_registry_create_key(hive, path)
    
    If not success:
        Throw Errors.OperationError with "Failed to create registry key"
    
    Return RegistryKey with hive = hive, path = path, access_rights = "ReadWrite"

Process called "registry_delete_key" that takes hive as String, path as String returns Nothing:
    Note: Delete Windows registry key and all subkeys
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_delete_key" that takes reg_hive as String, reg_path as String returns Boolean
    Let success be windows_registry_delete_key(hive, path)
    
    If not success:
        Throw Errors.OperationError with "Failed to delete registry key"

Process called "registry_enumerate_keys" that takes hive as String, path as String returns List[String]:
    Note: Enumerate subkeys under Windows registry key
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_enumerate_keys" that takes reg_hive as String, reg_path as String returns List[String]
    Return windows_registry_enumerate_keys(hive, path)

Process called "registry_enumerate_values" that takes hive as String, path as String returns List[String]:
    Note: Enumerate values under Windows registry key
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Registry operations only available on Windows"
    
    If hive is null or path is null:
        Throw Errors.InvalidArgumentError with "Invalid registry parameters"
    
    External "windows_registry_enumerate_values" that takes reg_hive as String, reg_path as String returns List[String]
    Return windows_registry_enumerate_values(hive, path)

Note: =====================================================================
Note: WINDOWS SERVICES API (Windows service control manager)
Note: =====================================================================

Type called "WindowsService":
    name as String
    display_name as String
    status as String
    start_type as String
    service_type as String
    pid as Integer

Process called "service_query_status" that takes service_name as String returns WindowsService:
    Note: Query Windows service status using Service Control Manager
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Service operations only available on Windows"
    
    If service_name is null or service_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid service name"
    
    External "windows_service_query_status" that takes svc_name as String returns WindowsService
    Return windows_service_query_status(service_name)

Process called "service_start" that takes service_name as String returns Nothing:
    Note: Start Windows service using Service Control Manager
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Service operations only available on Windows"
    
    If service_name is null or service_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid service name"
    
    External "windows_service_start" that takes svc_name as String returns Boolean
    Let success be windows_service_start(service_name)
    
    If not success:
        Throw Errors.OperationError with "Failed to start Windows service"

Process called "service_stop" that takes service_name as String returns Nothing:
    Note: Stop Windows service using Service Control Manager
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Service operations only available on Windows"
    
    If service_name is null or service_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid service name"
    
    External "windows_service_stop" that takes svc_name as String returns Boolean
    Let success be windows_service_stop(service_name)
    
    If not success:
        Throw Errors.OperationError with "Failed to stop Windows service"

Process called "service_pause" that takes service_name as String returns Nothing:
    Note: Pause Windows service using Service Control Manager
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Service operations only available on Windows"
    
    If service_name is null or service_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid service name"
    
    External "windows_service_pause" that takes svc_name as String returns Boolean
    Let success be windows_service_pause(service_name)
    
    If not success:
        Throw Errors.OperationError with "Failed to pause Windows service"

Process called "service_continue" that takes service_name as String returns Nothing:
    Note: Continue paused Windows service using Service Control Manager
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Service operations only available on Windows"
    
    If service_name is null or service_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid service name"
    
    External "windows_service_continue" that takes svc_name as String returns Boolean
    Let success be windows_service_continue(service_name)
    
    If not success:
        Throw Errors.OperationError with "Failed to continue Windows service"

Process called "enumerate_services" that takes nothing returns List[WindowsService]:
    Note: Enumerate all Windows services using Service Control Manager
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Service operations only available on Windows"
    
    External "windows_enumerate_services" that takes nothing returns List[WindowsService]
    Return windows_enumerate_services()

Note: =====================================================================
Note: NTFS PERMISSIONS (Windows filesystem security)
Note: =====================================================================

Type called "NTFSPermission":
    identity as String
    permissions as List[String]
    access_type as String
    inherited as Boolean

Process called "get_ntfs_permissions" that takes file_path as String returns List[NTFSPermission]:
    Note: Get NTFS permissions for file or directory using Windows security APIs
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "NTFS operations only available on Windows"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    External "windows_ntfs_get_permissions" that takes path as String returns List[NTFSPermission]
    Return windows_ntfs_get_permissions(file_path)

Process called "set_ntfs_permissions" that takes file_path as String, permissions as List[NTFSPermission] returns Nothing:
    Note: Set NTFS permissions for file or directory using Windows security APIs
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "NTFS operations only available on Windows"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    If permissions is null:
        Throw Errors.InvalidArgumentError with "Invalid permissions"
    
    External "windows_ntfs_set_permissions" that takes path as String, perms as List[NTFSPermission] returns Boolean
    Let success be windows_ntfs_set_permissions(file_path, permissions)
    
    If not success:
        Throw Errors.OperationError with "Failed to set NTFS permissions"

Process called "get_file_owner" that takes file_path as String returns String:
    Note: Get file owner using Windows security APIs
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "File owner operations only available on Windows"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    External "windows_get_file_owner" that takes path as String returns String
    Return windows_get_file_owner(file_path)

Process called "set_file_owner" that takes file_path as String, owner as String returns Nothing:
    Note: Set file owner using Windows security APIs
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "File owner operations only available on Windows"
    
    If file_path is null or file_path equals "" or owner is null or owner equals "":
        Throw Errors.InvalidArgumentError with "Invalid file ownership parameters"
    
    External "windows_set_file_owner" that takes path as String, new_owner as String returns Boolean
    Let success be windows_set_file_owner(file_path, owner)
    
    If not success:
        Throw Errors.OperationError with "Failed to set file owner"

Note: =====================================================================
Note: WINDOWS FILE ATTRIBUTES (Windows-specific file flags)
Note: =====================================================================

Type called "WindowsFileAttributes":
    hidden as Boolean
    readonly as Boolean
    system as Boolean
    archive as Boolean
    compressed as Boolean
    encrypted as Boolean
    reparse_point as Boolean
    sparse_file as Boolean

Process called "get_file_attributes" that takes file_path as String returns WindowsFileAttributes:
    Note: Get Windows-specific file attributes
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "File attribute operations only available on Windows"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    External "windows_get_file_attributes" that takes path as String returns WindowsFileAttributes
    Return windows_get_file_attributes(file_path)

Process called "set_file_attributes" that takes file_path as String, attributes as WindowsFileAttributes returns Nothing:
    Note: Set Windows-specific file attributes
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "File attribute operations only available on Windows"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    External "windows_set_file_attributes" that takes path as String, attrs as WindowsFileAttributes returns Boolean
    Let success be windows_set_file_attributes(file_path, attributes)
    
    If not success:
        Throw Errors.OperationError with "Failed to set file attributes"

Note: =====================================================================
Note: WINDOWS MANAGEMENT INSTRUMENTATION (WMI)
Note: =====================================================================

Process called "wmi_query" that takes wql_query as String returns List[Dictionary[String, String]]:
    Note: Execute WMI query using Windows Management Instrumentation
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "WMI operations only available on Windows"
    
    If wql_query is null or wql_query equals "":
        Throw Errors.InvalidArgumentError with "Invalid WMI query"
    
    External "windows_wmi_query" that takes query as String returns List[Dictionary[String, String]]
    Return windows_wmi_query(wql_query)

Process called "wmi_get_class_instances" that takes class_name as String returns List[Dictionary[String, String]]:
    Note: Get all instances of WMI class
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "WMI operations only available on Windows"
    
    If class_name is null or class_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid WMI class name"
    
    Let query be StringCore.concat("SELECT * FROM ", class_name)
    External "windows_wmi_query" that takes query as String returns List[Dictionary[String, String]]
    Return windows_wmi_query(query)

Note: =====================================================================
Note: WINDOWS EVENT LOG (Windows system logging)
Note: =====================================================================

Type called "WindowsEventLogEntry":
    event_id as Integer
    level as String
    source as String
    message as String
    timestamp as String
    computer as String

Process called "read_event_log" that takes log_name as String, max_entries as Integer returns List[WindowsEventLogEntry]:
    Note: Read Windows Event Log entries
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Event Log operations only available on Windows"
    
    If log_name is null or log_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid log name"
    
    If max_entries <= 0:
        Let max_entries be 100
    
    External "windows_read_event_log" that takes name as String, max_count as Integer returns List[WindowsEventLogEntry]
    Return windows_read_event_log(log_name, max_entries)

Process called "write_event_log" that takes source as String, event_id as Integer, message as String returns Nothing:
    Note: Write entry to Windows Event Log
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Event Log operations only available on Windows"
    
    If source is null or source equals "" or message is null or message equals "":
        Throw Errors.InvalidArgumentError with "Invalid event log parameters"
    
    External "windows_write_event_log" that takes event_source as String, id as Integer, msg as String returns Boolean
    Let success be windows_write_event_log(source, event_id, message)
    
    If not success:
        Throw Errors.OperationError with "Failed to write event log entry"

Note: =====================================================================
Note: WINDOWS PROCESS MANAGEMENT (Windows-specific process features)
Note: =====================================================================

Process called "get_process_modules" that takes pid as Integer returns List[String]:
    Note: Get loaded modules for Windows process using Process Status API
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Process module operations only available on Windows"
    
    If pid <= 0:
        Throw Errors.InvalidArgumentError with "Invalid process ID"
    
    External "windows_get_process_modules" that takes process_id as Integer returns List[String]
    Return windows_get_process_modules(pid)

Process called "get_process_threads" that takes pid as Integer returns List[Dictionary[String, String]]:
    Note: Get thread information for Windows process
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Process thread operations only available on Windows"
    
    If pid <= 0:
        Throw Errors.InvalidArgumentError with "Invalid process ID"
    
    External "windows_get_process_threads" that takes process_id as Integer returns List[Dictionary[String, String]]
    Return windows_get_process_threads(pid)

Process called "is_process_elevated" that takes pid as Integer returns Boolean:
    Note: Check if Windows process is running with elevated privileges
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Process elevation check only available on Windows"
    
    If pid <= 0:
        Throw Errors.InvalidArgumentError with "Invalid process ID"
    
    External "windows_is_process_elevated" that takes process_id as Integer returns Boolean
    Return windows_is_process_elevated(pid)

Note: =====================================================================
Note: WINDOWS ENVIRONMENT AND PATHS
Note: =====================================================================

Process called "get_special_folder_path" that takes folder_id as String returns String:
    Note: Get Windows special folder path using SHGetFolderPath
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Special folder operations only available on Windows"
    
    If folder_id is null or folder_id equals "":
        Throw Errors.InvalidArgumentError with "Invalid folder ID"
    
    External "windows_get_special_folder" that takes folder as String returns String
    Return windows_get_special_folder(folder_id)

Process called "expand_environment_strings" that takes input as String returns String:
    Note: Expand Windows environment variables using ExpandEnvironmentStrings
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Environment expansion only available on Windows"
    
    If input is null:
        Return ""
    
    External "windows_expand_environment_strings" that takes str as String returns String
    Return windows_expand_environment_strings(input)

Note: =====================================================================
Note: WINDOWS USER ACCOUNT CONTROL (UAC)
Note: =====================================================================

Process called "is_user_admin" that takes nothing returns Boolean:
    Note: Check if current user has administrator privileges
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Admin check only available on Windows"
    
    External "windows_is_user_admin" that takes nothing returns Boolean
    Return windows_is_user_admin()

Process called "run_elevated" that takes command as String, args as List[String] returns Nothing:
    Note: Run command with elevated privileges using UAC prompt
    
    If not PlatformDetect.is_windows():
        Throw Errors.PlatformError with "Elevated execution only available on Windows"
    
    If command is null or command equals "":
        Throw Errors.InvalidArgumentError with "Invalid command"
    
    If args is null:
        Let args be empty List[String]
    
    External "windows_run_elevated" that takes cmd as String, arguments as List[String] returns Boolean
    Let success be windows_run_elevated(command, args)
    
    If not success:
        Throw Errors.OperationError with "Failed to run elevated command"

Note: =====================================================================
Note: INITIALIZATION
Note: =====================================================================

Process called "initialize_windows_platform" that takes nothing returns Nothing:
    Note: Initialize Windows platform operations
    
    If not PlatformDetect.is_windows():
        Note: Windows operations not available on this platform
        Return
    
    Note: Test basic Windows functionality
    Let is_admin be is_user_admin()
    
    Note: Windows platform operations initialized successfully