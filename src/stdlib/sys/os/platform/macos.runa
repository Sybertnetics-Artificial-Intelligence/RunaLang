Note: sys/os/platform/macos.runa
Note: macOS-Specific Operations - Pure macOS platform functionality
Note: 
Note: This module provides ONLY operations that are unique to macOS and cannot
Note: be implemented cross-platform. All generic operations are delegated to
Note: appropriate domain modules.

Import "dev/debug/errors/core" as Errors
Import "sys/os/platform/detection" as PlatformDetect
Import "sys/os/core/process" as Process
Import "sys/os/hardware/cpu" as CPUInfo
Import "sys/os/hardware/memory" as MemoryInfo
Import "sys/os/config/preferences" as Preferences
Import "data/collections/core/map" as MapOps
Import "data/collections/core/list" as ListOps
Import "text/string/core" as StringCore

Note: =====================================================================
Note: CORE FOUNDATION OPERATIONS (macOS-specific framework)
Note: =====================================================================

Process called "get_system_version_info" that takes nothing returns Dictionary[String, String]:
    Note: Get macOS system version using Core Foundation
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Core Foundation operations only available on macOS"
    
    External "macos_cf_get_system_version" that takes nothing returns Dictionary[String, String]
    Return macos_cf_get_system_version()

Process called "read_plist_value" that takes file_path as String, key as String returns String:
    Note: Read value from plist file using Core Foundation
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Plist operations only available on macOS"
    
    If file_path is null or file_path equals "" or key is null or key equals "":
        Throw Errors.InvalidArgumentError with "Invalid plist path or key"
    
    External "macos_cf_read_plist" that takes path as String, key_name as String returns String
    Return macos_cf_read_plist(file_path, key)

Process called "write_plist_value" that takes file_path as String, key as String, value as String returns Nothing:
    Note: Write value to plist file using Core Foundation
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Plist operations only available on macOS"
    
    If file_path is null or file_path equals "" or key is null or key equals "":
        Throw Errors.InvalidArgumentError with "Invalid plist parameters"
    
    External "macos_cf_write_plist" that takes path as String, key_name as String, val as String returns Nothing
    macos_cf_write_plist(file_path, key, value)

Note: =====================================================================
Note: LAUNCHD SERVICE OPERATIONS (macOS service manager)
Note: =====================================================================

Type called "LaunchdService":
    label as String
    program_path as String
    program_arguments as List[String]
    run_at_load as Boolean
    keep_alive as Boolean
    process_type as String
    limit_load_to_session_type as String

Process called "launchctl_load_service" that takes plist_path as String returns Nothing:
    Note: Load launchd service using launchctl
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Launchd operations only available on macOS"
    
    If plist_path is null or plist_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid plist path"
    
    External "macos_launchctl_load" that takes path as String returns Boolean
    Let success be macos_launchctl_load(plist_path)
    
    If not success:
        Throw Errors.OperationError with "Failed to load launchd service"

Process called "launchctl_unload_service" that takes plist_path as String returns Nothing:
    Note: Unload launchd service using launchctl
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Launchd operations only available on macOS"
    
    If plist_path is null or plist_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid plist path"
    
    External "macos_launchctl_unload" that takes path as String returns Boolean
    Let success be macos_launchctl_unload(plist_path)
    
    If not success:
        Throw Errors.OperationError with "Failed to unload launchd service"

Process called "launchctl_start_service" that takes service_label as String returns Nothing:
    Note: Start launchd service using launchctl
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Launchd operations only available on macOS"
    
    If service_label is null or service_label equals "":
        Throw Errors.InvalidArgumentError with "Invalid service label"
    
    External "macos_launchctl_start" that takes label as String returns Boolean
    Let success be macos_launchctl_start(service_label)
    
    If not success:
        Throw Errors.OperationError with "Failed to start launchd service"

Process called "launchctl_stop_service" that takes service_label as String returns Nothing:
    Note: Stop launchd service using launchctl
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Launchd operations only available on macOS"
    
    If service_label is null or service_label equals "":
        Throw Errors.InvalidArgumentError with "Invalid service label"
    
    External "macos_launchctl_stop" that takes label as String returns Boolean
    Let success be macos_launchctl_stop(service_label)
    
    If not success:
        Throw Errors.OperationError with "Failed to stop launchd service"

Process called "get_launchd_service_status" that takes service_label as String returns Dictionary[String, String]:
    Note: Get launchd service status using launchctl list
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Launchd operations only available on macOS"
    
    If service_label is null or service_label equals "":
        Throw Errors.InvalidArgumentError with "Invalid service label"
    
    External "macos_launchctl_list_service" that takes label as String returns Dictionary[String, String]
    Return macos_launchctl_list_service(service_label)

Process called "list_all_launchd_services" that takes nothing returns List[Dictionary[String, String]]:
    Note: List all launchd services using launchctl list
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Launchd operations only available on macOS"
    
    External "macos_launchctl_list_all" that takes nothing returns List[Dictionary[String, String]]
    Return macos_launchctl_list_all()

Note: =====================================================================
Note: EXTENDED ATTRIBUTES (macOS xattr system)
Note: =====================================================================

Process called "get_extended_attributes" that takes file_path as String returns Dictionary[String, String]:
    Note: Get extended attributes (xattrs) for file/directory
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Extended attribute operations only available on macOS"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    External "macos_xattr_list" that takes path as String returns Dictionary[String, String]
    Return macos_xattr_list(file_path)

Process called "set_extended_attribute" that takes file_path as String, name as String, value as String returns Nothing:
    Note: Set extended attribute on file/directory
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Extended attribute operations only available on macOS"
    
    If file_path is null or file_path equals "" or name is null or name equals "":
        Throw Errors.InvalidArgumentError with "Invalid extended attribute parameters"
    
    External "macos_xattr_set" that takes path as String, attr_name as String, attr_value as String returns Boolean
    Let success be macos_xattr_set(file_path, name, value)
    
    If not success:
        Throw Errors.OperationError with "Failed to set extended attribute"

Process called "remove_extended_attribute" that takes file_path as String, name as String returns Nothing:
    Note: Remove extended attribute from file/directory
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Extended attribute operations only available on macOS"
    
    If file_path is null or file_path equals "" or name is null or name equals "":
        Throw Errors.InvalidArgumentError with "Invalid extended attribute parameters"
    
    External "macos_xattr_remove" that takes path as String, attr_name as String returns Boolean
    Let success be macos_xattr_remove(file_path, name)
    
    If not success:
        Throw Errors.OperationError with "Failed to remove extended attribute"

Note: =====================================================================
Note: SPOTLIGHT OPERATIONS (macOS search system)
Note: =====================================================================

Process called "get_spotlight_metadata" that takes file_path as String returns Dictionary[String, String]:
    Note: Get Spotlight metadata for file using mdls
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Spotlight operations only available on macOS"
    
    If file_path is null or file_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid file path"
    
    External "macos_mdls_get_metadata" that takes path as String returns Dictionary[String, String]
    Return macos_mdls_get_metadata(file_path)

Process called "spotlight_search" that takes query as String returns List[String]:
    Note: Search files using Spotlight (mdfind)
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Spotlight operations only available on macOS"
    
    If query is null or query equals "":
        Throw Errors.InvalidArgumentError with "Invalid search query"
    
    External "macos_mdfind_search" that takes search_query as String returns List[String]
    Return macos_mdfind_search(query)

Note: =====================================================================
Note: APFS/HFS+ VOLUME OPERATIONS (macOS filesystems)
Note: =====================================================================

Process called "get_apfs_volume_info" that takes volume_path as String returns Dictionary[String, String]:
    Note: Get APFS volume information using diskutil
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "APFS operations only available on macOS"
    
    If volume_path is null or volume_path equals "":
        Throw Errors.InvalidArgumentError with "Invalid volume path"
    
    External "macos_diskutil_apfs_info" that takes path as String returns Dictionary[String, String]
    Return macos_diskutil_apfs_info(volume_path)

Process called "create_apfs_snapshot" that takes volume_name as String, snapshot_name as String returns Nothing:
    Note: Create APFS snapshot using diskutil
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "APFS operations only available on macOS"
    
    If volume_name is null or volume_name equals "" or snapshot_name is null or snapshot_name equals "":
        Throw Errors.InvalidArgumentError with "Invalid snapshot parameters"
    
    External "macos_diskutil_apfs_create_snapshot" that takes vol_name as String, snap_name as String returns Boolean
    Let success be macos_diskutil_apfs_create_snapshot(volume_name, snapshot_name)
    
    If not success:
        Throw Errors.OperationError with "Failed to create APFS snapshot"

Note: =====================================================================
Note: AIRPORT/WI-FI OPERATIONS (macOS Wi-Fi utilities)
Note: =====================================================================

Process called "get_wifi_info" that takes nothing returns Dictionary[String, String]:
    Note: Get Wi-Fi information using airport utility
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Airport operations only available on macOS"
    
    External "macos_airport_get_info" that takes nothing returns Dictionary[String, String]
    Return macos_airport_get_info()

Process called "scan_wifi_networks" that takes nothing returns List[Dictionary[String, String]]:
    Note: Scan for available Wi-Fi networks using airport utility
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Airport operations only available on macOS"
    
    External "macos_airport_scan" that takes nothing returns List[Dictionary[String, String]]
    Return macos_airport_scan()

Note: =====================================================================
Note: SYSTEM PROFILER OPERATIONS (macOS hardware info)
Note: =====================================================================

Process called "get_system_profiler_data" that takes data_type as String returns Dictionary[String, String]:
    Note: Get system information using system_profiler
    Note: Delegates to hardware modules for CPU/memory, provides macOS-specific data
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "System profiler operations only available on macOS"
    
    If data_type is null or data_type equals "":
        Throw Errors.InvalidArgumentError with "Invalid data type"
    
    Note: For hardware info, delegate to existing modules
    If data_type equals "SPHardwareDataType":
        Let cpu_info be CPUInfo.get_cpu_info()
        Let memory_info be MemoryInfo.get_memory_info()
        Let hardware_info be MapOps.create()
        Set hardware_info["cpu_model"] to cpu_info.model_name
        Set hardware_info["cpu_cores"] to StringCore.concat("", cpu_info.cpu_cores)
        Set hardware_info["memory_gb"] to StringCore.concat("", (memory_info.total_physical / 1073741824))
        Return hardware_info
    
    Note: For other system profiler data, use native calls
    External "macos_system_profiler_get_data" that takes type as String returns Dictionary[String, String]
    Return macos_system_profiler_get_data(data_type)

Note: =====================================================================
Note: SECURITY FRAMEWORK OPERATIONS (macOS Keychain/Security)
Note: =====================================================================

Process called "keychain_find_generic_password" that takes service as String, account as String returns String:
    Note: Find generic password in keychain using Security framework
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Keychain operations only available on macOS"
    
    If service is null or service equals "" or account is null or account equals "":
        Throw Errors.InvalidArgumentError with "Invalid keychain parameters"
    
    External "macos_keychain_find_password" that takes service_name as String, account_name as String returns String
    Return macos_keychain_find_password(service, account)

Process called "keychain_add_generic_password" that takes service as String, account as String, password as String returns Nothing:
    Note: Add generic password to keychain using Security framework
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Keychain operations only available on macOS"
    
    If service is null or service equals "" or account is null or account equals "" or password is null:
        Throw Errors.InvalidArgumentError with "Invalid keychain parameters"
    
    External "macos_keychain_add_password" that takes service_name as String, account_name as String, pwd as String returns Boolean
    Let success be macos_keychain_add_password(service, account, password)
    
    If not success:
        Throw Errors.OperationError with "Failed to add password to keychain"

Note: =====================================================================
Note: COCOA/APPKIT BRIDGE OPERATIONS (macOS GUI framework access)
Note: =====================================================================

Process called "show_notification" that takes title as String, message as String returns Nothing:
    Note: Show macOS notification using NSUserNotification
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Notification operations only available on macOS"
    
    If title is null or title equals "" or message is null or message equals "":
        Throw Errors.InvalidArgumentError with "Invalid notification parameters"
    
    External "macos_show_notification" that takes notification_title as String, notification_message as String returns Nothing
    macos_show_notification(title, message)

Process called "get_application_info" that takes bundle_identifier as String returns Dictionary[String, String]:
    Note: Get macOS application information from bundle
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Application info operations only available on macOS"
    
    If bundle_identifier is null or bundle_identifier equals "":
        Throw Errors.InvalidArgumentError with "Invalid bundle identifier"
    
    External "macos_get_app_info" that takes bundle_id as String returns Dictionary[String, String]
    Return macos_get_app_info(bundle_identifier)

Note: =====================================================================
Note: PREFERENCES INTEGRATION (delegated to preferences module)
Note: =====================================================================

Process called "get_defaults_value" that takes domain as String, key as String returns String:
    Note: Get macOS defaults value (delegates to preferences module)
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Defaults operations only available on macOS"
    
    Return Preferences.get_preference(domain, key)

Process called "set_defaults_value" that takes domain as String, key as String, value as String returns Nothing:
    Note: Set macOS defaults value (delegates to preferences module)
    
    If not PlatformDetect.is_macos():
        Throw Errors.PlatformError with "Defaults operations only available on macOS"
    
    Preferences.set_preference(domain, key, value)

Note: =====================================================================
Note: INITIALIZATION
Note: =====================================================================

Process called "initialize_macos_platform" that takes nothing returns Nothing:
    Note: Initialize macOS platform operations
    
    If not PlatformDetect.is_macos():
        Note: macOS operations not available on this platform
        Return
    
    Note: Test basic macOS functionality
    Let version_info be get_system_version_info()
    
    If MapOps.is_empty(version_info):
        Throw Errors.SystemError with "Could not access macOS system information"
    
    Note: macOS platform operations initialized successfully