Note:
sys/os/core/environment.runa
Environment Variables and System Information

This module provides high-level, cross-platform environment variable operations
and system information access built on top of the runtime interface system calls. 
All functions handle validation, error checking, and provide user-friendly interfaces.
:End Note

Import "dev/debug/errors/core" as Errors
Import "text/string/core" as StringCore
Import "text/string/manipulation" as StringManip

Note: =====================================================================
Note: CORE ENVIRONMENT VARIABLE OPERATIONS
Note: =====================================================================

Process called "get" that takes name as String returns String:
    Note: Get environment variable value by name
    Note: Returns the value if found, empty string if not found
    Note: Throws InvalidArgument if name is invalid
    
    If name is null or name is empty:
        Throw Errors.InvalidArgument with "Environment variable name cannot be null or empty"
    
    Note: Validate environment variable name format
    If not is_valid_env_name(name):
        Throw Errors.InvalidArgument with "Invalid environment variable name format: " joined with name
    
    External "system_call_environment_get" that takes name as String returns String
    Let value be system_call_environment_get(name)
    
    Note: Runtime returns null for non-existent variables
    If value is null:
        Return ""
    
    Return value

Process called "set" that takes name as String, value as String returns Nothing:
    Note: Set environment variable to specified value
    Note: Creates variable if it doesn't exist, updates if it does
    Note: Throws InvalidArgument for invalid names or SystemError on failure
    
    If name is null or name is empty:
        Throw Errors.InvalidArgument with "Environment variable name cannot be null or empty"
    
    If not is_valid_env_name(name):
        Throw Errors.InvalidArgument with "Invalid environment variable name format: " joined with name
    
    Note: Allow null/empty values (will be converted to empty string)
    Let safe_value be if value is null then "" otherwise value
    
    External "system_call_environment_set" that takes name as String, value as String returns Boolean
    Let success be system_call_environment_set(name, safe_value)
    
    If not success:
        Throw Errors.SystemError with "Failed to set environment variable: " joined with name

Process called "unset" that takes name as String returns Nothing:
    Note: Remove environment variable
    Note: Throws InvalidArgument for invalid names
    
    If name is null or name is empty:
        Throw Errors.InvalidArgument with "Environment variable name cannot be null or empty"
    
    If not is_valid_env_name(name):
        Throw Errors.InvalidArgument with "Invalid environment variable name format: " joined with name
    
    External "system_call_environment_unset" that takes name as String returns Boolean
    Let success be system_call_environment_unset(name)
    
    Note: Don't throw error if variable doesn't exist - that's not an error condition
    If not success:
        Throw Errors.SystemError with "Failed to unset environment variable: " joined with name

Note: =====================================================================
Note: ENVIRONMENT QUERY OPERATIONS
Note: =====================================================================

Process called "exists" that takes name as String returns Boolean:
    Note: Check if environment variable exists
    Note: Throws InvalidArgument if name is invalid
    
    If name is null or name is empty:
        Throw Errors.InvalidArgument with "Environment variable name cannot be null or empty"
    
    If not is_valid_env_name(name):
        Throw Errors.InvalidArgument with "Invalid environment variable name format: " joined with name
    
    External "system_call_environment_exists" that takes name as String returns Boolean
    Return system_call_environment_exists(name)

Process called "get_all" returns Map:
    Note: Get all environment variables as key-value map
    Note: Returns empty map if no variables exist
    
    External "system_call_environment_get_all" returns Map
    Let env_map be system_call_environment_get_all()
    
    Note: Runtime should never return null for this call
    If env_map is null:
        Return empty Map
    
    Return env_map

Process called "list_names" returns List:
    Note: Get list of all environment variable names
    Note: Returns empty list if no variables exist
    
    Let env_map be get_all()
    Return env_map.keys()

Note: =====================================================================
Note: SYSTEM INFORMATION OPERATIONS
Note: =====================================================================

Process called "get_os_name" returns String:
    Note: Get operating system name
    Note: TODO: Implement OS name retrieval
    Throw Errors.NotImplemented with "OS name retrieval not yet implemented"

Process called "get_os_version" returns String:
    Note: Get operating system version
    Note: TODO: Implement OS version retrieval
    Throw Errors.NotImplemented with "OS version retrieval not yet implemented"

Process called "get_hostname" returns String:
    Note: Get system hostname
    Note: TODO: Implement hostname retrieval
    Throw Errors.NotImplemented with "Hostname retrieval not yet implemented"

Process called "get_username" returns String:
    Note: Get current username
    Note: TODO: Implement username retrieval
    Throw Errors.NotImplemented with "Username retrieval not yet implemented"

Note: =====================================================================
Note: HELPER OPERATIONS
Note: =====================================================================

Process called "is_valid_env_name" that takes name as String returns Boolean:
    Note: Validate environment variable name format
    Note: Names must start with letter or underscore, contain only alphanumeric and underscore
    
    If name is null or name is empty:
        Return false
    
    Note: Check first character - must be letter or underscore
    Let first_char be StringCore.get_char_at(name, 0)
    If not (StringCore.is_letter(first_char) or first_char equals "_"):
        Return false
    
    Note: Check remaining characters - must be alphanumeric or underscore
    Let length be StringCore.length(name)
    Let index be 1
    While index is less than length:
        Let char be StringCore.get_char_at(name, index)
        If not (StringCore.is_alphanumeric(char) or char equals "_"):
            Return false
        Set index to index plus 1
    
    Return true
