Note:
Cryptographic Services and Security Operations Module

This module provides comprehensive cryptographic services for the Runa runtime
environment. It implements encryption/decryption operations, hashing and signing,
key management, secure random generation, and various cryptographic protocols
to ensure data security and integrity.

Core responsibilities:
- Symmetric and asymmetric encryption/decryption
- Cryptographic hashing and digital signatures
- Secure key generation, storage, and management
- Secure random number generation and entropy management
- Certificate management and public key infrastructure
- Cryptographic protocol implementation (TLS, etc.)
:End Note

Import "dev/debug/errors/core" as Errors

Note: ===== Cryptographic Algorithm Types =====

Type called "EncryptionAlgorithm" is:
    | AES128                             Note: Advanced Encryption Standard 128-bit
    | AES192                             Note: Advanced Encryption Standard 192-bit
    | AES256                             Note: Advanced Encryption Standard 256-bit
    | ChaCha20                           Note: ChaCha20 stream cipher
    | RSA2048                            Note: RSA with 2048-bit key
    | RSA4096                            Note: RSA with 4096-bit key
    | ECC256                             Note: Elliptic Curve Cryptography P-256
    | ECC384                             Note: Elliptic Curve Cryptography P-384
    | Custom as String                   Note: Custom encryption algorithm

Type called "HashAlgorithm" is:
    | SHA256                             Note: SHA-2 256-bit
    | SHA384                             Note: SHA-2 384-bit
    | SHA512                             Note: SHA-2 512-bit
    | SHA3_256                           Note: SHA-3 256-bit
    | SHA3_512                           Note: SHA-3 512-bit
    | BLAKE3                             Note: BLAKE3 cryptographic hash
    | Custom as String                   Note: Custom hash algorithm

Type called "SignatureAlgorithm" is:
    | RSA_PSS                            Note: RSA with PSS padding
    | RSA_PKCS1v15                       Note: RSA with PKCS#1 v1.5 padding
    | ECDSA_P256                         Note: ECDSA with P-256 curve
    | ECDSA_P384                         Note: ECDSA with P-384 curve
    | Ed25519                            Note: EdDSA with Curve25519
    | Custom as String                   Note: Custom signature algorithm

Note: ===== Key Management Types =====

Type called "CryptographicKey":
    key_id as String                     Note: Unique key identifier
    key_type as KeyType                  Note: Type of cryptographic key
    algorithm as String                  Note: Associated algorithm
    key_size_bits as Integer             Note: Key size in bits
    key_data as SecureBytes              Note: Actual key material
    public_key as Optional[SecureBytes]  Note: Public key if asymmetric
    creation_time as Timestamp           Note: When key was created
    expiration_time as Optional[Timestamp] Note: When key expires
    usage_permissions as List[KeyUsage] Note: Permitted key uses
    metadata as Dictionary[String, String] Note: Additional key metadata

Type called "KeyType" is:
    | Symmetric                          Note: Symmetric encryption key
    | AsymmetricPrivate                  Note: Private key of asymmetric pair
    | AsymmetricPublic                   Note: Public key of asymmetric pair
    | HMAC                               Note: HMAC authentication key
    | KeyDerivation                      Note: Key derivation key
    | MasterKey                          Note: Master key for key derivation

Type called "KeyUsage" is:
    | Encryption                         Note: Key can be used for encryption
    | Decryption                         Note: Key can be used for decryption
    | Signing                            Note: Key can be used for signing
    | Verification                       Note: Key can be used for verification
    | KeyDerivation                      Note: Key can derive other keys
    | KeyAgreement                       Note: Key can be used in key agreement
    | Authentication                     Note: Key can be used for authentication

Type called "SecureBytes":
    data as List[Integer]                Note: Encrypted/protected byte array
    checksum as String                   Note: Integrity checksum
    encryption_key_id as Optional[String] Note: Key used to protect this data
    is_encrypted as Boolean              Note: Whether data is encrypted

Note: ===== Encryption and Decryption Types =====

Type called "EncryptionContext":
    algorithm as EncryptionAlgorithm     Note: Encryption algorithm to use
    key_id as String                     Note: Key for encryption
    initialization_vector as Optional[SecureBytes] Note: IV for encryption
    additional_data as Optional[SecureBytes] Note: Additional authenticated data
    mode as EncryptionMode               Note: Encryption mode
    padding as PaddingScheme             Note: Padding scheme if applicable

Type called "EncryptionMode" is:
    | CBC                                Note: Cipher Block Chaining
    | GCM                                Note: Galois/Counter Mode
    | CTR                                Note: Counter Mode
    | ECB                                Note: Electronic Codebook (not recommended)
    | CFB                                Note: Cipher Feedback
    | OFB                                Note: Output Feedback

Type called "PaddingScheme" is:
    | PKCS7                              Note: PKCS#7 padding
    | OAEP                               Note: Optimal Asymmetric Encryption Padding
    | PSS                                Note: Probabilistic Signature Scheme
    | None                               Note: No padding

Type called "EncryptionResult":
    ciphertext as SecureBytes            Note: Encrypted data
    authentication_tag as Optional[SecureBytes] Note: Authentication tag (AEAD)
    metadata as Dictionary[String, String] Note: Encryption metadata

Type called "DecryptionContext":
    algorithm as EncryptionAlgorithm     Note: Decryption algorithm
    key_id as String                     Note: Key for decryption
    initialization_vector as Optional[SecureBytes] Note: IV used during encryption
    authentication_tag as Optional[SecureBytes] Note: Authentication tag to verify
    additional_data as Optional[SecureBytes] Note: Additional authenticated data

Note: ===== Digital Signature Types =====

Type called "SigningContext":
    algorithm as SignatureAlgorithm      Note: Signature algorithm to use
    private_key_id as String             Note: Private key for signing
    hash_algorithm as HashAlgorithm      Note: Hash algorithm for signing
    message_format as MessageFormat      Note: Format of message being signed
    additional_context as Optional[Dictionary[String, String]] Note: Additional signing context

Type called "MessageFormat" is:
    | Raw                                Note: Raw message bytes
    | ASN1_DER                           Note: ASN.1 DER encoded
    | JSON                               Note: JSON formatted message
    | XML                                Note: XML formatted message
    | Custom as String                   Note: Custom message format

Type called "DigitalSignature":
    signature_data as SecureBytes        Note: Digital signature bytes
    algorithm as SignatureAlgorithm      Note: Algorithm used for signing
    public_key_id as String              Note: Public key for verification
    message_hash as SecureBytes          Note: Hash of signed message
    creation_time as Timestamp           Note: When signature was created
    metadata as Dictionary[String, String] Note: Signature metadata

Type called "VerificationContext":
    signature as DigitalSignature        Note: Signature to verify
    message as SecureBytes               Note: Original message
    public_key_id as String              Note: Public key for verification
    trust_chain as Optional[List[String]] Note: Certificate trust chain

Type called "VerificationResult":
    is_valid as Boolean                  Note: Whether signature is valid
    verification_time as Timestamp       Note: When verification was performed
    trust_level as TrustLevel            Note: Trust level of verification
    error_message as Optional[String]    Note: Error message if invalid
    certificate_chain_valid as Boolean   Note: Whether certificate chain is valid

Note: ===== Key Derivation and Agreement Types =====

Type called "KeyDerivationFunction" is:
    | PBKDF2                             Note: Password-Based Key Derivation Function 2
    | Argon2                             Note: Argon2 key derivation
    | HKDF                               Note: HMAC-based Key Derivation Function
    | Scrypt                             Note: Scrypt key derivation
    | ECDH                               Note: Elliptic Curve Diffie-Hellman
    | Custom as String                   Note: Custom key derivation function

Type called "KeyDerivationContext":
    function as KeyDerivationFunction    Note: Derivation function to use
    input_key_material as SecureBytes    Note: Input key material
    salt as Optional[SecureBytes]        Note: Salt for derivation
    info as Optional[SecureBytes]        Note: Context info for derivation
    iterations as Optional[Integer]      Note: Iteration count if applicable
    output_length as Integer             Note: Desired output key length

Type called "KeyAgreementContext":
    algorithm as KeyAgreementAlgorithm   Note: Key agreement algorithm
    local_private_key_id as String       Note: Local private key
    remote_public_key as SecureBytes     Note: Remote public key
    shared_info as Optional[SecureBytes] Note: Shared context information
    key_confirmation as Boolean          Note: Whether to perform key confirmation

Type called "KeyAgreementAlgorithm" is:
    | ECDH_P256                          Note: ECDH with P-256 curve
    | ECDH_P384                          Note: ECDH with P-384 curve
    | DH                                 Note: Diffie-Hellman key agreement
    | X25519                             Note: X25519 key agreement
    | Custom as String                   Note: Custom key agreement

Note: ===== Certificate and PKI Types =====

Type called "Certificate":
    certificate_id as String             Note: Unique certificate identifier
    certificate_data as SecureBytes      Note: DER-encoded certificate
    subject as CertificateSubject        Note: Certificate subject information
    issuer as CertificateSubject         Note: Certificate issuer information
    public_key as SecureBytes            Note: Subject's public key
    serial_number as String              Note: Certificate serial number
    valid_from as Timestamp              Note: Certificate validity start
    valid_until as Timestamp             Note: Certificate validity end
    key_usage as List[KeyUsage]          Note: Permitted key uses
    extensions as Dictionary[String, String] Note: Certificate extensions

Type called "CertificateSubject":
    common_name as String                Note: Common name (CN)
    organization as Optional[String]     Note: Organization (O)
    organizational_unit as Optional[String] Note: Organizational unit (OU)
    country as Optional[String]          Note: Country (C)
    state as Optional[String]            Note: State/Province (ST)
    locality as Optional[String]         Note: Locality/City (L)
    email as Optional[String]            Note: Email address

Type called "CertificateChain":
    chain_id as String                   Note: Unique chain identifier
    certificates as List[Certificate]    Note: Certificate chain (leaf to root)
    trust_anchor as Certificate          Note: Trusted root certificate
    validation_time as Optional[Timestamp] Note: Time for chain validation
    revocation_checking as Boolean       Note: Whether to check revocation

Type called "CertificateRevocationList":
    crl_id as String                     Note: Unique CRL identifier
    issuer as CertificateSubject         Note: CRL issuer
    this_update as Timestamp             Note: CRL issue time
    next_update as Timestamp             Note: Next CRL update time
    revoked_certificates as List[RevokedCertificate] Note: Revoked certificates
    signature as DigitalSignature        Note: CRL signature

Note: ===== Core Cryptographic Functions =====

Process called "initialize_crypto_services" that takes config as CryptoServicesConfig returns CryptoServices:
    Note: Initializes cryptographic services with security configuration
    Note: Sets up crypto providers, key stores, and security policies
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement crypto services initialization
    Throw Errors.NotImplemented

Process called "generate_secure_random" that takes byte_count as Integer returns SecureBytes:
    Note: Generates cryptographically secure random bytes
    Note: Uses system entropy sources and cryptographic RNG
    Note: Time complexity: O(n) where n is byte count, Space complexity: O(n)
    Note: TODO: Implement secure random generation
    Throw Errors.NotImplemented

Process called "hash_data" that takes data as SecureBytes, algorithm as HashAlgorithm returns SecureBytes:
    Note: Computes cryptographic hash of data using specified algorithm
    Note: Returns fixed-size hash digest
    Note: Time complexity: O(n) where n is data size, Space complexity: O(1)
    Note: TODO: Implement cryptographic hashing
    Throw Errors.NotImplemented

Process called "verify_hash" that takes data as SecureBytes, expected_hash as SecureBytes, algorithm as HashAlgorithm returns Boolean:
    Note: Verifies data against expected hash value
    Note: Computes hash and performs constant-time comparison
    Note: Time complexity: O(n) where n is data size, Space complexity: O(1)
    Note: TODO: Implement hash verification
    Throw Errors.NotImplemented

Note: ===== Key Management Functions =====

Process called "generate_key" that takes algorithm as EncryptionAlgorithm, key_size as Integer, usage as List[KeyUsage] returns String:
    Note: Generates new cryptographic key with specified parameters
    Note: Returns unique key ID for key management
    Note: Time complexity: O(k) where k is key generation complexity, Space complexity: O(s) where s is key size
    Note: TODO: Implement key generation
    Throw Errors.NotImplemented

Process called "generate_key_pair" that takes algorithm as EncryptionAlgorithm, key_size as Integer returns Tuple[String, String]:
    Note: Generates asymmetric key pair (private and public keys)
    Note: Returns tuple of (private_key_id, public_key_id)
    Note: Time complexity: O(k), Space complexity: O(s * 2)
    Note: TODO: Implement key pair generation
    Throw Errors.NotImplemented

Process called "derive_key" that takes context as KeyDerivationContext returns String:
    Note: Derives key from input key material using specified function
    Note: Returns new key ID for derived key
    Note: Time complexity: O(i) where i is iterations, Space complexity: O(o) where o is output length
    Note: TODO: Implement key derivation
    Throw Errors.NotImplemented

Process called "import_key" that takes key_data as SecureBytes, algorithm as EncryptionAlgorithm, metadata as Dictionary[String, String] returns String:
    Note: Imports external key into key management system
    Note: Returns key ID for imported key
    Note: Time complexity: O(1), Space complexity: O(k) where k is key size
    Note: TODO: Implement key import
    Throw Errors.NotImplemented

Process called "export_key" that takes key_id as String, format as KeyFormat, password as Optional[String] returns SecureBytes:
    Note: Exports key in specified format, optionally password-protected
    Note: Returns encrypted/encoded key data
    Note: Time complexity: O(1), Space complexity: O(k)
    Note: TODO: Implement key export
    Throw Errors.NotImplemented

Process called "delete_key" that takes key_id as String returns Boolean:
    Note: Securely deletes cryptographic key from system
    Note: Overwrites key material and removes from storage
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement secure key deletion
    Throw Errors.NotImplemented

Note: ===== Encryption and Decryption Functions =====

Process called "encrypt_data" that takes data as SecureBytes, context as EncryptionContext returns EncryptionResult:
    Note: Encrypts data using specified encryption context
    Note: Returns encrypted data with authentication information
    Note: Time complexity: O(n) where n is data size, Space complexity: O(n)
    Note: TODO: Implement data encryption
    Throw Errors.NotImplemented

Process called "decrypt_data" that takes ciphertext as SecureBytes, context as DecryptionContext returns SecureBytes:
    Note: Decrypts data using specified decryption context
    Note: Verifies authentication and returns plaintext
    Note: Time complexity: O(n) where n is ciphertext size, Space complexity: O(n)
    Note: TODO: Implement data decryption
    Throw Errors.NotImplemented

Process called "encrypt_file" that takes file_path as String, output_path as String, context as EncryptionContext returns Boolean:
    Note: Encrypts file contents using streaming encryption
    Note: Processes large files efficiently without loading entire file
    Note: Time complexity: O(f) where f is file size, Space complexity: O(b) where b is buffer size
    Note: TODO: Implement file encryption
    Throw Errors.NotImplemented

Process called "decrypt_file" that takes encrypted_file_path as String, output_path as String, context as DecryptionContext returns Boolean:
    Note: Decrypts file contents using streaming decryption
    Note: Processes large encrypted files efficiently
    Note: Time complexity: O(f), Space complexity: O(b)
    Note: TODO: Implement file decryption
    Throw Errors.NotImplemented

Process called "encrypt_string" that takes plaintext as String, key_id as String, algorithm as EncryptionAlgorithm returns String:
    Note: Encrypts string data and returns base64-encoded result
    Note: Convenience function for string encryption
    Note: Time complexity: O(s) where s is string length, Space complexity: O(s)
    Note: TODO: Implement string encryption
    Throw Errors.NotImplemented

Process called "decrypt_string" that takes encrypted_data as String, key_id as String, algorithm as EncryptionAlgorithm returns String:
    Note: Decrypts base64-encoded encrypted string
    Note: Convenience function for string decryption
    Note: Time complexity: O(s), Space complexity: O(s)
    Note: TODO: Implement string decryption
    Throw Errors.NotImplemented

Note: ===== Digital Signature Functions =====

Process called "sign_data" that takes data as SecureBytes, context as SigningContext returns DigitalSignature:
    Note: Creates digital signature for data using private key
    Note: Returns signature with metadata for verification
    Note: Time complexity: O(s) where s is signing complexity, Space complexity: O(d) where d is data size
    Note: TODO: Implement digital signature creation
    Throw Errors.NotImplemented

Process called "verify_signature" that takes data as SecureBytes, signature as DigitalSignature, context as VerificationContext returns VerificationResult:
    Note: Verifies digital signature against original data
    Note: Validates signature authenticity and integrity
    Note: Time complexity: O(v) where v is verification complexity, Space complexity: O(1)
    Note: TODO: Implement digital signature verification
    Throw Errors.NotImplemented

Process called "sign_message" that takes message as String, private_key_id as String, algorithm as SignatureAlgorithm returns String:
    Note: Signs text message and returns base64-encoded signature
    Note: Convenience function for message signing
    Note: Time complexity: O(m + s) where m is message size, Space complexity: O(m)
    Note: TODO: Implement message signing
    Throw Errors.NotImplemented

Process called "verify_message_signature" that takes message as String, signature as String, public_key_id as String returns Boolean:
    Note: Verifies base64-encoded signature against text message
    Note: Convenience function for message signature verification
    Note: Time complexity: O(m + v), Space complexity: O(1)
    Note: TODO: Implement message signature verification
    Throw Errors.NotImplemented

Note: ===== HMAC and Authentication Functions =====

Process called "compute_hmac" that takes data as SecureBytes, key_id as String, hash_algorithm as HashAlgorithm returns SecureBytes:
    Note: Computes HMAC (Hash-based Message Authentication Code)
    Note: Provides data integrity and authentication
    Note: Time complexity: O(d) where d is data size, Space complexity: O(1)
    Note: TODO: Implement HMAC computation
    Throw Errors.NotImplemented

Process called "verify_hmac" that takes data as SecureBytes, hmac as SecureBytes, key_id as String, hash_algorithm as HashAlgorithm returns Boolean:
    Note: Verifies HMAC against original data
    Note: Performs constant-time comparison for security
    Note: Time complexity: O(d), Space complexity: O(1)
    Note: TODO: Implement HMAC verification
    Throw Errors.NotImplemented

Process called "generate_authentication_token" that takes payload as Dictionary[String, String], key_id as String, expiration as Duration returns String:
    Note: Generates authenticated token (similar to JWT) with payload
    Note: Signs payload with expiration and returns encoded token
    Note: Time complexity: O(p) where p is payload size, Space complexity: O(p)
    Note: TODO: Implement authentication token generation
    Throw Errors.NotImplemented

Process called "verify_authentication_token" that takes token as String, key_id as String returns Optional[Dictionary[String, String]]:
    Note: Verifies and decodes authentication token
    Note: Returns payload if valid, None if invalid or expired
    Note: Time complexity: O(t) where t is token size, Space complexity: O(p) where p is payload
    Note: TODO: Implement authentication token verification
    Throw Errors.NotImplemented

Note: ===== Key Agreement Functions =====

Process called "perform_key_agreement" that takes context as KeyAgreementContext returns SecureBytes:
    Note: Performs key agreement protocol to derive shared key
    Note: Uses public key cryptography to establish shared secret
    Note: Time complexity: O(a) where a is agreement complexity, Space complexity: O(k) where k is key size
    Note: TODO: Implement key agreement protocol
    Throw Errors.NotImplemented

Process called "generate_ephemeral_keypair" that takes algorithm as EncryptionAlgorithm returns Tuple[String, SecureBytes]:
    Note: Generates ephemeral key pair for temporary use
    Note: Returns private key ID and public key bytes
    Note: Time complexity: O(g) where g is generation complexity, Space complexity: O(k * 2)
    Note: TODO: Implement ephemeral key pair generation
    Throw Errors.NotImplemented

Process called "establish_secure_channel" that takes remote_public_key as SecureBytes, local_private_key_id as String returns SecureChannelContext:
    Note: Establishes secure communication channel using key agreement
    Note: Derives encryption and authentication keys from shared secret
    Note: Time complexity: O(a + d), Space complexity: O(c) where c is channel context
    Note: TODO: Implement secure channel establishment
    Throw Errors.NotImplemented

Note: ===== Certificate Management Functions =====

Process called "import_certificate" that takes certificate_data as SecureBytes, trusted as Boolean returns String:
    Note: Imports X.509 certificate into certificate store
    Note: Returns certificate ID for certificate management
    Note: Time complexity: O(c) where c is certificate parsing complexity, Space complexity: O(c)
    Note: TODO: Implement certificate import
    Throw Errors.NotImplemented

Process called "validate_certificate_chain" that takes chain as CertificateChain, validation_time as Optional[Timestamp] returns CertificateValidationResult:
    Note: Validates certificate chain against trusted anchors
    Note: Checks signatures, validity periods, and revocation status
    Note: Time complexity: O(n * v) where n is chain length, v is validation complexity, Space complexity: O(1)
    Note: TODO: Implement certificate chain validation
    Throw Errors.NotImplemented

Process called "revoke_certificate" that takes certificate_id as String, revocation_reason as String returns Boolean:
    Note: Revokes certificate and adds to revocation list
    Note: Marks certificate as no longer trusted
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement certificate revocation
    Throw Errors.NotImplemented

Process called "generate_certificate_request" that takes subject as CertificateSubject, private_key_id as String, extensions as Dictionary[String, String] returns SecureBytes:
    Note: Generates Certificate Signing Request (CSR)
    Note: Creates request for certificate authority signing
    Note: Time complexity: O(r) where r is request generation complexity, Space complexity: O(r)
    Note: TODO: Implement CSR generation
    Throw Errors.NotImplemented

Note: ===== Password and Secret Management Functions =====

Process called "hash_password" that takes password as String, salt as Optional[SecureBytes] returns PasswordHash:
    Note: Hashes password using secure password hashing function
    Note: Uses appropriate algorithm (Argon2, PBKDF2, etc.) with salt
    Note: Time complexity: O(i) where i is iterations, Space complexity: O(h) where h is hash size
    Note: TODO: Implement secure password hashing
    Throw Errors.NotImplemented

Process called "verify_password" that takes password as String, hash as PasswordHash returns Boolean:
    Note: Verifies password against stored hash
    Note: Performs constant-time comparison for security
    Note: Time complexity: O(i), Space complexity: O(1)
    Note: TODO: Implement password verification
    Throw Errors.NotImplemented

Process called "generate_secure_password" that takes length as Integer, complexity_requirements as PasswordComplexity returns String:
    Note: Generates cryptographically secure password
    Note: Meets specified complexity requirements
    Note: Time complexity: O(l) where l is length, Space complexity: O(l)
    Note: TODO: Implement secure password generation
    Throw Errors.NotImplemented

Process called "store_secret" that takes secret_name as String, secret_data as SecureBytes, metadata as Dictionary[String, String] returns String:
    Note: Securely stores secret data with encryption
    Note: Returns secret ID for retrieval and management
    Note: Time complexity: O(s) where s is secret size, Space complexity: O(s)
    Note: TODO: Implement secure secret storage
    Throw Errors.NotImplemented

Process called "retrieve_secret" that takes secret_id as String returns Optional[SecureBytes]:
    Note: Retrieves and decrypts stored secret data
    Note: Returns secret data or None if not found
    Note: Time complexity: O(s), Space complexity: O(s)
    Note: TODO: Implement secret retrieval
    Throw Errors.NotImplemented

Note: ===== Crypto Protocol Functions =====

Process called "secure_compare" that takes data1 as SecureBytes, data2 as SecureBytes returns Boolean:
    Note: Performs constant-time comparison of sensitive data
    Note: Prevents timing attacks on cryptographic operations
    Note: Time complexity: O(n) where n is data size, Space complexity: O(1)
    Note: TODO: Implement constant-time comparison
    Throw Errors.NotImplemented

Process called "clear_sensitive_data" that takes data as SecureBytes returns Boolean:
    Note: Securely overwrites sensitive data in memory
    Note: Prevents data recovery from memory dumps
    Note: Time complexity: O(n), Space complexity: O(1)
    Note: TODO: Implement secure memory clearing
    Throw Errors.NotImplemented

Process called "generate_nonce" that takes size as Integer returns SecureBytes:
    Note: Generates cryptographic nonce (number used once)
    Note: Ensures uniqueness for cryptographic operations
    Note: Time complexity: O(s), Space complexity: O(s)
    Note: TODO: Implement nonce generation
    Throw Errors.NotImplemented

Process called "key_stretching" that takes weak_key as SecureBytes, salt as SecureBytes, iterations as Integer, output_length as Integer returns SecureBytes:
    Note: Strengthens weak key material through key stretching
    Note: Uses iterative hashing to increase key entropy
    Note: Time complexity: O(i) where i is iterations, Space complexity: O(o) where o is output length
    Note: TODO: Implement key stretching
    Throw Errors.NotImplemented