Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/thread_syscalls.runa
NetBSD Thread Management Syscalls

This module provides NetBSD-specific thread management syscall implementations,
including pthread operations and NetBSD-specific threading features.

Key features and capabilities:
- Thread creation (LWP)
- Thread termination
- Thread synchronization
- Thread-local storage
- Thread priorities
- Thread scheduling
- Thread signaling
- Scheduler activations
- User-level threading
- Kernel threads
- Thread debugging
- Thread statistics
- Condition variables
- Read-write locks
- Thread barriers
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Lightweight Process (LWP) Management =====

Process called "sys_lwp_create" that takes ucp as Pointer, flags as Integer, new_lwp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: user context
        "mov rsi, %2\n"           Note: creation flags
        "mov rdx, %3\n"           Note: new LWP ID
        "mov rax, %4\n"           Note: _lwp_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ucp), "r" (flags), "r" (new_lwp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_exit" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_exit")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: _lwp_exit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_self" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_self")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: _lwp_self syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_wait" that takes wait_for as Integer, departed as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_wait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: LWP to wait for
        "mov rsi, %2\n"           Note: departed LWP ID
        "mov rax, %3\n"           Note: _lwp_wait syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (wait_for), "r" (departed), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Synchronization =====

Process called "sys_lwp_park" that takes abstime as Pointer, unpark as Integer, hint as Pointer, unparkhint as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_park")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: absolute timeout
        "mov rsi, %2\n"           Note: unpark LWP
        "mov rdx, %3\n"           Note: park hint
        "mov r10, %4\n"           Note: unpark hint
        "mov rax, %5\n"           Note: _lwp_park syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (abstime), "r" (unpark), "r" (hint), "r" (unparkhint), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_unpark" that takes target as Integer, hint as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_unpark")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rsi, %2\n"           Note: unpark hint
        "mov rax, %3\n"           Note: _lwp_unpark syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (hint), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_unpark_all" that takes targets as Pointer, ntargets as Integer, hint as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_unpark_all")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWPs array
        "mov rsi, %2\n"           Note: number of targets
        "mov rdx, %3\n"           Note: unpark hint
        "mov rax, %4\n"           Note: _lwp_unpark_all syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (targets), "r" (ntargets), "r" (hint), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Scheduling =====

Process called "sys_lwp_setprivate" that takes ptr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_setprivate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: private data pointer
        "mov rax, %2\n"           Note: _lwp_setprivate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ptr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_getprivate" that takes returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_getprivate")
    Let result be Pointer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: _lwp_getprivate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_setname" that takes target as Integer, name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_setname")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rsi, %2\n"           Note: thread name
        "mov rax, %3\n"           Note: _lwp_setname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_getname" that takes target as Integer, name as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_getname")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rsi, %2\n"           Note: name buffer
        "mov rdx, %3\n"           Note: buffer length
        "mov rax, %4\n"           Note: _lwp_getname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (name), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Scheduler Activations =====

Process called "sys_sa_register" that takes newv as Pointer, oldv as Pointer, flags as Integer, stackinfo_offset as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_register")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: new activation vector
        "mov rsi, %2\n"           Note: old activation vector
        "mov rdx, %3\n"           Note: flags
        "mov r10, %4\n"           Note: stack info offset
        "mov rax, %5\n"           Note: sa_register syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (newv), "r" (oldv), "r" (flags), "r" (stackinfo_offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_stacks" that takes num as Integer, stacks as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_stacks")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: number of stacks
        "mov rsi, %2\n"           Note: stack array
        "mov rax, %3\n"           Note: sa_stacks syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (num), "r" (stacks), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_enable" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_enable")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: sa_enable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_setconcurrency" that takes concurrency as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_setconcurrency")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: concurrency level
        "mov rax, %2\n"           Note: sa_setconcurrency syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (concurrency), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_yield" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_yield")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: sa_yield syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_preempt" that takes sa_id as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_preempt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: SA ID
        "mov rax, %2\n"           Note: sa_preempt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sa_id), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Control Block (TCB) =====

Process called "sys_lwp_ctl" that takes features as Integer, address as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_ctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: control features
        "mov rsi, %2\n"           Note: TCB address
        "mov rax, %3\n"           Note: _lwp_ctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (features), "r" (address), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Debugging =====

Process called "sys_lwp_suspend" that takes target as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_suspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rax, %2\n"           Note: _lwp_suspend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_continue" that takes target as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_continue")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rax, %2\n"           Note: _lwp_continue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_wakeup" that takes target as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_wakeup")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rax, %2\n"           Note: _lwp_wakeup syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Attributes =====

Process called "sys_lwp_detach" that takes target as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_detach")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP
        "mov rax, %2\n"           Note: _lwp_detach syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Statistics =====

Process called "sys_lwp_getrusage" that takes who as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("_lwp_getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who to get stats for
        "mov rsi, %2\n"           Note: resource usage structure
        "mov rax, %3\n"           Note: _lwp_getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process