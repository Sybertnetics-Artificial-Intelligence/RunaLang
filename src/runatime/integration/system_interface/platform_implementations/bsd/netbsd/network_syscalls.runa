Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/network_syscalls.runa
NetBSD Network Syscalls

This module provides NetBSD-specific network syscall implementations,
including BSD sockets and NetBSD-specific networking features.

Key features and capabilities:
- BSD socket operations
- TCP/UDP networking
- Raw sockets
- Routing sockets
- Network interface management
- Packet filter (npf) integration
- BPF support
- Network statistics
- IPsec integration
- IPv6 support
- Network stack isolation
- Fast socket operations
- Network monitoring
- Protocol multiplexing
- Multicast support
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== BSD Socket Core Operations =====

Process called "sys_socket" that takes domain as Integer, type as Integer, protocol as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("socket")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: communication domain (AF_INET, AF_INET6, etc.)
        "mov rsi, %2\n"           Note: socket type (SOCK_STREAM, SOCK_DGRAM, etc.)
        "mov rdx, %3\n"           Note: protocol
        "mov rax, %4\n"           Note: socket syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (domain), "r" (type), "r" (protocol), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_bind" that takes sockfd as Integer, addr as Pointer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("bind")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: socket address structure
        "mov rdx, %3\n"           Note: address structure length
        "mov rax, %4\n"           Note: bind syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_listen" that takes sockfd as Integer, backlog as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("listen")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: connection backlog size
        "mov rax, %3\n"           Note: listen syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (backlog), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_accept" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("accept")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: listening socket file descriptor
        "mov rsi, %2\n"           Note: client address structure
        "mov rdx, %3\n"           Note: address structure length pointer
        "mov rax, %4\n"           Note: accept syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_connect" that takes sockfd as Integer, addr as Pointer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("connect")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: destination address structure
        "mov rdx, %3\n"           Note: address structure length
        "mov rax, %4\n"           Note: connect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Socket Data Transfer =====

Process called "sys_send" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("send")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: send buffer
        "mov rdx, %3\n"           Note: buffer length
        "mov r10, %4\n"           Note: send flags
        "mov rax, %5\n"           Note: send syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recv" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: receive buffer
        "mov rdx, %3\n"           Note: buffer length
        "mov r10, %4\n"           Note: receive flags
        "mov rax, %5\n"           Note: recv syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sendto" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer, dest_addr as Pointer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendto")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: send buffer
        "mov rdx, %3\n"           Note: buffer length
        "mov r10, %4\n"           Note: send flags
        "mov r8, %5\n"            Note: destination address
        "mov r9, %6\n"            Note: address length
        "mov rax, %7\n"           Note: sendto syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (dest_addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recvfrom" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer, src_addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recvfrom")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: receive buffer
        "mov rdx, %3\n"           Note: buffer length
        "mov r10, %4\n"           Note: receive flags
        "mov r8, %5\n"            Note: source address
        "mov r9, %6\n"            Note: address length pointer
        "mov rax, %7\n"           Note: recvfrom syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (src_addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Socket Configuration =====

Process called "sys_setsockopt" that takes sockfd as Integer, level as Integer, optname as Integer, optval as Pointer, optlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setsockopt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: protocol level
        "mov rdx, %3\n"           Note: option name
        "mov r10, %4\n"           Note: option value
        "mov r8, %5\n"            Note: option length
        "mov rax, %6\n"           Note: setsockopt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (level), "r" (optname), "r" (optval), "r" (optlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getsockopt" that takes sockfd as Integer, level as Integer, optname as Integer, optval as Pointer, optlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getsockopt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: protocol level
        "mov rdx, %3\n"           Note: option name
        "mov r10, %4\n"           Note: option value buffer
        "mov r8, %5\n"            Note: option length pointer
        "mov rax, %6\n"           Note: getsockopt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (level), "r" (optname), "r" (optval), "r" (optlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getsockname" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getsockname")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure buffer
        "mov rdx, %3\n"           Note: address length pointer
        "mov rax, %4\n"           Note: getsockname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getpeername" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpeername")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: peer address structure buffer
        "mov rdx, %3\n"           Note: address length pointer
        "mov rax, %4\n"           Note: getpeername syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network Interface Management =====

Process called "sys_if_nametoindex" that takes ifname as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("if_nametoindex")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: interface name string
        "mov rax, %2\n"           Note: if_nametoindex syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ifname), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_if_indextoname" that takes ifindex as Integer, ifname as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("if_indextoname")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: interface index
        "mov rsi, %2\n"           Note: interface name buffer
        "mov rax, %3\n"           Note: if_indextoname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ifindex), "r" (ifname), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Berkeley Packet Filter (BPF) =====

Process called "sys_bpf_open" that takes name as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("bpf_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: BPF device name
        "mov rsi, %2\n"           Note: open flags
        "mov rax, %3\n"           Note: bpf_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_bpf_setfilter" that takes fd as Integer, filter as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("bpf_setfilter")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: BPF file descriptor
        "mov rsi, %2\n"           Note: BPF filter program
        "mov rax, %3\n"           Note: bpf_setfilter syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (filter), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Routing Sockets =====

Process called "sys_route_socket" that takes domain as Integer, type as Integer, protocol as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("route_socket")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: routing domain (PF_ROUTE)
        "mov rsi, %2\n"           Note: socket type
        "mov rdx, %3\n"           Note: routing protocol
        "mov rax, %4\n"           Note: route_socket syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (domain), "r" (type), "r" (protocol), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Packet Filter (NPF) =====

Process called "sys_npf_ioctl" that takes fd as Integer, cmd as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("npf_ioctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: NPF device file descriptor
        "mov rsi, %2\n"           Note: ioctl command
        "mov rdx, %3\n"           Note: command data
        "mov rax, %4\n"           Note: npf_ioctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (cmd), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network Multiplexing =====

Process called "sys_select" that takes nfds as Integer, readfds as Pointer, writefds as Pointer, exceptfds as Pointer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("select")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: highest file descriptor + 1
        "mov rsi, %2\n"           Note: read file descriptor set
        "mov rdx, %3\n"           Note: write file descriptor set
        "mov r10, %4\n"           Note: exception file descriptor set
        "mov r8, %5\n"            Note: timeout structure
        "mov rax, %6\n"           Note: select syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (nfds), "r" (readfds), "r" (writefds), "r" (exceptfds), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_poll" that takes fds as Pointer, nfds as Integer, timeout as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("poll")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: poll file descriptor array
        "mov rsi, %2\n"           Note: number of file descriptors
        "mov rdx, %3\n"           Note: timeout in milliseconds
        "mov rax, %4\n"           Note: poll syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fds), "r" (nfds), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Advanced Socket Operations =====

Process called "sys_sendmsg" that takes sockfd as Integer, msg as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendmsg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: message structure
        "mov rdx, %3\n"           Note: send flags
        "mov rax, %4\n"           Note: sendmsg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (msg), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recvmsg" that takes sockfd as Integer, msg as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recvmsg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: message structure
        "mov rdx, %3\n"           Note: receive flags
        "mov rax, %4\n"           Note: recvmsg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (msg), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network Statistics and Monitoring =====

Process called "sys_netstat" that takes family as Integer, type as Integer, proto as Integer, pcb as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("netstat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address family
        "mov rsi, %2\n"           Note: socket type
        "mov rdx, %3\n"           Note: protocol
        "mov r10, %4\n"           Note: protocol control block
        "mov rax, %5\n"           Note: netstat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (family), "r" (type), "r" (proto), "r" (pcb), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process