Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/signal_syscalls.runa
NetBSD Signal Management Syscalls

This module provides NetBSD-specific signal management syscall implementations,
including signal handlers and NetBSD-specific signal features.

Key features and capabilities:
- Signal handlers (sigaction)
- Signal masks (sigprocmask)
- Signal delivery
- Real-time signals
- Signal stacks
- Signal suspension
- Signal information
- Process signaling
- Thread signaling
- Signal timers
- Signal queuing
- Async-signal safety
- Signal chaining
- BSD signal semantics
- POSIX compliance
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Signal Handlers =====

Process called "sys_sigaction" that takes sig as Integer, act as Pointer, oact as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigaction")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal number
        "mov rsi, %2\n"           Note: new action
        "mov rdx, %3\n"           Note: old action
        "mov rax, %4\n"           Note: sigaction syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sig), "r" (act), "r" (oact), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_signal" that takes sig as Integer, handler as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("signal")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal number
        "mov rsi, %2\n"           Note: signal handler
        "mov rax, %3\n"           Note: signal syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sig), "r" (handler), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Masks =====

Process called "sys_sigprocmask" that takes how as Integer, set as Pointer, oldset as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigprocmask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: how to change mask
        "mov rsi, %2\n"           Note: new signal set
        "mov rdx, %3\n"           Note: old signal set
        "mov rax, %4\n"           Note: sigprocmask syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (how), "r" (set), "r" (oldset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigpending" that takes set as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigpending")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pending signal set
        "mov rax, %2\n"           Note: sigpending syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Suspension =====

Process called "sys_sigsuspend" that takes sigmask as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigsuspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal mask
        "mov rax, %2\n"           Note: sigsuspend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sigmask), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigwait" that takes set as Pointer, sig as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigwait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal set
        "mov rsi, %2\n"           Note: received signal
        "mov rax, %3\n"           Note: sigwait syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Signaling =====

Process called "sys_kill" that takes pid as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_killpg" that takes pgrp as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("killpg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process group
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: killpg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pgrp), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Information =====

Process called "sys_sigwaitinfo" that takes set as Pointer, info as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigwaitinfo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal set
        "mov rsi, %2\n"           Note: signal info
        "mov rax, %3\n"           Note: sigwaitinfo syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (info), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigtimedwait" that takes set as Pointer, info as Pointer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigtimedwait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal set
        "mov rsi, %2\n"           Note: signal info
        "mov rdx, %3\n"           Note: timeout
        "mov rax, %4\n"           Note: sigtimedwait syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (info), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Real-time Signals =====

Process called "sys_sigqueue" that takes pid as Integer, sig as Integer, value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: signal number
        "mov rdx, %3\n"           Note: signal value
        "mov rax, %4\n"           Note: sigqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Stacks =====

Process called "sys_sigaltstack" that takes ss as Pointer, oss as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigaltstack")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: new signal stack
        "mov rsi, %2\n"           Note: old signal stack
        "mov rax, %3\n"           Note: sigaltstack syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ss), "r" (oss), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Signaling =====

Process called "sys_pthread_kill" that takes thread as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pthread_kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread ID
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: pthread_kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (thread), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pthread_sigmask" that takes how as Integer, set as Pointer, oldset as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pthread_sigmask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: how to change mask
        "mov rsi, %2\n"           Note: new signal set
        "mov rdx, %3\n"           Note: old signal set
        "mov rax, %4\n"           Note: pthread_sigmask syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (how), "r" (set), "r" (oldset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Timers =====

Process called "sys_timer_create" that takes clockid as Integer, evp as Pointer, timerid as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: event specification
        "mov rdx, %3\n"           Note: timer ID
        "mov rax, %4\n"           Note: timer_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clockid), "r" (evp), "r" (timerid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_settime" that takes timerid as Integer, flags as Integer, value as Pointer, ovalue as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: new timer value
        "mov r10, %4\n"           Note: old timer value
        "mov rax, %5\n"           Note: timer_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (flags), "r" (value), "r" (ovalue), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_gettime" that takes timerid as Integer, value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rsi, %2\n"           Note: timer value
        "mov rax, %3\n"           Note: timer_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_delete" that takes timerid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_delete")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rax, %2\n"           Note: timer_delete syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== BSD Signal Semantics =====

Process called "sys_sigvec" that takes sig as Integer, vec as Pointer, ovec as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigvec")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal number
        "mov rsi, %2\n"           Note: new signal vector
        "mov rdx, %3\n"           Note: old signal vector
        "mov rax, %4\n"           Note: sigvec syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sig), "r" (vec), "r" (ovec), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigblock" that takes mask as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigblock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal mask
        "mov rax, %2\n"           Note: sigblock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigsetmask" that takes mask as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigsetmask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal mask
        "mov rax, %2\n"           Note: sigsetmask syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Return =====

Process called "sys_sigreturn" that takes scp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigreturn")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal context
        "mov rax, %2\n"           Note: sigreturn syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (scp), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process