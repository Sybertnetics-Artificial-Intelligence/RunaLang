Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/rump_syscalls.runa
NetBSD Rump Kernel Syscalls

This module provides NetBSD-specific rump kernel syscall implementations,
including anykernel architecture and virtualized kernel features.

Key features and capabilities:
- Rump kernel initialization
- Anykernel architecture
- Userspace drivers
- Kernel virtualization
- Component isolation
- Remote system calls
- Hypercall interface
- Virtual file systems
- Network stack virtualization
- Device driver hosting
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Rump Kernel Initialization =====

Process called "rump_init" that takes args as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_sys_init")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: initialization arguments
        "mov rax, %2\n"           Note: rump_sys_init syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (args), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_lwp_rfork" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_lwp_rfork")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fork flags
        "mov rax, %2\n"           Note: rump_pub_lwp_rfork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_lwp_park" that takes abstime as Pointer, unpark as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_lwp_park")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: absolute timeout
        "mov rsi, %2\n"           Note: unpark cookie
        "mov rax, %3\n"           Note: rump_pub_lwp_park syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (abstime), "r" (unpark), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Anykernel Architecture =====

Process called "rump_pub_kernelinit" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_kernelinit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: initialization flags
        "mov rax, %2\n"           Note: rump_pub_kernelinit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_kernfini" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_kernfini")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: rump_pub_kernfini syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Userspace Drivers =====

Process called "rump_pub_etfs_register" that takes path as Pointer, hostpath as Pointer, ftype as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_etfs_register")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: virtual path in rump
        "mov rsi, %2\n"           Note: host path
        "mov rdx, %3\n"           Note: file type
        "mov rax, %4\n"           Note: rump_pub_etfs_register syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (hostpath), "r" (ftype), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_etfs_remove" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_etfs_remove")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: virtual path to remove
        "mov rax, %2\n"           Note: rump_pub_etfs_remove syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Component Isolation =====

Process called "rump_pub_lwp_create" that takes func as Pointer, arg as Pointer, private as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_lwp_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: function to execute
        "mov rsi, %2\n"           Note: function argument
        "mov rdx, %3\n"           Note: private data
        "mov r10, %4\n"           Note: creation flags
        "mov rax, %5\n"           Note: rump_pub_lwp_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (func), "r" (arg), "r" (private), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_lwp_exit" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_lwp_exit")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: rump_pub_lwp_exit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Remote System Calls =====

Process called "rump_pub_syscall" that takes num as Integer, data as Pointer, dlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_syscall")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: syscall number
        "mov rsi, %2\n"           Note: syscall data
        "mov rdx, %3\n"           Note: data length
        "mov rax, %4\n"           Note: rump_pub_syscall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (num), "r" (data), "r" (dlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_allbetsareoff_setid" that takes pid as Integer, type as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_allbetsareoff_setid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: ID type
        "mov rax, %3\n"           Note: rump_pub_allbetsareoff_setid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (type), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Hypercall Interface =====

Process called "rump_pub_hypercall" that takes op as Integer, arg as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_hypercall")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: hypercall operation
        "mov rsi, %2\n"           Note: hypercall argument
        "mov rax, %3\n"           Note: rump_pub_hypercall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (op), "r" (arg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Virtual File Systems =====

Process called "rump_pub_vfs_mount" that takes type as Pointer, path as Pointer, flags as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_vfs_mount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file system type
        "mov rsi, %2\n"           Note: mount path
        "mov rdx, %3\n"           Note: mount flags
        "mov r10, %4\n"           Note: mount data
        "mov rax, %5\n"           Note: rump_pub_vfs_mount syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (type), "r" (path), "r" (flags), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_vfs_unmount" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_vfs_unmount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mount path
        "mov rsi, %2\n"           Note: unmount flags
        "mov rax, %3\n"           Note: rump_pub_vfs_unmount syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network Stack Virtualization =====

Process called "rump_pub_netconfig_ipv4_ifaddr" that takes ifname as Pointer, addr as Pointer, mask as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_netconfig_ipv4_ifaddr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: interface name
        "mov rsi, %2\n"           Note: IP address
        "mov rdx, %3\n"           Note: network mask
        "mov rax, %4\n"           Note: rump_pub_netconfig_ipv4_ifaddr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ifname), "r" (addr), "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_netconfig_dhcp" that takes ifname as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_netconfig_dhcp")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: interface name
        "mov rax, %2\n"           Note: rump_pub_netconfig_dhcp syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ifname), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Device Driver Hosting =====

Process called "rump_pub_dev_create" that takes path as Pointer, type as Integer, major as Integer, minor as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_dev_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: device path
        "mov rsi, %2\n"           Note: device type
        "mov rdx, %3\n"           Note: major number
        "mov r10, %4\n"           Note: minor number
        "mov rax, %5\n"           Note: rump_pub_dev_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (type), "r" (major), "r" (minor), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "rump_pub_dev_destroy" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rump_pub_dev_destroy")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: device path
        "mov rax, %2\n"           Note: rump_pub_dev_destroy syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process