Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/time_syscalls.runa
NetBSD Time Management Syscalls

This module provides NetBSD-specific time management syscall implementations,
including system time, timers, and NetBSD-specific timing features.

Key features and capabilities:
- System time operations
- High-resolution timers
- Time adjustment (adjtime, ntp_adjtime)
- Timer management
- Clock operations
- Monotonic clocks
- Process times
- Thread times
- Time synchronization
- UTC/local time
- Timer queues
- Precision timing
- Real-time clocks
- CPU time accounting
- Timer wheels
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== System Time Operations =====

Process called "sys_gettimeofday" that takes tv as Pointer, tz as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("gettimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time value
        "mov rsi, %2\n"           Note: timezone
        "mov rax, %3\n"           Note: gettimeofday syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_settimeofday" that takes tv as Pointer, tz as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("settimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time value
        "mov rsi, %2\n"           Note: timezone
        "mov rax, %3\n"           Note: settimeofday syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_time" that takes tloc as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("time")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time location
        "mov rax, %2\n"           Note: time syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tloc), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== High-Resolution Clocks =====

Process called "sys_clock_gettime" that takes clk_id as Integer, tp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: timespec pointer
        "mov rax, %3\n"           Note: clock_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_settime" that takes clk_id as Integer, tp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: timespec pointer
        "mov rax, %3\n"           Note: clock_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_getres" that takes clk_id as Integer, res as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getres")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: resolution
        "mov rax, %3\n"           Note: clock_getres syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (res), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Sleep and Delay Operations =====

Process called "sys_nanosleep" that takes rqtp as Pointer, rmtp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: requested time
        "mov rsi, %2\n"           Note: remaining time
        "mov rax, %3\n"           Note: nanosleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rqtp), "r" (rmtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_nanosleep" that takes clk_id as Integer, flags as Integer, rqtp as Pointer, rmtp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: requested time
        "mov r10, %4\n"           Note: remaining time
        "mov rax, %5\n"           Note: clock_nanosleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (flags), "r" (rqtp), "r" (rmtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Time Adjustment =====

Process called "sys_adjtime" that takes delta as Pointer, olddelta as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("adjtime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time delta
        "mov rsi, %2\n"           Note: old delta
        "mov rax, %3\n"           Note: adjtime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (delta), "r" (olddelta), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_ntp_adjtime" that takes buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ntp_adjtime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timex buffer
        "mov rax, %2\n"           Note: ntp_adjtime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Timer Operations =====

Process called "sys_setitimer" that takes which as Integer, value as Pointer, ovalue as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which timer
        "mov rsi, %2\n"           Note: new timer value
        "mov rdx, %3\n"           Note: old timer value
        "mov rax, %4\n"           Note: setitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (value), "r" (ovalue), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getitimer" that takes which as Integer, value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which timer
        "mov rsi, %2\n"           Note: timer value
        "mov rax, %3\n"           Note: getitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process and Thread Times =====

Process called "sys_times" that takes buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("times")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: times buffer
        "mov rax, %2\n"           Note: times syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getrusage" that takes who as Integer, usage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who
        "mov rsi, %2\n"           Note: resource usage
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (usage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD-Specific Timing =====

Process called "sys_clock_getcpuclockid2" that takes idtype as Integer, id as Integer, clk_id as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getcpuclockid2")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ID type
        "mov rsi, %2\n"           Note: ID value
        "mov rdx, %3\n"           Note: clock ID pointer
        "mov rax, %4\n"           Note: clock_getcpuclockid2 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (idtype), "r" (id), "r" (clk_id), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Timer File Descriptors =====

Process called "sys_timerfd_create" that takes clockid as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: timerfd_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clockid), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timerfd_settime" that takes fd as Integer, flags as Integer, utmr as Pointer, otmr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer fd
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: new timer value
        "mov r10, %4\n"           Note: old timer value
        "mov rax, %5\n"           Note: timerfd_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (utmr), "r" (otmr), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timerfd_gettime" that takes fd as Integer, otmr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer fd
        "mov rsi, %2\n"           Note: timer value
        "mov rax, %3\n"           Note: timerfd_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (otmr), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== CPU Time Clocks =====

Process called "sys_clock_getcpuclockid" that takes pid as Integer, clk_id as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getcpuclockid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: clock ID pointer
        "mov rax, %3\n"           Note: clock_getcpuclockid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (clk_id), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Uptime and Boot Time =====

Process called "sys_sysinfo" that takes info as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysinfo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: system info
        "mov rax, %2\n"           Note: sysinfo syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (info), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Time Zone Operations =====

Process called "sys_tzset" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("tzset")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: tzset syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== High-Precision Counters =====

Process called "sys_pmc_get_info" that takes cpu as Integer, npmcs as Pointer, ppmcs as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pmc_get_info")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: CPU number
        "mov rsi, %2\n"           Note: number of PMCs
        "mov rdx, %3\n"           Note: PMC array
        "mov rax, %4\n"           Note: pmc_get_info syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cpu), "r" (npmcs), "r" (ppmcs), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pmc_control" that takes ctr as Integer, op as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pmc_control")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: counter
        "mov rsi, %2\n"           Note: operation
        "mov rax, %3\n"           Note: pmc_control syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ctr), "r" (op), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pmc_read" that takes ctr as Integer, value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pmc_read")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: counter
        "mov rsi, %2\n"           Note: value pointer
        "mov rax, %3\n"           Note: pmc_read syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ctr), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process