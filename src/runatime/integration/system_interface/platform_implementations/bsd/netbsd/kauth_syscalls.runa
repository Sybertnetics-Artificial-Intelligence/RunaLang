Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/kauth_syscalls.runa
NetBSD Kernel Authorization Framework Syscalls

This module provides NetBSD-specific kauth syscall implementations,
including kernel authorization framework and security features.

Key features and capabilities:
- Kauth authorization
- Security scopes
- Credential management
- Action authorization
- Listener registration
- Security policies
- Process credentials
- Network authorization
- Device authorization
- Vnode authorization
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Core Authorization Interface =====

Process called "sys_kauth_authorize_action" that takes scope as Integer, credential as Pointer, action as Integer, arg0 as Pointer, arg1 as Pointer, arg2 as Pointer, arg3 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_action")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: authorization scope
        "mov rsi, %2\n"           Note: credential object
        "mov rdx, %3\n"           Note: action identifier
        "mov r10, %4\n"           Note: argument 0
        "mov r8, %5\n"            Note: argument 1
        "mov r9, %6\n"            Note: argument 2
        "push %7\n"               Note: argument 3 (using stack)
        "mov rax, %8\n"           Note: kauth_authorize_action syscall number
        "syscall\n"
        "add rsp, 8\n"            Note: cleanup stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (scope), "r" (credential), "r" (action), "r" (arg0), "r" (arg1), "r" (arg2), "r" (arg3), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_alloc" returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_alloc")
    Let result be Pointer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kauth_cred_alloc syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_free" that takes cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_free")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential to free
        "mov rax, %2\n"           Note: kauth_cred_free syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Credential Management =====

Process called "sys_kauth_cred_getuid" that takes cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_getuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rax, %2\n"           Note: kauth_cred_getuid syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_getgid" that takes cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_getgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rax, %2\n"           Note: kauth_cred_getgid syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_geteuid" that takes cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_geteuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rax, %2\n"           Note: kauth_cred_geteuid syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_getegid" that takes cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_getegid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rax, %2\n"           Note: kauth_cred_getegid syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_getgroups" that takes cred as Pointer, groups as Pointer, ngroups as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_getgroups")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: groups array
        "mov rdx, %3\n"           Note: number of groups
        "mov rax, %4\n"           Note: kauth_cred_getgroups syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (groups), "r" (ngroups), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Scope Management =====

Process called "sys_kauth_register_scope" that takes identifier as Pointer, callback as Pointer, cookie as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_register_scope")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: scope identifier
        "mov rsi, %2\n"           Note: callback function
        "mov rdx, %3\n"           Note: callback cookie
        "mov rax, %4\n"           Note: kauth_register_scope syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (identifier), "r" (callback), "r" (cookie), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_deregister_scope" that takes scope as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_deregister_scope")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: scope to deregister
        "mov rax, %2\n"           Note: kauth_deregister_scope syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (scope), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_listen_scope" that takes scope as Pointer, callback as Pointer, cookie as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_listen_scope")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: scope to listen on
        "mov rsi, %2\n"           Note: listener callback
        "mov rdx, %3\n"           Note: callback cookie
        "mov rax, %4\n"           Note: kauth_listen_scope syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (scope), "r" (callback), "r" (cookie), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_unlisten_scope" that takes listener as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_unlisten_scope")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: listener to remove
        "mov rax, %2\n"           Note: kauth_unlisten_scope syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (listener), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Security Policy Enforcement =====

Process called "sys_kauth_authorize_process" that takes cred as Pointer, action as Integer, proc as Pointer, arg1 as Pointer, arg2 as Pointer, arg3 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_process")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: process action
        "mov rdx, %3\n"           Note: process object
        "mov r10, %4\n"           Note: argument 1
        "mov r8, %5\n"            Note: argument 2
        "mov r9, %6\n"            Note: argument 3
        "mov rax, %7\n"           Note: kauth_authorize_process syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (proc), "r" (arg1), "r" (arg2), "r" (arg3), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_authorize_generic" that takes cred as Pointer, action as Integer, arg0 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_generic")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: generic action
        "mov rdx, %3\n"           Note: action argument
        "mov rax, %4\n"           Note: kauth_authorize_generic syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (arg0), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_authorize_system" that takes cred as Pointer, action as Integer, arg1 as Pointer, arg2 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_system")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: system action
        "mov rdx, %3\n"           Note: argument 1
        "mov r10, %4\n"           Note: argument 2
        "mov rax, %5\n"           Note: kauth_authorize_system syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (arg1), "r" (arg2), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network Authorization =====

Process called "sys_kauth_authorize_network" that takes cred as Pointer, action as Integer, req as Integer, arg1 as Pointer, arg2 as Pointer, arg3 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_network")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: network action
        "mov rdx, %3\n"           Note: operation request
        "mov r10, %4\n"           Note: argument 1
        "mov r8, %5\n"            Note: argument 2
        "mov r9, %6\n"            Note: argument 3
        "mov rax, %7\n"           Note: kauth_authorize_network syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (req), "r" (arg1), "r" (arg2), "r" (arg3), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Device Authorization =====

Process called "sys_kauth_authorize_device" that takes cred as Pointer, action as Integer, arg1 as Pointer, arg2 as Pointer, arg3 as Pointer, arg4 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_device")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: device action
        "mov rdx, %3\n"           Note: argument 1
        "mov r10, %4\n"           Note: argument 2
        "mov r8, %5\n"            Note: argument 3
        "mov r9, %6\n"            Note: argument 4
        "mov rax, %7\n"           Note: kauth_authorize_device syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (arg1), "r" (arg2), "r" (arg3), "r" (arg4), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Vnode (File System) Authorization =====

Process called "sys_kauth_authorize_vnode" that takes cred as Pointer, action as Integer, vp as Pointer, dvp as Pointer, error as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_vnode")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential object
        "mov rsi, %2\n"           Note: vnode action
        "mov rdx, %3\n"           Note: target vnode
        "mov r10, %4\n"           Note: directory vnode
        "mov r8, %5\n"            Note: error code
        "mov rax, %6\n"           Note: kauth_authorize_vnode syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (vp), "r" (dvp), "r" (error), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Credential Management =====

Process called "sys_kauth_proc_setgroups" that takes proc as Pointer, cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_proc_setgroups")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process object
        "mov rsi, %2\n"           Note: new credential
        "mov rax, %3\n"           Note: kauth_proc_setgroups syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (proc), "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_proc_chroot" that takes proc as Pointer, path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_proc_chroot")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process object
        "mov rsi, %2\n"           Note: chroot path
        "mov rax, %3\n"           Note: kauth_proc_chroot syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (proc), "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Security Context Management =====

Process called "sys_kauth_cred_hold" that takes cred as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_hold")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential to hold
        "mov rax, %2\n"           Note: kauth_cred_hold syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_drop" that takes cred as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_drop")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential to drop
        "mov rax, %2\n"           Note: kauth_cred_drop syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_cred_dup" that takes cred as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_dup")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credential to duplicate
        "mov rax, %2\n"           Note: kauth_cred_dup syscall number
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process