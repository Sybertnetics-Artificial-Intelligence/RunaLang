Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/puffs_syscalls.runa
NetBSD PUFFS Userspace File System Syscalls

This module provides NetBSD-specific PUFFS syscall implementations,
including userspace file system framework features.

Key features and capabilities:
- PUFFS framework
- Userspace file systems
- VFS operations
- File system pass-through
- Network file systems
- FUSE compatibility
- Refuse layer
- File system development
- VFS callbacks
- Operation dispatch
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== PUFFS Core Framework =====

Process called "sys_puffs_mount" that takes puffs_kargs as Pointer, mntpath as Pointer, mntflags as Integer, puffs_flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_mount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS kernel arguments
        "mov rsi, %2\n"           Note: mount path
        "mov rdx, %3\n"           Note: mount flags
        "mov r10, %4\n"           Note: PUFFS-specific flags
        "mov rax, %5\n"           Note: puffs_mount syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (puffs_kargs), "r" (mntpath), "r" (mntflags), "r" (puffs_flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_daemon" that takes puffs_req as Pointer, reqlen as Integer, puffs_resp as Pointer, resplen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_daemon")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS request buffer
        "mov rsi, %2\n"           Note: request length
        "mov rdx, %3\n"           Note: PUFFS response buffer
        "mov r10, %4\n"           Note: response length pointer
        "mov rax, %5\n"           Note: puffs_daemon syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (puffs_req), "r" (reqlen), "r" (puffs_resp), "r" (resplen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_suspend" that takes puffs_cookie as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_suspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS cookie for suspension
        "mov rax, %2\n"           Note: puffs_suspend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (puffs_cookie), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== VFS Operation Dispatch =====

Process called "sys_puffs_node_lookup" that takes pmp as Pointer, pn as Pointer, pcn as Pointer, vpp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_lookup")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: parent node
        "mov rdx, %3\n"           Note: component name
        "mov r10, %4\n"           Note: result vnode pointer
        "mov rax, %5\n"           Note: puffs_node_lookup syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (pcn), "r" (vpp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_create" that takes pmp as Pointer, pn as Pointer, pcn as Pointer, vap as Pointer, vpp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: parent node
        "mov rdx, %3\n"           Note: component name
        "mov r10, %4\n"           Note: vnode attributes
        "mov r8, %5\n"            Note: created vnode pointer
        "mov rax, %6\n"           Note: puffs_node_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (pcn), "r" (vap), "r" (vpp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_remove" that takes pmp as Pointer, pn as Pointer, pcn as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_remove")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: parent node
        "mov rdx, %3\n"           Note: component name
        "mov rax, %4\n"           Note: puffs_node_remove syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (pcn), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_rename" that takes pmp as Pointer, pn_src as Pointer, pcn_src as Pointer, pn_targ as Pointer, pcn_targ as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_rename")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: source parent node
        "mov rdx, %3\n"           Note: source component name
        "mov r10, %4\n"           Note: target parent node
        "mov r8, %5\n"            Note: target component name
        "mov rax, %6\n"           Note: puffs_node_rename syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn_src), "r" (pcn_src), "r" (pn_targ), "r" (pcn_targ), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Operations =====

Process called "sys_puffs_node_read" that takes pmp as Pointer, pn as Pointer, uio as Pointer, ioflag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_read")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: file node
        "mov rdx, %3\n"           Note: UIO structure
        "mov r10, %4\n"           Note: I/O flags
        "mov rax, %5\n"           Note: puffs_node_read syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (uio), "r" (ioflag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_write" that takes pmp as Pointer, pn as Pointer, uio as Pointer, ioflag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_write")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: file node
        "mov rdx, %3\n"           Note: UIO structure
        "mov r10, %4\n"           Note: I/O flags
        "mov rax, %5\n"           Note: puffs_node_write syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (uio), "r" (ioflag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_open" that takes pmp as Pointer, pn as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: file node
        "mov rdx, %3\n"           Note: open mode
        "mov rax, %4\n"           Note: puffs_node_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_close" that takes pmp as Pointer, pn as Pointer, fflag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_close")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: file node
        "mov rdx, %3\n"           Note: file flags
        "mov rax, %4\n"           Note: puffs_node_close syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (fflag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Directory Operations =====

Process called "sys_puffs_node_readdir" that takes pmp as Pointer, pn as Pointer, uio as Pointer, cookies as Pointer, ncookies as Pointer, eofflag as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_readdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: directory node
        "mov rdx, %3\n"           Note: UIO structure
        "mov r10, %4\n"           Note: directory cookies
        "mov r8, %5\n"            Note: number of cookies
        "mov r9, %6\n"            Note: end of file flag
        "mov rax, %7\n"           Note: puffs_node_readdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (uio), "r" (cookies), "r" (ncookies), "r" (eofflag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_mkdir" that takes pmp as Pointer, pn as Pointer, pcn as Pointer, vap as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_mkdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: parent node
        "mov rdx, %3\n"           Note: component name
        "mov r10, %4\n"           Note: vnode attributes
        "mov rax, %5\n"           Note: puffs_node_mkdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (pcn), "r" (vap), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_rmdir" that takes pmp as Pointer, pn as Pointer, pcn as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_rmdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: parent node
        "mov rdx, %3\n"           Note: component name
        "mov rax, %4\n"           Note: puffs_node_rmdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (pcn), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Attributes and Metadata =====

Process called "sys_puffs_node_getattr" that takes pmp as Pointer, pn as Pointer, vap as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_getattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: file node
        "mov rdx, %3\n"           Note: vnode attributes
        "mov rax, %4\n"           Note: puffs_node_getattr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (vap), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_setattr" that takes pmp as Pointer, pn as Pointer, vap as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_setattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: file node
        "mov rdx, %3\n"           Note: vnode attributes
        "mov rax, %4\n"           Note: puffs_node_setattr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (vap), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Symbolic Links =====

Process called "sys_puffs_node_symlink" that takes pmp as Pointer, pn as Pointer, pcn as Pointer, vap as Pointer, target as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_symlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: parent node
        "mov rdx, %3\n"           Note: component name
        "mov r10, %4\n"           Note: vnode attributes
        "mov r8, %5\n"            Note: symlink target
        "mov rax, %6\n"           Note: puffs_node_symlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (pcn), "r" (vap), "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_node_readlink" that takes pmp as Pointer, pn as Pointer, uio as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_node_readlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: symlink node
        "mov rdx, %3\n"           Note: UIO structure
        "mov rax, %4\n"           Note: puffs_node_readlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (pn), "r" (uio), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File System Operations =====

Process called "sys_puffs_fs_sync" that takes pmp as Pointer, waitfor as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_fs_sync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: wait flags
        "mov rax, %3\n"           Note: puffs_fs_sync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (waitfor), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_fs_statvfs" that takes pmp as Pointer, sbp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_fs_statvfs")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: statvfs buffer
        "mov rax, %3\n"           Note: puffs_fs_statvfs syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (sbp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_fs_unmount" that takes pmp as Pointer, mntflags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_fs_unmount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: unmount flags
        "mov rax, %3\n"           Note: puffs_fs_unmount syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (mntflags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== FUSE Compatibility Layer =====

Process called "sys_puffs_fuse_mount" that takes fuse_args as Pointer, mntpath as Pointer, mntflags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_fuse_mount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: FUSE arguments
        "mov rsi, %2\n"           Note: mount path
        "mov rdx, %3\n"           Note: mount flags
        "mov rax, %4\n"           Note: puffs_fuse_mount syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fuse_args), "r" (mntpath), "r" (mntflags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== PUFFS Control and Configuration =====

Process called "sys_puffs_setback" that takes pmp as Pointer, op as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_setback")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: operation type
        "mov rax, %3\n"           Note: puffs_setback syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (op), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_puffs_getback" that takes pmp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_getback")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rax, %2\n"           Note: puffs_getback syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== PUFFS Debug and Diagnostics =====

Process called "sys_puffs_debugrequest" that takes pmp as Pointer, optype as Integer, dfd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("puffs_debugrequest")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: PUFFS mount point
        "mov rsi, %2\n"           Note: operation type
        "mov rdx, %3\n"           Note: debug file descriptor
        "mov rax, %4\n"           Note: puffs_debugrequest syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pmp), "r" (optype), "r" (dfd), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process