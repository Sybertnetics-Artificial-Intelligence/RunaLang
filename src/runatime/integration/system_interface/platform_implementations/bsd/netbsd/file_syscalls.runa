Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/file_syscalls.runa
NetBSD File System Syscalls

This module provides NetBSD-specific file system syscall implementations,
including file operations, directory management, and NetBSD-specific features.

Key features and capabilities:
- File operations (open, read, write, close)
- Directory operations (mkdir, rmdir, readdir)
- File attributes (stat, chmod, chown)
- Extended attributes
- File descriptors
- File locking
- File system events
- VFS operations
- Layered file systems (PUFFS)
- File system snapshots
- Quotas
- Mount operations
- Special files
- Device nodes
- Symbolic links
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Basic File Operations =====

Process called "sys_open" that takes path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: open flags
        "mov rdx, %3\n"           Note: file mode
        "mov rax, %4\n"           Note: open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_openat" that takes fd as Integer, path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("openat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: open flags
        "mov r10, %4\n"           Note: file mode
        "mov rax, %5\n"           Note: openat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_close" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("close")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: close syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_read" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("read")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: byte count
        "mov rax, %4\n"           Note: read syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_write" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("write")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: byte count
        "mov rax, %4\n"           Note: write syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pread" that takes fd as Integer, buf as Pointer, count as Integer, offset as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pread")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: byte count
        "mov r10, %4\n"           Note: file offset
        "mov rax, %5\n"           Note: pread syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pwrite" that takes fd as Integer, buf as Pointer, count as Integer, offset as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pwrite")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: byte count
        "mov r10, %4\n"           Note: file offset
        "mov rax, %5\n"           Note: pwrite syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lseek" that takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lseek")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: offset
        "mov rdx, %3\n"           Note: whence
        "mov rax, %4\n"           Note: lseek syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (offset), "r" (whence), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Metadata Operations =====

Process called "sys_stat" that takes path as Pointer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("stat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: stat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lstat" that takes path as Pointer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lstat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path (no symlink follow)
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: lstat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstat" that takes fd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: fstat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstatat" that takes fd as Integer, path as Pointer, buf as Pointer, flag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstatat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: stat buffer
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: fstatat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (buf), "r" (flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Permissions and Ownership =====

Process called "sys_chmod" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: file mode
        "mov rax, %3\n"           Note: chmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchmod" that takes fd as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: file mode
        "mov rax, %3\n"           Note: fchmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchmodat" that takes fd as Integer, path as Pointer, mode as Integer, flag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchmodat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: file mode
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: fchmodat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (mode), "r" (flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_chown" that takes path as Pointer, owner as Integer, group as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: owner UID
        "mov rdx, %3\n"           Note: group GID
        "mov rax, %4\n"           Note: chown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (owner), "r" (group), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchown" that takes fd as Integer, owner as Integer, group as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: owner UID
        "mov rdx, %3\n"           Note: group GID
        "mov rax, %4\n"           Note: fchown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (owner), "r" (group), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchownat" that takes fd as Integer, path as Pointer, owner as Integer, group as Integer, flag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchownat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: owner UID
        "mov r10, %4\n"           Note: group GID
        "mov r8, %5\n"            Note: flags
        "mov rax, %6\n"           Note: fchownat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (owner), "r" (group), "r" (flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Directory Operations =====

Process called "sys_mkdir" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory path
        "mov rsi, %2\n"           Note: directory mode
        "mov rax, %3\n"           Note: mkdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mkdirat" that takes fd as Integer, path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkdirat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: directory path
        "mov rdx, %3\n"           Note: directory mode
        "mov rax, %4\n"           Note: mkdirat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rmdir" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rmdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory path
        "mov rax, %2\n"           Note: rmdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getdents" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getdents")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: directory entries buffer
        "mov rdx, %3\n"           Note: buffer size
        "mov rax, %4\n"           Note: getdents syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Creation and Deletion =====

Process called "sys_unlink" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rax, %2\n"           Note: unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_unlinkat" that takes fd as Integer, path as Pointer, flag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unlinkat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: unlinkat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_link" that takes oldpath as Pointer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("link")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: old path
        "mov rsi, %2\n"           Note: new path
        "mov rax, %3\n"           Note: link syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_linkat" that takes olddirfd as Integer, oldpath as Pointer, newdirfd as Integer, newpath as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("linkat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: old directory file descriptor
        "mov rsi, %2\n"           Note: old path
        "mov rdx, %3\n"           Note: new directory file descriptor
        "mov r10, %4\n"           Note: new path
        "mov r8, %5\n"            Note: flags
        "mov rax, %6\n"           Note: linkat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (olddirfd), "r" (oldpath), "r" (newdirfd), "r" (newpath), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_symlink" that takes oldpath as Pointer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("symlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target path
        "mov rsi, %2\n"           Note: symlink path
        "mov rax, %3\n"           Note: symlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_symlinkat" that takes oldpath as Pointer, newdirfd as Integer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("symlinkat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target path
        "mov rsi, %2\n"           Note: new directory file descriptor
        "mov rdx, %3\n"           Note: symlink path
        "mov rax, %4\n"           Note: symlinkat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (newdirfd), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_readlink" that takes path as Pointer, buf as Pointer, bufsiz as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("readlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: symlink path
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: buffer size
        "mov rax, %4\n"           Note: readlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (buf), "r" (bufsiz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_readlinkat" that takes fd as Integer, path as Pointer, buf as Pointer, bufsiz as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("readlinkat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: symlink path
        "mov rdx, %3\n"           Note: buffer
        "mov r10, %4\n"           Note: buffer size
        "mov rax, %5\n"           Note: readlinkat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (buf), "r" (bufsiz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File System Operations =====

Process called "sys_rename" that takes oldpath as Pointer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rename")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: old path
        "mov rsi, %2\n"           Note: new path
        "mov rax, %3\n"           Note: rename syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_renameat" that takes olddirfd as Integer, oldpath as Pointer, newdirfd as Integer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("renameat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: old directory file descriptor
        "mov rsi, %2\n"           Note: old path
        "mov rdx, %3\n"           Note: new directory file descriptor
        "mov r10, %4\n"           Note: new path
        "mov rax, %5\n"           Note: renameat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (olddirfd), "r" (oldpath), "r" (newdirfd), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_truncate" that takes path as Pointer, length as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("truncate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: new length
        "mov rax, %3\n"           Note: truncate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (length), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_ftruncate" that takes fd as Integer, length as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ftruncate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: new length
        "mov rax, %3\n"           Note: ftruncate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (length), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Synchronization =====

Process called "sys_fsync" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fsync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: fsync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fdatasync" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fdatasync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: fdatasync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sync" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sync")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: sync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD-Specific File Operations =====

Process called "sys_chroot" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chroot")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: new root directory
        "mov rax, %2\n"           Note: chroot syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_revoke" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("revoke")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rax, %2\n"           Note: revoke syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_unmount" that takes dir as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unmount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mount point
        "mov rsi, %2\n"           Note: unmount flags
        "mov rax, %3\n"           Note: unmount syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dir), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_statvfs" that takes path as Pointer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("statvfs")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file system path
        "mov rsi, %2\n"           Note: statvfs buffer
        "mov rax, %3\n"           Note: statvfs syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstatvfs" that takes fd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstatvfs")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: statvfs buffer
        "mov rax, %3\n"           Note: fstatvfs syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
