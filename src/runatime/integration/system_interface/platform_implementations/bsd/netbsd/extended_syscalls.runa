Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/extended_syscalls.runa
NetBSD Extended Syscalls

This module provides NetBSD-specific extended syscall implementations,
including system information, resource management, and NetBSD-specific features.

Key features and capabilities:
- System information (sysctl)
- Resource limits (rlimit)
- System statistics
- Kernel modules
- System configuration
- Performance monitoring
- Hardware sensors
- Random number generation
- System logging
- Audit subsystem
- Kernel events
- System profiling
- Emulation support
- Debugging interfaces
- Advanced features
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== System Information and Control =====

Process called "sys_sysctl" that takes name as Pointer, namelen as Integer, oldp as Pointer, oldlenp as Pointer, newp as Pointer, newlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: MIB name array
        "mov rsi, %2\n"           Note: name length
        "mov rdx, %3\n"           Note: old value buffer
        "mov r10, %4\n"           Note: old value length pointer
        "mov r8, %5\n"            Note: new value buffer
        "mov r9, %6\n"            Note: new value length
        "mov rax, %7\n"           Note: sysctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (namelen), "r" (oldp), "r" (oldlenp), "r" (newp), "r" (newlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sysctlbyname" that takes name as Pointer, oldp as Pointer, oldlenp as Pointer, newp as Pointer, newlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysctlbyname")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sysctl name string
        "mov rsi, %2\n"           Note: old value buffer
        "mov rdx, %3\n"           Note: old value length pointer
        "mov r10, %4\n"           Note: new value buffer
        "mov r8, %5\n"            Note: new value length
        "mov rax, %6\n"           Note: sysctlbyname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (oldp), "r" (oldlenp), "r" (newp), "r" (newlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sysctlnametomib" that takes name as Pointer, mibp as Pointer, sizep as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysctlnametomib")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sysctl name string
        "mov rsi, %2\n"           Note: MIB array buffer
        "mov rdx, %3\n"           Note: MIB size pointer
        "mov rax, %4\n"           Note: sysctlnametomib syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (mibp), "r" (sizep), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Resource Limits =====

Process called "sys_getrlimit" that takes which as Integer, rlp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource type
        "mov rsi, %2\n"           Note: rlimit structure
        "mov rax, %3\n"           Note: getrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (rlp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setrlimit" that takes which as Integer, rlp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource type
        "mov rsi, %2\n"           Note: rlimit structure
        "mov rax, %3\n"           Note: setrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (rlp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getrusage" that takes who as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who (process/children)
        "mov rsi, %2\n"           Note: resource usage structure
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Kernel Module Operations =====

Process called "sys_modctl" that takes cmd as Integer, arg as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("modctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: module command
        "mov rsi, %2\n"           Note: command arguments
        "mov rax, %3\n"           Note: modctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (arg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Random Number Generation =====

Process called "sys_getrandom" that takes buf as Pointer, buflen as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrandom")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: buffer
        "mov rsi, %2\n"           Note: buffer length
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: getrandom syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (buflen), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD-Specific Memory Operations =====

Process called "sys_madvise" that takes addr as Pointer, len as Integer, behav as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("madvise")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: memory address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: advice behavior
        "mov rax, %4\n"           Note: madvise syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (behav), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mlock" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mlock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: memory address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: mlock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munlock" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munlock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: memory address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: munlock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mlockall" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mlockall")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: lock flags
        "mov rax, %2\n"           Note: mlockall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munlockall" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munlockall")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: munlockall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Event System (kqueue) =====

Process called "sys_kqueue" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent" that takes kq as Integer, changelist as Pointer, nchanges as Integer, eventlist as Pointer, nevents as Integer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kqueue descriptor
        "mov rsi, %2\n"           Note: change list
        "mov rdx, %3\n"           Note: number of changes
        "mov r10, %4\n"           Note: event list
        "mov r8, %5\n"            Note: number of events
        "mov r9, %6\n"            Note: timeout
        "mov rax, %7\n"           Note: kevent syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Logging =====

Process called "sys_openlog" that takes ident as Pointer, logopt as Integer, facility as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("openlog")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: identification string
        "mov rsi, %2\n"           Note: log options
        "mov rdx, %3\n"           Note: facility
        "mov rax, %4\n"           Note: openlog syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ident), "r" (logopt), "r" (facility), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_syslog" that takes type as Integer, buf as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("syslog")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message type
        "mov rsi, %2\n"           Note: message buffer
        "mov rdx, %3\n"           Note: message length
        "mov rax, %4\n"           Note: syslog syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (type), "r" (buf), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Quota System =====

Process called "sys_quotactl" that takes path as Pointer, cmd as Integer, id as Integer, addr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("quotactl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: filesystem path
        "mov rsi, %2\n"           Note: quota command
        "mov rdx, %3\n"           Note: user/group ID
        "mov r10, %4\n"           Note: data address
        "mov rax, %5\n"           Note: quotactl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (cmd), "r" (id), "r" (addr), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD System Profiling =====

Process called "sys_profil" that takes samples as Pointer, size as Integer, offset as Integer, scale as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("profil")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sample buffer
        "mov rsi, %2\n"           Note: buffer size
        "mov rdx, %3\n"           Note: PC offset
        "mov r10, %4\n"           Note: scale factor
        "mov rax, %5\n"           Note: profil syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (samples), "r" (size), "r" (offset), "r" (scale), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD System Call Tracing =====

Process called "sys_ktrace" that takes fname as Pointer, ops as Integer, facs as Integer, pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ktrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: trace file name
        "mov rsi, %2\n"           Note: trace operations
        "mov rdx, %3\n"           Note: trace facilities
        "mov r10, %4\n"           Note: process ID
        "mov rax, %5\n"           Note: ktrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fname), "r" (ops), "r" (facs), "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fktrace" that takes fd as Integer, ops as Integer, facs as Integer, pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fktrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: trace file descriptor
        "mov rsi, %2\n"           Note: trace operations
        "mov rdx, %3\n"           Note: trace facilities
        "mov r10, %4\n"           Note: process ID
        "mov rax, %5\n"           Note: fktrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (ops), "r" (facs), "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Emulation Support =====

Process called "sys_emul_netbsd_syscall" that takes code as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("emul_netbsd_syscall")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: emulation code
        "mov rax, %2\n"           Note: emul_netbsd_syscall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (code), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Hardware Monitoring =====

Process called "sys_envsys" that takes cmd as Integer, arg as Pointer, arglen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("envsys")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: environment system command
        "mov rsi, %2\n"           Note: command argument
        "mov rdx, %3\n"           Note: argument length
        "mov rax, %4\n"           Note: envsys syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (arg), "r" (arglen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD System Statistics =====

Process called "sys_swapctl" that takes cmd as Integer, arg as Pointer, misc as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("swapctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: swap control command
        "mov rsi, %2\n"           Note: command argument
        "mov rdx, %3\n"           Note: miscellaneous data
        "mov rax, %4\n"           Note: swapctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (arg), "r" (misc), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Process Control =====

Process called "sys_procfs_ctl" that takes fd as Integer, com as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("procfs_ctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: procfs file descriptor
        "mov rsi, %2\n"           Note: control command
        "mov rdx, %3\n"           Note: control data
        "mov rax, %4\n"           Note: procfs_ctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (com), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Security Extensions =====

Process called "sys_lchown" that takes path as Pointer, owner as Integer, group as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lchown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path (no symlink follow)
        "mov rsi, %2\n"           Note: owner UID
        "mov rdx, %3\n"           Note: group GID
        "mov rax, %4\n"           Note: lchown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (owner), "r" (group), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lchmod" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lchmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path (no symlink follow)
        "mov rsi, %2\n"           Note: file mode
        "mov rax, %3\n"           Note: lchmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
