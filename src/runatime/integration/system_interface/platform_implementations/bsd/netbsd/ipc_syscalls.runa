Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/ipc_syscalls.runa
NetBSD Inter-Process Communication Syscalls

This module provides NetBSD-specific IPC syscall implementations,
including shared memory, message queues, and NetBSD-specific IPC features.

Key features and capabilities:
- Shared memory (shmget, shmat)
- Message queues (msgget, msgsnd)
- Semaphores (semget, semop)
- Pipes and FIFOs
- Unix domain sockets
- Memory-mapped files
- Anonymous shared memory
- IPC permissions
- IPC limits
- IPC statistics
- POSIX IPC
- System V IPC
- IPC namespaces
- Process synchronization
- IPC cleanup
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== System V Shared Memory =====

Process called "sys_shmget" that takes key as Integer, size as Integer, shmflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmget")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory key
        "mov rsi, %2\n"           Note: memory size
        "mov rdx, %3\n"           Note: shared memory flags
        "mov rax, %4\n"           Note: shmget syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (key), "r" (size), "r" (shmflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shmat" that takes shmid as Integer, shmaddr as Pointer, shmflg as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmat")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory identifier
        "mov rsi, %2\n"           Note: shared memory address (NULL for system choice)
        "mov rdx, %3\n"           Note: shared memory flags
        "mov rax, %4\n"           Note: shmat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (shmid), "r" (shmaddr), "r" (shmflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shmdt" that takes shmaddr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmdt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory address to detach
        "mov rax, %2\n"           Note: shmdt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (shmaddr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shmctl" that takes shmid as Integer, cmd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory identifier
        "mov rsi, %2\n"           Note: control command
        "mov rdx, %3\n"           Note: control buffer
        "mov rax, %4\n"           Note: shmctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (shmid), "r" (cmd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System V Message Queues =====

Process called "sys_msgget" that takes key as Integer, msgflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgget")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue key
        "mov rsi, %2\n"           Note: message queue flags
        "mov rax, %3\n"           Note: msgget syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (key), "r" (msgflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msgsnd" that takes msqid as Integer, msgp as Pointer, msgsz as Integer, msgflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgsnd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue identifier
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message size
        "mov r10, %4\n"           Note: message flags
        "mov rax, %5\n"           Note: msgsnd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (msqid), "r" (msgp), "r" (msgsz), "r" (msgflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msgrcv" that takes msqid as Integer, msgp as Pointer, msgsz as Integer, msgtyp as Integer, msgflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgrcv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue identifier
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message size
        "mov r10, %4\n"           Note: message type
        "mov r8, %5\n"            Note: message flags
        "mov rax, %6\n"           Note: msgrcv syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (msqid), "r" (msgp), "r" (msgsz), "r" (msgtyp), "r" (msgflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msgctl" that takes msqid as Integer, cmd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue identifier
        "mov rsi, %2\n"           Note: control command
        "mov rdx, %3\n"           Note: control buffer
        "mov rax, %4\n"           Note: msgctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (msqid), "r" (cmd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System V Semaphores =====

Process called "sys_semget" that takes key as Integer, nsems as Integer, semflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("semget")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: semaphore key
        "mov rsi, %2\n"           Note: number of semaphores
        "mov rdx, %3\n"           Note: semaphore flags
        "mov rax, %4\n"           Note: semget syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (key), "r" (nsems), "r" (semflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_semop" that takes semid as Integer, sops as Pointer, nsops as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("semop")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: semaphore identifier
        "mov rsi, %2\n"           Note: semaphore operations array
        "mov rdx, %3\n"           Note: number of operations
        "mov rax, %4\n"           Note: semop syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (semid), "r" (sops), "r" (nsops), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_semctl" that takes semid as Integer, semnum as Integer, cmd as Integer, arg as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("semctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: semaphore identifier
        "mov rsi, %2\n"           Note: semaphore number
        "mov rdx, %3\n"           Note: control command
        "mov r10, %4\n"           Note: command argument
        "mov rax, %5\n"           Note: semctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (semid), "r" (semnum), "r" (cmd), "r" (arg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Pipes and FIFOs =====

Process called "sys_pipe" that takes pipefd as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pipe")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pipe file descriptor array [2]
        "mov rax, %2\n"           Note: pipe syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pipefd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mkfifo" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkfifo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: FIFO path
        "mov rsi, %2\n"           Note: FIFO permissions
        "mov rax, %3\n"           Note: mkfifo syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== POSIX IPC =====

Process called "sys_shm_open" that takes name as Pointer, oflag as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory name
        "mov rsi, %2\n"           Note: open flags
        "mov rdx, %3\n"           Note: file mode
        "mov rax, %4\n"           Note: shm_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (oflag), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shm_unlink" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory name
        "mov rax, %2\n"           Note: shm_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mq_open" that takes name as Pointer, oflag as Integer, mode as Integer, attr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mq_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue name
        "mov rsi, %2\n"           Note: open flags
        "mov rdx, %3\n"           Note: file mode
        "mov r10, %4\n"           Note: message queue attributes
        "mov rax, %5\n"           Note: mq_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (oflag), "r" (mode), "r" (attr), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mq_close" that takes mqdes as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mq_close")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue descriptor
        "mov rax, %2\n"           Note: mq_close syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mqdes), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mq_unlink" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mq_unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue name
        "mov rax, %2\n"           Note: mq_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mq_send" that takes mqdes as Integer, msg_ptr as Pointer, msg_len as Integer, msg_prio as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mq_send")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue descriptor
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message length
        "mov r10, %4\n"           Note: message priority
        "mov rax, %5\n"           Note: mq_send syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mqdes), "r" (msg_ptr), "r" (msg_len), "r" (msg_prio), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mq_receive" that takes mqdes as Integer, msg_ptr as Pointer, msg_len as Integer, msg_prio as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mq_receive")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue descriptor
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message length
        "mov r10, %4\n"           Note: message priority pointer
        "mov rax, %5\n"           Note: mq_receive syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mqdes), "r" (msg_ptr), "r" (msg_len), "r" (msg_prio), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Unix Domain Sockets =====

Process called "sys_socket" that takes domain as Integer, type as Integer, protocol as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("socket")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: communication domain
        "mov rsi, %2\n"           Note: socket type
        "mov rdx, %3\n"           Note: protocol
        "mov rax, %4\n"           Note: socket syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (domain), "r" (type), "r" (protocol), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_socketpair" that takes domain as Integer, type as Integer, protocol as Integer, sv as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("socketpair")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: communication domain
        "mov rsi, %2\n"           Note: socket type
        "mov rdx, %3\n"           Note: protocol
        "mov r10, %4\n"           Note: socket pair array [2]
        "mov rax, %5\n"           Note: socketpair syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (domain), "r" (type), "r" (protocol), "r" (sv), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD-Specific IPC Features =====

Process called "sys_kqueue" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent" that takes kq as Integer, changelist as Pointer, nchanges as Integer, eventlist as Pointer, nevents as Integer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kqueue descriptor
        "mov rsi, %2\n"           Note: change list
        "mov rdx, %3\n"           Note: number of changes
        "mov r10, %4\n"           Note: event list
        "mov r8, %5\n"            Note: number of events
        "mov r9, %6\n"            Note: timeout
        "mov rax, %7\n"           Note: kevent syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== IPC Information and Statistics =====

Process called "sys_sysinfo" that takes info as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysinfo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: system information structure
        "mov rax, %2\n"           Note: sysinfo syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (info), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process