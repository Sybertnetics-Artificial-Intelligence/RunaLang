Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/security_syscalls.runa
NetBSD Security Syscalls

This module provides NetBSD-specific security syscall implementations,
including access control, credentials, and NetBSD security features.

Key features and capabilities:
- User/group management
- Access control
- Capabilities
- Security labels
- Audit system
- Kauth framework
- Veriexec
- File flags
- Secure levels
- PAX features
- Cryptographic services
- Security policies
- Sandboxing
- Privilege separation
- Security monitoring
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== User and Group Management =====

Process called "sys_setuid" that takes uid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: user ID
        "mov rax, %2\n"           Note: setuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (uid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setgid" that takes gid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: group ID
        "mov rax, %2\n"           Note: setgid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (gid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_seteuid" that takes euid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("seteuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: effective user ID
        "mov rax, %2\n"           Note: seteuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (euid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setegid" that takes egid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setegid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: effective group ID
        "mov rax, %2\n"           Note: setegid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (egid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Access Control =====

Process called "sys_access" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("access")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: access mode
        "mov rax, %3\n"           Note: access syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_faccessat" that takes fd as Integer, path as Pointer, mode as Integer, flag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("faccessat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory fd
        "mov rsi, %2\n"           Note: relative path
        "mov rdx, %3\n"           Note: access mode
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: faccessat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (mode), "r" (flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Kauth Framework =====

Process called "sys_kauth_cred_getuid" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_cred_getuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kauth_cred_getuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kauth_authorize_generic" that takes cred as Pointer, action as Integer, arg0 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kauth_authorize_generic")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credentials
        "mov rsi, %2\n"           Note: action
        "mov rdx, %3\n"           Note: argument
        "mov rax, %4\n"           Note: kauth_authorize_generic syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (action), "r" (arg0), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Veriexec =====

Process called "sys_veriexec_load" that takes path as Pointer, type as Integer, fp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("veriexec_load")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: fingerprint type
        "mov rdx, %3\n"           Note: fingerprint
        "mov rax, %4\n"           Note: veriexec_load syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (type), "r" (fp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_veriexec_verify" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("veriexec_verify")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: veriexec_verify syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Flags =====

Process called "sys_chflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: chflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchflags" that takes fd as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: fchflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Secure Levels =====

Process called "sys_securelevel" that takes level as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("securelevel")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: security level
        "mov rax, %2\n"           Note: securelevel syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (level), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== PAX Features =====

Process called "sys_pax_aslr_enable" that takes pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pax_aslr_enable")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rax, %2\n"           Note: pax_aslr_enable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pax_mprotect_enable" that takes pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pax_mprotect_enable")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rax, %2\n"           Note: pax_mprotect_enable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Cryptographic Services =====

Process called "sys_crypto_newsession" that takes crid as Pointer, sessp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("crypto_newsession")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: crypto ID
        "mov rsi, %2\n"           Note: session pointer
        "mov rax, %3\n"           Note: crypto_newsession syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (crid), "r" (sessp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_crypto_freesession" that takes sid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("crypto_freesession")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: session ID
        "mov rax, %2\n"           Note: crypto_freesession syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Security Policies =====

Process called "sys_security_policy_load" that takes policy as Pointer, size as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("security_policy_load")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: policy data
        "mov rsi, %2\n"           Note: policy size
        "mov rax, %3\n"           Note: security_policy_load syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (policy), "r" (size), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_security_policy_unload" that takes id as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("security_policy_unload")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: policy ID
        "mov rax, %2\n"           Note: security_policy_unload syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (id), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Sandboxing =====

Process called "sys_sandbox_init" that takes profile as Pointer, flags as Integer, errorbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sandbox_init")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sandbox profile
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: error buffer
        "mov rax, %4\n"           Note: sandbox_init syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (profile), "r" (flags), "r" (errorbuf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pledge" that takes promises as Pointer, execpromises as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pledge")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: promises
        "mov rsi, %2\n"           Note: exec promises
        "mov rax, %3\n"           Note: pledge syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (promises), "r" (execpromises), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Privilege Separation =====

Process called "sys_priv_check" that takes cred as Pointer, priv as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("priv_check")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: credentials
        "mov rsi, %2\n"           Note: privilege
        "mov rax, %3\n"           Note: priv_check syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cred), "r" (priv), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Security Monitoring =====

Process called "sys_audit_control" that takes command as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("audit_control")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit command
        "mov rax, %2\n"           Note: audit_control syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (command), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_audit_write" that takes record as Pointer, length as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("audit_write")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit record
        "mov rsi, %2\n"           Note: record length
        "mov rax, %3\n"           Note: audit_write syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (record), "r" (length), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process