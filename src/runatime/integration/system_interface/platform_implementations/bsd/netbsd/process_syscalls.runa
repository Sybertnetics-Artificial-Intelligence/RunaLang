Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/netbsd/process_syscalls.runa
NetBSD Process Management Syscalls

This module provides NetBSD-specific process management syscall implementations,
including process creation, control, and NetBSD-specific process features.

Key features and capabilities:
- Process creation (fork, vfork)
- Process execution (execve)
- Process priorities
- Process groups and sessions
- Process accounting
- Process limits (rlimit)
- Process monitoring
- Process tracing (ptrace)
- Process signaling
- Process resource usage
- Scheduler activations
- LWP (Light Weight Process) management
- Process emulation
- Binary compatibility
- Kauth framework integration
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/netbsd_x64" as NetBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Process Creation =====

Process called "sys_fork" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fork")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: fork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vfork" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vfork")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: vfork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clone" that takes flags as Integer, stack as Pointer, parent_tid as Pointer, child_tid as Pointer, tls as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clone")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clone flags
        "mov rsi, %2\n"           Note: child stack pointer
        "mov rdx, %3\n"           Note: parent thread ID pointer
        "mov r10, %4\n"           Note: child thread ID pointer
        "mov r8, %5\n"            Note: thread local storage
        "mov rax, %6\n"           Note: clone syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (stack), "r" (parent_tid), "r" (child_tid), "r" (tls), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Execution =====

Process called "sys_execve" that takes pathname as Pointer, argv as Pointer, envp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("execve")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: executable pathname
        "mov rsi, %2\n"           Note: argument vector
        "mov rdx, %3\n"           Note: environment vector
        "mov rax, %4\n"           Note: execve syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pathname), "r" (argv), "r" (envp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_execvp" that takes file as Pointer, argv as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("execvp")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: executable file
        "mov rsi, %2\n"           Note: argument vector
        "mov rax, %3\n"           Note: execvp syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (file), "r" (argv), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Termination =====

Process called "sys_exit" that takes status as Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("exit")
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: exit status
        "mov rax, %2\n"           Note: exit syscall number from registry
        "syscall\n"
        :
        : "r" (status), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
End Process

Process called "sys_wait4" that takes pid as Integer, status as Pointer, options as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("wait4")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID to wait for
        "mov rsi, %2\n"           Note: status pointer
        "mov rdx, %3\n"           Note: wait options
        "mov r10, %4\n"           Note: resource usage
        "mov rax, %5\n"           Note: wait4 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (status), "r" (options), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_waitpid" that takes pid as Integer, status as Pointer, options as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("waitpid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID to wait for
        "mov rsi, %2\n"           Note: status pointer
        "mov rdx, %3\n"           Note: wait options
        "mov rax, %4\n"           Note: waitpid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (status), "r" (options), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process IDs and Groups =====

Process called "sys_getpid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getpid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getppid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getppid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getppid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getpgrp" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpgrp")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getpgrp syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setpgid" that takes pid as Integer, pgid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setpgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: process group ID
        "mov rax, %3\n"           Note: setpgid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (pgid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setsid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setsid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: setsid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getsid" that takes pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getsid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rax, %2\n"           Note: getsid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Priorities =====

Process called "sys_getpriority" that takes which as Integer, who as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpriority")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: priority target type
        "mov rsi, %2\n"           Note: target ID
        "mov rax, %3\n"           Note: getpriority syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (who), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setpriority" that takes which as Integer, who as Integer, prio as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setpriority")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: priority target type
        "mov rsi, %2\n"           Note: target ID
        "mov rdx, %3\n"           Note: priority value
        "mov rax, %4\n"           Note: setpriority syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (who), "r" (prio), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_nice" that takes inc as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("nice")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: nice increment
        "mov rax, %2\n"           Note: nice syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (inc), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Resource Limits =====

Process called "sys_getrlimit" that takes resource as Integer, rlim as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource type
        "mov rsi, %2\n"           Note: resource limit structure
        "mov rax, %3\n"           Note: getrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlim), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setrlimit" that takes resource as Integer, rlim as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource type
        "mov rsi, %2\n"           Note: resource limit structure
        "mov rax, %3\n"           Note: setrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlim), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Tracing (ptrace) =====

Process called "sys_ptrace" that takes request as Integer, pid as Integer, addr as Pointer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ptrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ptrace request
        "mov rsi, %2\n"           Note: target process ID
        "mov rdx, %3\n"           Note: address
        "mov r10, %4\n"           Note: data
        "mov rax, %5\n"           Note: ptrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (request), "r" (pid), "r" (addr), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Signaling =====

Process called "sys_kill" that takes pid as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target process ID
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_killpg" that takes pgrp as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("killpg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process group ID
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: killpg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pgrp), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== NetBSD Light Weight Processes (LWP) =====

Process called "sys_lwp_create" that takes ucp as Pointer, flags as Integer, new_lwp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lwp_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: user context pointer
        "mov rsi, %2\n"           Note: creation flags
        "mov rdx, %3\n"           Note: new LWP ID pointer
        "mov rax, %4\n"           Note: lwp_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ucp), "r" (flags), "r" (new_lwp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_exit" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lwp_exit")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: lwp_exit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_self" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lwp_self")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: lwp_self syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_wait" that takes wait_for as Integer, departed as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lwp_wait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: LWP ID to wait for
        "mov rsi, %2\n"           Note: departed LWP ID pointer
        "mov rax, %3\n"           Note: lwp_wait syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (wait_for), "r" (departed), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_suspend" that takes target as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lwp_suspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP ID
        "mov rax, %2\n"           Note: lwp_suspend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lwp_continue" that takes target as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lwp_continue")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target LWP ID
        "mov rax, %2\n"           Note: lwp_continue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Accounting =====

Process called "sys_acct" that takes filename as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acct")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: accounting file name
        "mov rax, %2\n"           Note: acct syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (filename), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Scheduler Activations =====

Process called "sys_sa_register" that takes newv as Pointer, oldv as Pointer, flags as Integer, stackinfo_offset as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_register")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: new SA vector
        "mov rsi, %2\n"           Note: old SA vector
        "mov rdx, %3\n"           Note: SA flags
        "mov r10, %4\n"           Note: stack info offset
        "mov rax, %5\n"           Note: sa_register syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (newv), "r" (oldv), "r" (flags), "r" (stackinfo_offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_stacks" that takes num as Integer, stacks as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_stacks")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: number of stacks
        "mov rsi, %2\n"           Note: stack array
        "mov rax, %3\n"           Note: sa_stacks syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (num), "r" (stacks), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sa_enable" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sa_enable")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: sa_enable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Information =====

Process called "sys_getrusage" that takes who as Integer, usage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource target (SELF, CHILDREN)
        "mov rsi, %2\n"           Note: usage structure
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (usage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process