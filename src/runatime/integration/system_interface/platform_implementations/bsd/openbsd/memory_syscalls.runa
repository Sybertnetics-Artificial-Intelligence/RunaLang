Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/memory_syscalls.runa
OpenBSD Memory Management Syscalls

This module provides OpenBSD-specific memory management syscall implementations,
including virtual memory operations and OpenBSD security-focused memory features.

Key features and capabilities:
- Memory mapping (mmap, munmap)
- Memory protection (mprotect)
- Immutable memory (mimmutable)
- Memory locking (mlock, mlockall)
- Memory advisories (madvise)
- W^X enforcement
- Guard pages
- Stack protection
- ASLR (Address Space Layout Randomization)
- Shared memory
- Memory statistics
- Page cache control
- Zero-fill on demand
- Memory barriers
- Secure memory wiping
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Memory Mapping =====

Process called "sys_mmap" that takes addr as Pointer, len as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mmap")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address hint
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection flags
        "mov r10, %4\n"           Note: mapping flags
        "mov r8, %5\n"            Note: file descriptor
        "mov r9, %6\n"            Note: offset
        "mov rax, %7\n"           Note: mmap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (flags), "r" (fd), "r" (offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munmap" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munmap")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: munmap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mprotect" that takes addr as Pointer, len as Integer, prot as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mprotect")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection flags
        "mov rax, %4\n"           Note: mprotect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: OpenBSD-specific immutable memory
Process called "sys_mimmutable" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mimmutable")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: mimmutable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Locking =====

Process called "sys_mlock" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mlock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: mlock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munlock" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munlock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: munlock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mlockall" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mlockall")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: flags
        "mov rax, %2\n"           Note: mlockall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munlockall" that takes nothing returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munlockall")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: munlockall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Advisory =====

Process called "sys_madvise" that takes addr as Pointer, len as Integer, advice as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("madvise")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: advice
        "mov rax, %4\n"           Note: madvise syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (advice), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_minherit" that takes addr as Pointer, len as Integer, inherit as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("minherit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: inheritance flags
        "mov rax, %4\n"           Note: minherit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (inherit), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Synchronization =====

Process called "sys_msync" that takes addr as Pointer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: sync flags
        "mov rax, %4\n"           Note: msync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Shared Memory =====

Process called "sys_shm_open" that takes name as Pointer, oflag as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name
        "mov rsi, %2\n"           Note: open flags
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: shm_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (oflag), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shm_unlink" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name
        "mov rax, %2\n"           Note: shm_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Information =====

Process called "sys_mincore" that takes addr as Pointer, len as Integer, vec as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mincore")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: result vector
        "mov rax, %4\n"           Note: mincore syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (vec), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Query =====

Process called "sys_mquery" that takes addr as Pointer, len as Integer, prot as Integer, flags as Integer, fd as Integer, pos as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mquery")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address hint
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection
        "mov r10, %4\n"           Note: flags
        "mov r8, %5\n"            Note: file descriptor
        "mov r9, %6\n"            Note: offset
        "mov rax, %7\n"           Note: mquery syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (flags), "r" (fd), "r" (pos), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Break/Data Segment =====

Process called "sys_break" that takes addr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("break")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: new break address
        "mov rax, %2\n"           Note: break syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
