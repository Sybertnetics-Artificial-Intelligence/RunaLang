Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/time_syscalls.runa
OpenBSD Time Management Syscalls

This module provides OpenBSD-specific time management syscall implementations,
including system time, timers, and OpenBSD-specific timing features.

Key features and capabilities:
- System time operations
- High-resolution timers
- Time adjustment (adjtime)
- Timer management
- Clock operations
- Monotonic clocks
- Process times
- Thread times
- Time synchronization
- UTC/local time
- Timer queues
- Precision timing
- Time pledge compliance
- Secure time operations
- Time namespaces
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== System Time Operations =====

Process called "sys_gettimeofday" that takes tv as Pointer, tz as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("gettimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time value
        "mov rsi, %2\n"           Note: timezone
        "mov rax, %3\n"           Note: gettimeofday syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_settimeofday" that takes tv as Pointer, tz as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("settimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time value
        "mov rsi, %2\n"           Note: timezone
        "mov rax, %3\n"           Note: settimeofday syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== High-Resolution Clocks =====

Process called "sys_clock_gettime" that takes clk_id as Integer, tp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: timespec pointer
        "mov rax, %3\n"           Note: clock_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_settime" that takes clk_id as Integer, tp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: timespec pointer
        "mov rax, %3\n"           Note: clock_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_getres" that takes clk_id as Integer, res as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getres")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: resolution
        "mov rax, %3\n"           Note: clock_getres syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (res), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Sleep and Delay Operations =====

Process called "sys_nanosleep" that takes rqtp as Pointer, rmtp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: requested time
        "mov rsi, %2\n"           Note: remaining time
        "mov rax, %3\n"           Note: nanosleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rqtp), "r" (rmtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_usleep" that takes useconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("usleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: microseconds
        "mov rax, %2\n"           Note: usleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (useconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Time Adjustment =====

Process called "sys_adjtime" that takes delta as Pointer, olddelta as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("adjtime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time adjustment
        "mov rsi, %2\n"           Note: previous adjustment
        "mov rax, %3\n"           Note: adjtime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (delta), "r" (olddelta), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_adjfreq" that takes freq as Pointer, oldfreq as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("adjfreq")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: frequency adjustment
        "mov rsi, %2\n"           Note: old frequency
        "mov rax, %3\n"           Note: adjfreq syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (freq), "r" (oldfreq), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process and Thread Times =====

Process called "sys_getitimer" that takes which as Integer, curr_value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which timer
        "mov rsi, %2\n"           Note: current value
        "mov rax, %3\n"           Note: getitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (curr_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setitimer" that takes which as Integer, new_value as Pointer, old_value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which timer
        "mov rsi, %2\n"           Note: new timer value
        "mov rdx, %3\n"           Note: old timer value
        "mov rax, %4\n"           Note: setitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (new_value), "r" (old_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_times" that takes buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("times")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: times buffer
        "mov rax, %2\n"           Note: times syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Alarms =====

Process called "sys_alarm" that takes seconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("alarm")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: alarm seconds
        "mov rax, %2\n"           Note: alarm syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (seconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== UTC Time =====

Process called "sys_utimes" that takes path as Pointer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("utimes")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: times array
        "mov rax, %3\n"           Note: utimes syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_futimes" that takes fd as Integer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("futimes")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: times array
        "mov rax, %3\n"           Note: futimes syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_utimensat" that takes dirfd as Integer, path as Pointer, times as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("utimensat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: times array
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: utimensat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dirfd), "r" (path), "r" (times), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_futimens" that takes fd as Integer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("futimens")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: times array
        "mov rax, %3\n"           Note: futimens syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Monotonic Time =====

Process called "sys_getrusage" that takes who as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who (RUSAGE_SELF, RUSAGE_CHILDREN, etc.)
        "mov rsi, %2\n"           Note: rusage structure
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
