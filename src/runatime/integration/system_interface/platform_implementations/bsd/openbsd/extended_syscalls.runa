Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/extended_syscalls.runa
OpenBSD Extended Syscalls

This module provides OpenBSD-specific extended syscall implementations,
including system information, resource management, and OpenBSD-specific features.

Key features and capabilities:
- System information (sysctl)
- Resource limits (rlimit)
- System statistics
- Kernel modules
- System configuration
- Performance monitoring
- Hardware sensors
- Random number generation
- System logging
- Audit subsystem
- Kernel events
- System profiling
- Virtualization support
- Debugging interfaces
- Advanced features
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== System Control (sysctl) Operations =====

Process called "sys_sysctl" that takes mib as Pointer, miblen as Integer, old as Pointer, oldlenp as Pointer, new as Pointer, newlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__sysctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: MIB array pointer
        "mov rsi, %2\n"           Note: MIB length
        "mov rdx, %3\n"           Note: old value buffer
        "mov r10, %4\n"           Note: old value length pointer
        "mov r8, %5\n"            Note: new value buffer
        "mov r9, %6\n"            Note: new value length
        "mov rax, %7\n"           Note: __sysctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mib), "r" (miblen), "r" (old), "r" (oldlenp), "r" (new), "r" (newlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sysctlbyname" that takes name as Pointer, old as Pointer, oldlenp as Pointer, new as Pointer, newlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__sysctlbyname")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name string
        "mov rsi, %2\n"           Note: old value buffer
        "mov rdx, %3\n"           Note: old value length pointer
        "mov r10, %4\n"           Note: new value buffer
        "mov r8, %5\n"            Note: new value length
        "mov rax, %6\n"           Note: __sysctlbyname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (old), "r" (oldlenp), "r" (new), "r" (newlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Resource Limits =====

Process called "sys_getrlimit" that takes resource as Integer, rlp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource type
        "mov rsi, %2\n"           Note: rlimit structure
        "mov rax, %3\n"           Note: getrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setrlimit" that takes resource as Integer, rlp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource type
        "mov rsi, %2\n"           Note: rlimit structure
        "mov rax, %3\n"           Note: setrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Random Number Generation =====

Process called "sys_getentropy" that takes buf as Pointer, buflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getentropy")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: buffer
        "mov rsi, %2\n"           Note: buffer length
        "mov rax, %3\n"           Note: getentropy syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (buflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_arc4random_buf" that takes buf as Pointer, nbytes as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("arc4random_buf")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: buffer
        "mov rsi, %2\n"           Note: number of bytes
        "mov rax, %3\n"           Note: arc4random_buf syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (nbytes), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Statistics =====

Process called "sys_getrusage" that takes who as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who
        "mov rsi, %2\n"           Note: resource usage structure
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getloadavg" that takes loadavg as Pointer, nelem as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getloadavg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: load average array
        "mov rsi, %2\n"           Note: number of elements
        "mov rax, %3\n"           Note: getloadavg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (loadavg), "r" (nelem), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Hardware Sensors =====

Process called "sys_sysctl_sensors" that takes dev as Integer, type as Integer, numt as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysctl_sensors")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: device number
        "mov rsi, %2\n"           Note: sensor type
        "mov rdx, %3\n"           Note: sensor number
        "mov r10, %4\n"           Note: data buffer
        "mov rax, %5\n"           Note: sysctl_sensors syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dev), "r" (type), "r" (numt), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Kernel Events (kqueue) =====

Process called "sys_kqueue" that takes returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent" that takes kq as Integer, changelist as Pointer, nchanges as Integer, eventlist as Pointer, nevents as Integer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kqueue descriptor
        "mov rsi, %2\n"           Note: change list
        "mov rdx, %3\n"           Note: number of changes
        "mov r10, %4\n"           Note: event list
        "mov r8, %5\n"            Note: number of events
        "mov r9, %6\n"            Note: timeout
        "mov rax, %7\n"           Note: kevent syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Profiling =====

Process called "sys_profil" that takes samples as Pointer, size as Integer, offset as Integer, scale as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("profil")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sample buffer
        "mov rsi, %2\n"           Note: buffer size
        "mov rdx, %3\n"           Note: offset
        "mov r10, %4\n"           Note: scale
        "mov rax, %5\n"           Note: profil syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (samples), "r" (size), "r" (offset), "r" (scale), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Logging =====

Process called "sys_sendsyslog" that takes buf as Pointer, nbyte as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendsyslog")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message buffer
        "mov rsi, %2\n"           Note: message length
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: sendsyslog syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (nbyte), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Virtualization Support (VMM) =====

Process called "sys_vmm_create" that takes name as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vmm_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: VM name
        "mov rsi, %2\n"           Note: creation flags
        "mov rax, %3\n"           Note: vmm_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vmm_run" that takes vmid as Integer, vcpu as Integer, vrp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vmm_run")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: VM ID
        "mov rsi, %2\n"           Note: vCPU ID
        "mov rdx, %3\n"           Note: VM run params
        "mov rax, %4\n"           Note: vmm_run syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (vmid), "r" (vcpu), "r" (vrp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Debugging Interfaces =====

Process called "sys_ktrace" that takes fname as Pointer, ops as Integer, facs as Integer, pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ktrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: trace file name
        "mov rsi, %2\n"           Note: operations
        "mov rdx, %3\n"           Note: facilities
        "mov r10, %4\n"           Note: process ID
        "mov rax, %5\n"           Note: ktrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fname), "r" (ops), "r" (facs), "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_utrace" that takes label as Pointer, addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("utrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: trace label
        "mov rsi, %2\n"           Note: data address
        "mov rdx, %3\n"           Note: data length
        "mov rax, %4\n"           Note: utrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (label), "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Accounting =====

Process called "sys_acct" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acct")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: accounting file path
        "mov rax, %2\n"           Note: acct syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Swap Management =====

Process called "sys_swapctl" that takes cmd as Integer, arg as Pointer, misc as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("swapctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: command
        "mov rsi, %2\n"           Note: argument
        "mov rdx, %3\n"           Note: miscellaneous
        "mov rax, %4\n"           Note: swapctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (arg), "r" (misc), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process