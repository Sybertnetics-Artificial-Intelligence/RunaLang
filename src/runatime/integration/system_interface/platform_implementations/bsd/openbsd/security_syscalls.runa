Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/security_syscalls.runa
OpenBSD Security Enhancement Syscalls

This module provides OpenBSD-specific security syscall implementations,
including enhanced security features and mitigations.

Key features and capabilities:
- W^X (Write XOR Execute) enforcement
- ASLR (Address Space Layout Randomization)
- Stack protector
- Guard pages
- Immutable flags
- Secure random numbers
- Time-based randomization
- Memory protection
- Syscall filtering
- Retguard protection
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== User and Group Management =====

Process called "sys_getuid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_geteuid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("geteuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: geteuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getgid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getgid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getegid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getegid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getegid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setuid" that takes uid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: user ID
        "mov rax, %2\n"           Note: setuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (uid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_seteuid" that takes euid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("seteuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: effective user ID
        "mov rax, %2\n"           Note: seteuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (euid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setgid" that takes gid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: group ID
        "mov rax, %2\n"           Note: setgid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (gid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setegid" that takes egid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setegid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: effective group ID
        "mov rax, %2\n"           Note: setegid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (egid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setreuid" that takes ruid as Integer, euid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setreuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: real user ID
        "mov rsi, %2\n"           Note: effective user ID
        "mov rax, %3\n"           Note: setreuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ruid), "r" (euid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setregid" that takes rgid as Integer, egid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setregid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: real group ID
        "mov rsi, %2\n"           Note: effective group ID
        "mov rax, %3\n"           Note: setregid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rgid), "r" (egid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setresuid" that takes ruid as Integer, euid as Integer, suid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setresuid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: real user ID
        "mov rsi, %2\n"           Note: effective user ID
        "mov rdx, %3\n"           Note: saved user ID
        "mov rax, %4\n"           Note: setresuid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ruid), "r" (euid), "r" (suid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setresgid" that takes rgid as Integer, egid as Integer, sgid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setresgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: real group ID
        "mov rsi, %2\n"           Note: effective group ID
        "mov rdx, %3\n"           Note: saved group ID
        "mov rax, %4\n"           Note: setresgid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rgid), "r" (egid), "r" (sgid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Group Management =====

Process called "sys_getgroups" that takes gidsetsize as Integer, grouplist as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getgroups")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: group list size
        "mov rsi, %2\n"           Note: group list pointer
        "mov rax, %3\n"           Note: getgroups syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (gidsetsize), "r" (grouplist), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setgroups" that takes gidsetsize as Integer, grouplist as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setgroups")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: group list size
        "mov rsi, %2\n"           Note: group list pointer
        "mov rax, %3\n"           Note: setgroups syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (gidsetsize), "r" (grouplist), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Permissions =====

Process called "sys_umask" that takes mask as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("umask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file mode creation mask
        "mov rax, %2\n"           Note: umask syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_chmod" that takes pathname as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: chmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pathname), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchmod" that takes fd as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: fchmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_chown" that takes pathname as Pointer, owner as Integer, group as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: owner
        "mov rdx, %3\n"           Note: group
        "mov rax, %4\n"           Note: chown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pathname), "r" (owner), "r" (group), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchown" that takes fd as Integer, owner as Integer, group as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: owner
        "mov rdx, %3\n"           Note: group
        "mov rax, %4\n"           Note: fchown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (owner), "r" (group), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Flags =====

Process called "sys_chflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: chflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchflags" that takes fd as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: fchflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Login and Session =====

Process called "sys_getlogin_r" that takes name as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getlogin_r")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: buffer for login name
        "mov rsi, %2\n"           Note: buffer length
        "mov rax, %3\n"           Note: getlogin_r syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setlogin" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setlogin")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: login name
        "mov rax, %2\n"           Note: setlogin syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
