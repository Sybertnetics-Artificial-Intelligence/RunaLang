Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/process_syscalls.runa
OpenBSD Process Management Syscalls

This module provides OpenBSD-specific process management syscall implementations,
including process creation, control, and OpenBSD-specific security features.

Key features and capabilities:
- Process creation (fork, vfork)
- Process execution (execve)
- Pledge-aware execution
- Process priorities
- Process groups and sessions
- Process accounting
- Process limits (rlimit)
- Process monitoring
- Process tracing (ktrace)
- Process signaling
- Process resource usage
- Secure process creation
- W^X enforcement
- ASLR for processes
- Stack protection
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Process Creation =====

Process called "sys_fork" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fork")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: fork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vfork" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vfork")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: vfork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Execution =====

Process called "sys_execve" that takes pathname as Pointer, argv as Pointer, envp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("execve")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: argument vector
        "mov rdx, %3\n"           Note: environment vector
        "mov rax, %4\n"           Note: execve syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pathname), "r" (argv), "r" (envp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Control =====

Process called "sys_exit" that takes status as Integer returns Nothing:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("exit")
    
    Inline Assembly:
        "mov rdi, %0\n"           Note: exit status
        "mov rax, %1\n"           Note: exit syscall number from registry
        "syscall\n"
        :
        : "r" (status), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
End Process

Process called "sys_wait4" that takes pid as Integer, wstatus as Pointer, options as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("wait4")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: wait status pointer
        "mov rdx, %3\n"           Note: options
        "mov r10, %4\n"           Note: resource usage pointer
        "mov rax, %5\n"           Note: wait4 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (wstatus), "r" (options), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kill" that takes pid as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Groups and Sessions =====

Process called "sys_getpid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getpid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getppid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getppid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getppid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getpgrp" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpgrp")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getpgrp syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setpgid" that takes pid as Integer, pgid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setpgid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: process group ID
        "mov rax, %3\n"           Note: setpgid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (pgid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setsid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setsid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: setsid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Priorities =====

Process called "sys_getpriority" that takes which as Integer, who as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpriority")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which
        "mov rsi, %2\n"           Note: who
        "mov rax, %3\n"           Note: getpriority syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (who), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setpriority" that takes which as Integer, who as Integer, prio as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setpriority")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which
        "mov rsi, %2\n"           Note: who
        "mov rdx, %3\n"           Note: priority
        "mov rax, %4\n"           Note: setpriority syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (who), "r" (prio), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Resource Limits =====

Process called "sys_getrlimit" that takes resource as Integer, rlim as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource
        "mov rsi, %2\n"           Note: rlimit structure pointer
        "mov rax, %3\n"           Note: getrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlim), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setrlimit" that takes resource as Integer, rlim as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource
        "mov rsi, %2\n"           Note: rlimit structure pointer
        "mov rax, %3\n"           Note: setrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlim), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Resource Usage =====

Process called "sys_getrusage" that takes who as Integer, rusage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who (RUSAGE_SELF, RUSAGE_CHILDREN, etc.)
        "mov rsi, %2\n"           Note: rusage structure pointer
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Tracing =====

Process called "sys_ptrace" that takes request as Integer, pid as Integer, addr as Pointer, data as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ptrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: request
        "mov rsi, %2\n"           Note: process ID
        "mov rdx, %3\n"           Note: address
        "mov r10, %4\n"           Note: data
        "mov rax, %5\n"           Note: ptrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (request), "r" (pid), "r" (addr), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Kernel Tracing =====

Process called "sys_ktrace" that takes tracefile as Pointer, ops as Integer, facs as Integer, pid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ktrace")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: trace file path
        "mov rsi, %2\n"           Note: operations
        "mov rdx, %3\n"           Note: facilities
        "mov r10, %4\n"           Note: process ID
        "mov rax, %5\n"           Note: ktrace syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tracefile), "r" (ops), "r" (facs), "r" (pid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Accounting =====

Process called "sys_acct" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acct")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: accounting file path
        "mov rax, %2\n"           Note: acct syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
