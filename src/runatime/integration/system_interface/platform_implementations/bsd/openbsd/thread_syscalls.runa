Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/thread_syscalls.runa
OpenBSD Thread Management Syscalls

This module provides OpenBSD-specific thread management syscall implementations,
including pthread operations and OpenBSD-specific threading features.

Key features and capabilities:
- Thread creation (__tfork)
- Thread termination
- Thread synchronization
- Thread-local storage
- Thread priorities
- Thread scheduling
- Thread signaling
- Kernel threads
- User threads (librthread)
- Thread debugging
- Thread statistics
- Futex operations
- Thread stack protection
- Thread pledge inheritance
- Secure threading
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Thread Creation and Management =====

Note: OpenBSD's thread fork syscall
Process called "sys___tfork" that takes param as Pointer, psize as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__tfork")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread parameters
        "mov rsi, %2\n"           Note: parameter size
        "mov rax, %3\n"           Note: __tfork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (param), "r" (psize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Thread termination
Process called "sys___threxit" that takes status as Pointer returns Nothing:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__threxit")
    
    Inline Assembly:
        "mov rdi, %0\n"           Note: exit status pointer
        "mov rax, %1\n"           Note: __threxit syscall number from registry
        "syscall\n"
        :
        : "r" (status), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
End Process

Note: Get thread ID
Process called "sys___get_tcb" returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__get_tcb")
    Let result be Pointer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: __get_tcb syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Set thread control block
Process called "sys___set_tcb" that takes tcb as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__set_tcb")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread control block pointer
        "mov rax, %2\n"           Note: __set_tcb syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tcb), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Futex Operations =====

Process called "sys_futex" that takes uaddr as Pointer, futex_op as Integer, val as Integer, timeout as Pointer, uaddr2 as Pointer, val3 as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("futex")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: futex address
        "mov rsi, %2\n"           Note: futex operation
        "mov rdx, %3\n"           Note: value
        "mov r10, %4\n"           Note: timeout or val2
        "mov r8, %5\n"            Note: second futex address
        "mov r9, %6\n"            Note: value3
        "mov rax, %7\n"           Note: futex syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (uaddr), "r" (futex_op), "r" (val), "r" (timeout), "r" (uaddr2), "r" (val3), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Yielding =====

Process called "sys_sched_yield" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sched_yield")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: sched_yield syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Wakeup =====

Process called "sys___thrsleep" that takes ident as Pointer, clock_id as Integer, abstime as Pointer, lock as Pointer, abort as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__thrsleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: identity pointer
        "mov rsi, %2\n"           Note: clock ID
        "mov rdx, %3\n"           Note: absolute timeout
        "mov r10, %4\n"           Note: lock pointer
        "mov r8, %5\n"            Note: abort pointer
        "mov rax, %6\n"           Note: __thrsleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ident), "r" (clock_id), "r" (abstime), "r" (lock), "r" (abort), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys___thrwakeup" that takes ident as Pointer, n as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__thrwakeup")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: identity pointer
        "mov rsi, %2\n"           Note: number to wake
        "mov rax, %3\n"           Note: __thrwakeup syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ident), "r" (n), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Signaling =====

Process called "sys___thrsigdivert" that takes sigmask as Integer, info as Pointer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__thrsigdivert")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signal mask
        "mov rsi, %2\n"           Note: signal info
        "mov rdx, %3\n"           Note: timeout
        "mov rax, %4\n"           Note: __thrsigdivert syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sigmask), "r" (info), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Scheduling =====

Process called "sys_getthrid" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getthrid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getthrid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Priorities =====

Process called "sys_setrtable" that takes rtableid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setrtable")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: routing table ID
        "mov rax, %2\n"           Note: setrtable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rtableid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getrtable" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrtable")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getrtable syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
