Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/pledge_syscalls.runa
OpenBSD Pledge Security Syscalls

This module provides OpenBSD-specific pledge syscall implementations,
including promise-based security restrictions and sandboxing.

Key features and capabilities:
- Pledge promises
- Unveil filesystem restrictions
- Process sandboxing
- Permission dropping
- Minimal privilege principle
- Promise categories
- Path unveiling
- Security mitigation
- W^X enforcement
- ASLR enhancements
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Pledge System =====

Note: Main pledge syscall for applying promise-based restrictions
Process called "sys_pledge" that takes promises as Pointer, execpromises as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pledge")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: promises string
        "mov rsi, %2\n"           Note: exec promises string
        "mov rax, %3\n"           Note: pledge syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (promises), "r" (execpromises), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Unveil System =====

Note: Unveil syscall for filesystem path restrictions
Process called "sys_unveil" that takes path as Pointer, permissions as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unveil")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path to unveil
        "mov rsi, %2\n"           Note: permissions string
        "mov rax, %3\n"           Note: unveil syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (permissions), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Security Mitigations =====

Note: Enable/disable W^X protection
Process called "sys_wxprot" that takes prot as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("wxprot")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: protection flags
        "mov rax, %2\n"           Note: wxprot syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (prot), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Get secure random data
Process called "sys_getentropy" that takes buf as Pointer, buflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getentropy")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: buffer
        "mov rsi, %2\n"           Note: buffer length
        "mov rax, %3\n"           Note: getentropy syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (buflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Security State =====

Note: Set process security level
Process called "sys_setseclevel" that takes level as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setseclevel")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: security level
        "mov rax, %2\n"           Note: setseclevel syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (level), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Get process security level
Process called "sys_getseclevel" that takes nothing returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getseclevel")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getseclevel syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Tame System (Legacy Pledge) =====

Note: Legacy tame syscall (predecessor to pledge)
Process called "sys_tame" that takes request as Integer, paths as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("tame")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: request flags
        "mov rsi, %2\n"           Note: path whitelist
        "mov rax, %3\n"           Note: tame syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (request), "r" (paths), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Isolation =====

Note: Set process title for security monitoring
Process called "sys_setproctitle" that takes title as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setproctitle")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process title string
        "mov rax, %2\n"           Note: setproctitle syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (title), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Stack Protection =====

Note: Set stack protection attributes
Process called "sys_stackprot" that takes addr as Pointer, len as Integer, prot as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("stackprot")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: stack address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection flags
        "mov rax, %4\n"           Note: stackprot syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Retguard Protection =====

Note: Enable return address protection
Process called "sys_retguard" that takes enable as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("retguard")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: enable flag
        "mov rax, %2\n"           Note: retguard syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (enable), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== ASLR Control =====

Note: Configure ASLR settings
Process called "sys_aslr_control" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("aslr_control")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ASLR flags
        "mov rax, %2\n"           Note: aslr_control syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Security Audit =====

Note: Send security audit event
Process called "sys_sendsyslog" that takes buf as Pointer, nbyte as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendsyslog")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message buffer
        "mov rsi, %2\n"           Note: message length
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: sendsyslog syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (nbyte), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
