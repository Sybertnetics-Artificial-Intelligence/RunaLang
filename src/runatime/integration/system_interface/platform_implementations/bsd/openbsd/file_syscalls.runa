Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/openbsd/file_syscalls.runa
OpenBSD File System Syscalls

This module provides OpenBSD-specific file system syscall implementations,
including FFS support, unveil restrictions, and OpenBSD-specific file operations.

Key features and capabilities:
- FFS/FFS2 file system support
- Unveil path restrictions
- File flags (chflags, fchflags)
- Extended attributes
- Directory operations
- File locking
- Pledge-aware file operations
- Immutable files
- Secure temporary files
- Device file operations
- FUSE support
- NFS operations
- tmpfs support
- mfs (memory file system)
- Softdep consistency
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/openbsd_x64" as OpenBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: OpenBSD file system syscalls implementation using dynamic syscall registry :End Note

Note: File opening with unveil/pledge awareness :End Note
Process called "unveil_open" that takes path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path :End Note
        "mov rsi, %2\n"           Note: flags :End Note
        "mov rdx, %3\n"           Note: mode :End Note
        "mov rax, %4\n"           Note: open syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: OpenBSD unveil syscall for path restrictions :End Note
Process called "unveil" that takes path as Pointer, permissions as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unveil")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path to unveil :End Note
        "mov rsi, %2\n"           Note: permissions string :End Note
        "mov rax, %3\n"           Note: unveil syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (permissions), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: File flags operations (immutable, append-only, etc.) :End Note
Process called "chflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path :End Note
        "mov rsi, %2\n"           Note: file flags :End Note
        "mov rax, %3\n"           Note: chflags syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "fchflags" that takes fd as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov edi, %1\n"           Note: file descriptor :End Note
        "mov esi, %2\n"           Note: file flags :End Note
        "mov rax, %3\n"           Note: fchflags syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Extended attributes operations :End Note
Process called "getxattr" that takes path as Pointer, name as Pointer, value as Pointer, size as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getxattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path :End Note
        "mov rsi, %2\n"           Note: attribute name :End Note
        "mov rdx, %3\n"           Note: value buffer :End Note
        "mov r10, %4\n"           Note: buffer size :End Note
        "mov rax, %5\n"           Note: getxattr syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (name), "r" (value), "r" (size), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "setxattr" that takes path as Pointer, name as Pointer, value as Pointer, size as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setxattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path :End Note
        "mov rsi, %2\n"           Note: attribute name :End Note
        "mov rdx, %3\n"           Note: value buffer :End Note
        "mov r10, %4\n"           Note: value size :End Note
        "mov r8, %5\n"            Note: flags :End Note
        "mov rax, %6\n"           Note: setxattr syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (name), "r" (value), "r" (size), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Directory operations :End Note
Process called "getdents" that takes fd as Integer, dirents as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getdents")
    Let result be Integer
    
    Inline Assembly:
        "mov edi, %1\n"           Note: directory file descriptor :End Note
        "mov rsi, %2\n"           Note: dirent buffer :End Note
        "mov rdx, %3\n"           Note: buffer size :End Note
        "mov rax, %4\n"           Note: getdents syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (dirents), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "getdirentries" that takes fd as Integer, buf as Pointer, nbytes as Integer, basep as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getdirentries")
    Let result be Integer
    
    Inline Assembly:
        "mov edi, %1\n"           Note: file descriptor :End Note
        "mov rsi, %2\n"           Note: buffer :End Note
        "mov rdx, %3\n"           Note: number of bytes :End Note
        "mov r10, %4\n"           Note: base pointer :End Note
        "mov rax, %5\n"           Note: getdirentries syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (nbytes), "r" (basep), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: File locking operations :End Note
Process called "flock" that takes fd as Integer, operation as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("flock")
    Let result be Integer
    
    Inline Assembly:
        "mov edi, %1\n"           Note: file descriptor :End Note
        "mov esi, %2\n"           Note: lock operation :End Note
        "mov rax, %3\n"           Note: flock syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (operation), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "fcntl_lock" that takes fd as Integer, cmd as Integer, arg as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fcntl")
    Let result be Integer
    
    Inline Assembly:
        "mov edi, %1\n"           Note: file descriptor :End Note
        "mov esi, %2\n"           Note: fcntl command :End Note
        "mov rdx, %3\n"           Note: lock structure pointer :End Note
        "mov rax, %4\n"           Note: fcntl syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (cmd), "r" (arg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Secure temporary file operations :End Note
Process called "mkstemp" that takes template as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkstemp")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: template string :End Note
        "mov rax, %2\n"           Note: mkstemp syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (template), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "mkdtemp" that takes template as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkdtemp")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: template string :End Note
        "mov rax, %2\n"           Note: mkdtemp syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (template), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: Device file operations :End Note
Process called "mknod" that takes path as Pointer, mode as Integer, dev as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mknod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: device path :End Note
        "mov rsi, %2\n"           Note: mode and device type :End Note
        "mov rdx, %3\n"           Note: device number :End Note
        "mov rax, %4\n"           Note: mknod syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (dev), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "mkfifo" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkfifo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fifo path :End Note
        "mov rsi, %2\n"           Note: permissions mode :End Note
        "mov rax, %3\n"           Note: mkfifo syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: File system operations :End Note
Process called "mount" that takes fstype as Pointer, source as Pointer, target as Pointer, flags as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file system type :End Note
        "mov rsi, %2\n"           Note: source device :End Note
        "mov rdx, %3\n"           Note: target directory :End Note
        "mov r10, %4\n"           Note: mount flags :End Note
        "mov r8, %5\n"            Note: file system data :End Note
        "mov rax, %6\n"           Note: mount syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fstype), "r" (source), "r" (target), "r" (flags), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "unmount" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unmount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mount point path :End Note
        "mov rsi, %2\n"           Note: unmount flags :End Note
        "mov rax, %3\n"           Note: unmount syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: File system statistics :End Note
Process called "statfs" that takes path as Pointer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("statfs")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file system path :End Note
        "mov rsi, %2\n"           Note: statfs buffer :End Note
        "mov rax, %3\n"           Note: statfs syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "fstatfs" that takes fd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstatfs")
    Let result be Integer
    
    Inline Assembly:
        "mov edi, %1\n"           Note: file descriptor :End Note
        "mov rsi, %2\n"           Note: statfs buffer :End Note
        "mov rax, %3\n"           Note: fstatfs syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: FUSE operations :End Note
Process called "fuse_mount" that takes mountpoint as Pointer, opts as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fuse_mount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mount point :End Note
        "mov rsi, %2\n"           Note: fuse options :End Note
        "mov rax, %3\n"           Note: fuse_mount syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mountpoint), "r" (opts), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "fuse_unmount" that takes mountpoint as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fuse_unmount")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mount point :End Note
        "mov rax, %2\n"           Note: fuse_unmount syscall number from registry :End Note
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mountpoint), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
