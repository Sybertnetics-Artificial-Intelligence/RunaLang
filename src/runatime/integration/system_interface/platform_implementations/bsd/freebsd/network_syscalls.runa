Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/network_syscalls.runa
FreeBSD Network Syscalls

This module provides FreeBSD-specific network syscall implementations,
including BSD sockets and FreeBSD-specific networking features.

Key features and capabilities:
- BSD socket operations
- TCP/UDP networking
- SCTP support
- Raw sockets
- Routing sockets
- Network interface management
- Packet capture (BPF)
- Network statistics
- Firewall integration (ipfw, pf)
- Network virtualization (VNET)
- TCP offload engine
- Zero-copy networking
- Sendfile optimization
- Accept filters
- Network polling
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Socket Operations =====

Process called "sys_socket" that takes domain as Integer, type as Integer, protocol as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("socket")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: domain
        "mov rsi, %2\n"           Note: type
        "mov rdx, %3\n"           Note: protocol
        "mov rax, %4\n"           Note: socket syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (domain), "r" (type), "r" (protocol), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_bind" that takes sockfd as Integer, addr as Pointer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("bind")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure
        "mov rdx, %3\n"           Note: address length
        "mov rax, %4\n"           Note: bind syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_listen" that takes sockfd as Integer, backlog as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("listen")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: backlog
        "mov rax, %3\n"           Note: listen syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (backlog), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_accept" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("accept")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure
        "mov rdx, %3\n"           Note: address length pointer
        "mov rax, %4\n"           Note: accept syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_accept4" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("accept4")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure
        "mov rdx, %3\n"           Note: address length pointer
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: accept4 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_connect" that takes sockfd as Integer, addr as Pointer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("connect")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure
        "mov rdx, %3\n"           Note: address length
        "mov rax, %4\n"           Note: connect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Data Transfer =====

Process called "sys_send" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("send")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: length
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: send syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recv" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: length
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: recv syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sendto" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer, dest_addr as Pointer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendto")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: length
        "mov r10, %4\n"           Note: flags
        "mov r8, %5\n"            Note: destination address
        "mov r9, %6\n"            Note: address length
        "mov rax, %7\n"           Note: sendto syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (dest_addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recvfrom" that takes sockfd as Integer, buf as Pointer, len as Integer, flags as Integer, src_addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recvfrom")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: length
        "mov r10, %4\n"           Note: flags
        "mov r8, %5\n"            Note: source address
        "mov r9, %6\n"            Note: address length pointer
        "mov rax, %7\n"           Note: recvfrom syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (src_addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Socket Options =====

Process called "sys_setsockopt" that takes sockfd as Integer, level as Integer, optname as Integer, optval as Pointer, optlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setsockopt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: level
        "mov rdx, %3\n"           Note: option name
        "mov r10, %4\n"           Note: option value
        "mov r8, %5\n"            Note: option length
        "mov rax, %6\n"           Note: setsockopt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (level), "r" (optname), "r" (optval), "r" (optlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getsockopt" that takes sockfd as Integer, level as Integer, optname as Integer, optval as Pointer, optlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getsockopt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: level
        "mov rdx, %3\n"           Note: option name
        "mov r10, %4\n"           Note: option value
        "mov r8, %5\n"            Note: option length pointer
        "mov rax, %6\n"           Note: getsockopt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (level), "r" (optname), "r" (optval), "r" (optlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getsockname" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getsockname")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure
        "mov rdx, %3\n"           Note: address length pointer
        "mov rax, %4\n"           Note: getsockname syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getpeername" that takes sockfd as Integer, addr as Pointer, addrlen as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpeername")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: address structure
        "mov rdx, %3\n"           Note: address length pointer
        "mov rax, %4\n"           Note: getpeername syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== FreeBSD-Specific Networking =====

Process called "sys_sendfile" that takes out_fd as Integer, in_fd as Integer, offset as Pointer, count as Integer, hdtr as Pointer, sbytes as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendfile")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: output file descriptor
        "mov rsi, %2\n"           Note: input file descriptor
        "mov rdx, %3\n"           Note: offset pointer
        "mov r10, %4\n"           Note: count
        "mov r8, %5\n"            Note: header/trailer
        "mov r9, %6\n"            Note: sent bytes pointer
        "push %7\n"               Note: flags (7th parameter on stack)
        "mov rax, %8\n"           Note: sendfile syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (out_fd), "r" (in_fd), "r" (offset), "r" (count), "r" (hdtr), "r" (sbytes), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shutdown" that takes sockfd as Integer, how as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shutdown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: socket file descriptor
        "mov rsi, %2\n"           Note: how
        "mov rax, %3\n"           Note: shutdown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (how), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
