Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/thread_syscalls.runa
FreeBSD Thread Management Syscalls

This module provides FreeBSD-specific thread management syscall implementations,
including pthread operations and FreeBSD-specific threading features.

Key features and capabilities:
- Thread creation (thr_new)
- Thread termination
- Thread synchronization
- Thread-local storage
- Thread priorities
- Thread scheduling
- CPU affinity
- Thread signaling
- Kernel threads
- User threads (libthr)
- Thread debugging
- Thread statistics
- Thread suspension
- Thread wake operations
- Futex-like operations (umtx)
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Thread Creation and Management =====

Process called "sys_thr_new" that takes param as Pointer, param_size as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_new")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread parameters
        "mov rsi, %2\n"           Note: parameter size
        "mov rax, %3\n"           Note: thr_new syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (param), "r" (param_size), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_self" that takes id as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_self")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread ID pointer
        "mov rax, %2\n"           Note: thr_self syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (id), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_exit" that takes state as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_exit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: exit state
        "mov rax, %2\n"           Note: thr_exit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (state), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_kill" that takes id as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread ID
        "mov rsi, %2\n"           Note: signal number
        "mov rax, %3\n"           Note: thr_kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (id), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_kill2" that takes pid as Integer, id as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_kill2")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: process ID
        "mov rsi, %2\n"           Note: thread ID
        "mov rdx, %3\n"           Note: signal number
        "mov rax, %4\n"           Note: thr_kill2 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (id), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_suspend" that takes timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_suspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timeout
        "mov rax, %2\n"           Note: thr_suspend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_wake" that takes id as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_wake")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread ID
        "mov rax, %2\n"           Note: thr_wake syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (id), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== User Mutex Operations (UMTX) =====

Process called "sys_umtx_op" that takes obj as Pointer, op as Integer, val as Integer, uaddr1 as Pointer, uaddr2 as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("umtx_op")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mutex object
        "mov rsi, %2\n"           Note: operation
        "mov rdx, %3\n"           Note: value
        "mov r10, %4\n"           Note: user address 1
        "mov r8, %5\n"            Note: user address 2
        "mov rax, %6\n"           Note: umtx_op syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (obj), "r" (op), "r" (val), "r" (uaddr1), "r" (uaddr2), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== CPU Affinity =====

Process called "sys_cpuset" that takes setid as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cpuset")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: set ID pointer
        "mov rax, %2\n"           Note: cpuset syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (setid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cpuset_setid" that takes which as Integer, id as Integer, setid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cpuset_setid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which (process/thread)
        "mov rsi, %2\n"           Note: ID
        "mov rdx, %3\n"           Note: set ID
        "mov rax, %4\n"           Note: cpuset_setid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (id), "r" (setid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cpuset_getid" that takes level as Integer, which as Integer, id as Integer, setid as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cpuset_getid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: level
        "mov rsi, %2\n"           Note: which (process/thread)
        "mov rdx, %3\n"           Note: ID
        "mov r10, %4\n"           Note: set ID pointer
        "mov rax, %5\n"           Note: cpuset_getid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (level), "r" (which), "r" (id), "r" (setid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cpuset_getaffinity" that takes level as Integer, which as Integer, id as Integer, cpusetsize as Integer, mask as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cpuset_getaffinity")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: level
        "mov rsi, %2\n"           Note: which (process/thread)
        "mov rdx, %3\n"           Note: ID
        "mov r10, %4\n"           Note: CPU set size
        "mov r8, %5\n"            Note: CPU mask
        "mov rax, %6\n"           Note: cpuset_getaffinity syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (level), "r" (which), "r" (id), "r" (cpusetsize), "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cpuset_setaffinity" that takes level as Integer, which as Integer, id as Integer, cpusetsize as Integer, mask as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cpuset_setaffinity")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: level
        "mov rsi, %2\n"           Note: which (process/thread)
        "mov rdx, %3\n"           Note: ID
        "mov r10, %4\n"           Note: CPU set size
        "mov r8, %5\n"            Note: CPU mask
        "mov rax, %6\n"           Note: cpuset_setaffinity syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (level), "r" (which), "r" (id), "r" (cpusetsize), "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Scheduling and Priorities =====

Process called "sys_rtprio_thread" that takes function as Integer, lwpid as Integer, rtp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rtprio_thread")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: function
        "mov rsi, %2\n"           Note: LWP ID
        "mov rdx, %3\n"           Note: realtime priority
        "mov rax, %4\n"           Note: rtprio_thread syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (function), "r" (lwpid), "r" (rtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_thr_set_name" that takes id as Integer, name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thr_set_name")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread ID
        "mov rsi, %2\n"           Note: thread name
        "mov rax, %3\n"           Note: thr_set_name syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (id), "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Resource Limits for Threads =====

Process called "sys_setloginclass" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setloginclass")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: login class name
        "mov rax, %2\n"           Note: setloginclass syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getloginclass" that takes name as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getloginclass")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name buffer
        "mov rsi, %2\n"           Note: buffer length
        "mov rax, %3\n"           Note: getloginclass syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread-Local Storage =====

Process called "sys_sysarch" that takes number as Integer, args as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysarch")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: architecture-specific number
        "mov rsi, %2\n"           Note: arguments
        "mov rax, %3\n"           Note: sysarch syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (number), "r" (args), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Thread Monitoring and Debugging =====

Process called "sys_procctl" that takes idtype as Integer, id as Integer, cmd as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("procctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ID type
        "mov rsi, %2\n"           Note: ID
        "mov rdx, %3\n"           Note: command
        "mov r10, %4\n"           Note: data
        "mov rax, %5\n"           Note: procctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (idtype), "r" (id), "r" (cmd), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Event Notification =====

Process called "sys_kqueue" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent" that takes kq as Integer, changelist as Pointer, nchanges as Integer, eventlist as Pointer, nevents as Integer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kqueue descriptor
        "mov rsi, %2\n"           Note: change list
        "mov rdx, %3\n"           Note: number of changes
        "mov r10, %4\n"           Note: event list
        "mov r8, %5\n"            Note: number of events
        "mov r9, %6\n"            Note: timeout
        "mov rax, %7\n"           Note: kevent syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Legacy Thread Support =====

Process called "sys_rfork" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rfork")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: flags
        "mov rax, %2\n"           Note: rfork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
