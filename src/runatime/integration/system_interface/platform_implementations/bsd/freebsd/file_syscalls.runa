Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/file_syscalls.runa
FreeBSD File System Syscalls

This module provides FreeBSD-specific file system syscall implementations,
including ZFS support, UFS extensions, and BSD-specific file operations.

Key features and capabilities:
- ZFS operations and snapshots
- UFS/UFS2 file system support
- Extended attributes (extattr)
- File flags (chflags, fchflags)
- ACLs (Access Control Lists)
- Directory operations
- File locking (flock, lockf)
- Asynchronous I/O (aio)
- Capabilities (cap_rights)
- File system quotas
- GEOM framework integration
- NFS support
- Unionfs operations
- Nullfs operations
- Device file operations
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Core File Operations =====

Process called "sys_open" that takes path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_openat" that takes fd as Integer, path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("openat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory fd
        "mov rsi, %2\n"           Note: relative path
        "mov rdx, %3\n"           Note: flags
        "mov r10, %4\n"           Note: mode
        "mov rax, %5\n"           Note: openat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_close" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("close")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: close syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_read" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("read")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: count
        "mov rax, %4\n"           Note: read syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_write" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("write")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: count
        "mov rax, %4\n"           Note: write syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Information =====

Process called "sys_stat" that takes path as Pointer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("stat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: stat structure
        "mov rax, %3\n"           Note: stat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (statbuf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstat" that takes fd as Integer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: stat structure
        "mov rax, %3\n"           Note: fstat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (statbuf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== FreeBSD-Specific File Operations =====

Process called "sys_chflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: chflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchflags" that takes fd as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: fchflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Extended Attributes =====

Process called "sys_extattr_set_file" that takes
    path as Pointer,
    attrnamespace as Integer,
    attrname as Pointer,
    data as Pointer,
    nbytes as Integer returns Integer:
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("extattr_set_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: attribute namespace
        "mov rdx, %3\n"           Note: attribute name
        "mov r10, %4\n"           Note: data
        "mov r8, %5\n"            Note: data size
        "mov rax, %6\n"           Note: extattr_set_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (attrnamespace), "r" (attrname), "r" (data), "r" (nbytes), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_extattr_get_file" that takes
    path as Pointer,
    attrnamespace as Integer,
    attrname as Pointer,
    data as Pointer,
    nbytes as Integer returns Integer:
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("extattr_get_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: attribute namespace
        "mov rdx, %3\n"           Note: attribute name
        "mov r10, %4\n"           Note: data buffer
        "mov r8, %5\n"            Note: buffer size
        "mov rax, %6\n"           Note: extattr_get_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (attrnamespace), "r" (attrname), "r" (data), "r" (nbytes), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process