Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/security_syscalls.runa
FreeBSD Security Syscalls

This module provides FreeBSD-specific security syscall implementations,
including MAC framework, audit, and FreeBSD-specific security features.

Key features and capabilities:
- Mandatory Access Control (MAC)
- Audit subsystem
- Access control lists (ACLs)
- File flags and permissions
- Process credentials
- Jail security
- Capsicum capabilities
- Security event auditing
- Trusted computing base
- Security policies
- Privilege management
- Securelevels
- Veriexec
- Security tokens
- Cryptographic framework
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Access Control Lists (ACLs) =====

Process called "sys_acl_get_file" that takes path as Pointer, type as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acl_get_file")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: ACL type
        "mov rax, %3\n"           Note: acl_get_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (type), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_acl_set_file" that takes path as Pointer, type as Integer, acl as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acl_set_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: ACL type
        "mov rdx, %3\n"           Note: ACL data
        "mov rax, %4\n"           Note: acl_set_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (type), "r" (acl), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_acl_get_fd" that takes fd as Integer, type as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acl_get_fd")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: ACL type
        "mov rax, %3\n"           Note: acl_get_fd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (type), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_acl_set_fd" that takes fd as Integer, type as Integer, acl as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acl_set_fd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: ACL type
        "mov rdx, %3\n"           Note: ACL data
        "mov rax, %4\n"           Note: acl_set_fd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (type), "r" (acl), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_acl_delete_file" that takes path as Pointer, type as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acl_delete_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: ACL type
        "mov rax, %3\n"           Note: acl_delete_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (type), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_acl_delete_fd" that takes fd as Integer, type as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("acl_delete_fd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: ACL type
        "mov rax, %3\n"           Note: acl_delete_fd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (type), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== MAC Framework =====

Process called "sys_mac_get_file" that takes path as Pointer, label as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mac_get_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: MAC label
        "mov rax, %3\n"           Note: mac_get_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (label), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mac_set_file" that takes path as Pointer, label as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mac_set_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: MAC label
        "mov rax, %3\n"           Note: mac_set_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (label), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mac_get_fd" that takes fd as Integer, label as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mac_get_fd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: MAC label
        "mov rax, %3\n"           Note: mac_get_fd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (label), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mac_set_fd" that takes fd as Integer, label as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mac_set_fd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: MAC label
        "mov rax, %3\n"           Note: mac_set_fd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (label), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mac_get_proc" that takes label as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mac_get_proc")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: MAC label
        "mov rax, %2\n"           Note: mac_get_proc syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (label), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mac_set_proc" that takes label as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mac_set_proc")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: MAC label
        "mov rax, %2\n"           Note: mac_set_proc syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (label), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Audit Subsystem =====

Process called "sys_audit" that takes record as Pointer, length as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("audit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit record
        "mov rsi, %2\n"           Note: record length
        "mov rax, %3\n"           Note: audit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (record), "r" (length), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_auditon" that takes cmd as Integer, data as Pointer, length as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("auditon")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit command
        "mov rsi, %2\n"           Note: data buffer
        "mov rdx, %3\n"           Note: data length
        "mov rax, %4\n"           Note: auditon syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (data), "r" (length), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getauid" that takes auid as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getauid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit user ID pointer
        "mov rax, %2\n"           Note: getauid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (auid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setauid" that takes auid as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setauid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit user ID pointer
        "mov rax, %2\n"           Note: setauid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (auid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getaudit" that takes auditinfo as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getaudit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit info structure
        "mov rax, %2\n"           Note: getaudit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (auditinfo), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setaudit" that takes auditinfo as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setaudit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: audit info structure
        "mov rax, %2\n"           Note: setaudit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (auditinfo), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Jail Security =====

Process called "sys_jail" that takes jail as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: jail structure
        "mov rax, %2\n"           Note: jail syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (jail), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_attach" that takes jid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_attach")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: jail ID
        "mov rax, %2\n"           Note: jail_attach syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (jid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_remove" that takes jid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_remove")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: jail ID
        "mov rax, %2\n"           Note: jail_remove syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (jid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_get" that takes iov as Pointer, niov as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_get")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: iovec array
        "mov rsi, %2\n"           Note: number of iovecs
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: jail_get syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (iov), "r" (niov), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_set" that takes iov as Pointer, niov as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_set")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: iovec array
        "mov rsi, %2\n"           Note: number of iovecs
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: jail_set syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (iov), "r" (niov), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Capsicum Capabilities =====

Process called "sys_cap_enter" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cap_enter")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: cap_enter syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cap_getmode" that takes modep as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cap_getmode")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: mode pointer
        "mov rax, %2\n"           Note: cap_getmode syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (modep), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cap_rights_limit" that takes fd as Integer, rights as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cap_rights_limit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: capability rights
        "mov rax, %3\n"           Note: cap_rights_limit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (rights), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cap_rights_get" that takes fd as Integer, rights as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cap_rights_get")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: capability rights
        "mov rax, %3\n"           Note: cap_rights_get syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (rights), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cap_ioctls_limit" that takes fd as Integer, cmds as Pointer, ncmds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cap_ioctls_limit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: ioctl commands array
        "mov rdx, %3\n"           Note: number of commands
        "mov rax, %4\n"           Note: cap_ioctls_limit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (cmds), "r" (ncmds), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_cap_ioctls_get" that takes fd as Integer, cmds as Pointer, maxcmds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("cap_ioctls_get")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: ioctl commands array
        "mov rdx, %3\n"           Note: maximum commands
        "mov rax, %4\n"           Note: cap_ioctls_get syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (cmds), "r" (maxcmds), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Flags and Extended Attributes =====

Process called "sys_chflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: chflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchflags" that takes fd as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: fchflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lchflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path (no symlink follow)
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: lchflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_extattr_get_file" that takes path as Pointer, attrnamespace as Integer, attrname as Pointer, data as Pointer, nbytes as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("extattr_get_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: attribute namespace
        "mov rdx, %3\n"           Note: attribute name
        "mov r10, %4\n"           Note: data buffer
        "mov r8, %5\n"            Note: buffer size
        "mov rax, %6\n"           Note: extattr_get_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (attrnamespace), "r" (attrname), "r" (data), "r" (nbytes), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_extattr_set_file" that takes path as Pointer, attrnamespace as Integer, attrname as Pointer, data as Pointer, nbytes as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("extattr_set_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: attribute namespace
        "mov rdx, %3\n"           Note: attribute name
        "mov r10, %4\n"           Note: data buffer
        "mov r8, %5\n"            Note: buffer size
        "mov rax, %6\n"           Note: extattr_set_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (attrnamespace), "r" (attrname), "r" (data), "r" (nbytes), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_extattr_delete_file" that takes path as Pointer, attrnamespace as Integer, attrname as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("extattr_delete_file")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: attribute namespace
        "mov rdx, %3\n"           Note: attribute name
        "mov rax, %4\n"           Note: extattr_delete_file syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (attrnamespace), "r" (attrname), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Securelevels and Security Policy =====

Process called "sys_kldsym" that takes fileid as Integer, cmd as Integer, data as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kldsym")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file ID
        "mov rsi, %2\n"           Note: command
        "mov rdx, %3\n"           Note: data
        "mov rax, %4\n"           Note: kldsym syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fileid), "r" (cmd), "r" (data), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kldfind" that takes file as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kldfind")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file name
        "mov rax, %2\n"           Note: kldfind syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (file), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kldload" that takes file as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kldload")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file name
        "mov rax, %2\n"           Note: kldload syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (file), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kldunload" that takes fileid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kldunload")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file ID
        "mov rax, %2\n"           Note: kldunload syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fileid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
