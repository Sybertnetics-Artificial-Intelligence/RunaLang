Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/ipc_syscalls.runa
FreeBSD Inter-Process Communication Syscalls

This module provides FreeBSD-specific IPC syscall implementations,
including System V IPC, POSIX IPC, and FreeBSD-specific IPC mechanisms.

Key features and capabilities:
- System V IPC (semaphores, shared memory, message queues)
- POSIX message queues
- Unix domain sockets
- Named pipes (FIFOs)
- Pipes
- Shared memory objects
- Memory-mapped files
- Semaphores
- Mutexes
- Condition variables
- Barriers
- Read-write locks
- Spin locks
- Event notification (kqueue)
- Capsicum IPC restrictions
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Pipe Operations =====

Process called "sys_pipe" that takes pipefd as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pipe")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pipe file descriptor array
        "mov rax, %2\n"           Note: pipe syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pipefd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pipe2" that takes pipefd as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pipe2")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pipe file descriptor array
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: pipe2 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pipefd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System V Semaphores =====

Process called "sys_semget" that takes key as Integer, nsems as Integer, semflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("semget")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: key
        "mov rsi, %2\n"           Note: number of semaphores
        "mov rdx, %3\n"           Note: semaphore flags
        "mov rax, %4\n"           Note: semget syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (key), "r" (nsems), "r" (semflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_semop" that takes semid as Integer, sops as Pointer, nsops as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("semop")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: semaphore set ID
        "mov rsi, %2\n"           Note: semaphore operations array
        "mov rdx, %3\n"           Note: number of operations
        "mov rax, %4\n"           Note: semop syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (semid), "r" (sops), "r" (nsops), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys___semctl" that takes semid as Integer, semnum as Integer, cmd as Integer, arg as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("__semctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: semaphore set ID
        "mov rsi, %2\n"           Note: semaphore number
        "mov rdx, %3\n"           Note: command
        "mov r10, %4\n"           Note: argument
        "mov rax, %5\n"           Note: __semctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (semid), "r" (semnum), "r" (cmd), "r" (arg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System V Shared Memory =====

Process called "sys_shmget" that takes key as Integer, size as Integer, shmflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmget")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: key
        "mov rsi, %2\n"           Note: size
        "mov rdx, %3\n"           Note: shared memory flags
        "mov rax, %4\n"           Note: shmget syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (key), "r" (size), "r" (shmflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shmat" that takes shmid as Integer, shmaddr as Pointer, shmflg as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmat")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory ID
        "mov rsi, %2\n"           Note: shared memory address
        "mov rdx, %3\n"           Note: shared memory flags
        "mov rax, %4\n"           Note: shmat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (shmid), "r" (shmaddr), "r" (shmflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shmdt" that takes shmaddr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmdt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory address
        "mov rax, %2\n"           Note: shmdt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (shmaddr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shmctl" that takes shmid as Integer, cmd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shmctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory ID
        "mov rsi, %2\n"           Note: command
        "mov rdx, %3\n"           Note: buffer
        "mov rax, %4\n"           Note: shmctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (shmid), "r" (cmd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System V Message Queues =====

Process called "sys_msgget" that takes key as Integer, msgflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgget")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: key
        "mov rsi, %2\n"           Note: message queue flags
        "mov rax, %3\n"           Note: msgget syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (key), "r" (msgflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msgsnd" that takes msqid as Integer, msgp as Pointer, msgsz as Integer, msgflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgsnd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue ID
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message size
        "mov r10, %4\n"           Note: message flags
        "mov rax, %5\n"           Note: msgsnd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (msqid), "r" (msgp), "r" (msgsz), "r" (msgflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msgrcv" that takes msqid as Integer, msgp as Pointer, msgsz as Integer, msgtyp as Integer, msgflg as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgrcv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue ID
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message size
        "mov r10, %4\n"           Note: message type
        "mov r8, %5\n"            Note: message flags
        "mov rax, %6\n"           Note: msgrcv syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (msqid), "r" (msgp), "r" (msgsz), "r" (msgtyp), "r" (msgflg), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msgctl" that takes msqid as Integer, cmd as Integer, buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msgctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue ID
        "mov rsi, %2\n"           Note: command
        "mov rdx, %3\n"           Note: buffer
        "mov rax, %4\n"           Note: msgctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (msqid), "r" (cmd), "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== POSIX Message Queues =====

Process called "sys_kmq_open" that takes name as Pointer, oflag as Integer, mode as Integer, attr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kmq_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: queue name
        "mov rsi, %2\n"           Note: open flags
        "mov rdx, %3\n"           Note: mode
        "mov r10, %4\n"           Note: attributes
        "mov rax, %5\n"           Note: kmq_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (oflag), "r" (mode), "r" (attr), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kmq_timedsend" that takes mqd as Integer, msg_ptr as Pointer, msg_len as Integer, msg_prio as Integer, abs_timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kmq_timedsend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue descriptor
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message length
        "mov r10, %4\n"           Note: message priority
        "mov r8, %5\n"            Note: timeout
        "mov rax, %6\n"           Note: kmq_timedsend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mqd), "r" (msg_ptr), "r" (msg_len), "r" (msg_prio), "r" (abs_timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kmq_timedreceive" that takes mqd as Integer, msg_ptr as Pointer, msg_len as Integer, msg_prio as Pointer, abs_timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kmq_timedreceive")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: message queue descriptor
        "mov rsi, %2\n"           Note: message pointer
        "mov rdx, %3\n"           Note: message length
        "mov r10, %4\n"           Note: message priority pointer
        "mov r8, %5\n"            Note: timeout
        "mov rax, %6\n"           Note: kmq_timedreceive syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mqd), "r" (msg_ptr), "r" (msg_len), "r" (msg_prio), "r" (abs_timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kmq_unlink" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kmq_unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: queue name
        "mov rax, %2\n"           Note: kmq_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== POSIX Shared Memory =====

Process called "sys_shm_open" that takes name as Pointer, oflag as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory name
        "mov rsi, %2\n"           Note: open flags
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: shm_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (oflag), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shm_unlink" that takes name as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: shared memory name
        "mov rax, %2\n"           Note: shm_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process