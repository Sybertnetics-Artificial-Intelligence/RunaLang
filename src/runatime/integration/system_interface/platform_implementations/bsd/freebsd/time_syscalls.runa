Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/time_syscalls.runa
FreeBSD Time Management Syscalls

This module provides FreeBSD-specific time management syscall implementations,
including timers, clocks, and FreeBSD-specific time features.

Key features and capabilities:
- System time operations
- High-resolution timers
- Monotonic clocks
- Timer creation and management
- Time zone operations
- Process and thread time
- Sleep and delays
- Interval timers
- Calendar operations
- NTP integration
- Time synchronization
- CPU time accounting
- Timer capabilities
- Event timers
- Precision time protocol
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== System Time Operations =====

Process called "sys_gettimeofday" that takes tv as Pointer, tz as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("gettimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timeval structure
        "mov rsi, %2\n"           Note: timezone structure
        "mov rax, %3\n"           Note: gettimeofday syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_settimeofday" that takes tv as Pointer, tz as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("settimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timeval structure
        "mov rsi, %2\n"           Note: timezone structure
        "mov rax, %3\n"           Note: settimeofday syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_time" that takes tloc as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("time")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time location
        "mov rax, %2\n"           Note: time syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tloc), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_stime" that takes tptr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("stime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time pointer
        "mov rax, %2\n"           Note: stime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tptr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== High-Resolution Clocks =====

Process called "sys_clock_gettime" that takes clock_id as Integer, tp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: timespec pointer
        "mov rax, %3\n"           Note: clock_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clock_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_settime" that takes clock_id as Integer, tp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: timespec pointer
        "mov rax, %3\n"           Note: clock_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clock_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_clock_getres" that takes clock_id as Integer, res as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getres")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: resolution pointer
        "mov rax, %3\n"           Note: clock_getres syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clock_id), "r" (res), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Sleep and Delay Operations =====

Process called "sys_nanosleep" that takes rqtp as Pointer, rmtp as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: requested time
        "mov rsi, %2\n"           Note: remaining time
        "mov rax, %3\n"           Note: nanosleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rqtp), "r" (rmtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_usleep" that takes useconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("usleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: microseconds
        "mov rax, %2\n"           Note: usleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (useconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sleep" that takes seconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: seconds
        "mov rax, %2\n"           Note: sleep syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (seconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Timer Operations =====

Process called "sys_timer_create" that takes clock_id as Integer, evp as Pointer, timerid as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: sigevent pointer
        "mov rdx, %3\n"           Note: timer ID pointer
        "mov rax, %4\n"           Note: timer_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clock_id), "r" (evp), "r" (timerid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_delete" that takes timerid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_delete")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rax, %2\n"           Note: timer_delete syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_settime" that takes timerid as Integer, flags as Integer, value as Pointer, ovalue as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: new value
        "mov r10, %4\n"           Note: old value
        "mov rax, %5\n"           Note: timer_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (flags), "r" (value), "r" (ovalue), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_gettime" that takes timerid as Integer, value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rsi, %2\n"           Note: value pointer
        "mov rax, %3\n"           Note: timer_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timer_getoverrun" that takes timerid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_getoverrun")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer ID
        "mov rax, %2\n"           Note: timer_getoverrun syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timerid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Interval Timers =====

Process called "sys_getitimer" that takes which as Integer, value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer type
        "mov rsi, %2\n"           Note: timer value
        "mov rax, %3\n"           Note: getitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setitimer" that takes which as Integer, value as Pointer, ovalue as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer type
        "mov rsi, %2\n"           Note: new timer value
        "mov rdx, %3\n"           Note: old timer value
        "mov rax, %4\n"           Note: setitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (value), "r" (ovalue), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_alarm" that takes seconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("alarm")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: seconds
        "mov rax, %2\n"           Note: alarm syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (seconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Time Operations =====

Process called "sys_times" that takes buf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("times")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: times buffer
        "mov rax, %2\n"           Note: times syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getrusage" that takes who as Integer, usage as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: who (process/children)
        "mov rsi, %2\n"           Note: resource usage
        "mov rax, %3\n"           Note: getrusage syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (usage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== System Clock Operations =====

Process called "sys_adjtime" that takes delta as Pointer, olddelta as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("adjtime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: time delta
        "mov rsi, %2\n"           Note: old delta
        "mov rax, %3\n"           Note: adjtime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (delta), "r" (olddelta), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_ntp_adjtime" that takes modes as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ntp_adjtime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: NTP modes structure
        "mov rax, %2\n"           Note: ntp_adjtime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (modes), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== FreeBSD-Specific Time Operations =====

Process called "sys_clock_getcpuclockid2" that takes id as Integer, which as Integer, clock_id as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getcpuclockid2")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ID
        "mov rsi, %2\n"           Note: which (process/thread)
        "mov rdx, %3\n"           Note: clock ID pointer
        "mov rax, %4\n"           Note: clock_getcpuclockid2 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (id), "r" (which), "r" (clock_id), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_ffclock_getcounter" that takes ffcount as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ffclock_getcounter")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: feed-forward clock counter
        "mov rax, %2\n"           Note: ffclock_getcounter syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ffcount), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_ffclock_getestimate" that takes cest as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ffclock_getestimate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock estimate
        "mov rax, %2\n"           Note: ffclock_getestimate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cest), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_ffclock_setestimate" that takes cest as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ffclock_setestimate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock estimate
        "mov rax, %2\n"           Note: ffclock_setestimate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cest), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Calendar Time Operations =====

Process called "sys_utimes" that takes path as Pointer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("utimes")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: time values
        "mov rax, %3\n"           Note: utimes syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lutimes" that takes path as Pointer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lutimes")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path (no symlink follow)
        "mov rsi, %2\n"           Note: time values
        "mov rax, %3\n"           Note: lutimes syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_futimes" that takes fd as Integer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("futimes")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: time values
        "mov rax, %3\n"           Note: futimes syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_futimesat" that takes fd as Integer, path as Pointer, times as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("futimesat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: time values
        "mov rax, %4\n"           Note: futimesat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (times), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_utimensat" that takes fd as Integer, path as Pointer, times as Pointer, flag as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("utimensat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: file path
        "mov rdx, %3\n"           Note: time values
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: utimensat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (path), "r" (times), "r" (flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
