Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/kqueue_syscalls.runa
FreeBSD Kqueue and Event Notification Syscalls

This module provides FreeBSD-specific kqueue syscall implementations,
including enhanced event notification and monitoring features.

Key features and capabilities:
- Kqueue event notification
- File descriptor monitoring
- Process monitoring
- Signal handling via kqueue
- Timer events
- User-defined events
- Network event monitoring
- AIO integration
- VFS monitoring
- Device event monitoring
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Kqueue Management =====

Process called "sys_kqueue" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent" that takes kq as Integer, changelist as Pointer, nchanges as Integer, eventlist as Pointer, nevents as Integer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kqueue descriptor
        "mov rsi, %2\n"           Note: change list
        "mov rdx, %3\n"           Note: number of changes
        "mov r10, %4\n"           Note: event list
        "mov r8, %5\n"            Note: number of events
        "mov r9, %6\n"            Note: timeout
        "mov rax, %7\n"           Note: kevent syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Poll and Select Alternatives =====

Process called "sys_poll" that takes fds as Pointer, nfds as Integer, timeout as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("poll")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: poll file descriptors
        "mov rsi, %2\n"           Note: number of file descriptors
        "mov rdx, %3\n"           Note: timeout in milliseconds
        "mov rax, %4\n"           Note: poll syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fds), "r" (nfds), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_select" that takes nfds as Integer, readfds as Pointer, writefds as Pointer, exceptfds as Pointer, timeout as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("select")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: number of file descriptors
        "mov rsi, %2\n"           Note: read file descriptor set
        "mov rdx, %3\n"           Note: write file descriptor set
        "mov r10, %4\n"           Note: exception file descriptor set
        "mov r8, %5\n"            Note: timeout
        "mov rax, %6\n"           Note: select syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (nfds), "r" (readfds), "r" (writefds), "r" (exceptfds), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Event File Descriptor (Linux compatibility) =====

Process called "sys_eventfd" that takes initval as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("eventfd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: initial value
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: eventfd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (initval), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal File Descriptor =====

Process called "sys_signalfd" that takes fd as Integer, mask as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("signalfd")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: signal mask
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: signalfd syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (mask), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Timer File Descriptor =====

Process called "sys_timerfd_create" that takes clockid as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: clock ID
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: timerfd_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clockid), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timerfd_settime" that takes fd as Integer, flags as Integer, new_value as Pointer, old_value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer file descriptor
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: new timer value
        "mov r10, %4\n"           Note: old timer value
        "mov rax, %5\n"           Note: timerfd_settime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (new_value), "r" (old_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_timerfd_gettime" that takes fd as Integer, curr_value as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: timer file descriptor
        "mov rsi, %2\n"           Note: current timer value
        "mov rax, %3\n"           Note: timerfd_gettime syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (curr_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Inotify-style File System Monitoring =====

Process called "sys_inotify_init" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_init")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: inotify_init syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_inotify_init1" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_init1")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: flags
        "mov rax, %2\n"           Note: inotify_init1 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_inotify_add_watch" that takes fd as Integer, pathname as Pointer, mask as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_add_watch")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: inotify file descriptor
        "mov rsi, %2\n"           Note: pathname to watch
        "mov rdx, %3\n"           Note: event mask
        "mov rax, %4\n"           Note: inotify_add_watch syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (pathname), "r" (mask), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_inotify_rm_watch" that takes fd as Integer, wd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_rm_watch")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: inotify file descriptor
        "mov rsi, %2\n"           Note: watch descriptor
        "mov rax, %3\n"           Note: inotify_rm_watch syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (wd), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
