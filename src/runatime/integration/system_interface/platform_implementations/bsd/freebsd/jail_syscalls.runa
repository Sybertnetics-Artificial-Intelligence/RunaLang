Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/jail_syscalls.runa
FreeBSD Jail Container Syscalls

This module provides FreeBSD-specific jail syscall implementations,
including container management and security isolation features.

Key features and capabilities:
- Jail creation and management
- Process isolation
- Network isolation
- Filesystem isolation
- Resource limits per jail
- Jail parameters
- Hierarchical jails
- VNET (virtual network stack)
- ZFS integration
- Jail migration
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Jail Management =====

Process called "sys_jail" that takes jail_params as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: jail parameters structure
        "mov rax, %2\n"           Note: jail syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (jail_params), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_set" that takes iovecs as Pointer, niov as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_set")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: iovec array
        "mov rsi, %2\n"           Note: number of iovecs
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: jail_set syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (iovecs), "r" (niov), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_get" that takes iovecs as Pointer, niov as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_get")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: iovec array
        "mov rsi, %2\n"           Note: number of iovecs
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: jail_get syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (iovecs), "r" (niov), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_attach" that takes jid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_attach")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: jail ID
        "mov rax, %2\n"           Note: jail_attach syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (jid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_jail_remove" that takes jid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_remove")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: jail ID
        "mov rax, %2\n"           Note: jail_remove syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (jid), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Jail Information =====

Process called "sys_getprison" that takes fd as Integer, pnamelen as Pointer, pname as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getprison")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: prison name length pointer
        "mov rdx, %3\n"           Note: prison name buffer
        "mov rax, %4\n"           Note: getprison syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (pnamelen), "r" (pname), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Jail Resource Management =====

Process called "sys_rctl_get_racct" that takes inbufp as Pointer, inbuflen as Integer, outbufp as Pointer, outbuflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rctl_get_racct")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: input buffer pointer
        "mov rsi, %2\n"           Note: input buffer length
        "mov rdx, %3\n"           Note: output buffer pointer
        "mov r10, %4\n"           Note: output buffer length
        "mov rax, %5\n"           Note: rctl_get_racct syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (inbufp), "r" (inbuflen), "r" (outbufp), "r" (outbuflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rctl_get_rules" that takes inbufp as Pointer, inbuflen as Integer, outbufp as Pointer, outbuflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rctl_get_rules")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: input buffer pointer
        "mov rsi, %2\n"           Note: input buffer length
        "mov rdx, %3\n"           Note: output buffer pointer
        "mov r10, %4\n"           Note: output buffer length
        "mov rax, %5\n"           Note: rctl_get_rules syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (inbufp), "r" (inbuflen), "r" (outbufp), "r" (outbuflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rctl_get_limits" that takes inbufp as Pointer, inbuflen as Integer, outbufp as Pointer, outbuflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rctl_get_limits")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: input buffer pointer
        "mov rsi, %2\n"           Note: input buffer length
        "mov rdx, %3\n"           Note: output buffer pointer
        "mov r10, %4\n"           Note: output buffer length
        "mov rax, %5\n"           Note: rctl_get_limits syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (inbufp), "r" (inbuflen), "r" (outbufp), "r" (outbuflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rctl_add_rule" that takes inbufp as Pointer, inbuflen as Integer, outbufp as Pointer, outbuflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rctl_add_rule")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: input buffer pointer
        "mov rsi, %2\n"           Note: input buffer length
        "mov rdx, %3\n"           Note: output buffer pointer
        "mov r10, %4\n"           Note: output buffer length
        "mov rax, %5\n"           Note: rctl_add_rule syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (inbufp), "r" (inbuflen), "r" (outbufp), "r" (outbuflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rctl_remove_rule" that takes inbufp as Pointer, inbuflen as Integer, outbufp as Pointer, outbuflen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rctl_remove_rule")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: input buffer pointer
        "mov rsi, %2\n"           Note: input buffer length
        "mov rdx, %3\n"           Note: output buffer pointer
        "mov r10, %4\n"           Note: output buffer length
        "mov rax, %5\n"           Note: rctl_remove_rule syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (inbufp), "r" (inbuflen), "r" (outbufp), "r" (outbuflen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
