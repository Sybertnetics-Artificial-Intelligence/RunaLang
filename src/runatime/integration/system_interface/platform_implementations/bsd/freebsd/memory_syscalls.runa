Note:
runa/src/runatime/integration/system_interface/platform_syscalls/bsd/freebsd/memory_syscalls.runa
FreeBSD Memory Management Syscalls

This module provides FreeBSD-specific memory management syscall implementations,
including virtual memory operations and BSD-specific memory features.

Key features and capabilities:
- Memory mapping (mmap, munmap)
- Memory protection (mprotect)
- Memory locking (mlock, mlockall)
- Memory advisories (madvise)
- Shared memory (shm_open)
- Memory object management
- Superpages support
- NUMA awareness
- Memory domains
- Swap management
- Memory statistics
- Page cache control
- Memory barriers
- Copy-on-write optimization
- Zero-copy operations
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/freebsd_x64" as FreeBSDPlatform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Memory Mapping =====

Process called "sys_mmap" that takes addr as Pointer, len as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mmap")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address hint
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection flags
        "mov r10, %4\n"           Note: mapping flags
        "mov r8, %5\n"            Note: file descriptor
        "mov r9, %6\n"            Note: offset
        "mov rax, %7\n"           Note: mmap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (flags), "r" (fd), "r" (offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munmap" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munmap")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: munmap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mprotect" that takes addr as Pointer, len as Integer, prot as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mprotect")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection flags
        "mov rax, %4\n"           Note: mprotect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_msync" that takes addr as Pointer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("msync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: sync flags
        "mov rax, %4\n"           Note: msync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Locking =====

Process called "sys_mlock" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mlock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: mlock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munlock" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munlock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: munlock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mlockall" that takes flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mlockall")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: lock flags
        "mov rax, %2\n"           Note: mlockall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munlockall" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munlockall")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: munlockall syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Advisories =====

Process called "sys_madvise" that takes addr as Pointer, len as Integer, advice as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("madvise")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: advice
        "mov rax, %4\n"           Note: madvise syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (advice), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mincore" that takes addr as Pointer, len as Integer, vec as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mincore")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: result vector
        "mov rax, %4\n"           Note: mincore syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (vec), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Shared Memory =====

Process called "sys_shm_open" that takes path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: shm_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shm_unlink" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rax, %2\n"           Note: shm_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Information =====

Process called "sys_getpagesizes" that takes pagesize as Pointer, nelem as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpagesizes")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: page size array
        "mov rsi, %2\n"           Note: number of elements
        "mov rax, %3\n"           Note: getpagesizes syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pagesize), "r" (nelem), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Allocation =====

Process called "sys_sbrk" that takes incr as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sbrk")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: increment
        "mov rax, %2\n"           Note: sbrk syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (incr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_brk" that takes addr as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("brk")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: new break address
        "mov rax, %2\n"           Note: brk syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== FreeBSD-Specific Memory Features =====

Process called "sys_mmap2" that takes addr as Pointer, len as Integer, prot as Integer, flags as Integer, fd as Integer, pgoffset as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mmap2")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: address hint
        "mov rsi, %2\n"           Note: length
        "mov rdx, %3\n"           Note: protection flags
        "mov r10, %4\n"           Note: mapping flags
        "mov r8, %5\n"            Note: file descriptor
        "mov r9, %6\n"            Note: page offset
        "mov rax, %7\n"           Note: mmap2 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (flags), "r" (fd), "r" (pgoffset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mremap" that takes old_addr as Pointer, old_len as Integer, new_len as Integer, flags as Integer, new_addr as Pointer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mremap")
    Let result be Pointer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: old address
        "mov rsi, %2\n"           Note: old length
        "mov rdx, %3\n"           Note: new length
        "mov r10, %4\n"           Note: flags
        "mov r8, %5\n"            Note: new address
        "mov rax, %6\n"           Note: mremap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (old_addr), "r" (old_len), "r" (new_len), "r" (flags), "r" (new_addr), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_memfd_create" that takes name as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("memfd_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: memfd_create syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process
