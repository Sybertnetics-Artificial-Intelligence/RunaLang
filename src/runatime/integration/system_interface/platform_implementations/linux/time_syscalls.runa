Note:
runa/src/runatime/integration/system_interface/platform_syscalls/linux/time_syscalls.runa
Linux Time and Clock Syscalls

Import "../../../../../../../compiler/backend/syscalls/platforms/linux_x64" as LinuxX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/linux_arm64" as LinuxARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface

This module provides Linux-specific time and clock syscall implementations,
including high-resolution timers, clock operations, and time zone management.

Key features and capabilities:
- System time management
- High-resolution clocks
- Monotonic and real-time clocks
- Process and thread CPU time
- Timer operations
- Time zone configuration
- Nanosecond precision
- Clock synchronization
- Time namespaces
- Leap second handling
- Timer slack control
- Timerfd operations
- Clock adjustments
- Time conversion utilities
- Deadline scheduling timers
:End Note

Note: =====================================================================
Note: TIME DATA STRUCTURES
Note: =====================================================================

Type called "TimeSpec":
    tv_sec as Integer                       Note: Seconds
    tv_nsec as Integer                      Note: Nanoseconds

Type called "TimeVal":
    tv_sec as Integer                       Note: Seconds
    tv_usec as Integer                      Note: Microseconds

Type called "ClockTime":
    clock_id as Integer                     Note: Clock identifier
    time as TimeSpec                        Note: Clock time value
    resolution as TimeSpec                  Note: Clock resolution
    is_monotonic as Boolean                 Note: Monotonic property

Type called "TimerSpec":
    it_interval as TimeSpec                 Note: Timer interval
    it_value as TimeSpec                    Note: Timer expiration

Type called "TimeZone":
    tz_minuteswest as Integer               Note: Minutes west of GMT
    tz_dsttime as Integer                   Note: DST correction type

Note: =====================================================================
Note: BASIC TIME OPERATIONS
Note: =====================================================================

Process called "sys_time" that takes tloc as Integer returns Integer:
    Note: Get system time
    Note: Seconds since epoch
    Note: Legacy interface
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("time")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: tloc
        "mov rax, %2\n"               Note: sys_time from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tloc), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_gettimeofday" that takes tv as Integer, tz as Integer returns Integer:
    Note: Get time of day
    Note: Microsecond precision
    Note: Include timezone info
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("gettimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: tv
        "mov rsi, %2\n"               Note: tz
        "mov rax, %3\n"               Note: sys_gettimeofday from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_settimeofday" that takes tv as Integer, tz as Integer returns Integer:
    Note: Set system time
    Note: Requires CAP_SYS_TIME
    Note: Updates system clock
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("settimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: tv
        "mov rsi, %2\n"               Note: tz
        "mov rax, %3\n"               Note: sys_settimeofday from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: HIGH-RESOLUTION CLOCKS
Note: =====================================================================

Process called "sys_clock_gettime" that takes clk_id as Integer, tp as Integer returns Integer:
    Note: Get clock time
    Note: Nanosecond precision
    Note: Various clock sources
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clk_id
        "mov rsi, %2\n"               Note: tp
        "mov rax, %3\n"               Note: sys_clock_gettime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_settime" that takes clk_id as Integer, tp as Integer returns Integer:
    Note: Set clock time
    Note: Requires CAP_SYS_TIME
    Note: CLOCK_REALTIME only
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clk_id
        "mov rsi, %2\n"               Note: tp
        "mov rax, %3\n"               Note: sys_clock_settime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_getres" that takes clk_id as Integer, res as Integer returns Integer:
    Note: Get clock resolution
    Note: Query precision
    Note: Returns resolution
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_getres")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clk_id
        "mov rsi, %2\n"               Note: res
        "mov rax, %3\n"               Note: sys_clock_getres from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (res), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_nanosleep" that takes clk_id as Integer, flags as Integer, rqtp as Integer, rmtp as Integer returns Integer:
    Note: High-resolution sleep
    Note: Clock-based sleep
    Note: TIMER_ABSTIME support
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clk_id
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: rqtp
        "mov r10, %4\n"               Note: rmtp
        "mov rax, %5\n"               Note: sys_clock_nanosleep from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (flags), "r" (rqtp), "r" (rmtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_adjtime" that takes clk_id as Integer, tx as Integer returns Integer:
    Note: Adjust clock parameters
    Note: Fine-tune clock
    Note: NTP adjustments
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_adjtime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clk_id
        "mov rsi, %2\n"               Note: tx
        "mov rax, %3\n"               Note: sys_clock_adjtime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (tx), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SLEEP AND DELAY
Note: =====================================================================

Process called "sys_nanosleep" that takes req as Integer, rem as Integer returns Integer:
    Note: Sleep with nanosecond precision
    Note: High-resolution sleep
    Note: Interruptible by signals
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: req
        "mov rsi, %2\n"               Note: rem
        "mov rax, %3\n"               Note: sys_nanosleep from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (req), "r" (rem), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_nanosleep_time32" that takes clk_id as Integer, flags as Integer, rqtp as Integer, rmtp as Integer returns Integer:
    Note: 32-bit time sleep
    Note: Compatibility wrapper
    Note: Y2038 affected
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("clock_nanosleep_time32")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clk_id
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: rqtp
        "mov r10, %4\n"               Note: rmtp
        "mov rax, %5\n"               Note: sys_clock_nanosleep_time32 from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clk_id), "r" (flags), "r" (rqtp), "r" (rmtp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: TIMER FILE DESCRIPTORS
Note: =====================================================================

Process called "sys_timerfd_create" that takes clockid as Integer, flags as Integer returns Integer:
    Note: Create timer file descriptor
    Note: Timer notifications via fd
    Note: TFD_CLOEXEC, TFD_NONBLOCK
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clockid
        "mov rsi, %2\n"               Note: flags
        "mov rax, %3\n"               Note: sys_timerfd_create from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clockid), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_timerfd_settime" that takes fd as Integer, flags as Integer, new_value as Integer, old_value as Integer returns Integer:
    Note: Arm/disarm timerfd
    Note: Set timer parameters
    Note: TFD_TIMER_ABSTIME
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: new_value
        "mov r10, %4\n"               Note: old_value
        "mov rax, %5\n"               Note: sys_timerfd_settime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (new_value), "r" (old_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_timerfd_gettime" that takes fd as Integer, curr_value as Integer returns Integer:
    Note: Get timerfd settings
    Note: Query timer state
    Note: Returns remaining time
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timerfd_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: curr_value
        "mov rax, %3\n"               Note: sys_timerfd_gettime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (curr_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: PROCESS AND THREAD TIME
Note: =====================================================================

Process called "sys_times" that takes buf as Integer returns Integer:
    Note: Get process times
    Note: CPU time accounting
    Note: User and system time
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("times")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: buf
        "mov rax, %2\n"               Note: sys_times from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_getrusage" that takes who as Integer, usage as Integer returns Integer:
    Note: Get resource usage
    Note: Detailed statistics
    Note: RUSAGE_SELF, RUSAGE_CHILDREN
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: who
        "mov rsi, %2\n"               Note: usage
        "mov rax, %3\n"               Note: sys_getrusage from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (who), "r" (usage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_gettime_process" that takes pid as Integer, tp as Integer returns Integer:
    Note: Get process CPU time
    Note: CLOCK_PROCESS_CPUTIME_ID
    Note: Uses clock_gettime internally
    Note: Process-specific time
    Note: Construct process-specific clock ID
    Let process_clock_id be ((pid << 3) | 2)  Note: CLOCK_PROCESS_CPUTIME_ID formula
    Let result be sys_clock_gettime(process_clock_id, tp)
    Return result

Process called "sys_clock_gettime_thread" that takes tid as Integer, tp as Integer returns Integer:
    Note: Get thread CPU time
    Note: CLOCK_THREAD_CPUTIME_ID
    Note: Uses clock_gettime internally
    Note: Thread-specific time
    Note: Construct thread-specific clock ID
    Let thread_clock_id be ((tid << 3) | 3)  Note: CLOCK_THREAD_CPUTIME_ID formula
    Let result be sys_clock_gettime(thread_clock_id, tp)
    Return result

Note: =====================================================================
Note: TIME ADJUSTMENTS
Note: =====================================================================

Process called "sys_adjtimex" that takes buf as Integer returns Integer:
    Note: Tune kernel clock
    Note: NTP time adjustments
    Note: Requires CAP_SYS_TIME
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("adjtimex")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: buf
        "mov rax, %2\n"               Note: sys_adjtimex from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (buf), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_ntp_adjtime" that takes buf as Integer returns Integer:
    Note: NTP time adjustment
    Note: Alias for adjtimex
    Note: Clock discipline
    Note: Frequency adjustment
    Note: Delegates to adjtimex syscall
    Let result be sys_adjtimex(buf)
    Return result

Note: =====================================================================
Note: ALARM TIMERS
Note: =====================================================================

Process called "sys_alarm" that takes seconds as Integer returns Integer:
    Note: Set alarm signal
    Note: SIGALRM delivery
    Note: Returns previous alarm
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("alarm")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: seconds
        "mov rax, %2\n"               Note: sys_alarm from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (seconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_setitimer" that takes which as Integer, new_value as Integer, old_value as Integer returns Integer:
    Note: Set interval timer
    Note: Periodic timers
    Note: ITIMER_REAL, VIRTUAL, PROF
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: which
        "mov rsi, %2\n"               Note: new_value
        "mov rdx, %3\n"               Note: old_value
        "mov rax, %4\n"               Note: sys_setitimer from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (new_value), "r" (old_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_getitimer" that takes which as Integer, curr_value as Integer returns Integer:
    Note: Get interval timer
    Note: Query timer value
    Note: Returns current setting
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: which
        "mov rsi, %2\n"               Note: curr_value
        "mov rax, %3\n"               Note: sys_getitimer from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (curr_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: TIMER SLACK
Note: =====================================================================

Process called "sys_prctl_timer_slack" that takes option as Integer, arg2 as Integer returns Integer:
    Note: Control timer slack
    Note: PR_SET_TIMERSLACK
    Note: Power saving feature
    Note: Coalesce timer expiry
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("prctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: option (PR_SET_TIMERSLACK = 29)
        "mov rsi, %2\n"               Note: arg2 (slack in nanoseconds)
        "xor rdx, rdx\n"              Note: arg3 = 0
        "xor r10, r10\n"              Note: arg4 = 0
        "xor r8, r8\n"                Note: arg5 = 0
        "mov rax, %3\n"               Note: sys_prctl from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (option), "r" (arg2), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: TIME NAMESPACE
Note: =====================================================================

Process called "sys_time_namespace" that takes flags as Integer returns Integer:
    Note: Create time namespace
    Note: Virtualized time
    Note: Container support
    Note: CLONE_NEWTIME flag
    Note: Use unshare syscall with CLONE_NEWTIME
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unshare")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: flags (should include CLONE_NEWTIME = 0x00000080)
        "mov rax, %2\n"               Note: sys_unshare from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result