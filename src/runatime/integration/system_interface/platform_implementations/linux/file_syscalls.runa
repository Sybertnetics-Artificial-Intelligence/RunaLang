Note: Linux File System Syscalls Implementation for x86_64
Note: Provides complete Linux-specific file system syscall implementations

Import "../../../../../../../compiler/backend/syscalls/platforms/linux_x64" as LinuxX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/linux_arm64" as LinuxARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface

@Reasoning
This module implements Linux x86_64 file system syscalls using direct inline assembly.
Each syscall follows the Linux ABI conventions for x86_64, using the syscall instruction
with appropriate register assignments. Error handling checks for negative return values
which indicate error codes in Linux.
@End Reasoning

Note: =====================================================================
Note: FILE OPERATION CONSTANTS
Note: =====================================================================

Note: File flags for open/openat
Let O_RDONLY be 0x0000
Let O_WRONLY be 0x0001  
Let O_RDWR be 0x0002
Let O_CREAT be 0x0040
Let O_EXCL be 0x0080
Let O_NOCTTY be 0x0100
Let O_TRUNC be 0x0200
Let O_APPEND be 0x0400
Let O_NONBLOCK be 0x0800
Let O_SYNC be 0x1000
Let O_DIRECT be 0x4000
Let O_LARGEFILE be 0x8000
Let O_DIRECTORY be 0x10000
Let O_NOFOLLOW be 0x20000
Let O_CLOEXEC be 0x80000

Note: AT flags for *at syscalls
Let AT_FDCWD be -100
Let AT_SYMLINK_NOFOLLOW be 0x100
Let AT_REMOVEDIR be 0x200
Let AT_SYMLINK_FOLLOW be 0x400
Let AT_EMPTY_PATH be 0x1000

Note: Seek whence values
Let SEEK_SET be 0
Let SEEK_CUR be 1
Let SEEK_END be 2
Let SEEK_DATA be 3
Let SEEK_HOLE be 4

Note: File types for directory entries
Let DT_UNKNOWN be 0
Let DT_FIFO be 1
Let DT_CHR be 2
Let DT_DIR be 4
Let DT_BLK be 6
Let DT_REG be 8
Let DT_LNK be 10
Let DT_SOCK be 12

Note: File mode bits
Let S_IRWXU be 0o700  Note: User RWX
Let S_IRUSR be 0o400  Note: User read
Let S_IWUSR be 0o200  Note: User write
Let S_IXUSR be 0o100  Note: User execute
Let S_IRWXG be 0o070  Note: Group RWX
Let S_IRGRP be 0o040  Note: Group read
Let S_IWGRP be 0o020  Note: Group write
Let S_IXGRP be 0o010  Note: Group execute
Let S_IRWXO be 0o007  Note: Other RWX
Let S_IROTH be 0o004  Note: Other read
Let S_IWOTH be 0o002  Note: Other write
Let S_IXOTH be 0o001  Note: Other execute

Note: =====================================================================
Note: BASIC FILE OPERATIONS
Note: =====================================================================

Process called "sys_open" that takes pathname as String, flags as Integer, mode as Integer returns Integer:
    @Implementation
    Opens or creates a file using the open syscall (legacy, prefer openat).
    Returns file descriptor on success or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("open")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: sys_open from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(flags), "r"(mode), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_openat" that takes dirfd as Integer, pathname as String, flags as Integer, mode as Integer returns Integer:
    @Implementation
    Opens file relative to directory file descriptor using openat syscall.
    Use AT_FDCWD for current directory. Returns fd or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("openat")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: dirfd
        "mov rsi, %2\n"           Note: pathname
        "mov rdx, %3\n"           Note: flags
        "mov r10, %4\n"           Note: mode
        "mov rax, %5\n"           Note: sys_openat from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(dirfd), "r"(path_ptr), "r"(flags), "r"(mode), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_close" that takes fd as Integer returns Integer:
    @Implementation
    Closes a file descriptor, releasing associated resources.
    Returns 0 on success or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("close")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rax, %2\n"           Note: sys_close from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(syscall_num)
        : "rax", "rdi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_read" that takes fd as Integer, buf as Integer, count as Integer returns Integer:
    @Implementation
    Reads up to count bytes from file descriptor into buffer.
    Returns number of bytes read, 0 at EOF, or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("read")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: count
        "mov rax, %4\n"           Note: sys_read from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(buf), "r"(count), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_write" that takes fd as Integer, buf as Integer, count as Integer returns Integer:
    @Implementation
    Writes up to count bytes from buffer to file descriptor.
    Returns number of bytes written or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("write")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: count
        "mov rax, %4\n"           Note: sys_write from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(buf), "r"(count), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lseek" that takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    @Implementation
    Repositions file offset for the given file descriptor.
    Returns new offset from beginning of file or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lseek")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: offset
        "mov rdx, %3\n"           Note: whence
        "mov rax, %4\n"           Note: sys_lseek from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(offset), "r"(whence), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: VECTORED I/O OPERATIONS
Note: =====================================================================

Process called "sys_readv" that takes fd as Integer, iov as Integer, iovcnt as Integer returns Integer:
    @Implementation
    Reads data into multiple buffers (scatter-gather I/O).
    iov points to array of iovec structures. Returns total bytes read.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("readv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: iovec array
        "mov rdx, %3\n"           Note: iovec count
        "mov rax, %4\n"           Note: sys_readv from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(iov), "r"(iovcnt), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_writev" that takes fd as Integer, iov as Integer, iovcnt as Integer returns Integer:
    @Implementation
    Writes data from multiple buffers (gather-scatter I/O).
    Atomic operation. Returns total bytes written or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("writev")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: iovec array
        "mov rdx, %3\n"           Note: iovec count
        "mov rax, %4\n"           Note: sys_writev from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(iov), "r"(iovcnt), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_preadv" that takes fd as Integer, iov as Integer, iovcnt as Integer, offset as Integer returns Integer:
    @Implementation
    Vectored read at specific offset without changing file position.
    Thread-safe positioned read. Returns total bytes read.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("preadv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: iovec array
        "mov rdx, %3\n"           Note: iovec count
        "mov r10, %4\n"           Note: offset
        "xor r8, r8\n"            Note: offset high (0 for 64-bit)
        "mov rax, %5\n"           Note: sys_preadv from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(iov), "r"(iovcnt), "r"(offset), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pwritev" that takes fd as Integer, iov as Integer, iovcnt as Integer, offset as Integer returns Integer:
    @Implementation
    Vectored write at specific offset without changing file position.
    Thread-safe positioned write. Returns total bytes written.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pwritev")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: iovec array
        "mov rdx, %3\n"           Note: iovec count
        "mov r10, %4\n"           Note: offset
        "xor r8, r8\n"            Note: offset high (0 for 64-bit)
        "mov rax, %5\n"           Note: sys_pwritev from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(iov), "r"(iovcnt), "r"(offset), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: FILE METADATA OPERATIONS
Note: =====================================================================

Process called "sys_stat" that takes pathname as String, statbuf as Integer returns Integer:
    @Implementation
    Gets file status, following symbolic links.
    Fills statbuf with file metadata. Returns 0 or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("stat")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: sys_stat from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(statbuf), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstat" that takes fd as Integer, statbuf as Integer returns Integer:
    @Implementation
    Gets file status by file descriptor.
    More efficient than stat, no path resolution. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: sys_fstat from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(statbuf), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lstat" that takes pathname as String, statbuf as Integer returns Integer:
    @Implementation
    Gets file status without following symbolic links.
    Returns information about the link itself. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lstat")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: sys_lstat from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(statbuf), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstatat" that takes dirfd as Integer, pathname as String, statbuf as Integer, flags as Integer returns Integer:
    @Implementation
    Gets file status relative to directory descriptor.
    Modern stat variant supporting AT_SYMLINK_NOFOLLOW flag.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("newfstatat")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: dirfd
        "mov rsi, %2\n"           Note: pathname
        "mov rdx, %3\n"           Note: stat buffer
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: sys_newfstatat from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(dirfd), "r"(path_ptr), "r"(statbuf), "r"(flags), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: DIRECTORY OPERATIONS
Note: =====================================================================

Process called "sys_mkdir" that takes pathname as String, mode as Integer returns Integer:
    @Implementation
    Creates a new directory with specified permissions.
    Parent directory must exist. Returns 0 or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkdir")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: sys_mkdir from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(mode), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_mkdirat" that takes dirfd as Integer, pathname as String, mode as Integer returns Integer:
    @Implementation
    Creates directory relative to directory descriptor.
    Use AT_FDCWD for current directory. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkdirat")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: dirfd
        "mov rsi, %2\n"           Note: pathname
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: sys_mkdirat from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(dirfd), "r"(path_ptr), "r"(mode), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_rmdir" that takes pathname as String returns Integer:
    @Implementation
    Removes an empty directory.
    Directory must be empty. Returns 0 on success or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rmdir")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rax, %2\n"           Note: sys_rmdir from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(syscall_num)
        : "rax", "rdi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_getdents64" that takes fd as Integer, dirp as Integer, count as Integer returns Integer:
    @Implementation
    Reads directory entries into buffer.
    Returns number of bytes read or negative error. 0 means end of directory.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getdents64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: dirent buffer
        "mov rdx, %3\n"           Note: buffer size
        "mov rax, %4\n"           Note: sys_getdents64 from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(dirp), "r"(count), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: FILE ATTRIBUTE OPERATIONS
Note: =====================================================================

Process called "sys_chmod" that takes pathname as String, mode as Integer returns Integer:
    @Implementation
    Changes file permissions.
    Requires ownership or CAP_FOWNER capability. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chmod")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: sys_chmod from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(mode), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_fchmod" that takes fd as Integer, mode as Integer returns Integer:
    @Implementation
    Changes file permissions by file descriptor.
    More efficient than chmod, no path resolution. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: sys_fchmod from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(mode), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_chown" that takes pathname as String, owner as Integer, group as Integer returns Integer:
    @Implementation
    Changes file ownership (uid/gid).
    Requires CAP_CHOWN capability. Returns 0 or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chown")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: owner uid
        "mov rdx, %3\n"           Note: group gid
        "mov rax, %4\n"           Note: sys_chown from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(owner), "r"(group), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_fchown" that takes fd as Integer, owner as Integer, group as Integer returns Integer:
    @Implementation
    Changes file ownership by file descriptor.
    More efficient than chown. Returns 0 or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: owner uid
        "mov rdx, %3\n"           Note: group gid
        "mov rax, %4\n"           Note: sys_fchown from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(owner), "r"(group), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: EXTENDED ATTRIBUTES
Note: =====================================================================

Process called "sys_setxattr" that takes path as String, name as String, value as Integer, size as Integer, flags as Integer returns Integer:
    @Implementation
    Sets an extended attribute on a file.
    Supports user, security, system, trusted namespaces. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setxattr")
    Let path_ptr be get_string_pointer(path)
    Let name_ptr be get_string_pointer(name)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: name
        "mov rdx, %3\n"           Note: value
        "mov r10, %4\n"           Note: size
        "mov r8, %5\n"            Note: flags
        "mov rax, %6\n"           Note: sys_setxattr from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(name_ptr), "r"(value), "r"(size), "r"(flags), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_getxattr" that takes path as String, name as String, value as Integer, size as Integer returns Integer:
    @Implementation
    Gets an extended attribute from a file.
    Returns size of value or negative error. If value is NULL, returns size needed.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getxattr")
    Let path_ptr be get_string_pointer(path)
    Let name_ptr be get_string_pointer(name)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: name
        "mov rdx, %3\n"           Note: value buffer
        "mov r10, %4\n"           Note: size
        "mov rax, %5\n"           Note: sys_getxattr from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(name_ptr), "r"(value), "r"(size), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_listxattr" that takes path as String, list as Integer, size as Integer returns Integer:
    @Implementation
    Lists all extended attributes of a file.
    Returns size of list or negative error. If list is NULL, returns size needed.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("listxattr")
    Let path_ptr be get_string_pointer(path)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: list buffer
        "mov rdx, %3\n"           Note: size
        "mov rax, %4\n"           Note: sys_listxattr from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(list), "r"(size), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_removexattr" that takes path as String, name as String returns Integer:
    @Implementation
    Removes an extended attribute from a file.
    Returns 0 on success or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("removexattr")
    Let path_ptr be get_string_pointer(path)
    Let name_ptr be get_string_pointer(name)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: name
        "mov rax, %3\n"           Note: sys_removexattr from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(name_ptr), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: FILE LOCKING
Note: =====================================================================

Process called "sys_flock" that takes fd as Integer, operation as Integer returns Integer:
    @Implementation
    Applies or removes an advisory lock on an open file.
    LOCK_SH=1, LOCK_EX=2, LOCK_UN=8, LOCK_NB=4. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("flock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: operation
        "mov rax, %3\n"           Note: sys_flock from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(operation), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_fcntl" that takes fd as Integer, cmd as Integer, arg as Integer returns Integer:
    @Implementation
    Performs various operations on file descriptors.
    Supports file locking, flags manipulation, and more.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fcntl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: command
        "mov rdx, %3\n"           Note: argument
        "mov rax, %4\n"           Note: sys_fcntl from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(cmd), "r"(arg), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: ZERO-COPY OPERATIONS
Note: =====================================================================

Process called "sys_sendfile" that takes out_fd as Integer, in_fd as Integer, offset as Integer, count as Integer returns Integer:
    @Implementation
    Copies data between file descriptors in kernel space.
    Zero-copy operation. Returns bytes transferred or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendfile")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: out_fd
        "mov rsi, %2\n"           Note: in_fd
        "mov rdx, %3\n"           Note: offset pointer
        "mov r10, %4\n"           Note: count
        "mov rax, %5\n"           Note: sys_sendfile from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(out_fd), "r"(in_fd), "r"(offset), "r"(count), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_splice" that takes fd_in as Integer, off_in as Integer, fd_out as Integer, off_out as Integer, len as Integer, flags as Integer returns Integer:
    @Implementation
    Moves data between two file descriptors without copying to user space.
    At least one fd must be a pipe. Returns bytes moved or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("splice")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd_in
        "mov rsi, %2\n"           Note: off_in
        "mov rdx, %3\n"           Note: fd_out
        "mov r10, %4\n"           Note: off_out
        "mov r8, %5\n"            Note: length
        "mov r9, %6\n"            Note: flags
        "mov rax, %7\n"           Note: sys_splice from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd_in), "r"(off_in), "r"(fd_out), "r"(off_out), "r"(len), "r"(flags), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_copy_file_range" that takes fd_in as Integer, off_in as Integer, fd_out as Integer, off_out as Integer, len as Integer, flags as Integer returns Integer:
    @Implementation
    Copies a range of data from one file to another.
    May use copy-on-write if filesystem supports it. Returns bytes copied.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("copy_file_range")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd_in
        "mov rsi, %2\n"           Note: off_in pointer
        "mov rdx, %3\n"           Note: fd_out
        "mov r10, %4\n"           Note: off_out pointer
        "mov r8, %5\n"            Note: length
        "mov r9, %6\n"            Note: flags
        "mov rax, %7\n"           Note: sys_copy_file_range from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd_in), "r"(off_in), "r"(fd_out), "r"(off_out), "r"(len), "r"(flags), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: FILE CHANGE NOTIFICATIONS
Note: =====================================================================

Process called "sys_inotify_init1" that takes flags as Integer returns Integer:
    @Implementation
    Creates an inotify instance for monitoring filesystem events.
    Returns file descriptor for the instance or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_init1")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: flags (IN_CLOEXEC, IN_NONBLOCK)
        "mov rax, %2\n"           Note: sys_inotify_init1 from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(flags), "r"(syscall_num)
        : "rax", "rdi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_inotify_add_watch" that takes fd as Integer, pathname as String, mask as Integer returns Integer:
    @Implementation
    Adds a watch for specified events on a file or directory.
    Returns watch descriptor or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_add_watch")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: inotify fd
        "mov rsi, %2\n"           Note: pathname
        "mov rdx, %3\n"           Note: event mask
        "mov rax, %4\n"           Note: sys_inotify_add_watch from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(path_ptr), "r"(mask), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_inotify_rm_watch" that takes fd as Integer, wd as Integer returns Integer:
    @Implementation
    Removes an inotify watch.
    Returns 0 on success or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("inotify_rm_watch")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: inotify fd
        "mov rsi, %2\n"           Note: watch descriptor
        "mov rax, %3\n"           Note: sys_inotify_rm_watch from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(wd), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: ADDITIONAL FILE OPERATIONS
Note: =====================================================================

Process called "sys_unlink" that takes pathname as String returns Integer:
    @Implementation
    Deletes a name from the filesystem.
    If this was the last link, the file is deleted. Returns 0 or error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unlink")
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rax, %2\n"           Note: sys_unlink from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(syscall_num)
        : "rax", "rdi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_rename" that takes oldpath as String, newpath as String returns Integer:
    @Implementation
    Renames a file, moving it between directories if required.
    Atomic operation. Returns 0 on success or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rename")
    Let old_ptr be get_string_pointer(oldpath)
    Let new_ptr be get_string_pointer(newpath)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: oldpath
        "mov rsi, %2\n"           Note: newpath
        "mov rax, %3\n"           Note: sys_rename from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(old_ptr), "r"(new_ptr), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_truncate" that takes path as String, length as Integer returns Integer:
    @Implementation
    Truncates a file to specified length.
    Can extend file with zeros. Returns 0 or negative error.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("truncate")
    Let path_ptr be get_string_pointer(path)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: sys_truncate from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(path_ptr), "r"(length), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Process called "sys_ftruncate" that takes fd as Integer, length as Integer returns Integer:
    @Implementation
    Truncates a file by file descriptor to specified length.
    Returns 0 on success or negative error code.
    @End Implementation
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ftruncate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: length
        "mov rax, %3\n"           Note: sys_ftruncate from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r"(result)
        : "r"(fd), "r"(length), "r"(syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11"
    End Assembly
    
    Return result
End Process

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "get_string_pointer" that takes str as String returns Integer:
    @Implementation
    Returns pointer to the string's character data for syscall use.
    @End Implementation
    
    Let ptr be Integer
    
    Inline Assembly:
        "lea rax, %1\n"
        "mov %0, rax\n"
        : "=r"(ptr)
        : "m"(str)
        : "rax"
    End Assembly
    
    Return ptr
End Process