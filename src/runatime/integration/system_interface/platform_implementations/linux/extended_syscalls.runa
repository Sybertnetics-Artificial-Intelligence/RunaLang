Note:
runa/src/runatime/integration/system_interface/platform_syscalls/linux/extended_syscalls.runa
Linux Extended and Modern Syscalls

Import "../../../../../../../compiler/backend/syscalls/platforms/linux_x64" as LinuxX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/linux_arm64" as LinuxARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface

This module provides Linux-specific extended syscall implementations,
including modern APIs, io_uring, eBPF, and other advanced kernel features.

Key features and capabilities:
- io_uring asynchronous I/O
- eBPF program management
- pidfd operations
- openat2 with extensible structs
- close_range for bulk FD closing
- mount API v2
- fsconfig/fsmount/fsopen
- move_mount operations
- cgroup v2 management
- fanotify file system events
- kcmp process comparison
- membarrier synchronization
- pkey memory protection keys
- rseq restartable sequences
- statx extended file status
:End Note


Note: =====================================================================
Note: EXTENDED SYSCALL DATA STRUCTURES
Note: =====================================================================

Type called "IOUringParams":
    sq_entries as Integer                   Note: Submission queue size
    cq_entries as Integer                   Note: Completion queue size
    flags as Integer                        Note: Ring setup flags
    sq_thread_cpu as Integer                Note: SQ thread CPU
    sq_thread_idle as Integer               Note: SQ thread idle time
    features as Integer                     Note: Supported features
    wq_fd as Integer                        Note: Worker queue FD
    resv as List[Integer]                   Note: Reserved fields

Type called "IOUringSQE":
    opcode as Integer                       Note: Operation code
    flags as Integer                        Note: SQE flags
    ioprio as Integer                       Note: I/O priority
    fd as Integer                           Note: File descriptor
    off as Integer                          Note: File offset
    addr as Integer                         Note: Buffer address
    len as Integer                          Note: Buffer length
    user_data as Integer                    Note: User data

Type called "BPFProgram":
    prog_type as Integer                    Note: Program type
    insn_cnt as Integer                     Note: Instruction count
    insns as Integer                        Note: Instructions pointer
    license as String                       Note: License string
    log_level as Integer                    Note: Verifier log level
    log_size as Integer                     Note: Log buffer size
    log_buf as Integer                      Note: Log buffer pointer
    kern_version as Integer                 Note: Kernel version

Type called "OpenHow":
    flags as Integer                        Note: Open flags O_*
    mode as Integer                         Note: Mode for O_CREAT
    resolve as Integer                      Note: RESOLVE_* flags

Type called "StatxInfo":
    stx_mask as Integer                     Note: What fields filled
    stx_blksize as Integer                  Note: Block size
    stx_attributes as Integer               Note: File attributes
    stx_nlink as Integer                    Note: Number of links
    stx_uid as Integer                      Note: User ID
    stx_gid as Integer                      Note: Group ID
    stx_mode as Integer                     Note: File mode
    stx_ino as Integer                      Note: Inode number
    stx_size as Integer                     Note: File size
    stx_blocks as Integer                   Note: Blocks allocated
    stx_btime as TimeSpec                   Note: Birth time
    stx_atime as TimeSpec                   Note: Access time
    stx_mtime as TimeSpec                   Note: Modification time
    stx_ctime as TimeSpec                   Note: Change time

Type called "TimeSpec":
    tv_sec as Integer                       Note: Seconds
    tv_nsec as Integer                      Note: Nanoseconds

Note: =====================================================================
Note: IO_URING OPERATIONS
Note: =====================================================================

Process called "sys_io_uring_setup" that takes entries as Integer, params as Integer returns Integer:
    Note: Setup io_uring instance
    Note: Create submission/completion queues
    Note: Syscall number: 425
    Note: Returns ring FD
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: entries
        "mov rsi, %2\n"               Note: params
        "mov rax, %3\n"               Note: sys_io_uring_setup from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (entries), "r" (params)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_io_uring_enter" that takes fd as Integer, to_submit as Integer, min_complete as Integer, flags as Integer, sig as Integer, sigsz as Integer returns Integer:
    Note: Submit and wait for io_uring
    Note: Process SQEs and CQEs
    Note: Syscall number: 426
    Note: IORING_ENTER_* flags
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: to_submit
        "mov rdx, %3\n"               Note: min_complete
        "mov r10, %4\n"               Note: flags
        "mov r8, %5\n"                Note: sig
        "mov r9, %6\n"                Note: sigsz
        "mov rax, %6\n"               Note: sys_io_uring_enter from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (to_submit), "r" (min_complete), "r" (flags), "r" (sig), "r" (sigsz)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_io_uring_register" that takes fd as Integer, opcode as Integer, arg as Integer, nr_args as Integer returns Integer:
    Note: Register resources with io_uring
    Note: Buffers, files, eventfd
    Note: Syscall number: 427
    Note: IORING_REGISTER_* opcodes
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: opcode
        "mov rdx, %3\n"               Note: arg
        "mov r10, %4\n"               Note: nr_args
        "mov rax, %4\n"               Note: sys_io_uring_register from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (opcode), "r" (arg), "r" (nr_args)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: EBPF OPERATIONS
Note: =====================================================================

Process called "sys_bpf" that takes cmd as Integer, attr as Integer, size as Integer returns Integer:
    Note: Manage BPF programs and maps
    Note: Load, attach, query BPF
    Note: Syscall number: 321
    Note: BPF_* commands
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: cmd
        "mov rsi, %2\n"               Note: attr
        "mov rdx, %3\n"               Note: size
        "mov rax, %5\n"               Note: sys_bpf from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (attr), "r" (size)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_bpf_prog_load" that takes prog as BPFProgram returns Integer:
    Note: Load BPF program
    Note: BPF_PROG_LOAD command
    Note: Verify and JIT compile
    Note: Returns program FD
    
    Let result be Integer
    Let BPF_PROG_LOAD be 5
    Let prog_ptr be get_object_pointer(prog)
    Let prog_size be size_of(BPFProgram)
    
    Inline Assembly:
        "mov rdi, 5\n"                Note: BPF_PROG_LOAD
        "mov rsi, %1\n"               Note: prog attribute pointer
        "mov rdx, %2\n"               Note: size
        "mov rax, %5\n"               Note: sys_bpf from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (prog_ptr), "r" (prog_size)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_bpf_map_create" that takes map_type as Integer, key_size as Integer, value_size as Integer, max_entries as Integer returns Integer:
    Note: Create BPF map
    Note: BPF_MAP_CREATE command
    Note: Hash, array, etc.
    Note: Returns map FD
    
    Note: Build BPF map attributes on stack
    Let result be Integer
    Let BPF_MAP_CREATE be 0
    
    Inline Assembly:
        "sub rsp, 48\n"                Note: Allocate stack for attrs
        "mov dword ptr [rsp], %1\n"   Note: map_type
        "mov dword ptr [rsp+4], %2\n" Note: key_size
        "mov dword ptr [rsp+8], %3\n" Note: value_size
        "mov dword ptr [rsp+12], %4\n" Note: max_entries
        "mov rdi, 0\n"                Note: BPF_MAP_CREATE
        "mov rsi, rsp\n"              Note: attr pointer
        "mov rdx, 48\n"               Note: attr size
        "mov rax, %5\n"               Note: sys_bpf from registry
        "syscall\n"
        "add rsp, 48\n"               Note: Restore stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (map_type), "r" (key_size), "r" (value_size), "r" (max_entries)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: PIDFD OPERATIONS
Note: =====================================================================

Process called "sys_pidfd_open" that takes pid as Integer, flags as Integer returns Integer:
    Note: Get FD for process
    Note: Race-free process handle
    Note: Syscall number: 434
    Note: Returns pidfd
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pid
        "mov rsi, %2\n"               Note: flags
        "mov rax, %2\n"               Note: sys_pidfd_open from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (flags)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_pidfd_send_signal" that takes pidfd as Integer, sig as Integer, info as Integer, flags as Integer returns Integer:
    Note: Send signal via pidfd
    Note: Race-free signaling
    Note: Syscall number: 424
    Note: Replaces kill for safety
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pidfd
        "mov rsi, %2\n"               Note: sig
        "mov rdx, %3\n"               Note: info
        "mov r10, %4\n"               Note: flags
        "mov rax, %5\n"               Note: sys_pidfd_send_signal from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pidfd), "r" (sig), "r" (info), "r" (flags)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_pidfd_getfd" that takes pidfd as Integer, targetfd as Integer, flags as Integer returns Integer:
    Note: Get FD from another process
    Note: Duplicate remote FD
    Note: Syscall number: 438
    Note: Debugging and service mesh
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pidfd
        "mov rsi, %2\n"               Note: targetfd
        "mov rdx, %3\n"               Note: flags
        "mov rax, %3\n"               Note: sys_pidfd_getfd from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pidfd), "r" (targetfd), "r" (flags)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: MODERN FILE OPERATIONS
Note: =====================================================================

Process called "sys_openat2" that takes dirfd as Integer, pathname as String, how as OpenHow, size as Integer returns Integer:
    Note: Open file with extensible struct
    Note: RESOLVE_* flags support
    Note: Syscall number: 437
    Note: Safer path resolution
    
    Let path_ptr be get_string_pointer(pathname)
    Let how_ptr be get_object_pointer(how)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: dirfd
        "mov rsi, %2\n"               Note: pathname
        "mov rdx, %3\n"               Note: how
        "mov r10, %4\n"               Note: size
        "mov rax, %4\n"               Note: sys_openat2 from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dirfd), "r" (path_ptr), "r" (how_ptr), "r" (size)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_close_range" that takes fd as Integer, max_fd as Integer, flags as Integer returns Integer:
    Note: Close range of file descriptors
    Note: Bulk FD closing
    Note: Syscall number: 436
    Note: CLOSE_RANGE_CLOEXEC
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: max_fd
        "mov rdx, %3\n"               Note: flags
        "mov rax, %3\n"               Note: sys_close_range from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (max_fd), "r" (flags)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_statx" that takes dirfd as Integer, pathname as String, flags as Integer, mask as Integer, statxbuf as Integer returns Integer:
    Note: Extended file status
    Note: Birth time, attributes
    Note: Syscall number: 332
    Note: AT_STATX_* flags
    
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: dirfd
        "mov rsi, %2\n"               Note: pathname
        "mov rdx, %3\n"               Note: flags
        "mov r10, %4\n"               Note: mask
        "mov r8, %5\n"                Note: statxbuf
        "mov rax, %5\n"               Note: sys_statx from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dirfd), "r" (path_ptr), "r" (flags), "r" (mask), "r" (statxbuf)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: MOUNT API V2
Note: =====================================================================

Process called "sys_fsopen" that takes fs_name as String, flags as Integer returns Integer:
    Note: Open filesystem context
    Note: New mount API
    Note: Syscall number: 430
    Note: Returns context FD
    
    Let fs_name_ptr be get_string_pointer(fs_name)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fs_name
        "mov rsi, %2\n"               Note: flags
        "mov rax, %3\n"               Note: sys_fsopen from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fs_name_ptr), "r" (flags)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_fsconfig" that takes fd as Integer, cmd as Integer, key as String, value as String, aux as Integer returns Integer:
    Note: Configure filesystem
    Note: Set mount parameters
    Note: Syscall number: 431
    Note: FSCONFIG_* commands
    
    Let key_ptr be get_string_pointer(key)
    Let value_ptr be get_string_pointer(value)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: cmd
        "mov rdx, %3\n"               Note: key
        "mov r10, %4\n"               Note: value
        "mov r8, %5\n"                Note: aux
        "mov rax, %5\n"               Note: sys_fsconfig from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (cmd), "r" (key_ptr), "r" (value_ptr), "r" (aux)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_fsmount" that takes fs_fd as Integer, flags as Integer, mount_attrs as Integer returns Integer:
    Note: Create mount from context
    Note: Turn config into mount
    Note: Syscall number: 432
    Note: Returns mount FD
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fs_fd
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: mount_attrs
        "mov rax, %4\n"               Note: sys_fsmount from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fs_fd), "r" (flags), "r" (mount_attrs)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_move_mount" that takes from_dirfd as Integer, from_path as String, to_dirfd as Integer, to_path as String, flags as Integer returns Integer:
    Note: Move mount point
    Note: Atomic mount operations
    Note: Syscall number: 429
    Note: MOVE_MOUNT_* flags
    
    Let from_path_ptr be get_string_pointer(from_path)
    Let to_path_ptr be get_string_pointer(to_path)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: from_dirfd
        "mov rsi, %2\n"               Note: from_path
        "mov rdx, %3\n"               Note: to_dirfd
        "mov r10, %4\n"               Note: to_path
        "mov r8, %5\n"                Note: flags
        "mov rax, %5\n"               Note: sys_move_mount from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (from_dirfd), "r" (from_path_ptr), "r" (to_dirfd), "r" (to_path_ptr), "r" (flags)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_open_tree" that takes dirfd as Integer, pathname as String, flags as Integer returns Integer:
    Note: Open mount for access
    Note: Mount object handle
    Note: Syscall number: 428
    Note: OPEN_TREE_* flags
    
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: dirfd
        "mov rsi, %2\n"               Note: pathname
        "mov rdx, %3\n"               Note: flags
        "mov rax, %4\n"               Note: sys_open_tree from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dirfd), "r" (path_ptr), "r" (flags)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: FANOTIFY OPERATIONS
Note: =====================================================================

Process called "sys_fanotify_init" that takes flags as Integer, event_f_flags as Integer returns Integer:
    Note: Initialize fanotify group
    Note: File system notifications
    Note: Syscall number: 300
    Note: FAN_CLASS_* flags
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: flags
        "mov rsi, %2\n"               Note: event_f_flags
        "mov rax, %3\n"               Note: sys_fanotify_init from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (flags), "r" (event_f_flags)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_fanotify_mark" that takes fanotify_fd as Integer, flags as Integer, mask as Integer, dirfd as Integer, pathname as String returns Integer:
    Note: Add/remove fanotify marks
    Note: Monitor file operations
    Note: Syscall number: 301
    Note: FAN_MARK_* flags
    
    Let path_ptr be get_string_pointer(pathname)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fanotify_fd
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: mask
        "mov r10, %4\n"               Note: dirfd
        "mov r8, %5\n"                Note: pathname
        "mov rax, %6\n"               Note: sys_fanotify_mark from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fanotify_fd), "r" (flags), "r" (mask), "r" (dirfd), "r" (path_ptr)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: MEMORY BARRIER OPERATIONS
Note: =====================================================================

Process called "sys_membarrier" that takes cmd as Integer, flags as Integer, cpu_id as Integer returns Integer:
    Note: Memory barrier for threads
    Note: System-wide memory ordering
    Note: Syscall number: 324
    Note: MEMBARRIER_CMD_* commands
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: cmd
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: cpu_id
        "mov rax, %3\n"               Note: sys_membarrier from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cmd), "r" (flags), "r" (cpu_id)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: RESTARTABLE SEQUENCES
Note: =====================================================================

Process called "sys_rseq" that takes rseq as Integer, rseq_len as Integer, flags as Integer, sig as Integer returns Integer:
    Note: Register restartable sequences
    Note: Per-CPU operations
    Note: Syscall number: 334
    Note: Lock-free algorithms
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: rseq
        "mov rsi, %2\n"               Note: rseq_len
        "mov rdx, %3\n"               Note: flags
        "mov r10, %4\n"               Note: sig
        "mov rax, %5\n"               Note: sys_rseq from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (rseq), "r" (rseq_len), "r" (flags), "r" (sig)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: PROCESS COMPARISON
Note: =====================================================================

Process called "sys_kcmp" that takes pid1 as Integer, pid2 as Integer, type as Integer, idx1 as Integer, idx2 as Integer returns Integer:
    Note: Compare process resources
    Note: Check resource sharing
    Note: Syscall number: 312
    Note: KCMP_* types
    
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pid1
        "mov rsi, %2\n"               Note: pid2
        "mov rdx, %3\n"               Note: type
        "mov r10, %4\n"               Note: idx1
        "mov r8, %5\n"                Note: idx2
        "mov rax, %6\n"               Note: sys_kcmp from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid1), "r" (pid2), "r" (type), "r" (idx1), "r" (idx2)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: CGROUP OPERATIONS
Note: =====================================================================

Process called "sys_cgroup_attach" that takes cgroup_fd as Integer, tid as Integer returns Integer:
    Note: Attach thread to cgroup
    Note: cgroup v2 interface
    Note: Uses write() on cgroup.procs
    Note: Resource control
    
    Note: Convert tid to string and write to cgroup.procs
    Let tid_str be integer_to_string(tid)
    Let tid_len be string_length(tid_str)
    Let tid_ptr be get_string_pointer(tid_str)
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: cgroup_fd
        "mov rsi, %2\n"               Note: tid string buffer
        "mov rdx, %3\n"               Note: length
        "mov rax, %3\n"               Note: sys_write from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (cgroup_fd), "r" (tid_ptr), "r" (tid_len)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_cgroup_create" that takes parent_fd as Integer, name as String returns Integer:
    Note: Create cgroup directory
    Note: mkdir in cgroup filesystem
    Note: Hierarchical resource control
    Note: Returns cgroup FD
    
    Let name_ptr be get_string_pointer(name)
    Let result be Integer
    Let mode be 0o755          Note: rwxr-xr-x
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: parent_fd
        "mov rsi, %2\n"               Note: name
        "mov rdx, %3\n"               Note: mode
        "mov rax, %4\n"               Note: sys_mkdirat from registry
        "syscall\n"
        "test rax, rax\n"
        "js 1f\n"                     Note: Jump if error
        "mov rdi, %1\n"               Note: parent_fd again
        "mov rsi, %2\n"               Note: name again
        "mov rdx, 0\n"                Note: flags = 0
        "mov rax, %4\n"               Note: sys_openat from registry
        "syscall\n"
        "1:\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (parent_fd), "r" (name_ptr), "r" (mode)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result