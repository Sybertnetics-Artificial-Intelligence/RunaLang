Note:
runa/src/runatime/integration/system_interface/platform_syscalls/linux/signal_syscalls.runa
Linux Signal Management Syscalls

Import "../../../../../../../compiler/backend/syscalls/platforms/linux_x64" as LinuxX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/linux_arm64" as LinuxARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface

This module provides Linux-specific signal handling syscall implementations,
including signal delivery, masking, and real-time signal support.

Key features and capabilities:
- Signal sending and receiving
- Signal mask management
- Signal handler registration
- Real-time signals (SIGRTMIN-SIGRTMAX)
- Signal queuing
- Signal information (siginfo)
- Signal suspension (sigsuspend)
- Signal waiting (sigwait)
- Signal timers
- Signal file descriptors (signalfd)
- Process group signaling
- Signal stack management
- Signal action configuration
- Async-signal-safe operations
- Signal debugging support
:End Note


Note: =====================================================================
Note: SIGNAL DATA STRUCTURES
Note: =====================================================================

Type called "SignalInfo":
    si_signo as Integer                     Note: Signal number
    si_errno as Integer                     Note: Error number
    si_code as Integer                      Note: Signal code
    si_pid as Integer                       Note: Sending process ID
    si_uid as Integer                       Note: Sending user ID
    si_status as Integer                    Note: Exit value or signal
    si_value as Integer                     Note: Signal value

Type called "SignalAction":
    sa_handler as Integer                   Note: Signal handler function
    sa_flags as Integer                     Note: Signal action flags
    sa_restorer as Integer                  Note: Restorer function
    sa_mask as Integer                      Note: Signal mask during handler

Type called "SignalSet":
    sig as List[Integer]                    Note: Signal bitmap
    size as Integer                         Note: Size of signal set

Type called "SignalStack":
    ss_sp as Integer                        Note: Stack base address
    ss_flags as Integer                     Note: Stack flags
    ss_size as Integer                      Note: Stack size

Note: =====================================================================
Note: SIGNAL SENDING
Note: =====================================================================

Process called "sys_kill" that takes pid as Integer, sig as Integer returns Integer:
    Note: Send signal to process
    Note: Basic signal delivery
    Note: Negative pid for groups
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pid
        "mov rsi, %2\n"               Note: sig
        "mov rax, %3\n"               Note: sys_kill from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_tkill" that takes tid as Integer, sig as Integer returns Integer:
    Note: Send signal to thread
    Note: Thread-specific signal
    Note: Deprecated, use tgkill
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("tkill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: tid
        "mov rsi, %2\n"               Note: sig
        "mov rax, %3\n"               Note: sys_tkill from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_tgkill" that takes tgid as Integer, tid as Integer, sig as Integer returns Integer:
    Note: Send signal to thread in group
    Note: Safer thread signaling
    Note: Preferred over tkill
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("tgkill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: tgid
        "mov rsi, %2\n"               Note: tid
        "mov rdx, %3\n"               Note: sig
        "mov rax, %4\n"               Note: sys_tgkill from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tgid), "r" (tid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_rt_sigqueueinfo" that takes pid as Integer, sig as Integer, uinfo as Integer returns Integer:
    Note: Queue signal with data
    Note: Real-time signal queuing
    Note: Sends siginfo structure
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigqueueinfo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pid
        "mov rsi, %2\n"               Note: sig
        "mov rdx, %3\n"               Note: uinfo
        "mov rax, %4\n"               Note: sys_rt_sigqueueinfo from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (uinfo), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_rt_tgsigqueueinfo" that takes tgid as Integer, tid as Integer, sig as Integer, uinfo as Integer returns Integer:
    Note: Queue signal to thread
    Note: Thread-specific with data
    Note: Real-time thread signaling
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_tgsigqueueinfo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: tgid
        "mov rsi, %2\n"               Note: tid
        "mov rdx, %3\n"               Note: sig
        "mov r10, %4\n"               Note: uinfo
        "mov rax, %5\n"               Note: sys_rt_tgsigqueueinfo from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tgid), "r" (tid), "r" (sig), "r" (uinfo), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_pidfd_send_signal" that takes pidfd as Integer, sig as Integer, info as Integer, flags as Integer returns Integer:
    Note: Send signal via pidfd
    Note: Race-free signaling
    Note: Modern signal interface
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pidfd_send_signal")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: pidfd
        "mov rsi, %2\n"               Note: sig
        "mov rdx, %3\n"               Note: info
        "mov r10, %4\n"               Note: flags
        "mov rax, %5\n"               Note: sys_pidfd_send_signal from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pidfd), "r" (sig), "r" (info), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SIGNAL HANDLER MANAGEMENT
Note: =====================================================================

Process called "sys_rt_sigaction" that takes sig as Integer, act as Integer, oact as Integer, sigsetsize as Integer returns Integer:
    Note: Set signal handler
    Note: Configure signal action
    Note: Real-time signal support
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigaction")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: sig
        "mov rsi, %2\n"               Note: act
        "mov rdx, %3\n"               Note: oact
        "mov r10, %4\n"               Note: sigsetsize
        "mov rax, %5\n"               Note: sys_rt_sigaction from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sig), "r" (act), "r" (oact), "r" (sigsetsize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_rt_sigprocmask" that takes how as Integer, set as Integer, oset as Integer, sigsetsize as Integer returns Integer:
    Note: Change signal mask
    Note: Block/unblock signals
    Note: SIG_BLOCK, SIG_UNBLOCK, SIG_SETMASK
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigprocmask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: how
        "mov rsi, %2\n"               Note: set
        "mov rdx, %3\n"               Note: oset
        "mov r10, %4\n"               Note: sigsetsize
        "mov rax, %5\n"               Note: sys_rt_sigprocmask from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (how), "r" (set), "r" (oset), "r" (sigsetsize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_rt_sigpending" that takes set as Integer, sigsetsize as Integer returns Integer:
    Note: Get pending signals
    Note: Query blocked signals
    Note: Returns signal set
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigpending")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: set
        "mov rsi, %2\n"               Note: sigsetsize
        "mov rax, %3\n"               Note: sys_rt_sigpending from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (sigsetsize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_rt_sigsuspend" that takes mask as Integer, sigsetsize as Integer returns Integer:
    Note: Wait for signal
    Note: Atomic mask and wait
    Note: Blocks until signal
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigsuspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: mask
        "mov rsi, %2\n"               Note: sigsetsize
        "mov rax, %3\n"               Note: sys_rt_sigsuspend from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (mask), "r" (sigsetsize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SIGNAL WAITING
Note: =====================================================================

Process called "sys_rt_sigtimedwait" that takes set as Integer, info as Integer, timeout as Integer, sigsetsize as Integer returns Integer:
    Note: Wait for signal with timeout
    Note: Synchronous signal wait
    Note: Returns signal info
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigtimedwait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: set
        "mov rsi, %2\n"               Note: info
        "mov rdx, %3\n"               Note: timeout
        "mov r10, %4\n"               Note: sigsetsize
        "mov rax, %5\n"               Note: sys_rt_sigtimedwait from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (info), "r" (timeout), "r" (sigsetsize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_signalfd4" that takes fd as Integer, mask as Integer, sigsetsize as Integer, flags as Integer returns Integer:
    Note: Create signal file descriptor
    Note: Synchronous signal handling
    Note: SFD_CLOEXEC, SFD_NONBLOCK
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("signalfd4")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: fd
        "mov rsi, %2\n"               Note: mask
        "mov rdx, %3\n"               Note: sigsetsize
        "mov r10, %4\n"               Note: flags
        "mov rax, %5\n"               Note: sys_signalfd4 from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (mask), "r" (sigsetsize), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SIGNAL STACK MANAGEMENT
Note: =====================================================================

Process called "sys_sigaltstack" that takes ss as Integer, oss as Integer returns Integer:
    Note: Set alternate signal stack
    Note: Stack for signal handlers
    Note: Prevents stack overflow
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigaltstack")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: ss
        "mov rsi, %2\n"               Note: oss
        "mov rax, %3\n"               Note: sys_sigaltstack from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ss), "r" (oss), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SIGNAL RETURN
Note: =====================================================================

Process called "sys_rt_sigreturn" returns Nothing:
    Note: Return from signal handler
    Note: Restore process context
    Note: Called by libc
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rt_sigreturn")
    
    Inline Assembly:
        "mov rax, %0\n"               Note: sys_rt_sigreturn from registry
        "syscall\n"
        :
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly

Note: =====================================================================
Note: SIGNAL TIMERS
Note: =====================================================================

Process called "sys_timer_create" that takes clockid as Integer, sevp as Integer, timer_id as Integer returns Integer:
    Note: Create POSIX timer
    Note: Signal-based timer
    Note: Delivers signals on expiry
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: clockid
        "mov rsi, %2\n"               Note: sevp
        "mov rdx, %3\n"               Note: timer_id
        "mov rax, %4\n"               Note: sys_timer_create from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (clockid), "r" (sevp), "r" (timer_id), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_settime" that takes timer_id as Integer, flags as Integer, new_value as Integer, old_value as Integer returns Integer:
    Note: Arm/disarm timer
    Note: Set timer expiration
    Note: Absolute or relative time
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_settime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: timer_id
        "mov rsi, %2\n"               Note: flags
        "mov rdx, %3\n"               Note: new_value
        "mov r10, %4\n"               Note: old_value
        "mov rax, %5\n"               Note: sys_timer_settime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timer_id), "r" (flags), "r" (new_value), "r" (old_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_gettime" that takes timer_id as Integer, curr_value as Integer returns Integer:
    Note: Get timer state
    Note: Query remaining time
    Note: Returns current settings
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_gettime")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: timer_id
        "mov rsi, %2\n"               Note: curr_value
        "mov rax, %3\n"               Note: sys_timer_gettime from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timer_id), "r" (curr_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_getoverrun" that takes timer_id as Integer returns Integer:
    Note: Get timer overrun count
    Note: Missed expirations
    Note: For periodic timers
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_getoverrun")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: timer_id
        "mov rax, %2\n"               Note: sys_timer_getoverrun from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timer_id), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_delete" that takes timer_id as Integer returns Integer:
    Note: Delete timer
    Note: Release timer resources
    Note: Stops timer first
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("timer_delete")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: timer_id
        "mov rax, %2\n"               Note: sys_timer_delete from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (timer_id), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: ALARM AND INTERVAL TIMERS
Note: =====================================================================

Process called "sys_alarm" that takes seconds as Integer returns Integer:
    Note: Set alarm signal
    Note: SIGALRM after seconds
    Note: Returns previous alarm
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("alarm")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: seconds
        "mov rax, %2\n"               Note: sys_alarm from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (seconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_setitimer" that takes which as Integer, new_value as Integer, old_value as Integer returns Integer:
    Note: Set interval timer
    Note: ITIMER_REAL, ITIMER_VIRTUAL
    Note: Periodic signals
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: which
        "mov rsi, %2\n"               Note: new_value
        "mov rdx, %3\n"               Note: old_value
        "mov rax, %4\n"               Note: sys_setitimer from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (new_value), "r" (old_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_getitimer" that takes which as Integer, curr_value as Integer returns Integer:
    Note: Get interval timer
    Note: Query timer state
    Note: Returns current value
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: which
        "mov rsi, %2\n"               Note: curr_value
        "mov rax, %3\n"               Note: sys_getitimer from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (curr_value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SIGNAL INFORMATION
Note: =====================================================================

Process called "sys_sigpending" that takes set as Integer returns Integer:
    Note: Get pending signals (old)
    Note: Legacy interface
    Note: Use rt_sigpending instead
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigpending")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: set
        "mov rax, %2\n"               Note: sys_sigpending from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_sigprocmask" that takes how as Integer, set as Integer, oset as Integer returns Integer:
    Note: Change signal mask (old)
    Note: Legacy interface
    Note: Use rt_sigprocmask instead
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigprocmask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"               Note: how
        "mov rsi, %2\n"               Note: set
        "mov rdx, %3\n"               Note: oset
        "mov rax, %4\n"               Note: sys_sigprocmask from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (how), "r" (set), "r" (oset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: RESTART SYSCALL
Note: =====================================================================

Process called "sys_restart_syscall" returns Integer:
    Note: Restart interrupted syscall
    Note: After signal handler
    Note: Kernel internal use
    
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("restart_syscall")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"               Note: sys_restart_syscall from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result