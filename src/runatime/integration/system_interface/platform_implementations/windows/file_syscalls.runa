Note:
runa/src/runatime/integration/system_interface/platform_implementations/windows/file_syscalls.runa
Windows File System Syscalls

This module provides Windows-specific file system syscall implementations,
including NTFS support, Windows APIs, and Windows-specific features.

Key features and capabilities:
- NTFS file system support
- Windows file attributes
- POSIX compatibility layer
- File handles and descriptors
- Directory operations
- File security (ACLs)
- File streams and metadata
- File locking mechanisms
- Asynchronous I/O support
- Memory-mapped files
- File system notifications
- Volume and disk operations
- Junction points and symbolic links
- File compression and encryption
:End Note

Import module "compiler/syscalls/platforms/windows_x64" as WindowsPlatform
Import module "compiler/syscalls/core/platform_interface" as PlatformInterface
Import module "compiler/frontend/primitives/core/integer_primitive" as Integer
Import module "compiler/frontend/primitives/memory/references" as Memory
Import module "compiler/frontend/primitives/types/conversion" as Convert

Note: ===== Core File Operations =====

Process called "sys_open" that takes path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtCreateFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle (output)
        "mov rdx, %2\n"           Note: desired access
        "mov r8, %3\n"            Note: object attributes
        "mov r9, %4\n"            Note: IO status block
        "mov rax, %5\n"           Note: NtCreateFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (mode), "r" (0), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_close" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtClose")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: handle
        "mov rax, %2\n"           Note: NtClose syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_read" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtReadFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: event (NULL)
        "mov r8, %3\n"            Note: APC routine (NULL)
        "mov r9, %4\n"            Note: APC context (NULL)
        "push %5\n"               Note: IO status block
        "push %6\n"               Note: buffer
        "push %7\n"               Note: length
        "mov rax, %8\n"           Note: NtReadFile syscall number from registry
        "syscall\n"
        "add rsp, 24\n"           Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (0), "r" (0), "r" (0), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_write" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtWriteFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: event (NULL)
        "mov r8, %3\n"            Note: APC routine (NULL)
        "mov r9, %4\n"            Note: APC context (NULL)
        "push %5\n"               Note: IO status block
        "push %6\n"               Note: buffer
        "push %7\n"               Note: length
        "mov rax, %8\n"           Note: NtWriteFile syscall number from registry
        "syscall\n"
        "add rsp, 24\n"           Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (0), "r" (0), "r" (0), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lseek" that takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtSetInformationFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: IO status block
        "mov r8, %3\n"            Note: file information
        "mov r9, %4\n"            Note: length
        "push %5\n"               Note: file information class
        "mov rax, %6\n"           Note: NtSetInformationFile syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (offset), "r" (8), "r" (14), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Information =====

Process called "sys_stat" that takes path as Pointer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtQueryAttributesFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: object attributes
        "mov rdx, %2\n"           Note: file basic information
        "mov rax, %3\n"           Note: NtQueryAttributesFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (statbuf), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstat" that takes fd as Integer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtQueryInformationFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: IO status block
        "mov r8, %3\n"            Note: file information
        "mov r9, %4\n"            Note: length
        "push %5\n"               Note: file information class
        "mov rax, %6\n"           Note: NtQueryInformationFile syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (statbuf), "r" (48), "r" (5), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Directory Operations =====

Process called "sys_mkdir" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtCreateFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle (output)
        "mov rdx, %2\n"           Note: desired access (FILE_LIST_DIRECTORY)
        "mov r8, %3\n"            Note: object attributes
        "mov r9, %4\n"            Note: IO status block
        "mov rax, %5\n"           Note: NtCreateFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (0x00000001), "r" (0), "r" (0), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rmdir" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtDeleteFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: object attributes
        "mov rax, %2\n"           Note: NtDeleteFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_opendir" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtCreateFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle (output)
        "mov rdx, %2\n"           Note: desired access
        "mov r8, %3\n"            Note: object attributes
        "mov r9, %4\n"            Note: IO status block
        "mov rax, %5\n"           Note: NtCreateFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (0x00000001), "r" (0), "r" (0), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_readdir" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtQueryDirectoryFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: event (NULL)
        "mov r8, %3\n"            Note: APC routine (NULL)
        "mov r9, %4\n"            Note: APC context (NULL)
        "push %5\n"               Note: IO status block
        "push %6\n"               Note: file information
        "push %7\n"               Note: length
        "mov rax, %8\n"           Note: NtQueryDirectoryFile syscall number from registry
        "syscall\n"
        "add rsp, 24\n"           Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (0), "r" (0), "r" (0), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Manipulation =====

Process called "sys_unlink" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtDeleteFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: object attributes
        "mov rax, %2\n"           Note: NtDeleteFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rename" that takes oldpath as Pointer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtSetInformationFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: IO status block
        "mov r8, %3\n"            Note: file information
        "mov r9, %4\n"            Note: length
        "push %5\n"               Note: file information class
        "mov rax, %6\n"           Note: NtSetInformationFile syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (0), "r" (newpath), "r" (0), "r" (10), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Attributes =====

Process called "sys_chmod" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtSetInformationFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: IO status block
        "mov r8, %3\n"            Note: file information
        "mov r9, %4\n"            Note: length
        "push %5\n"               Note: file information class
        "mov rax, %6\n"           Note: NtSetInformationFile syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (0), "r" (mode), "r" (4), "r" (4), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchmod" that takes fd as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtSetInformationFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: IO status block
        "mov r8, %3\n"            Note: file information
        "mov r9, %4\n"            Note: length
        "push %5\n"               Note: file information class
        "mov rax, %6\n"           Note: NtSetInformationFile syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (mode), "r" (4), "r" (4), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Synchronization =====

Process called "sys_fsync" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtFlushBuffersFile")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: file handle
        "mov rdx, %2\n"           Note: IO status block
        "mov rax, %3\n"           Note: NtFlushBuffersFile syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (0), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory-Mapped Files =====

Process called "sys_mmap" that takes addr as Pointer, len as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Pointer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtMapViewOfSection")
    Let result be Pointer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: section handle
        "mov rdx, %2\n"           Note: process handle
        "mov r8, %3\n"            Note: base address
        "mov r9, %4\n"            Note: zero bits
        "push %5\n"               Note: commit size
        "push %6\n"               Note: section offset
        "push %7\n"               Note: view size
        "mov rax, %8\n"           Note: NtMapViewOfSection syscall number from registry
        "syscall\n"
        "add rsp, 24\n"           Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (-1), "r" (addr), "r" (0), "r" (len), "r" (offset), "r" (len), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r8", "r9", "r10", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munmap" that takes addr as Pointer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("NtUnmapViewOfSection")
    Let result be Integer
    
    Inline Assembly:
        "mov rcx, %1\n"           Note: process handle
        "mov rdx, %2\n"           Note: base address
        "mov rax, %3\n"           Note: NtUnmapViewOfSection syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (-1), "r" (addr), "r" (syscall_num)
        : "rax", "rcx", "rdx", "r11", "memory"
    End Assembly
    
    Return result
End Process