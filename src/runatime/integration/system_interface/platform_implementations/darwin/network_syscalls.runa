Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/network_syscalls.runa
Darwin/macOS Network Syscalls

This module provides Darwin-specific network syscall implementations,
including socket operations, network I/O, socket options management,
and kqueue-based event notification support.

Key features and capabilities:
- BSD socket API implementation
- TCP/UDP socket operations
- Network I/O operations (send/recv)
- Socket options management
- Kqueue event notification
- Network interface management
- Network statistics via sysctl
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Socket Creation and Management =====

Process called "sys_socket_darwin" that takes domain as Integer, type as Integer, protocol as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("socket")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: domain
        "mov rsi, %2\n"           Note: type
        "mov rdx, %3\n"           Note: protocol
        "mov rax, %4\n"           Note: socket syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (domain), "r" (type), "r" (protocol), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_bind_darwin" that takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("bind")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: addr
        "mov rdx, %3\n"           Note: addrlen
        "mov rax, %4\n"           Note: bind syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_listen_darwin" that takes sockfd as Integer, backlog as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("listen")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: backlog
        "mov rax, %3\n"           Note: listen syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (backlog), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_accept_darwin" that takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("accept")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: addr
        "mov rdx, %3\n"           Note: addrlen
        "mov rax, %4\n"           Note: accept syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_connect_darwin" that takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("connect")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: addr
        "mov rdx, %3\n"           Note: addrlen
        "mov rax, %4\n"           Note: connect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network I/O Operations =====

Process called "sys_send_darwin" that takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("send")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: buf
        "mov rdx, %3\n"           Note: len
        "mov rcx, %4\n"           Note: flags
        "mov rax, %5\n"           Note: send syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recv_darwin" that takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recv")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: buf
        "mov rdx, %3\n"           Note: len
        "mov rcx, %4\n"           Note: flags
        "mov rax, %5\n"           Note: recv syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sendto_darwin" that takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer, dest_addr as Integer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendto")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: buf
        "mov rdx, %3\n"           Note: len
        "mov rcx, %4\n"           Note: flags
        "mov r8, %5\n"            Note: dest_addr
        "mov r9, %6\n"            Note: addrlen
        "mov rax, %7\n"           Note: sendto syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (dest_addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recvfrom_darwin" that takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer, src_addr as Integer, addrlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recvfrom")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: buf
        "mov rdx, %3\n"           Note: len
        "mov rcx, %4\n"           Note: flags
        "mov r8, %5\n"            Note: src_addr
        "mov r9, %6\n"            Note: addrlen
        "mov rax, %7\n"           Note: recvfrom syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (buf), "r" (len), "r" (flags), "r" (src_addr), "r" (addrlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sendmsg_darwin" that takes sockfd as Integer, msg as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sendmsg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: msg
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: sendmsg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (msg), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_recvmsg_darwin" that takes sockfd as Integer, msg as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("recvmsg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: msg
        "mov rdx, %3\n"           Note: flags
        "mov rax, %4\n"           Note: recvmsg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (msg), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Socket Options =====

Process called "sys_setsockopt_darwin" that takes sockfd as Integer, level as Integer, optname as Integer, optval as Integer, optlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setsockopt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: level
        "mov rdx, %3\n"           Note: optname
        "mov rcx, %4\n"           Note: optval
        "mov r8, %5\n"            Note: optlen
        "mov rax, %6\n"           Note: setsockopt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (level), "r" (optname), "r" (optval), "r" (optlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getsockopt_darwin" that takes sockfd as Integer, level as Integer, optname as Integer, optval as Integer, optlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getsockopt")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sockfd
        "mov rsi, %2\n"           Note: level
        "mov rdx, %3\n"           Note: optname
        "mov rcx, %4\n"           Note: optval
        "mov r8, %5\n"            Note: optlen
        "mov rax, %6\n"           Note: getsockopt syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sockfd), "r" (level), "r" (optname), "r" (optval), "r" (optlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Event Notification (Kqueue) =====

Process called "sys_kqueue_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: kqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent_darwin" that takes kq as Integer, changelist as Integer, nchanges as Integer, eventlist as Integer, nevents as Integer, timeout as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kq
        "mov rsi, %2\n"           Note: changelist
        "mov rdx, %3\n"           Note: nchanges
        "mov rcx, %4\n"           Note: eventlist
        "mov r8, %5\n"            Note: nevents
        "mov r9, %6\n"            Note: timeout
        "mov rax, %7\n"           Note: kevent syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_kevent64_darwin" that takes kq as Integer, changelist as Integer, nchanges as Integer, eventlist as Integer, nevents as Integer, flags as Integer, timeout as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kevent64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: kq
        "mov rsi, %2\n"           Note: changelist
        "mov rdx, %3\n"           Note: nchanges
        "mov rcx, %4\n"           Note: eventlist
        "mov r8, %5\n"            Note: nevents
        "mov r9, %6\n"            Note: flags
        "push %7\n"               Note: timeout
        "mov rax, %8\n"           Note: kevent64 syscall number from registry
        "syscall\n"
        "add rsp, 8\n"            Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (kq), "r" (changelist), "r" (nchanges), "r" (eventlist), "r" (nevents), "r" (flags), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Network Control Operations =====

Process called "sys_ioctl_network_darwin" that takes fd as Integer, request as Integer, argp as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("ioctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: fd
        "mov rsi, %2\n"           Note: request
        "mov rdx, %3\n"           Note: argp
        "mov rax, %4\n"           Note: ioctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (request), "r" (argp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getifaddrs_darwin" that takes ifap as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getifaddrs")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ifap
        "mov rax, %2\n"           Note: getifaddrs syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ifap), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sysctl_net_darwin" that takes name as Integer, namelen as Integer, oldp as Integer, oldlenp as Integer, newp as Integer, newlen as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sysctl")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name
        "mov rsi, %2\n"           Note: namelen
        "mov rdx, %3\n"           Note: oldp
        "mov rcx, %4\n"           Note: oldlenp
        "mov r8, %5\n"            Note: newp
        "mov r9, %6\n"            Note: newlen
        "mov rax, %7\n"           Note: sysctl syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name), "r" (namelen), "r" (oldp), "r" (oldlenp), "r" (newp), "r" (newlen), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Helper Functions =====

Process called "string_to_ptr" that takes s as String returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "mov %0, %1\n"
        : "=r" (result)
        : "r" (s)
        :
    End Assembly
    
    Return result
End Process