Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/memory_syscalls.runa
Darwin/macOS Memory Management Syscalls

This module provides Darwin-specific memory management syscall implementations,
including mmap/munmap for virtual memory, mprotect for protection changes,
Mach VM operations, and shared memory support.

Key features and capabilities:
- Virtual memory management (mmap, munmap, mprotect)
- Memory protection and advice operations
- Mach VM API integration
- Shared memory operations
- Memory statistics and control
- Task memory information
- Memory pressure handling
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Virtual Memory Management =====

Process called "sys_mmap_darwin" that takes addr as Integer, len as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mmap")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: addr
        "mov rsi, %2\n"           Note: len
        "mov rdx, %3\n"           Note: prot
        "mov rcx, %4\n"           Note: flags
        "mov r8, %5\n"            Note: fd
        "mov r9, %6\n"            Note: offset
        "mov rax, %7\n"           Note: mmap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (flags), "r" (fd), "r" (offset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_munmap_darwin" that takes addr as Integer, len as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("munmap")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: addr
        "mov rsi, %2\n"           Note: len
        "mov rax, %3\n"           Note: munmap syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_mprotect_darwin" that takes addr as Integer, len as Integer, prot as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mprotect")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: addr
        "mov rsi, %2\n"           Note: len
        "mov rdx, %3\n"           Note: prot
        "mov rax, %4\n"           Note: mprotect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (prot), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_madvise_darwin" that takes addr as Integer, len as Integer, advice as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("madvise")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: addr
        "mov rsi, %2\n"           Note: len
        "mov rdx, %3\n"           Note: advice
        "mov rax, %4\n"           Note: madvise syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (addr), "r" (len), "r" (advice), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Mach VM Operations =====

Process called "sys_vm_allocate" that takes target_task as Integer, address as Integer, size as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vm_allocate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target_task
        "mov rsi, %2\n"           Note: address
        "mov rdx, %3\n"           Note: size
        "mov rcx, %4\n"           Note: flags
        "mov rax, %5\n"           Note: vm_allocate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_task), "r" (address), "r" (size), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vm_deallocate" that takes target_task as Integer, address as Integer, size as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vm_deallocate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target_task
        "mov rsi, %2\n"           Note: address
        "mov rdx, %3\n"           Note: size
        "mov rax, %4\n"           Note: vm_deallocate syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_task), "r" (address), "r" (size), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vm_protect" that takes target_task as Integer, address as Integer, size as Integer, set_maximum as Boolean, new_protection as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vm_protect")
    Let result be Integer
    Let max_flag be 0
    If set_maximum:
        Set max_flag to 1
    End If
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target_task
        "mov rsi, %2\n"           Note: address
        "mov rdx, %3\n"           Note: size
        "mov rcx, %4\n"           Note: set_maximum
        "mov r8, %5\n"            Note: new_protection
        "mov rax, %6\n"           Note: vm_protect syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_task), "r" (address), "r" (size), "r" (max_flag), "r" (new_protection), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vm_map" that takes target_task as Integer, address as Integer, size as Integer, mask as Integer, flags as Integer, object as Integer, offset as Integer, copy as Boolean, cur_protection as Integer, max_protection as Integer, inheritance as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vm_map")
    Let result be Integer
    Let copy_flag be 0
    If copy:
        Set copy_flag to 1
    End If
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target_task
        "mov rsi, %2\n"           Note: address
        "mov rdx, %3\n"           Note: size
        "mov rcx, %4\n"           Note: mask
        "mov r8, %5\n"            Note: flags
        "mov r9, %6\n"            Note: object
        "push %11\n"              Note: inheritance
        "push %10\n"              Note: max_protection
        "push %9\n"               Note: cur_protection
        "push %8\n"               Note: copy
        "push %7\n"               Note: offset
        "mov rax, %12\n"          Note: vm_map syscall number from registry
        "syscall\n"
        "add rsp, 40\n"           Note: clean up stack
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_task), "r" (address), "r" (size), "r" (mask), "r" (flags), "r" (object), "r" (offset), "r" (copy_flag), "r" (cur_protection), "r" (max_protection), "r" (inheritance), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Shared Memory Operations =====

Process called "sys_shm_open_darwin" that takes name as String, oflag as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_open")
    Let result be Integer
    Let name_ptr be string_to_ptr(name)
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name
        "mov rsi, %2\n"           Note: oflag
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: shm_open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name_ptr), "r" (oflag), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_shm_unlink_darwin" that takes name as String returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("shm_unlink")
    Let result be Integer
    Let name_ptr be string_to_ptr(name)
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: name
        "mov rax, %2\n"           Note: shm_unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (name_ptr), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Memory Control Operations =====

Process called "sys_vm_purgeable_control" that takes target_task as Integer, address as Integer, control as Integer, state as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vm_purgeable_control")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target_task
        "mov rsi, %2\n"           Note: address
        "mov rdx, %3\n"           Note: control
        "mov rcx, %4\n"           Note: state
        "mov rax, %5\n"           Note: vm_purgeable_control syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_task), "r" (address), "r" (control), "r" (state), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_host_statistics64" that takes host_priv as Integer, flavor as Integer, info as Integer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("host_statistics64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: host_priv
        "mov rsi, %2\n"           Note: flavor
        "mov rdx, %3\n"           Note: info
        "mov rcx, %4\n"           Note: count
        "mov rax, %5\n"           Note: host_statistics64 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (host_priv), "r" (flavor), "r" (info), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_task_info" that takes target_task as Integer, flavor as Integer, task_info as Integer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("task_info")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target_task
        "mov rsi, %2\n"           Note: flavor
        "mov rdx, %3\n"           Note: task_info
        "mov rcx, %4\n"           Note: count
        "mov rax, %5\n"           Note: task_info syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_task), "r" (flavor), "r" (task_info), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_memorystatus_control" that takes command as Integer, pid as Integer, flags as Integer, buffer as Integer, buffersize as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("memorystatus_control")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: command
        "mov rsi, %2\n"           Note: pid
        "mov rdx, %3\n"           Note: flags
        "mov rcx, %4\n"           Note: buffer
        "mov r8, %5\n"            Note: buffersize
        "mov rax, %6\n"           Note: memorystatus_control syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (command), "r" (pid), "r" (flags), "r" (buffer), "r" (buffersize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_memorystatus_get_level" that takes level as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("memorystatus_get_level")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: level
        "mov rax, %2\n"           Note: memorystatus_get_level syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (level), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Helper Functions =====

Process called "string_to_ptr" that takes str as String returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "mov %0, %1\n"
        : "=r" (result)
        : "r" (str)
        :
    End Assembly
    
    Return result
End Process