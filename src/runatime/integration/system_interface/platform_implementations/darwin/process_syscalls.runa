Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/process_syscalls.runa
Darwin/macOS Process Management Syscalls

This module provides Darwin-specific process management syscall implementations,
including fork/vfork/posix_spawn for creation, execve for execution,
wait4/waitid for child management, and code signing operations unique to macOS.

Key features and capabilities:
- Process creation (fork, vfork, posix_spawn)
- Process execution (execve)
- Process termination and cleanup
- Child process management (wait4, waitid)
- Process priority and resource limits
- Code signing operations (csops)
- Grand Central Dispatch integration
- XPC services support
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Process Creation =====

Process called "sys_fork_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fork")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: fork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_vfork_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("vfork")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: vfork syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_posix_spawn_darwin" that takes pid as Integer, path as String, file_actions as Integer, attrp as Integer, argv as Integer, envp as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("posix_spawn")
    Let result be Integer
    Let path_ptr be string_to_ptr(path)
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: path
        "mov rdx, %3\n"           Note: file_actions
        "mov rcx, %4\n"           Note: attrp
        "mov r8, %5\n"            Note: argv
        "mov r9, %6\n"            Note: envp
        "mov rax, %7\n"           Note: posix_spawn syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (path_ptr), "r" (file_actions), "r" (attrp), "r" (argv), "r" (envp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r9", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Program Execution =====

Process called "sys_execve_darwin" that takes pathname as String, argv as Integer, envp as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("execve")
    Let result be Integer
    Let path_ptr be string_to_ptr(pathname)
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pathname
        "mov rsi, %2\n"           Note: argv
        "mov rdx, %3\n"           Note: envp
        "mov rax, %4\n"           Note: execve syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path_ptr), "r" (argv), "r" (envp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fexecve_darwin" that takes fd as Integer, argv as Integer, envp as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fexecve")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: argv
        "mov rdx, %3\n"           Note: envp
        "mov rax, %4\n"           Note: fexecve syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (argv), "r" (envp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Termination =====

Process called "sys_exit_darwin" that takes status as Integer returns Nothing:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("exit")
    
    Inline Assembly:
        "mov rdi, %0\n"           Note: exit status
        "mov rax, %1\n"           Note: exit syscall number from registry
        "syscall\n"
        :
        : "r" (status), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
End Process

Note: ===== Process Information =====

Process called "sys_getpid_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getpid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getppid_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getppid")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getppid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getpgrp_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpgrp")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: getpgrp syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Child Process Management =====

Process called "sys_wait4_darwin" that takes pid as Integer, status as Integer, options as Integer, rusage as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("wait4")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: status
        "mov rdx, %3\n"           Note: options
        "mov rcx, %4\n"           Note: rusage
        "mov rax, %5\n"           Note: wait4 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (status), "r" (options), "r" (rusage), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_waitid_darwin" that takes idtype as Integer, id as Integer, infop as Integer, options as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("waitid")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: idtype
        "mov rsi, %2\n"           Note: id
        "mov rdx, %3\n"           Note: infop
        "mov rcx, %4\n"           Note: options
        "mov rax, %5\n"           Note: waitid syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (idtype), "r" (id), "r" (infop), "r" (options), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Resource Limits =====

Process called "sys_getrlimit_darwin" that takes resource as Integer, rlp as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource
        "mov rsi, %2\n"           Note: rlp
        "mov rax, %3\n"           Note: getrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setrlimit_darwin" that takes resource as Integer, rlp as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setrlimit")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: resource
        "mov rsi, %2\n"           Note: rlp
        "mov rax, %3\n"           Note: setrlimit syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (resource), "r" (rlp), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Process Priority =====

Process called "sys_getpriority_darwin" that takes which as Integer, who as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getpriority")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which
        "mov rsi, %2\n"           Note: who
        "mov rax, %3\n"           Note: getpriority syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (who), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setpriority_darwin" that takes which as Integer, who as Integer, prio as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setpriority")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which
        "mov rsi, %2\n"           Note: who
        "mov rdx, %3\n"           Note: prio
        "mov rax, %4\n"           Note: setpriority syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (who), "r" (prio), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Code Signing Operations =====

Process called "sys_csops_darwin" that takes pid as Integer, ops as Integer, useraddr as Integer, usersize as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("csops")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: ops
        "mov rdx, %3\n"           Note: useraddr
        "mov rcx, %4\n"           Note: usersize
        "mov rax, %5\n"           Note: csops syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (ops), "r" (useraddr), "r" (usersize), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_csops_audittoken_darwin" that takes pid as Integer, ops as Integer, useraddr as Integer, usersize as Integer, audit_token as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("csops_audittoken")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: ops
        "mov rdx, %3\n"           Note: useraddr
        "mov rcx, %4\n"           Note: usersize
        "mov r8, %5\n"            Note: audit_token
        "mov rax, %6\n"           Note: csops_audittoken syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (ops), "r" (useraddr), "r" (usersize), "r" (audit_token), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Operations =====

Process called "sys_kill_darwin" that takes pid as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: sig
        "mov rax, %3\n"           Note: kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_killpg_darwin" that takes pgrp as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("killpg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pgrp
        "mov rsi, %2\n"           Note: sig
        "mov rax, %3\n"           Note: killpg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pgrp), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Helper Functions =====

Process called "string_to_ptr" that takes str as String returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "mov %0, %1\n"
        : "=r" (result)
        : "r" (str)
        :
    End Assembly
    
    Return result
End Process

Process called "extract_exit_code" that takes status as Integer returns Integer:
    Return (status >> 8) & 0xFF
End Process

Process called "extract_process_status" that takes status as Integer returns Integer:
    Return status & 0x7F
End Process