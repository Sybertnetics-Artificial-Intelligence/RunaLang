Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/signal_syscalls.runa
Darwin/macOS Signal Management Syscalls

This module provides Darwin-specific signal management syscall implementations,
including signal handling, signal delivery, signal masking, and signal-based
inter-process communication mechanisms.

Key features and capabilities:
- Signal handler registration and management
- Signal delivery and reception
- Signal masking and blocking
- Signal queuing and real-time signals
- Process signal control
- Signal-based IPC mechanisms
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Signal Handler Management =====

Process called "sys_signal_darwin" that takes signum as Integer, handler as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("signal")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signum
        "mov rsi, %2\n"           Note: handler
        "mov rax, %3\n"           Note: signal syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (signum), "r" (handler), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigaction_darwin" that takes signum as Integer, act as Integer, oldact as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigaction")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: signum
        "mov rsi, %2\n"           Note: act
        "mov rdx, %3\n"           Note: oldact
        "mov rax, %4\n"           Note: sigaction syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (signum), "r" (act), "r" (oldact), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Masking =====

Process called "sys_sigprocmask_darwin" that takes how as Integer, set as Integer, oldset as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigprocmask")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: how
        "mov rsi, %2\n"           Note: set
        "mov rdx, %3\n"           Note: oldset
        "mov rax, %4\n"           Note: sigprocmask syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (how), "r" (set), "r" (oldset), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigpending_darwin" that takes set as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigpending")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: set
        "mov rax, %2\n"           Note: sigpending syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigsuspend_darwin" that takes sigmask as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigsuspend")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: sigmask
        "mov rax, %2\n"           Note: sigsuspend syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (sigmask), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Delivery =====

Process called "sys_kill_darwin" that takes pid as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("kill")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: sig
        "mov rax, %3\n"           Note: kill syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_killpg_darwin" that takes pgrp as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("killpg")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pgrp
        "mov rsi, %2\n"           Note: sig
        "mov rax, %3\n"           Note: killpg syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pgrp), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigqueue_darwin" that takes pid as Integer, sig as Integer, value as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigqueue")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: pid
        "mov rsi, %2\n"           Note: sig
        "mov rdx, %3\n"           Note: value
        "mov rax, %4\n"           Note: sigqueue syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (pid), "r" (sig), "r" (value), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Timing =====

Process called "sys_sigwait_darwin" that takes set as Integer, sig as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigwait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: set
        "mov rsi, %2\n"           Note: sig
        "mov rax, %3\n"           Note: sigwait syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (sig), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigwaitinfo_darwin" that takes set as Integer, info as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigwaitinfo")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: set
        "mov rsi, %2\n"           Note: info
        "mov rax, %3\n"           Note: sigwaitinfo syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (info), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_sigtimedwait_darwin" that takes set as Integer, info as Integer, timeout as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigtimedwait")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: set
        "mov rsi, %2\n"           Note: info
        "mov rdx, %3\n"           Note: timeout
        "mov rax, %4\n"           Note: sigtimedwait syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (set), "r" (info), "r" (timeout), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Stack Management =====

Process called "sys_sigaltstack_darwin" that takes ss as Integer, old_ss as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigaltstack")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: ss
        "mov rsi, %2\n"           Note: old_ss
        "mov rax, %3\n"           Note: sigaltstack syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (ss), "r" (old_ss), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Signal Context =====

Process called "sys_sigreturn_darwin" that takes context as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("sigreturn")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: context
        "mov rax, %2\n"           Note: sigreturn syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (context), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Alarm and Timer Signals =====

Process called "sys_alarm_darwin" that takes seconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("alarm")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: seconds
        "mov rax, %2\n"           Note: alarm syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (seconds), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_pause_darwin" returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("pause")
    Let result be Integer
    
    Inline Assembly:
        "mov rax, %1\n"           Note: pause syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (syscall_num)
        : "rax", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process