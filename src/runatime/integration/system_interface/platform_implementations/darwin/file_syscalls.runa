Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/file_syscalls.runa
Darwin/macOS File System Syscalls

This module provides Darwin-specific file system syscall implementations,
including HFS+/APFS support, extended attributes, and macOS-specific features.

Key features and capabilities:
- HFS+/APFS file system support
- Extended attributes (xattr)
- Resource forks
- File flags (chflags, fchflags)
- ACLs (Access Control Lists)
- Directory operations
- File locking (flock)
- Asynchronous I/O
- Spotlight metadata
- Time Machine support
- Sandbox file operations
- Code signing attributes
- Quarantine attributes
- Finder metadata
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: ===== Core File Operations =====

Process called "sys_open" that takes path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("open")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: flags
        "mov rdx, %3\n"           Note: mode
        "mov rax, %4\n"           Note: open syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_openat" that takes dirfd as Integer, path as Pointer, flags as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("openat")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: path
        "mov rdx, %3\n"           Note: flags
        "mov r10, %4\n"           Note: mode
        "mov rax, %5\n"           Note: openat syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dirfd), "r" (path), "r" (flags), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_close" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("close")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: close syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_read" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("read")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: count
        "mov rax, %4\n"           Note: read syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_write" that takes fd as Integer, buf as Pointer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("write")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: count
        "mov rax, %4\n"           Note: write syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lseek" that takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lseek")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: offset
        "mov rdx, %3\n"           Note: whence
        "mov rax, %4\n"           Note: lseek syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (offset), "r" (whence), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Information =====

Process called "sys_stat" that takes path as Pointer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("stat64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: stat64 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (statbuf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstat" that takes fd as Integer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstat64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: fstat64 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (statbuf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_lstat" that takes path as Pointer, statbuf as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("lstat64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: stat buffer
        "mov rax, %3\n"           Note: lstat64 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (statbuf), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fstatat" that takes dirfd as Integer, path as Pointer, statbuf as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fstatat64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory file descriptor
        "mov rsi, %2\n"           Note: path
        "mov rdx, %3\n"           Note: stat buffer
        "mov r10, %4\n"           Note: flags
        "mov rax, %5\n"           Note: fstatat64 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (dirfd), "r" (path), "r" (statbuf), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Directory Operations =====

Process called "sys_mkdir" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("mkdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory path
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: mkdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rmdir" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rmdir")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: directory path
        "mov rax, %2\n"           Note: rmdir syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_getdirentries" that takes fd as Integer, buf as Pointer, nbytes as Integer, basep as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getdirentries64")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: number of bytes
        "mov r10, %4\n"           Note: base pointer
        "mov rax, %5\n"           Note: getdirentries64 syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (buf), "r" (nbytes), "r" (basep), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Manipulation =====

Process called "sys_unlink" that takes path as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("unlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rax, %2\n"           Note: unlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_rename" that takes oldpath as Pointer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("rename")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: old path
        "mov rsi, %2\n"           Note: new path
        "mov rax, %3\n"           Note: rename syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_link" that takes oldpath as Pointer, newpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("link")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: existing path
        "mov rsi, %2\n"           Note: new link path
        "mov rax, %3\n"           Note: link syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (oldpath), "r" (newpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_symlink" that takes target as Pointer, linkpath as Pointer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("symlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target path
        "mov rsi, %2\n"           Note: symbolic link path
        "mov rax, %3\n"           Note: symlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target), "r" (linkpath), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_readlink" that takes path as Pointer, buf as Pointer, bufsiz as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("readlink")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: symbolic link path
        "mov rsi, %2\n"           Note: buffer
        "mov rdx, %3\n"           Note: buffer size
        "mov rax, %4\n"           Note: readlink syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (buf), "r" (bufsiz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Permissions =====

Process called "sys_chmod" that takes path as Pointer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: chmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchmod" that takes fd as Integer, mode as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchmod")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: mode
        "mov rax, %3\n"           Note: fchmod syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (mode), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_chown" that takes path as Pointer, uid as Integer, gid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: user ID
        "mov rdx, %3\n"           Note: group ID
        "mov rax, %4\n"           Note: chown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (uid), "r" (gid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchown" that takes fd as Integer, uid as Integer, gid as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchown")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: user ID
        "mov rdx, %3\n"           Note: group ID
        "mov rax, %4\n"           Note: fchown syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (uid), "r" (gid), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Flags (Darwin-specific) =====

Process called "sys_chflags" that takes path as Pointer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("chflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file path
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: chflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fchflags" that takes fd as Integer, flags as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fchflags")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: flags
        "mov rax, %3\n"           Note: fchflags syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (flags), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== Extended Attributes (Darwin-specific) =====

Process called "sys_getxattr" that takes path as Pointer, name as Pointer, value as Pointer, size as Integer, position as Integer, options as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getxattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: attribute name
        "mov rdx, %3\n"           Note: value buffer
        "mov r10, %4\n"           Note: size
        "mov r8, %5\n"            Note: position
        "mov r9, %6\n"            Note: options
        "mov rax, %7\n"           Note: getxattr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (name), "r" (value), "r" (size), "r" (position), "r" (options), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_setxattr" that takes path as Pointer, name as Pointer, value as Pointer, size as Integer, position as Integer, options as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setxattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: attribute name
        "mov rdx, %3\n"           Note: value
        "mov r10, %4\n"           Note: size
        "mov r8, %5\n"            Note: position
        "mov r9, %6\n"            Note: options
        "mov rax, %7\n"           Note: setxattr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (name), "r" (value), "r" (size), "r" (position), "r" (options), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "r8", "r9", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_removexattr" that takes path as Pointer, name as Pointer, options as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("removexattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: attribute name
        "mov rdx, %3\n"           Note: options
        "mov rax, %4\n"           Note: removexattr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (name), "r" (options), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_listxattr" that takes path as Pointer, list as Pointer, size as Integer, options as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("listxattr")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: path
        "mov rsi, %2\n"           Note: list buffer
        "mov rdx, %3\n"           Note: size
        "mov r10, %4\n"           Note: options
        "mov rax, %5\n"           Note: listxattr syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (path), "r" (list), "r" (size), "r" (options), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "r10", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Locking =====

Process called "sys_flock" that takes fd as Integer, operation as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("flock")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rsi, %2\n"           Note: operation
        "mov rax, %3\n"           Note: flock syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (operation), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Note: ===== File Synchronization =====

Process called "sys_fsync" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fsync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: fsync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process

Process called "sys_fdatasync" that takes fd as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("fdatasync")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: file descriptor
        "mov rax, %2\n"           Note: fdatasync syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (fd), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result
End Process