Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/time_syscalls.runa
Darwin/macOS Time Management Syscalls

This module provides Darwin-specific time management syscall implementations,
including timers, clocks, and macOS-specific time features.

Key features and capabilities:
- System time operations
- High-resolution timers
- Monotonic clocks
- Timer creation and management
- Time zone operations
- Mach absolute time
- Dispatch timers
- Core Foundation timers
- Process and thread time
- Sleep and delays
- Interval timers
- Calendar operations
- NTP synchronization
- Time drift correction
- Power-aware timing
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: =====================================================================
Note: DARWIN TIME DATA STRUCTURES
Note: =====================================================================

Type called "DarwinTimespec":
    tv_sec as Integer                       Note: Seconds
    tv_nsec as Integer                      Note: Nanoseconds

Type called "DarwinTimeval":
    tv_sec as Integer                       Note: Seconds
    tv_usec as Integer                      Note: Microseconds

Type called "MachTimebaseInfo":
    numer as Integer                        Note: Numerator
    denom as Integer                        Note: Denominator

Type called "ITimerSpec":
    it_interval as DarwinTimespec           Note: Timer interval
    it_value as DarwinTimespec              Note: Initial expiration

Type called "ClockInfo":
    clock_id as Integer                     Note: Clock identifier
    resolution as Integer                   Note: Clock resolution
    monotonic as Boolean                    Note: Monotonic flag
    adjustable as Boolean                   Note: Adjustable flag

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================


Note: =====================================================================
Note: SYSTEM TIME
Note: =====================================================================

Process called "sys_gettimeofday" that takes tv as Integer, tz as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("gettimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"             Note: timeval pointer
        "mov rsi, %2\n"             Note: timezone pointer
        "mov rax, %3\n"
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_settimeofday" that takes tv as Integer, tz as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("settimeofday")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"             Note: timeval pointer
        "mov rsi, %2\n"             Note: timezone pointer
        "mov rax, %3\n"
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (tv), "r" (tz), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_gettime_darwin" that takes clock_id as Integer, tp as Integer returns Integer:
    Note: Get clock time using libc function
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: clock id
        "movq %2, %%rsi\n"             Note: timespec pointer
        
        "call _clock_gettime\n"        Note: Call libc function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (clock_id), "r" (tp)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_clock_settime_darwin" that takes clock_id as Integer, tp as Integer returns Integer:
    Note: Set clock time using libc function
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: clock id
        "movq %2, %%rsi\n"             Note: timespec pointer
        
        "call _clock_settime\n"        Note: Call libc function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (clock_id), "r" (tp)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: MACH ABSOLUTE TIME
Note: =====================================================================

Process called "sys_mach_absolute_time" returns Integer:
    Let ticks be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "call _mach_absolute_time\n"   Note: Call Mach function
        "movq %%rax, %0\n"             Note: ticks
        
        "popq %%rbp\n"
        
        : "=r" (ticks)
        :
        : "rax", "memory"
    End Assembly
    
    Return ticks

Process called "sys_mach_timebase_info" that takes info as Integer returns Integer:
    Note: Get timebase info using Mach function
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: info pointer
        
        "call _mach_timebase_info\n"   Note: Call Mach function
        "movl %%eax, %0\n"             Note: kern_return_t
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (info)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_mach_wait_until" that takes deadline as Integer returns Integer:
    Note: Wait until time using Mach function
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: deadline
        
        "call _mach_wait_until\n"      Note: Call Mach function
        "movl %%eax, %0\n"             Note: kern_return_t
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (deadline)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: SLEEP AND DELAYS
Note: =====================================================================

Process called "sys_nanosleep" that takes req as Integer, rem as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("nanosleep")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"             Note: request timespec
        "mov rsi, %2\n"             Note: remaining timespec
        "mov rax, %3\n"
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (req), "r" (rem), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_usleep_darwin" that takes useconds as Integer returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: microseconds
        
        "call _usleep\n"               Note: Call libc function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (useconds)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_sleep_darwin" that takes seconds as Integer returns Integer:
    Let unslept be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: seconds
        
        "call _sleep\n"                Note: Call libc function
        "movl %%eax, %0\n"             Note: unslept time
        
        "popq %%rbp\n"
        
        : "=r" (unslept)
        : "r" (seconds)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return unslept

Note: =====================================================================
Note: INTERVAL TIMERS
Note: =====================================================================

Process called "sys_setitimer_darwin" that takes which as Integer, value as Integer, ovalue as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("setitimer")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: which timer
        "mov rsi, %2\n"           Note: new value
        "mov rdx, %3\n"           Note: old value
        "mov rax, %4\n"           Note: setitimer syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (which), "r" (value), "r" (ovalue), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_getitimer_darwin" that takes which as Integer, value as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getitimer")
    Let result be Integer
    
    Inline Assembly:
        "movl %1, %%edi\n"             Note: which timer
        "movq %2, %%rsi\n"             Note: value pointer
        "movq %3, %%rax\n"             Note: getitimer syscall number from registry
        "syscall\n"
        "movl %%eax, %0\n"             Note: result
        : "=r" (result)
        : "r" (which), "r" (value), "r" (syscall_num)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_alarm_darwin" that takes seconds as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("alarm")
    Let prev_alarm be Integer
    
    Inline Assembly:
        "movl %1, %%edi\n"             Note: seconds
        "movq %2, %%rax\n"             Note: alarm syscall number from registry
        "syscall\n"
        "movl %%eax, %0\n"             Note: previous alarm
        : "=r" (prev_alarm)
        : "r" (seconds), "r" (syscall_num)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return prev_alarm

Note: =====================================================================
Note: POSIX TIMERS
Note: =====================================================================

Process called "sys_timer_create_darwin" that takes clockid as Integer, evp as Integer, timerid as Integer returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: clock id
        "movq %2, %%rsi\n"             Note: sigevent pointer
        "movq %3, %%rdx\n"             Note: timer id pointer
        
        "call _timer_create\n"         Note: Call POSIX function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (clockid), "r" (evp), "r" (timerid)
        : "rdi", "rsi", "rdx", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_settime_darwin" that takes timerid as Integer, flags as Integer, value as Integer, ovalue as Integer returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: timer id
        "movl %2, %%esi\n"             Note: flags
        "movq %3, %%rdx\n"             Note: new value
        "movq %4, %%rcx\n"             Note: old value
        
        "call _timer_settime\n"        Note: Call POSIX function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (timerid), "r" (flags), "r" (value), "r" (ovalue)
        : "rdi", "rsi", "rdx", "rcx", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_gettime_darwin" that takes timerid as Integer, value as Integer returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: timer id
        "movq %2, %%rsi\n"             Note: value pointer
        
        "call _timer_gettime\n"        Note: Call POSIX function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (timerid), "r" (value)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_timer_delete_darwin" that takes timerid as Integer returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: timer id
        
        "call _timer_delete\n"         Note: Call POSIX function
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (timerid)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: PROCESS TIME
Note: =====================================================================

Process called "sys_times_darwin" that takes buf as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("times")
    Let clock_ticks be Integer
    
    Inline Assembly:
        "movq %1, %%rdi\n"             Note: tms buffer
        "movq %2, %%rax\n"             Note: times syscall number from registry
        "syscall\n"
        "movq %%rax, %0\n"             Note: clock ticks
        : "=r" (clock_ticks)
        : "r" (buf), "r" (syscall_num)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return clock_ticks

Process called "sys_getrusage_darwin" that takes who as Integer, usage as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("getrusage")
    Let result be Integer
    
    Inline Assembly:
        "movl %1, %%edi\n"             Note: who (RUSAGE_SELF, etc.)
        "movq %2, %%rsi\n"             Note: rusage struct pointer
        "movq %3, %%rax\n"             Note: getrusage syscall number from registry
        "syscall\n"
        "movl %%eax, %0\n"             Note: result
        : "=r" (result)
        : "r" (who), "r" (usage), "r" (syscall_num)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: TIME ZONE
Note: =====================================================================

Process called "sys_gettimezonename_darwin" that takes name as String, len as Integer returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        Note: Get timezone from tzname global
        "movq _tzname(%%rip), %%rdi\n" Note: Get tzname[0]
        
        Note: Copy to user buffer
        "movq %1, %%rsi\n"             Note: destination buffer
        "movq %2, %%rdx\n"             Note: max length
        "call _strncpy\n"              Note: Copy timezone name
        
        "movl $0, %0\n"                Note: Success
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (name), "r" (len)
        : "rdi", "rsi", "rdx", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_settimezonename_darwin" that takes name as String returns Integer:
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq $TZ, %%rdi\n"            Note: Variable name "TZ"
        "movq %1, %%rsi\n"             Note: timezone name
        "movl $1, %%edx\n"             Note: Overwrite flag
        
        "call _setenv\n"               Note: Set TZ environment variable
        
        "call _tzset\n"                Note: Update timezone
        
        "movl $0, %0\n"                Note: Success
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (name)
        : "rdi", "rsi", "rdx", "rax", "memory"
    End Assembly
    
    Return result