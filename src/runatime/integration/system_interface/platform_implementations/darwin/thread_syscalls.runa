Note:
runa/src/runatime/integration/system_interface/platform_implementations/darwin/thread_syscalls.runa
Darwin/macOS Thread Management Syscalls

This module provides Darwin-specific thread management syscall implementations,
including pthread operations and macOS-specific threading features.

Key features and capabilities:
- Thread creation (pthread_create)
- Thread termination
- Thread synchronization
- Thread-local storage
- Thread priorities
- Quality of Service (QoS) classes
- Dispatch queues integration
- Thread affinity
- Work queues
- Thread scheduling
- Mach threads
- Thread policies
- Thread attributes
- Thread cancellation
- Thread-specific data
:End Note

Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_x64" as DarwinX64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/darwin_arm64" as DarwinARM64Platform
Import "../../../../../../../compiler/backend/syscalls/platforms/platform_interface" as PlatformInterface
Import "../../../../../../../compiler/frontend/primitives/types/compiler_internals" as Internals

Note: =====================================================================
Note: DARWIN THREAD DATA STRUCTURES
Note: =====================================================================

Type called "DarwinThreadInfo":
    thread_id as Integer                    Note: Thread identifier
    pthread_id as Integer                   Note: POSIX thread ID
    mach_port as Integer                    Note: Mach thread port
    qos_class as String                     Note: QoS class
    priority as Integer                     Note: Thread priority
    affinity_tag as Integer                 Note: CPU affinity
    state as String                         Note: Running, blocked, etc.

Type called "QualityOfService":
    qos_class as Integer                    Note: QOS_CLASS_*
    relative_priority as Integer            Note: Priority offset
    override as Boolean                     Note: Override flag

Type called "ThreadAttributes":
    detach_state as Integer                 Note: Joinable or detached
    sched_policy as Integer                 Note: Scheduling policy
    sched_param as Integer                  Note: Scheduling parameters
    inheritsched as Integer                 Note: Inherit scheduling
    scope as Integer                        Note: Contention scope
    stack_size as Integer                   Note: Stack size
    stack_addr as Integer                   Note: Stack address
    guard_size as Integer                   Note: Guard page size

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================


Note: =====================================================================
Note: THREAD CREATION AND MANAGEMENT
Note: =====================================================================

Process called "sys_pthread_create_darwin" that takes thread as Integer, attr as Integer, start_routine as Integer, arg as Integer returns Integer:
    Note: Create new thread using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: thread pointer
        "movq %2, %%rsi\n"             Note: attributes
        "movq %3, %%rdx\n"             Note: start routine
        "movq %4, %%rcx\n"             Note: argument
        
        "call _pthread_create\n"       Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (thread), "r" (attr), "r" (start_routine), "r" (arg)
        : "rdi", "rsi", "rdx", "rcx", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_exit_darwin" that takes value_ptr as Integer returns Nothing:
    Note: Terminate calling thread using pthread library
    
    Inline Assembly:
        "movq %0, %%rdi\n"             Note: exit value
        "call _pthread_exit\n"         Note: Call pthread library
        
        Note: This never returns
        
        :
        : "r" (value_ptr)
        : "rdi", "memory"
    End Assembly

Process called "sys_pthread_join_darwin" that takes thread as Integer, value_ptr as Integer returns Integer:
    Note: Wait for thread termination using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: thread id
        "movq %2, %%rsi\n"             Note: value pointer
        
        "call _pthread_join\n"         Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (thread), "r" (value_ptr)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_detach_darwin" that takes thread as Integer returns Integer:
    Note: Detach thread using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: thread id
        
        "call _pthread_detach\n"       Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (thread)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: THREAD SYNCHRONIZATION
Note: =====================================================================

Process called "sys_pthread_mutex_init_darwin" that takes mutex as Integer, attr as Integer returns Integer:
    Note: Initialize mutex using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: mutex pointer
        "movq %2, %%rsi\n"             Note: attributes
        
        "call _pthread_mutex_init\n"   Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (mutex), "r" (attr)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_mutex_lock_darwin" that takes mutex as Integer returns Integer:
    Note: Lock mutex using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: mutex pointer
        
        "call _pthread_mutex_lock\n"   Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (mutex)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_mutex_unlock_darwin" that takes mutex as Integer returns Integer:
    Note: Unlock mutex using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: mutex pointer
        
        "call _pthread_mutex_unlock\n" Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (mutex)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_cond_wait_darwin" that takes cond as Integer, mutex as Integer returns Integer:
    Note: Wait on condition using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: condition variable
        "movq %2, %%rsi\n"             Note: mutex
        
        "call _pthread_cond_wait\n"    Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (cond), "r" (mutex)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: QUALITY OF SERVICE
Note: =====================================================================

Process called "sys_pthread_set_qos_class_self_np" that takes qos_class as Integer, relative_priority as Integer returns Integer:
    Note: Set thread QoS class using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: QoS class
        "movl %2, %%esi\n"             Note: relative priority
        
        "call _pthread_set_qos_class_self_np\n" Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (qos_class), "r" (relative_priority)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_get_qos_class_np" that takes thread as Integer, qos_class as Integer, relative_priority as Integer returns Integer:
    Note: Get thread QoS class using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: thread
        "movq %2, %%rsi\n"             Note: QoS class pointer
        "movq %3, %%rdx\n"             Note: relative priority pointer
        
        "call _pthread_get_qos_class_np\n" Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (thread), "r" (qos_class), "r" (relative_priority)
        : "rdi", "rsi", "rdx", "rax", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: THREAD-LOCAL STORAGE
Note: =====================================================================

Process called "sys_pthread_key_create_darwin" that takes key as Integer, destructor as Integer returns Integer:
    Note: Create TLS key using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movq %1, %%rdi\n"             Note: key pointer
        "movq %2, %%rsi\n"             Note: destructor function
        
        "call _pthread_key_create\n"   Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (key), "r" (destructor)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_setspecific_darwin" that takes key as Integer, value as Integer returns Integer:
    Note: Set TLS value using pthread library
    
    Let result be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: key
        "movq %2, %%rsi\n"             Note: value
        
        "call _pthread_setspecific\n"  Note: Call pthread library
        "movl %%eax, %0\n"             Note: result
        
        "popq %%rbp\n"
        
        : "=r" (result)
        : "r" (key), "r" (value)
        : "rdi", "rsi", "rax", "memory"
    End Assembly
    
    Return result

Process called "sys_pthread_getspecific_darwin" that takes key as Integer returns Integer:
    Note: Get TLS value using pthread library
    
    Let value be Integer
    
    Inline Assembly:
        "pushq %%rbp\n"
        "movq %%rsp, %%rbp\n"
        
        "movl %1, %%edi\n"             Note: key
        
        "call _pthread_getspecific\n"  Note: Call pthread library
        "movq %%rax, %0\n"             Note: value
        
        "popq %%rbp\n"
        
        : "=r" (value)
        : "r" (key)
        : "rdi", "rax", "memory"
    End Assembly
    
    Return value

Note: =====================================================================
Note: MACH THREAD OPERATIONS
Note: =====================================================================

Process called "sys_thread_create" that takes parent_task as Integer, child_thread as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thread_create")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"             Note: parent task
        "mov rsi, %2\n"             Note: child thread pointer
        "mov rax, %3\n"
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (parent_task), "r" (child_thread), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_thread_terminate" that takes target_thread as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thread_terminate")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"             Note: target thread
        "mov rax, %2\n"
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_thread), "r" (syscall_num)
        : "rax", "rdi", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_thread_get_state" that takes target_thread as Integer, flavor as Integer, state as Integer, state_count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thread_get_state")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"             Note: target thread
        "mov rsi, %2\n"             Note: flavor
        "mov rdx, %3\n"             Note: state buffer
        "mov rcx, %4\n"             Note: state count pointer
        "mov rax, %5\n"
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_thread), "r" (flavor), "r" (state), "r" (state_count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_thread_set_state_darwin" that takes target_thread as Integer, flavor as Integer, state as Integer, state_count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thread_set_state")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: target thread
        "mov rsi, %2\n"           Note: flavor
        "mov rdx, %3\n"           Note: state buffer
        "mov rcx, %4\n"           Note: state count
        "mov rax, %5\n"           Note: thread_set_state syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (target_thread), "r" (flavor), "r" (state), "r" (state_count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Note: =====================================================================
Note: THREAD SCHEDULING
Note: =====================================================================

Process called "sys_thread_policy_set_darwin" that takes thread as Integer, flavor as Integer, policy_info as Integer, count as Integer returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thread_policy_set")
    Let result be Integer
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread
        "mov rsi, %2\n"           Note: flavor
        "mov rdx, %3\n"           Note: policy info
        "mov rcx, %4\n"           Note: count
        "mov rax, %5\n"           Note: thread_policy_set syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (thread), "r" (flavor), "r" (policy_info), "r" (count), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r11", "memory"
    End Assembly
    
    Return result

Process called "sys_thread_policy_get_darwin" that takes thread as Integer, flavor as Integer, policy_info as Integer, count as Integer, get_default as Boolean returns Integer:
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("thread_policy_get")
    Let result be Integer
    Let default_flag be 0
    If get_default:
        Set default_flag to 1
    End If
    
    Inline Assembly:
        "mov rdi, %1\n"           Note: thread
        "mov rsi, %2\n"           Note: flavor
        "mov rdx, %3\n"           Note: policy info buffer
        "mov rcx, %4\n"           Note: count pointer
        "mov r8, %5\n"            Note: get default flag
        "mov rax, %6\n"           Note: thread_policy_get syscall number from registry
        "syscall\n"
        "mov %0, rax\n"
        : "=r" (result)
        : "r" (thread), "r" (flavor), "r" (policy_info), "r" (count), "r" (default_flag), "r" (syscall_num)
        : "rax", "rdi", "rsi", "rdx", "rcx", "r8", "r11", "memory"
    End Assembly
    
    Return result