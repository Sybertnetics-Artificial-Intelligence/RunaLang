Note: Error Mapping System - Unified cross-platform error handling
Note: Maps errno values and platform-specific errors to Runa runtime errors

@Reasoning
The runtime system needs unified error handling across all platforms. Different
operating systems use different errno values and error representations. This
module provides a standardized error interface that abstracts platform differences
while preserving detailed error information for debugging and user feedback.
@End Reasoning

@Implementation
- Platform-independent error type definitions
- Errno value mapping for Linux, macOS, Windows, BSD variants
- Platform-specific error code translation
- Unified error interface for all runtime components
- Performance-optimized error lookup tables
- Thread-safe error state management
@End Implementation

Import "../../frontend/diagnostics/errors.runa" as CompilerErrors
Import "syscall_external.runa" as Syscall
Import "platform_detector.runa" as Platform

Note: =====================================================================
Note: UNIFIED ERROR TYPES
Note: =====================================================================

@Security_Scope
Error types must not leak sensitive system information while providing
enough detail for proper error handling and debugging.
@End Security_Scope

Type called "RuntimeError":
    error_code as Integer                    Note: Standard Runa error code
    errno_value as Integer                   Note: Platform errno value
    platform_specific_code as Integer       Note: OS-specific error code
    category as ErrorCategory
    message as String
    syscall_name as String                  Note: Which syscall failed
    platform as String                     Note: Which platform this occurred on
End Type

Type ErrorCategory is:
    | SystemError        Note: OS-level system errors
    | PermissionError     Note: Access denied, privilege issues
    | ResourceError       Note: Out of memory, file handles, etc.
    | NetworkError        Note: Network-related failures
    | FileSystemError     Note: File/directory operation failures
    | ProcessError        Note: Process management failures
    | ThreadError         Note: Thread/synchronization failures
    | SignalError         Note: Signal handling failures
    | MemoryError         Note: Memory management failures
    | IOError            Note: Input/output operation failures
    | TimeoutError       Note: Operation timed out
    | InterruptedError   Note: Operation was interrupted
    | NotFoundError      Note: Resource not found
    | ExistsError        Note: Resource already exists
    | InvalidError       Note: Invalid arguments or state
    | UnsupportedError   Note: Operation not supported on platform
    | InternalError      Note: Runtime internal error
End Type

Note: =====================================================================
Note: ERRNO VALUE DEFINITIONS
Note: =====================================================================

@Implementation
Standard errno values that are consistent across most POSIX systems.
These form the basis for our unified error mapping system.
@End Implementation

Note: Standard POSIX errno values
Let RUNA_EPERM be 1           Note: Operation not permitted
Let RUNA_ENOENT be 2          Note: No such file or directory
Let RUNA_ESRCH be 3           Note: No such process
Let RUNA_EINTR be 4           Note: Interrupted system call
Let RUNA_EIO be 5             Note: Input/output error
Let RUNA_ENXIO be 6           Note: No such device or address
Let RUNA_E2BIG be 7           Note: Argument list too long
Let RUNA_ENOEXEC be 8         Note: Exec format error
Let RUNA_EBADF be 9           Note: Bad file descriptor
Let RUNA_ECHILD be 10         Note: No child processes
Let RUNA_EAGAIN be 11         Note: Resource temporarily unavailable
Let RUNA_ENOMEM be 12         Note: Cannot allocate memory
Let RUNA_EACCES be 13         Note: Permission denied
Let RUNA_EFAULT be 14         Note: Bad address
Let RUNA_ENOTBLK be 15        Note: Block device required
Let RUNA_EBUSY be 16          Note: Device or resource busy
Let RUNA_EEXIST be 17         Note: File exists
Let RUNA_EXDEV be 18          Note: Invalid cross-device link
Let RUNA_ENODEV be 19         Note: No such device
Let RUNA_ENOTDIR be 20        Note: Not a directory
Let RUNA_EISDIR be 21         Note: Is a directory
Let RUNA_EINVAL be 22         Note: Invalid argument
Let RUNA_ENFILE be 23         Note: Too many open files in system
Let RUNA_EMFILE be 24         Note: Too many open files
Let RUNA_ENOTTY be 25         Note: Inappropriate ioctl for device
Let RUNA_ETXTBSY be 26        Note: Text file busy
Let RUNA_EFBIG be 27          Note: File too large
Let RUNA_ENOSPC be 28         Note: No space left on device
Let RUNA_ESPIPE be 29         Note: Illegal seek
Let RUNA_EROFS be 30          Note: Read-only file system
Let RUNA_EMLINK be 31         Note: Too many links
Let RUNA_EPIPE be 32          Note: Broken pipe
Let RUNA_EDOM be 33           Note: Numerical argument out of domain
Let RUNA_ERANGE be 34         Note: Numerical result out of range

Note: Extended errno values (vary by platform)
Let RUNA_EDEADLK be 35        Note: Resource deadlock avoided
Let RUNA_ENAMETOOLONG be 36   Note: File name too long
Let RUNA_ENOLCK be 37         Note: No locks available
Let RUNA_ENOSYS be 38         Note: Function not implemented
Let RUNA_ENOTEMPTY be 39      Note: Directory not empty
Let RUNA_ELOOP be 40          Note: Too many symbolic links
Let RUNA_ENOMSG be 42         Note: No message of desired type
Let RUNA_EIDRM be 43          Note: Identifier removed
Let RUNA_ENOSTR be 60         Note: Device not a stream
Let RUNA_ENODATA be 61        Note: No data available
Let RUNA_ETIME be 62          Note: Timer expired
Let RUNA_ENOSR be 63          Note: Out of streams resources
Let RUNA_ENOLINK be 67        Note: Link has been severed
Let RUNA_EPROTO be 71         Note: Protocol error
Let RUNA_EMULTIHOP be 72      Note: Multihop attempted
Let RUNA_EBADMSG be 74        Note: Bad message
Let RUNA_EOVERFLOW be 75      Note: Value too large for defined data type
Let RUNA_EILSEQ be 84         Note: Invalid or incomplete multibyte sequence
Let RUNA_EUSERS be 87         Note: Too many users
Let RUNA_ENOTSOCK be 88       Note: Socket operation on non-socket
Let RUNA_EDESTADDRREQ be 89   Note: Destination address required
Let RUNA_EMSGSIZE be 90       Note: Message too long
Let RUNA_EPROTOTYPE be 91     Note: Protocol wrong type for socket
Let RUNA_ENOPROTOOPT be 92    Note: Protocol not available
Let RUNA_EPROTONOSUPPORT be 93 Note: Protocol not supported
Let RUNA_ESOCKTNOSUPPORT be 94 Note: Socket type not supported
Let RUNA_EOPNOTSUPP be 95     Note: Operation not supported
Let RUNA_EPFNOSUPPORT be 96   Note: Protocol family not supported
Let RUNA_EAFNOSUPPORT be 97   Note: Address family not supported
Let RUNA_EADDRINUSE be 98     Note: Address already in use
Let RUNA_EADDRNOTAVAIL be 99  Note: Cannot assign requested address
Let RUNA_ENETDOWN be 100      Note: Network is down
Let RUNA_ENETUNREACH be 101   Note: Network is unreachable
Let RUNA_ENETRESET be 102     Note: Network dropped connection on reset
Let RUNA_ECONNABORTED be 103  Note: Software caused connection abort
Let RUNA_ECONNRESET be 104    Note: Connection reset by peer
Let RUNA_ENOBUFS be 105       Note: No buffer space available
Let RUNA_EISCONN be 106       Note: Transport endpoint is already connected
Let RUNA_ENOTCONN be 107      Note: Transport endpoint is not connected
Let RUNA_ESHUTDOWN be 108     Note: Cannot send after transport endpoint shutdown
Let RUNA_ETOOMANYREFS be 109  Note: Too many references
Let RUNA_ETIMEDOUT be 110     Note: Connection timed out
Let RUNA_ECONNREFUSED be 111  Note: Connection refused
Let RUNA_EHOSTDOWN be 112     Note: Host is down
Let RUNA_EHOSTUNREACH be 113  Note: No route to host
Let RUNA_EALREADY be 114      Note: Operation already in progress
Let RUNA_EINPROGRESS be 115   Note: Operation now in progress
Let RUNA_ESTALE be 116        Note: Stale file handle
Let RUNA_ECANCELED be 125     Note: Operation canceled

Note: =====================================================================
Note: PLATFORM-SPECIFIC ERROR MAPPINGS
Note: =====================================================================

Type called "PlatformErrorMapping":
    platform_errno as Integer
    runa_errno as Integer
    error_category as ErrorCategory
    description as String
End Type

@Performance_Hints
Error mapping tables are optimized for fast lookup using platform-specific
switch statements rather than hash maps to minimize allocation overhead
during error handling paths.
@End Performance_Hints

Process called "map_linux_errno_to_runa" that takes linux_errno as Integer returns Integer:
    Note: Map Linux errno to unified Runa errno
    
    @Implementation
    Linux errno values are generally POSIX-compliant, so most map directly.
    Some Linux-specific extensions require special handling.
    @End Implementation
    
    Note: Direct mapping for standard POSIX values
    If linux_errno is equal to 1: Return RUNA_EPERM
    Otherwise linux_errno is equal to 2: Return RUNA_ENOENT
    Otherwise linux_errno is equal to 3: Return RUNA_ESRCH
    Otherwise linux_errno is equal to 4: Return RUNA_EINTR
    Otherwise linux_errno is equal to 5: Return RUNA_EIO
    Otherwise linux_errno is equal to 6: Return RUNA_ENXIO
    Otherwise linux_errno is equal to 7: Return RUNA_E2BIG
    Otherwise linux_errno is equal to 8: Return RUNA_ENOEXEC
    Otherwise linux_errno is equal to 9: Return RUNA_EBADF
    Otherwise linux_errno is equal to 10: Return RUNA_ECHILD
    Otherwise linux_errno is equal to 11: Return RUNA_EAGAIN
    Otherwise linux_errno is equal to 12: Return RUNA_ENOMEM
    Otherwise linux_errno is equal to 13: Return RUNA_EACCES
    Otherwise linux_errno is equal to 14: Return RUNA_EFAULT
    Otherwise linux_errno is equal to 15: Return RUNA_ENOTBLK
    Otherwise linux_errno is equal to 16: Return RUNA_EBUSY
    Otherwise linux_errno is equal to 17: Return RUNA_EEXIST
    Otherwise linux_errno is equal to 18: Return RUNA_EXDEV
    Otherwise linux_errno is equal to 19: Return RUNA_ENODEV
    Otherwise linux_errno is equal to 20: Return RUNA_ENOTDIR
    Otherwise linux_errno is equal to 21: Return RUNA_EISDIR
    Otherwise linux_errno is equal to 22: Return RUNA_EINVAL
    Otherwise linux_errno is equal to 23: Return RUNA_ENFILE
    Otherwise linux_errno is equal to 24: Return RUNA_EMFILE
    Otherwise linux_errno is equal to 25: Return RUNA_ENOTTY
    Otherwise linux_errno is equal to 26: Return RUNA_ETXTBSY
    Otherwise linux_errno is equal to 27: Return RUNA_EFBIG
    Otherwise linux_errno is equal to 28: Return RUNA_ENOSPC
    Otherwise linux_errno is equal to 29: Return RUNA_ESPIPE
    Otherwise linux_errno is equal to 30: Return RUNA_EROFS
    Otherwise linux_errno is equal to 31: Return RUNA_EMLINK
    Otherwise linux_errno is equal to 32: Return RUNA_EPIPE
    Otherwise linux_errno is equal to 33: Return RUNA_EDOM
    Otherwise linux_errno is equal to 34: Return RUNA_ERANGE
    Otherwise linux_errno is equal to 35: Return RUNA_EDEADLK
    Otherwise linux_errno is equal to 36: Return RUNA_ENAMETOOLONG
    Otherwise linux_errno is equal to 37: Return RUNA_ENOLCK
    Otherwise linux_errno is equal to 38: Return RUNA_ENOSYS
    Otherwise linux_errno is equal to 39: Return RUNA_ENOTEMPTY
    Otherwise linux_errno is equal to 40: Return RUNA_ELOOP
    Otherwise linux_errno is equal to 42: Return RUNA_ENOMSG
    Otherwise linux_errno is equal to 43: Return RUNA_EIDRM
    Otherwise linux_errno is equal to 60: Return RUNA_ENOSTR
    Otherwise linux_errno is equal to 61: Return RUNA_ENODATA
    Otherwise linux_errno is equal to 62: Return RUNA_ETIME
    Otherwise linux_errno is equal to 63: Return RUNA_ENOSR
    Otherwise linux_errno is equal to 67: Return RUNA_ENOLINK
    Otherwise linux_errno is equal to 71: Return RUNA_EPROTO
    Otherwise linux_errno is equal to 72: Return RUNA_EMULTIHOP
    Otherwise linux_errno is equal to 74: Return RUNA_EBADMSG
    Otherwise linux_errno is equal to 75: Return RUNA_EOVERFLOW
    Otherwise linux_errno is equal to 84: Return RUNA_EILSEQ
    Otherwise linux_errno is equal to 87: Return RUNA_EUSERS
    Otherwise linux_errno is equal to 88: Return RUNA_ENOTSOCK
    Otherwise linux_errno is equal to 89: Return RUNA_EDESTADDRREQ
    Otherwise linux_errno is equal to 90: Return RUNA_EMSGSIZE
    Otherwise linux_errno is equal to 91: Return RUNA_EPROTOTYPE
    Otherwise linux_errno is equal to 92: Return RUNA_ENOPROTOOPT
    Otherwise linux_errno is equal to 93: Return RUNA_EPROTONOSUPPORT
    Otherwise linux_errno is equal to 94: Return RUNA_ESOCKTNOSUPPORT
    Otherwise linux_errno is equal to 95: Return RUNA_EOPNOTSUPP
    Otherwise linux_errno is equal to 96: Return RUNA_EPFNOSUPPORT
    Otherwise linux_errno is equal to 97: Return RUNA_EAFNOSUPPORT
    Otherwise linux_errno is equal to 98: Return RUNA_EADDRINUSE
    Otherwise linux_errno is equal to 99: Return RUNA_EADDRNOTAVAIL
    Otherwise linux_errno is equal to 100: Return RUNA_ENETDOWN
    Otherwise linux_errno is equal to 101: Return RUNA_ENETUNREACH
    Otherwise linux_errno is equal to 102: Return RUNA_ENETRESET
    Otherwise linux_errno is equal to 103: Return RUNA_ECONNABORTED
    Otherwise linux_errno is equal to 104: Return RUNA_ECONNRESET
    Otherwise linux_errno is equal to 105: Return RUNA_ENOBUFS
    Otherwise linux_errno is equal to 106: Return RUNA_EISCONN
    Otherwise linux_errno is equal to 107: Return RUNA_ENOTCONN
    Otherwise linux_errno is equal to 108: Return RUNA_ESHUTDOWN
    Otherwise linux_errno is equal to 109: Return RUNA_ETOOMANYREFS
    Otherwise linux_errno is equal to 110: Return RUNA_ETIMEDOUT
    Otherwise linux_errno is equal to 111: Return RUNA_ECONNREFUSED
    Otherwise linux_errno is equal to 112: Return RUNA_EHOSTDOWN
    Otherwise linux_errno is equal to 113: Return RUNA_EHOSTUNREACH
    Otherwise linux_errno is equal to 114: Return RUNA_EALREADY
    Otherwise linux_errno is equal to 115: Return RUNA_EINPROGRESS
    Otherwise linux_errno is equal to 116: Return RUNA_ESTALE
    Otherwise linux_errno is equal to 125: Return RUNA_ECANCELED
    Otherwise: Return linux_errno  Note: Unknown errno, return as-is
    End If
End Process

Process called "map_darwin_errno_to_runa" that takes darwin_errno as Integer returns Integer:
    Note: Map macOS/Darwin errno to unified Runa errno
    
    @Implementation
    Darwin errno values are mostly POSIX-compliant but have some differences
    particularly in the higher-numbered error codes.
    @End Implementation
    
    Note: Standard POSIX mappings (same as Linux for most values 1-34)
    If darwin_errno is equal to 1: Return RUNA_EPERM
    Otherwise darwin_errno is equal to 2: Return RUNA_ENOENT
    Otherwise darwin_errno is equal to 3: Return RUNA_ESRCH
    Otherwise darwin_errno is equal to 4: Return RUNA_EINTR
    Otherwise darwin_errno is equal to 5: Return RUNA_EIO
    Otherwise darwin_errno is equal to 6: Return RUNA_ENXIO
    Otherwise darwin_errno is equal to 7: Return RUNA_E2BIG
    Otherwise darwin_errno is equal to 8: Return RUNA_ENOEXEC
    Otherwise darwin_errno is equal to 9: Return RUNA_EBADF
    Otherwise darwin_errno is equal to 10: Return RUNA_ECHILD
    Otherwise darwin_errno is equal to 11: Return RUNA_EDEADLK  Note: Different from Linux
    Otherwise darwin_errno is equal to 12: Return RUNA_ENOMEM
    Otherwise darwin_errno is equal to 13: Return RUNA_EACCES
    Otherwise darwin_errno is equal to 14: Return RUNA_EFAULT
    Otherwise darwin_errno is equal to 15: Return RUNA_ENOTBLK
    Otherwise darwin_errno is equal to 16: Return RUNA_EBUSY
    Otherwise darwin_errno is equal to 17: Return RUNA_EEXIST
    Otherwise darwin_errno is equal to 18: Return RUNA_EXDEV
    Otherwise darwin_errno is equal to 19: Return RUNA_ENODEV
    Otherwise darwin_errno is equal to 20: Return RUNA_ENOTDIR
    Otherwise darwin_errno is equal to 21: Return RUNA_EISDIR
    Otherwise darwin_errno is equal to 22: Return RUNA_EINVAL
    Otherwise darwin_errno is equal to 23: Return RUNA_ENFILE
    Otherwise darwin_errno is equal to 24: Return RUNA_EMFILE
    Otherwise darwin_errno is equal to 25: Return RUNA_ENOTTY
    Otherwise darwin_errno is equal to 26: Return RUNA_ETXTBSY
    Otherwise darwin_errno is equal to 27: Return RUNA_EFBIG
    Otherwise darwin_errno is equal to 28: Return RUNA_ENOSPC
    Otherwise darwin_errno is equal to 29: Return RUNA_ESPIPE
    Otherwise darwin_errno is equal to 30: Return RUNA_EROFS
    Otherwise darwin_errno is equal to 31: Return RUNA_EMLINK
    Otherwise darwin_errno is equal to 32: Return RUNA_EPIPE
    Otherwise darwin_errno is equal to 33: Return RUNA_EDOM
    Otherwise darwin_errno is equal to 34: Return RUNA_ERANGE
    
    Note: Darwin-specific mappings for higher values
    Otherwise darwin_errno is equal to 35: Return RUNA_EAGAIN      Note: EWOULDBLOCK
    Otherwise darwin_errno is equal to 36: Return RUNA_EINPROGRESS
    Otherwise darwin_errno is equal to 37: Return RUNA_EALREADY
    Otherwise darwin_errno is equal to 38: Return RUNA_ENOTSOCK
    Otherwise darwin_errno is equal to 39: Return RUNA_EDESTADDRREQ
    Otherwise darwin_errno is equal to 40: Return RUNA_EMSGSIZE
    Otherwise darwin_errno is equal to 41: Return RUNA_EPROTOTYPE
    Otherwise darwin_errno is equal to 42: Return RUNA_ENOPROTOOPT
    Otherwise darwin_errno is equal to 43: Return RUNA_EPROTONOSUPPORT
    Otherwise darwin_errno is equal to 44: Return RUNA_ESOCKTNOSUPPORT
    Otherwise darwin_errno is equal to 45: Return RUNA_EOPNOTSUPP
    Otherwise darwin_errno is equal to 46: Return RUNA_EPFNOSUPPORT
    Otherwise darwin_errno is equal to 47: Return RUNA_EAFNOSUPPORT
    Otherwise darwin_errno is equal to 48: Return RUNA_EADDRINUSE
    Otherwise darwin_errno is equal to 49: Return RUNA_EADDRNOTAVAIL
    Otherwise darwin_errno is equal to 50: Return RUNA_ENETDOWN
    Otherwise darwin_errno is equal to 51: Return RUNA_ENETUNREACH
    Otherwise darwin_errno is equal to 52: Return RUNA_ENETRESET
    Otherwise darwin_errno is equal to 53: Return RUNA_ECONNABORTED
    Otherwise darwin_errno is equal to 54: Return RUNA_ECONNRESET
    Otherwise darwin_errno is equal to 55: Return RUNA_ENOBUFS
    Otherwise darwin_errno is equal to 56: Return RUNA_EISCONN
    Otherwise darwin_errno is equal to 57: Return RUNA_ENOTCONN
    Otherwise darwin_errno is equal to 58: Return RUNA_ESHUTDOWN
    Otherwise darwin_errno is equal to 59: Return RUNA_ETOOMANYREFS
    Otherwise darwin_errno is equal to 60: Return RUNA_ETIMEDOUT
    Otherwise darwin_errno is equal to 61: Return RUNA_ECONNREFUSED
    Otherwise darwin_errno is equal to 62: Return RUNA_ELOOP
    Otherwise darwin_errno is equal to 63: Return RUNA_ENAMETOOLONG
    Otherwise darwin_errno is equal to 64: Return RUNA_EHOSTDOWN
    Otherwise darwin_errno is equal to 65: Return RUNA_EHOSTUNREACH
    Otherwise darwin_errno is equal to 66: Return RUNA_ENOTEMPTY
    Otherwise darwin_errno is equal to 67: Return RUNA_EPROTO       Note: Different from Linux
    Otherwise darwin_errno is equal to 68: Return RUNA_EUSERS
    Otherwise darwin_errno is equal to 69: Return RUNA_ENOSR       Note: Disk quota exceeded
    Otherwise darwin_errno is equal to 70: Return RUNA_ESTALE
    Otherwise darwin_errno is equal to 71: Return RUNA_ENOLINK     Note: Remote object
    Otherwise darwin_errno is equal to 72: Return RUNA_ENODATA     Note: No message available
    Otherwise darwin_errno is equal to 89: Return RUNA_ECANCELED
    Otherwise: Return darwin_errno  Note: Unknown errno, return as-is
    End If
End Process

Process called "map_windows_error_to_runa" that takes windows_error as Integer returns Integer:
    Note: Map Windows error codes to unified Runa errno
    
    @Implementation
    Windows does not use POSIX errno values. Instead it uses GetLastError()
    values. This function maps common Windows errors to equivalent POSIX errno.
    @End Implementation
    
    Note: Windows error codes to POSIX errno mapping
    If windows_error is equal to 0: Return 0                 Note: ERROR_SUCCESS
    Otherwise windows_error is equal to 2: Return RUNA_ENOENT    Note: ERROR_FILE_NOT_FOUND
    Otherwise windows_error is equal to 3: Return RUNA_ENOENT    Note: ERROR_PATH_NOT_FOUND
    Otherwise windows_error is equal to 4: Return RUNA_EMFILE    Note: ERROR_TOO_MANY_OPEN_FILES
    Otherwise windows_error is equal to 5: Return RUNA_EACCES    Note: ERROR_ACCESS_DENIED
    Otherwise windows_error is equal to 6: Return RUNA_EBADF     Note: ERROR_INVALID_HANDLE
    Otherwise windows_error is equal to 8: Return RUNA_ENOMEM    Note: ERROR_NOT_ENOUGH_MEMORY
    Otherwise windows_error is equal to 14: Return RUNA_ENOMEM   Note: ERROR_OUTOFMEMORY
    Otherwise windows_error is equal to 15: Return RUNA_ENODEV   Note: ERROR_INVALID_DRIVE
    Otherwise windows_error is equal to 17: Return RUNA_EXDEV    Note: ERROR_NOT_SAME_DEVICE
    Otherwise windows_error is equal to 18: Return RUNA_ENOENT   Note: ERROR_NO_MORE_FILES
    Otherwise windows_error is equal to 19: Return RUNA_EROFS    Note: ERROR_WRITE_PROTECT
    Otherwise windows_error is equal to 21: Return RUNA_EIO      Note: ERROR_NOT_READY
    Otherwise windows_error is equal to 23: Return RUNA_EIO      Note: ERROR_CRC
    Otherwise windows_error is equal to 25: Return RUNA_EIO      Note: ERROR_SEEK
    Otherwise windows_error is equal to 27: Return RUNA_EIO      Note: ERROR_SECTOR_NOT_FOUND
    Otherwise windows_error is equal to 29: Return RUNA_EIO      Note: ERROR_WRITE_FAULT
    Otherwise windows_error is equal to 30: Return RUNA_EIO      Note: ERROR_READ_FAULT
    Otherwise windows_error is equal to 32: Return RUNA_EBUSY    Note: ERROR_SHARING_VIOLATION
    Otherwise windows_error is equal to 33: Return RUNA_EACCES   Note: ERROR_LOCK_VIOLATION
    Otherwise windows_error is equal to 36: Return RUNA_EBUSY    Note: ERROR_SHARING_BUFFER_EXCEEDED
    Otherwise windows_error is equal to 39: Return RUNA_ENOSPC   Note: ERROR_HANDLE_DISK_FULL
    Otherwise windows_error is equal to 50: Return RUNA_EOPNOTSUPP Note: ERROR_NOT_SUPPORTED
    Otherwise windows_error is equal to 53: Return RUNA_ENOENT   Note: ERROR_BAD_NETPATH
    Otherwise windows_error is equal to 54: Return RUNA_EBUSY    Note: ERROR_NETWORK_BUSY
    Otherwise windows_error is equal to 55: Return RUNA_ENODEV   Note: ERROR_DEV_NOT_EXIST
    Otherwise windows_error is equal to 64: Return RUNA_ENOENT   Note: ERROR_NETNAME_DELETED
    Otherwise windows_error is equal to 65: Return RUNA_EACCES   Note: ERROR_NETWORK_ACCESS_DENIED
    Otherwise windows_error is equal to 67: Return RUNA_ENOENT   Note: ERROR_BAD_NET_NAME
    Otherwise windows_error is equal to 80: Return RUNA_EEXIST   Note: ERROR_FILE_EXISTS
    Otherwise windows_error is equal to 82: Return RUNA_EXDEV    Note: ERROR_CANNOT_MAKE
    Otherwise windows_error is equal to 87: Return RUNA_EINVAL   Note: ERROR_INVALID_PARAMETER
    Otherwise windows_error is equal to 108: Return RUNA_EPIPE   Note: ERROR_BROKEN_PIPE
    Otherwise windows_error is equal to 109: Return RUNA_EPIPE   Note: ERROR_OPEN_FAILED
    Otherwise windows_error is equal to 110: Return RUNA_EIO     Note: ERROR_OPEN_FAILED
    Otherwise windows_error is equal to 111: Return RUNA_ENOSPC  Note: ERROR_BUFFER_OVERFLOW
    Otherwise windows_error is equal to 112: Return RUNA_ENOSPC  Note: ERROR_DISK_FULL
    Otherwise windows_error is equal to 114: Return RUNA_EINVAL  Note: ERROR_INVALID_TARGET_HANDLE
    Otherwise windows_error is equal to 120: Return RUNA_ENOTDIR Note: ERROR_CALL_NOT_IMPLEMENTED
    Otherwise windows_error is equal to 123: Return RUNA_EINVAL  Note: ERROR_INVALID_NAME
    Otherwise windows_error is equal to 124: Return RUNA_EINVAL  Note: ERROR_INVALID_LEVEL
    Otherwise windows_error is equal to 125: Return RUNA_EIO     Note: ERROR_NO_VOLUME_LABEL
    Otherwise windows_error is equal to 126: Return RUNA_ENOENT  Note: ERROR_MOD_NOT_FOUND
    Otherwise windows_error is equal to 127: Return RUNA_ENOENT  Note: ERROR_PROC_NOT_FOUND
    Otherwise windows_error is equal to 145: Return RUNA_ENOTEMPTY Note: ERROR_DIR_NOT_EMPTY
    Otherwise windows_error is equal to 158: Return RUNA_ENOENT  Note: ERROR_NOT_LOCKED
    Otherwise windows_error is equal to 161: Return RUNA_EINVAL  Note: ERROR_BAD_PATHNAME
    Otherwise windows_error is equal to 183: Return RUNA_EEXIST  Note: ERROR_ALREADY_EXISTS
    Otherwise windows_error is equal to 206: Return RUNA_ENAMETOOLONG Note: ERROR_FILENAME_EXCED_RANGE
    Otherwise windows_error is equal to 1816: Return RUNA_ENOENT Note: ERROR_NOT_ENOUGH_QUOTA
    
    Note: Network error codes
    Otherwise windows_error is equal to 10004: Return RUNA_EINTR     Note: WSAEINTR
    Otherwise windows_error is equal to 10009: Return RUNA_EBADF     Note: WSAEBADF
    Otherwise windows_error is equal to 10013: Return RUNA_EACCES    Note: WSAEACCES
    Otherwise windows_error is equal to 10014: Return RUNA_EFAULT    Note: WSAEFAULT
    Otherwise windows_error is equal to 10022: Return RUNA_EINVAL    Note: WSAEINVAL
    Otherwise windows_error is equal to 10024: Return RUNA_EMFILE    Note: WSAEMFILE
    Otherwise windows_error is equal to 10035: Return RUNA_EAGAIN    Note: WSAEWOULDBLOCK
    Otherwise windows_error is equal to 10036: Return RUNA_EINPROGRESS Note: WSAEINPROGRESS
    Otherwise windows_error is equal to 10037: Return RUNA_EALREADY  Note: WSAEALREADY
    Otherwise windows_error is equal to 10038: Return RUNA_ENOTSOCK  Note: WSAENOTSOCK
    Otherwise windows_error is equal to 10039: Return RUNA_EDESTADDRREQ Note: WSAEDESTADDRREQ
    Otherwise windows_error is equal to 10040: Return RUNA_EMSGSIZE  Note: WSAEMSGSIZE
    Otherwise windows_error is equal to 10041: Return RUNA_EPROTOTYPE Note: WSAEPROTOTYPE
    Otherwise windows_error is equal to 10042: Return RUNA_ENOPROTOOPT Note: WSAENOPROTOOPT
    Otherwise windows_error is equal to 10043: Return RUNA_EPROTONOSUPPORT Note: WSAEPROTONOSUPPORT
    Otherwise windows_error is equal to 10044: Return RUNA_ESOCKTNOSUPPORT Note: WSAESOCKTNOSUPPORT
    Otherwise windows_error is equal to 10045: Return RUNA_EOPNOTSUPP Note: WSAEOPNOTSUPP
    Otherwise windows_error is equal to 10046: Return RUNA_EPFNOSUPPORT Note: WSAEPFNOSUPPORT
    Otherwise windows_error is equal to 10047: Return RUNA_EAFNOSUPPORT Note: WSAEAFNOSUPPORT
    Otherwise windows_error is equal to 10048: Return RUNA_EADDRINUSE Note: WSAEADDRINUSE
    Otherwise windows_error is equal to 10049: Return RUNA_EADDRNOTAVAIL Note: WSAEADDRNOTAVAIL
    Otherwise windows_error is equal to 10050: Return RUNA_ENETDOWN  Note: WSAENETDOWN
    Otherwise windows_error is equal to 10051: Return RUNA_ENETUNREACH Note: WSAENETUNREACH
    Otherwise windows_error is equal to 10052: Return RUNA_ENETRESET Note: WSAENETRESET
    Otherwise windows_error is equal to 10053: Return RUNA_ECONNABORTED Note: WSAECONNABORTED
    Otherwise windows_error is equal to 10054: Return RUNA_ECONNRESET Note: WSAECONNRESET
    Otherwise windows_error is equal to 10055: Return RUNA_ENOBUFS   Note: WSAENOBUFS
    Otherwise windows_error is equal to 10056: Return RUNA_EISCONN   Note: WSAEISCONN
    Otherwise windows_error is equal to 10057: Return RUNA_ENOTCONN  Note: WSAENOTCONN
    Otherwise windows_error is equal to 10058: Return RUNA_ESHUTDOWN Note: WSAESHUTDOWN
    Otherwise windows_error is equal to 10059: Return RUNA_ETOOMANYREFS Note: WSAETOOMANYREFS
    Otherwise windows_error is equal to 10060: Return RUNA_ETIMEDOUT Note: WSAETIMEDOUT
    Otherwise windows_error is equal to 10061: Return RUNA_ECONNREFUSED Note: WSAECONNREFUSED
    Otherwise windows_error is equal to 10062: Return RUNA_ELOOP     Note: WSAELOOP
    Otherwise windows_error is equal to 10063: Return RUNA_ENAMETOOLONG Note: WSAENAMETOOLONG
    Otherwise windows_error is equal to 10064: Return RUNA_EHOSTDOWN Note: WSAEHOSTDOWN
    Otherwise windows_error is equal to 10065: Return RUNA_EHOSTUNREACH Note: WSAEHOSTUNREACH
    Otherwise windows_error is equal to 10066: Return RUNA_ENOTEMPTY Note: WSAENOTEMPTY
    Otherwise windows_error is equal to 10067: Return RUNA_EUSERS    Note: WSAEPROCLIM
    Otherwise windows_error is equal to 10091: Return RUNA_ENOSR     Note: WSASYSNOTREADY
    Otherwise windows_error is equal to 10092: Return RUNA_EINVAL    Note: WSAVERNOTSUPPORTED
    Otherwise windows_error is equal to 10093: Return RUNA_ENOSR     Note: WSANOTINITIALISED
    Otherwise windows_error is equal to 10101: Return RUNA_ESHUTDOWN Note: WSAEDISCON
    Otherwise windows_error is equal to 11001: Return RUNA_EHOSTUNREACH Note: WSAHOST_NOT_FOUND
    Otherwise: Return RUNA_EIO  Note: Unknown Windows error, map to generic I/O error
    End If
End Process

Process called "map_bsd_errno_to_runa" that takes bsd_errno as Integer returns Integer:
    Note: Map BSD errno to unified Runa errno
    
    @Implementation
    BSD systems (FreeBSD, OpenBSD, NetBSD) generally follow POSIX errno conventions
    with some platform-specific variations. This handles the common cases.
    @End Implementation
    
    Note: Most BSD errno values are POSIX-compliant
    If bsd_errno is equal to 1: Return RUNA_EPERM
    Otherwise bsd_errno is equal to 2: Return RUNA_ENOENT
    Otherwise bsd_errno is equal to 3: Return RUNA_ESRCH
    Otherwise bsd_errno is equal to 4: Return RUNA_EINTR
    Otherwise bsd_errno is equal to 5: Return RUNA_EIO
    Otherwise bsd_errno is equal to 6: Return RUNA_ENXIO
    Otherwise bsd_errno is equal to 7: Return RUNA_E2BIG
    Otherwise bsd_errno is equal to 8: Return RUNA_ENOEXEC
    Otherwise bsd_errno is equal to 9: Return RUNA_EBADF
    Otherwise bsd_errno is equal to 10: Return RUNA_ECHILD
    Otherwise bsd_errno is equal to 11: Return RUNA_EDEADLK
    Otherwise bsd_errno is equal to 12: Return RUNA_ENOMEM
    Otherwise bsd_errno is equal to 13: Return RUNA_EACCES
    Otherwise bsd_errno is equal to 14: Return RUNA_EFAULT
    Otherwise bsd_errno is equal to 15: Return RUNA_ENOTBLK
    Otherwise bsd_errno is equal to 16: Return RUNA_EBUSY
    Otherwise bsd_errno is equal to 17: Return RUNA_EEXIST
    Otherwise bsd_errno is equal to 18: Return RUNA_EXDEV
    Otherwise bsd_errno is equal to 19: Return RUNA_ENODEV
    Otherwise bsd_errno is equal to 20: Return RUNA_ENOTDIR
    Otherwise bsd_errno is equal to 21: Return RUNA_EISDIR
    Otherwise bsd_errno is equal to 22: Return RUNA_EINVAL
    Otherwise bsd_errno is equal to 23: Return RUNA_ENFILE
    Otherwise bsd_errno is equal to 24: Return RUNA_EMFILE
    Otherwise bsd_errno is equal to 25: Return RUNA_ENOTTY
    Otherwise bsd_errno is equal to 26: Return RUNA_ETXTBSY
    Otherwise bsd_errno is equal to 27: Return RUNA_EFBIG
    Otherwise bsd_errno is equal to 28: Return RUNA_ENOSPC
    Otherwise bsd_errno is equal to 29: Return RUNA_ESPIPE
    Otherwise bsd_errno is equal to 30: Return RUNA_EROFS
    Otherwise bsd_errno is equal to 31: Return RUNA_EMLINK
    Otherwise bsd_errno is equal to 32: Return RUNA_EPIPE
    Otherwise bsd_errno is equal to 33: Return RUNA_EDOM
    Otherwise bsd_errno is equal to 34: Return RUNA_ERANGE
    Otherwise bsd_errno is equal to 35: Return RUNA_EAGAIN
    Otherwise bsd_errno is equal to 36: Return RUNA_EINPROGRESS
    Otherwise bsd_errno is equal to 37: Return RUNA_EALREADY
    Otherwise bsd_errno is equal to 38: Return RUNA_ENOTSOCK
    Otherwise bsd_errno is equal to 39: Return RUNA_EDESTADDRREQ
    Otherwise bsd_errno is equal to 40: Return RUNA_EMSGSIZE
    Otherwise bsd_errno is equal to 41: Return RUNA_EPROTOTYPE
    Otherwise bsd_errno is equal to 42: Return RUNA_ENOPROTOOPT
    Otherwise bsd_errno is equal to 43: Return RUNA_EPROTONOSUPPORT
    Otherwise bsd_errno is equal to 44: Return RUNA_ESOCKTNOSUPPORT
    Otherwise bsd_errno is equal to 45: Return RUNA_EOPNOTSUPP
    Otherwise bsd_errno is equal to 46: Return RUNA_EPFNOSUPPORT
    Otherwise bsd_errno is equal to 47: Return RUNA_EAFNOSUPPORT
    Otherwise bsd_errno is equal to 48: Return RUNA_EADDRINUSE
    Otherwise bsd_errno is equal to 49: Return RUNA_EADDRNOTAVAIL
    Otherwise bsd_errno is equal to 50: Return RUNA_ENETDOWN
    Otherwise bsd_errno is equal to 51: Return RUNA_ENETUNREACH
    Otherwise bsd_errno is equal to 52: Return RUNA_ENETRESET
    Otherwise bsd_errno is equal to 53: Return RUNA_ECONNABORTED
    Otherwise bsd_errno is equal to 54: Return RUNA_ECONNRESET
    Otherwise bsd_errno is equal to 55: Return RUNA_ENOBUFS
    Otherwise bsd_errno is equal to 56: Return RUNA_EISCONN
    Otherwise bsd_errno is equal to 57: Return RUNA_ENOTCONN
    Otherwise bsd_errno is equal to 58: Return RUNA_ESHUTDOWN
    Otherwise bsd_errno is equal to 59: Return RUNA_ETOOMANYREFS
    Otherwise bsd_errno is equal to 60: Return RUNA_ETIMEDOUT
    Otherwise bsd_errno is equal to 61: Return RUNA_ECONNREFUSED
    Otherwise bsd_errno is equal to 62: Return RUNA_ELOOP
    Otherwise bsd_errno is equal to 63: Return RUNA_ENAMETOOLONG
    Otherwise bsd_errno is equal to 64: Return RUNA_EHOSTDOWN
    Otherwise bsd_errno is equal to 65: Return RUNA_EHOSTUNREACH
    Otherwise bsd_errno is equal to 66: Return RUNA_ENOTEMPTY
    Otherwise bsd_errno is equal to 67: Return RUNA_EUSERS
    Otherwise bsd_errno is equal to 68: Return RUNA_ENOSR
    Otherwise bsd_errno is equal to 69: Return RUNA_ENOLCK
    Otherwise bsd_errno is equal to 70: Return RUNA_ENOSYS
    Otherwise bsd_errno is equal to 78: Return RUNA_ENOSYS
    Otherwise bsd_errno is equal to 79: Return RUNA_ENOMSG
    Otherwise bsd_errno is equal to 80: Return RUNA_EIDRM
    Otherwise bsd_errno is equal to 85: Return RUNA_ECANCELED
    Otherwise bsd_errno is equal to 86: Return RUNA_EILSEQ
    Otherwise bsd_errno is equal to 87: Return RUNA_ENOSR
    Otherwise bsd_errno is equal to 88: Return RUNA_ENOSTR
    Otherwise bsd_errno is equal to 89: Return RUNA_EPROTO
    Otherwise bsd_errno is equal to 90: Return RUNA_EBADMSG
    Otherwise bsd_errno is equal to 91: Return RUNA_ENODATA
    Otherwise bsd_errno is equal to 92: Return RUNA_ENOLINK
    Otherwise bsd_errno is equal to 93: Return RUNA_EMULTIHOP
    Otherwise bsd_errno is equal to 94: Return RUNA_EOVERFLOW
    Otherwise: Return bsd_errno  Note: Unknown errno, return as-is
    End If
End Process

Note: =====================================================================
Note: ERRNO CATEGORY MAPPING
Note: =====================================================================

Process called "get_error_category_from_errno" that takes errno_value as Integer returns ErrorCategory:
    Note: Determine error category from errno value
    
    @Implementation
    Groups errno values into logical categories to help with error handling
    and user-facing error messages.
    @End Implementation
    
    If errno_value is equal to RUNA_EPERM: Return PermissionError
    Otherwise errno_value is equal to RUNA_EACCES: Return PermissionError
    Otherwise errno_value is equal to RUNA_ENOENT: Return NotFoundError
    Otherwise errno_value is equal to RUNA_ESRCH: Return NotFoundError
    Otherwise errno_value is equal to RUNA_ENODEV: Return NotFoundError
    Otherwise errno_value is equal to RUNA_ENXIO: Return NotFoundError
    Otherwise errno_value is equal to RUNA_EEXIST: Return ExistsError
    Otherwise errno_value is equal to RUNA_EISDIR: Return FileSystemError
    Otherwise errno_value is equal to RUNA_ENOTDIR: Return FileSystemError
    Otherwise errno_value is equal to RUNA_EROFS: Return FileSystemError
    Otherwise errno_value is equal to RUNA_ENOSPC: Return FileSystemError
    Otherwise errno_value is equal to RUNA_EFBIG: Return FileSystemError
    Otherwise errno_value is equal to RUNA_ENAMETOOLONG: Return FileSystemError
    Otherwise errno_value is equal to RUNA_ENOTEMPTY: Return FileSystemError
    Otherwise errno_value is equal to RUNA_ELOOP: Return FileSystemError
    Otherwise errno_value is equal to RUNA_ENOMEM: Return MemoryError
    Otherwise errno_value is equal to RUNA_EBADF: Return IOError
    Otherwise errno_value is equal to RUNA_EIO: Return IOError
    Otherwise errno_value is equal to RUNA_EPIPE: Return IOError
    Otherwise errno_value is equal to RUNA_ESPIPE: Return IOError
    Otherwise errno_value is equal to RUNA_EMFILE: Return ResourceError
    Otherwise errno_value is equal to RUNA_ENFILE: Return ResourceError
    Otherwise errno_value is equal to RUNA_EBUSY: Return ResourceError
    Otherwise errno_value is equal to RUNA_ENOBUFS: Return ResourceError
    Otherwise errno_value is equal to RUNA_EUSERS: Return ResourceError
    Otherwise errno_value is equal to RUNA_EINTR: Return InterruptedError
    Otherwise errno_value is equal to RUNA_ECANCELED: Return InterruptedError
    Otherwise errno_value is equal to RUNA_ETIMEDOUT: Return TimeoutError
    Otherwise errno_value is equal to RUNA_EINVAL: Return InvalidError
    Otherwise errno_value is equal to RUNA_EDOM: Return InvalidError
    Otherwise errno_value is equal to RUNA_ERANGE: Return InvalidError
    Otherwise errno_value is equal to RUNA_E2BIG: Return InvalidError
    Otherwise errno_value is equal to RUNA_ENOTTY: Return InvalidError
    Otherwise errno_value is equal to RUNA_EFAULT: Return InvalidError
    Otherwise errno_value is equal to RUNA_EILSEQ: Return InvalidError
    Otherwise errno_value is equal to RUNA_ENOSYS: Return UnsupportedError
    Otherwise errno_value is equal to RUNA_EOPNOTSUPP: Return UnsupportedError
    Otherwise errno_value is equal to RUNA_EPROTONOSUPPORT: Return UnsupportedError
    Otherwise errno_value is equal to RUNA_ESOCKTNOSUPPORT: Return UnsupportedError
    Otherwise errno_value is equal to RUNA_EPFNOSUPPORT: Return UnsupportedError
    Otherwise errno_value is equal to RUNA_EAFNOSUPPORT: Return UnsupportedError
    Otherwise errno_value is equal to RUNA_ECHILD: Return ProcessError
    Otherwise errno_value is equal to RUNA_ENOEXEC: Return ProcessError
    Otherwise errno_value is equal to RUNA_ETXTBSY: Return ProcessError
    Otherwise errno_value is equal to RUNA_EDEADLK: Return ThreadError
    Otherwise errno_value is equal to RUNA_ENOLCK: Return ThreadError
    Otherwise errno_value is equal to RUNA_EAGAIN: Return ResourceError  Note: Try again
    Otherwise errno_value is equal to RUNA_ENOTSOCK: Return NetworkError
    Otherwise errno_value is equal to RUNA_EDESTADDRREQ: Return NetworkError
    Otherwise errno_value is equal to RUNA_EMSGSIZE: Return NetworkError
    Otherwise errno_value is equal to RUNA_EPROTOTYPE: Return NetworkError
    Otherwise errno_value is equal to RUNA_ENOPROTOOPT: Return NetworkError
    Otherwise errno_value is equal to RUNA_EADDRINUSE: Return NetworkError
    Otherwise errno_value is equal to RUNA_EADDRNOTAVAIL: Return NetworkError
    Otherwise errno_value is equal to RUNA_ENETDOWN: Return NetworkError
    Otherwise errno_value is equal to RUNA_ENETUNREACH: Return NetworkError
    Otherwise errno_value is equal to RUNA_ENETRESET: Return NetworkError
    Otherwise errno_value is equal to RUNA_ECONNABORTED: Return NetworkError
    Otherwise errno_value is equal to RUNA_ECONNRESET: Return NetworkError
    Otherwise errno_value is equal to RUNA_EISCONN: Return NetworkError
    Otherwise errno_value is equal to RUNA_ENOTCONN: Return NetworkError
    Otherwise errno_value is equal to RUNA_ESHUTDOWN: Return NetworkError
    Otherwise errno_value is equal to RUNA_ETOOMANYREFS: Return NetworkError
    Otherwise errno_value is equal to RUNA_ECONNREFUSED: Return NetworkError
    Otherwise errno_value is equal to RUNA_EHOSTDOWN: Return NetworkError
    Otherwise errno_value is equal to RUNA_EHOSTUNREACH: Return NetworkError
    Otherwise errno_value is equal to RUNA_EALREADY: Return NetworkError
    Otherwise errno_value is equal to RUNA_EINPROGRESS: Return NetworkError
    Otherwise: Return SystemError  Note: Generic system error for unknown values
    End If
End Process

Note: =====================================================================
Note: ERROR MESSAGE GENERATION
Note: =====================================================================

Process called "get_error_message_from_errno" that takes errno_value as Integer returns String:
    Note: Get human-readable error message from errno value
    
    @Implementation
    Provides standard POSIX error messages for each errno value.
    These messages are consistent across platforms.
    @End Implementation
    
    If errno_value is equal to 0: Return "Success"
    Otherwise errno_value is equal to RUNA_EPERM: Return "Operation not permitted"
    Otherwise errno_value is equal to RUNA_ENOENT: Return "No such file or directory"
    Otherwise errno_value is equal to RUNA_ESRCH: Return "No such process"
    Otherwise errno_value is equal to RUNA_EINTR: Return "Interrupted system call"
    Otherwise errno_value is equal to RUNA_EIO: Return "Input/output error"
    Otherwise errno_value is equal to RUNA_ENXIO: Return "No such device or address"
    Otherwise errno_value is equal to RUNA_E2BIG: Return "Argument list too long"
    Otherwise errno_value is equal to RUNA_ENOEXEC: Return "Exec format error"
    Otherwise errno_value is equal to RUNA_EBADF: Return "Bad file descriptor"
    Otherwise errno_value is equal to RUNA_ECHILD: Return "No child processes"
    Otherwise errno_value is equal to RUNA_EAGAIN: Return "Resource temporarily unavailable"
    Otherwise errno_value is equal to RUNA_ENOMEM: Return "Cannot allocate memory"
    Otherwise errno_value is equal to RUNA_EACCES: Return "Permission denied"
    Otherwise errno_value is equal to RUNA_EFAULT: Return "Bad address"
    Otherwise errno_value is equal to RUNA_ENOTBLK: Return "Block device required"
    Otherwise errno_value is equal to RUNA_EBUSY: Return "Device or resource busy"
    Otherwise errno_value is equal to RUNA_EEXIST: Return "File exists"
    Otherwise errno_value is equal to RUNA_EXDEV: Return "Invalid cross-device link"
    Otherwise errno_value is equal to RUNA_ENODEV: Return "No such device"
    Otherwise errno_value is equal to RUNA_ENOTDIR: Return "Not a directory"
    Otherwise errno_value is equal to RUNA_EISDIR: Return "Is a directory"
    Otherwise errno_value is equal to RUNA_EINVAL: Return "Invalid argument"
    Otherwise errno_value is equal to RUNA_ENFILE: Return "Too many open files in system"
    Otherwise errno_value is equal to RUNA_EMFILE: Return "Too many open files"
    Otherwise errno_value is equal to RUNA_ENOTTY: Return "Inappropriate ioctl for device"
    Otherwise errno_value is equal to RUNA_ETXTBSY: Return "Text file busy"
    Otherwise errno_value is equal to RUNA_EFBIG: Return "File too large"
    Otherwise errno_value is equal to RUNA_ENOSPC: Return "No space left on device"
    Otherwise errno_value is equal to RUNA_ESPIPE: Return "Illegal seek"
    Otherwise errno_value is equal to RUNA_EROFS: Return "Read-only file system"
    Otherwise errno_value is equal to RUNA_EMLINK: Return "Too many links"
    Otherwise errno_value is equal to RUNA_EPIPE: Return "Broken pipe"
    Otherwise errno_value is equal to RUNA_EDOM: Return "Numerical argument out of domain"
    Otherwise errno_value is equal to RUNA_ERANGE: Return "Numerical result out of range"
    Otherwise errno_value is equal to RUNA_EDEADLK: Return "Resource deadlock avoided"
    Otherwise errno_value is equal to RUNA_ENAMETOOLONG: Return "File name too long"
    Otherwise errno_value is equal to RUNA_ENOLCK: Return "No locks available"
    Otherwise errno_value is equal to RUNA_ENOSYS: Return "Function not implemented"
    Otherwise errno_value is equal to RUNA_ENOTEMPTY: Return "Directory not empty"
    Otherwise errno_value is equal to RUNA_ELOOP: Return "Too many levels of symbolic links"
    Otherwise errno_value is equal to RUNA_ENOMSG: Return "No message of desired type"
    Otherwise errno_value is equal to RUNA_EIDRM: Return "Identifier removed"
    Otherwise errno_value is equal to RUNA_ENOSTR: Return "Device not a stream"
    Otherwise errno_value is equal to RUNA_ENODATA: Return "No data available"
    Otherwise errno_value is equal to RUNA_ETIME: Return "Timer expired"
    Otherwise errno_value is equal to RUNA_ENOSR: Return "Out of streams resources"
    Otherwise errno_value is equal to RUNA_ENOLINK: Return "Link has been severed"
    Otherwise errno_value is equal to RUNA_EPROTO: Return "Protocol error"
    Otherwise errno_value is equal to RUNA_EMULTIHOP: Return "Multihop attempted"
    Otherwise errno_value is equal to RUNA_EBADMSG: Return "Bad message"
    Otherwise errno_value is equal to RUNA_EOVERFLOW: Return "Value too large for defined data type"
    Otherwise errno_value is equal to RUNA_EILSEQ: Return "Invalid or incomplete multibyte or wide character"
    Otherwise errno_value is equal to RUNA_EUSERS: Return "Too many users"
    Otherwise errno_value is equal to RUNA_ENOTSOCK: Return "Socket operation on non-socket"
    Otherwise errno_value is equal to RUNA_EDESTADDRREQ: Return "Destination address required"
    Otherwise errno_value is equal to RUNA_EMSGSIZE: Return "Message too long"
    Otherwise errno_value is equal to RUNA_EPROTOTYPE: Return "Protocol wrong type for socket"
    Otherwise errno_value is equal to RUNA_ENOPROTOOPT: Return "Protocol not available"
    Otherwise errno_value is equal to RUNA_EPROTONOSUPPORT: Return "Protocol not supported"
    Otherwise errno_value is equal to RUNA_ESOCKTNOSUPPORT: Return "Socket type not supported"
    Otherwise errno_value is equal to RUNA_EOPNOTSUPP: Return "Operation not supported"
    Otherwise errno_value is equal to RUNA_EPFNOSUPPORT: Return "Protocol family not supported"
    Otherwise errno_value is equal to RUNA_EAFNOSUPPORT: Return "Address family not supported by protocol"
    Otherwise errno_value is equal to RUNA_EADDRINUSE: Return "Address already in use"
    Otherwise errno_value is equal to RUNA_EADDRNOTAVAIL: Return "Cannot assign requested address"
    Otherwise errno_value is equal to RUNA_ENETDOWN: Return "Network is down"
    Otherwise errno_value is equal to RUNA_ENETUNREACH: Return "Network is unreachable"
    Otherwise errno_value is equal to RUNA_ENETRESET: Return "Network dropped connection on reset"
    Otherwise errno_value is equal to RUNA_ECONNABORTED: Return "Software caused connection abort"
    Otherwise errno_value is equal to RUNA_ECONNRESET: Return "Connection reset by peer"
    Otherwise errno_value is equal to RUNA_ENOBUFS: Return "No buffer space available"
    Otherwise errno_value is equal to RUNA_EISCONN: Return "Transport endpoint is already connected"
    Otherwise errno_value is equal to RUNA_ENOTCONN: Return "Transport endpoint is not connected"
    Otherwise errno_value is equal to RUNA_ESHUTDOWN: Return "Cannot send after transport endpoint shutdown"
    Otherwise errno_value is equal to RUNA_ETOOMANYREFS: Return "Too many references: cannot splice"
    Otherwise errno_value is equal to RUNA_ETIMEDOUT: Return "Connection timed out"
    Otherwise errno_value is equal to RUNA_ECONNREFUSED: Return "Connection refused"
    Otherwise errno_value is equal to RUNA_EHOSTDOWN: Return "Host is down"
    Otherwise errno_value is equal to RUNA_EHOSTUNREACH: Return "No route to host"
    Otherwise errno_value is equal to RUNA_EALREADY: Return "Operation already in progress"
    Otherwise errno_value is equal to RUNA_EINPROGRESS: Return "Operation now in progress"
    Otherwise errno_value is equal to RUNA_ESTALE: Return "Stale file handle"
    Otherwise errno_value is equal to RUNA_ECANCELED: Return "Operation canceled"
    Otherwise: Return "Unknown error"
    End If
End Process

Note: =====================================================================
Note: UNIFIED ERROR INTERFACE
Note: =====================================================================

Process called "map_platform_error_to_runa" that takes platform_error as Integer, platform_name as String returns Integer:
    Note: Map platform-specific error to unified Runa errno
    
    @Implementation
    Dispatches to platform-specific error mapping functions based on
    the detected platform. This provides a unified interface.
    @End Implementation
    
    If platform_name is equal to "Linux": Return map_linux_errno_to_runa(platform_error)
    Otherwise platform_name is equal to "Darwin": Return map_darwin_errno_to_runa(platform_error)
    Otherwise platform_name is equal to "Windows": Return map_windows_error_to_runa(platform_error)
    Otherwise platform_name is equal to "FreeBSD": Return map_bsd_errno_to_runa(platform_error)
    Otherwise platform_name is equal to "OpenBSD": Return map_bsd_errno_to_runa(platform_error)
    Otherwise platform_name is equal to "NetBSD": Return map_bsd_errno_to_runa(platform_error)
    Otherwise: Return platform_error  Note: Unknown platform, return as-is
    End If
End Process

Process called "create_runtime_error" that takes syscall_result as Integer, syscall_name as String returns RuntimeError:
    Note: Create unified runtime error from syscall result
    
    @Implementation
    Takes a syscall result (negative for errors on POSIX, GetLastError on Windows)
    and creates a complete RuntimeError with all relevant information filled in.
    @End Implementation
    
    Let error be RuntimeError()
    Let platform_name be Platform.detect_operating_system()
    
    Note: Extract platform-specific error code
    Let platform_errno as Integer
    If platform_name is equal to "Windows":
        Note: Windows uses GetLastError(), result might be negative or positive
        If syscall_result is less than 0:
            Set platform_errno to Integer.negate_integer(syscall_result)
        Otherwise:
            Set platform_errno to syscall_result
        End If
    Otherwise:
        Note: POSIX systems return negative errno values
        Set platform_errno to Syscall.get_errno(syscall_result)
    End If
    
    Note: Map to unified Runa errno
    Let runa_errno be map_platform_error_to_runa(platform_errno, platform_name)
    
    Note: Fill in error structure
    Set error.error_code to runa_errno
    Set error.errno_value to runa_errno
    Set error.platform_specific_code to platform_errno
    Set error.category to get_error_category_from_errno(runa_errno)
    Set error.message to get_error_message_from_errno(runa_errno)
    Set error.syscall_name to syscall_name
    Set error.platform to platform_name
    
    Return error
End Process

Process called "create_error_from_errno" that takes errno_value as Integer, syscall_name as String returns RuntimeError:
    Note: Create runtime error from errno value directly
    
    @Implementation
    Used when we already have a unified errno value and just need to
    create the complete error structure.
    @End Implementation
    
    Let error be RuntimeError()
    Let platform_name be Platform.detect_operating_system()
    
    Set error.error_code to errno_value
    Set error.errno_value to errno_value
    Set error.platform_specific_code to errno_value
    Set error.category to get_error_category_from_errno(errno_value)
    Set error.message to get_error_message_from_errno(errno_value)
    Set error.syscall_name to syscall_name
    Set error.platform to platform_name
    
    Return error
End Process

Process called "format_runtime_error" that takes error as RuntimeError returns String:
    Note: Format runtime error for display
    
    @Implementation
    Creates a human-readable error message that includes all relevant
    error information for debugging and user feedback.
    @End Implementation
    
    Let result be ""
    Set result to result joined with "RuntimeError: " joined with error.message
    
    If not error.syscall_name is equal to "":
        Set result to result joined with " (in " joined with error.syscall_name joined with ")"
    End If
    
    Set result to result joined with " [" joined with error.platform joined with " errno=" 
    Set result to result joined with integer_to_string(error.errno_value) joined with "]"
    
    If not error.platform_specific_code is equal to error.errno_value:
        Set result to result joined with " (platform code=" 
        Set result to result joined with integer_to_string(error.platform_specific_code) joined with ")"
    End If
    
    Return result
End Process

Process called "integer_to_string" that takes value as Integer returns String:
    Note: Convert integer to string representation
    
    @Implementation
    Helper function to convert integers to strings for error formatting.
    Handles negative numbers and zero correctly.
    @End Implementation
    
    If value is equal to 0:
        Return "0"
    End If
    
    Let result be ""
    Let n be value
    Let is_negative be false
    
    If n is less than 0:
        Set is_negative to true
        Set n to Integer.negate_integer(n)
    End If
    
    Note: Build string in reverse
    While n is greater than 0:
        Let digit be n modulo 10
        Let char be digit_to_char(digit)
        Set result to char joined with result
        Set n to n divided by 10
    End While
    
    If is_negative:
        Set result to "-" joined with result
    End If
    
    Return result
End Process

Process called "digit_to_char" that takes digit as Integer returns String:
    Note: Convert single digit to character
    
    @Implementation
    Maps digit values 0-9 to their string representations.
    @End Implementation
    
    If digit is equal to 0: Return "0"
    Otherwise digit is equal to 1: Return "1"
    Otherwise digit is equal to 2: Return "2"
    Otherwise digit is equal to 3: Return "3"
    Otherwise digit is equal to 4: Return "4"
    Otherwise digit is equal to 5: Return "5"
    Otherwise digit is equal to 6: Return "6"
    Otherwise digit is equal to 7: Return "7"
    Otherwise digit is equal to 8: Return "8"
    Otherwise digit is equal to 9: Return "9"
    Otherwise: Return "?"
    End If
End Process

Note: =====================================================================
Note: ERROR CHECKING UTILITIES
Note: =====================================================================

Process called "is_error" that takes runtime_error as RuntimeError returns Boolean:
    Note: Check if runtime error represents an actual error condition
    
    @Implementation
    Returns true if the error represents a failure condition, false if it
    represents success (errno 0).
    @End Implementation
    
    Return runtime_error.errno_value is not equal to 0
End Process

Process called "is_temporary_error" that takes runtime_error as RuntimeError returns Boolean:
    Note: Check if error represents a temporary condition
    
    @Implementation
    Some errors indicate temporary conditions that might succeed if retried,
    such as EAGAIN, EINTR, ETIMEDOUT.
    @End Implementation
    
    Let errno_val be runtime_error.errno_value
    If errno_val is equal to RUNA_EAGAIN: Return true
    Otherwise errno_val is equal to RUNA_EINTR: Return true
    Otherwise errno_val is equal to RUNA_ETIMEDOUT: Return true
    Otherwise errno_val is equal to RUNA_ENOBUFS: Return true
    Otherwise errno_val is equal to RUNA_EBUSY: Return true
    Otherwise errno_val is equal to RUNA_EALREADY: Return true
    Otherwise errno_val is equal to RUNA_EINPROGRESS: Return true
    Otherwise: Return false
    End If
End Process

Process called "is_permission_error" that takes runtime_error as RuntimeError returns Boolean:
    Note: Check if error is permission-related
    
    @Implementation
    Identifies permission and access-related errors for special handling.
    @End Implementation
    
    Let errno_val be runtime_error.errno_value
    If errno_val is equal to RUNA_EPERM: Return true
    Otherwise errno_val is equal to RUNA_EACCES: Return true
    Otherwise runtime_error.category is equal to PermissionError: Return true
    Otherwise: Return false
    End If
End Process

Process called "is_not_found_error" that takes runtime_error as RuntimeError returns Boolean:
    Note: Check if error indicates resource not found
    
    @Implementation
    Identifies "not found" type errors for special handling.
    @End Implementation
    
    Let errno_val be runtime_error.errno_value
    If errno_val is equal to RUNA_ENOENT: Return true
    Otherwise errno_val is equal to RUNA_ESRCH: Return true
    Otherwise errno_val is equal to RUNA_ENXIO: Return true
    Otherwise errno_val is equal to RUNA_ENODEV: Return true
    Otherwise runtime_error.category is equal to NotFoundError: Return true
    Otherwise: Return false
    End If
End Process

@Performance_Hints
Error mapping functions use switch-style if-otherwise chains for optimal
performance. Hash map lookups would be slower and require more memory allocation.
The error mapping is called frequently during syscall error handling, so
minimizing overhead is critical.
@End Performance_Hints

@Security_Scope
Error messages are designed to provide useful debugging information without
exposing sensitive system internals. Platform-specific error codes are included
for debugging but should not leak information about system configuration or
security boundaries.
@End Security_Scope