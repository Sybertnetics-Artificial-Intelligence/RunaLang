Note:
runa/src/runatime/integration/system_interface/tests/platform_tests/darwin_tests.runa
Darwin/macOS Platform-Specific Tests

This module provides tests specific to Darwin/macOS syscall implementations,
verifying macOS-specific features and behaviors.

Test coverage:
- macOS file operations
- Mach ports and messages
- XNU kernel features
- Grand Central Dispatch
- macOS security framework
- Sandbox operations
- kqueue events
- Darwin-specific optimizations
:End Note

Import module "../../../../compiler/frontend/diagnostics/errors" as Errors
Import module "../../../../compiler/frontend/primitives/assembly/syscall" as SyscallPrimitive
Import module "../../../../compiler/frontend/primitives/core/integer_primitive" as IntegerPrimitive
Import module "../../../../compiler/frontend/primitives/core/string_primitive" as StringPrimitive
Import module "../../../../compiler/frontend/primitives/core/memory_core" as MemoryCore
Import module "../../platform_implementations/darwin/file_syscalls" as DarwinFile
Import module "../../platform_implementations/darwin/process_syscalls" as DarwinProcess
Import module "../../platform_implementations/darwin/memory_syscalls" as DarwinMemory

@Reasoning
    Test Darwin-specific file operations including resource forks,
    extended attributes, and macOS-specific file system features.
@End Reasoning

Process called "test_darwin_file_operations" returns Boolean:
    Note: Test extended attributes support
    Let test_file be StringPrimitive.create_from_literal("/tmp/darwin_test_file")
    Let create_result be DarwinFile.create_test_file(test_file)
    If IntegerPrimitive.not_equals(create_result, 0):
        Return false
    End If
    
    Note: Test setting extended attribute
    Let attr_name be StringPrimitive.create_from_literal("com.runa.test")
    Let attr_value be StringPrimitive.create_from_literal("test_value")
    Let setxattr_result be DarwinFile.set_extended_attribute(test_file, attr_name, attr_value)
    
    Note: Test getting extended attribute
    Let getxattr_result be DarwinFile.get_extended_attribute(test_file, attr_name)
    Let attr_match be StringPrimitive.equals(getxattr_result, attr_value)
    
    Note: Test Darwin-specific file flags
    Let flags_result be DarwinFile.test_darwin_file_flags(test_file)
    
    Note: Cleanup
    DarwinFile.delete_file(test_file)
    
    Return BooleanPrimitive.and_operation(
        IntegerPrimitive.equals(setxattr_result, 0),
        BooleanPrimitive.and_operation(attr_match, flags_result)
    )

@Reasoning
    Test Darwin Mach port functionality which is the foundation of
    inter-process communication on macOS and a unique Darwin feature.
@End Reasoning

Process called "test_darwin_mach_ports" returns Boolean:
    Note: Test mach_port_allocate
    Let port_set be DarwinProcess.allocate_mach_port_set()
    If IntegerPrimitive.less_than(port_set, 0):
        Return false
    End If
    
    Note: Test mach_port_insert_right
    Let insert_result be DarwinProcess.insert_port_right(port_set)
    If IntegerPrimitive.not_equals(insert_result, 0):
        DarwinProcess.deallocate_mach_port(port_set)
        Return false
    End If
    
    Note: Test mach_msg_receive capabilities
    Let receive_result be DarwinProcess.test_mach_msg_receive(port_set, 100)
    
    Note: Test mach task info
    Let task_info be DarwinProcess.get_mach_task_info()
    Let valid_task_info be IntegerPrimitive.greater_than(task_info, 0)
    
    Note: Cleanup
    DarwinProcess.deallocate_mach_port(port_set)
    
    Return BooleanPrimitive.and_operation(
        IntegerPrimitive.equals(receive_result, 0),
        valid_task_info
    )

@Reasoning
    Test Darwin kqueue functionality including file system events,
    process monitoring, and other Darwin-specific kqueue features.
@End Reasoning

Process called "test_darwin_kqueue" returns Boolean:
    Note: Create kqueue instance
    Let kqueue_fd be DarwinFile.create_kqueue()
    If IntegerPrimitive.less_than(kqueue_fd, 0):
        Return false
    End If
    
    Note: Test file system monitoring with kqueue
    Let test_file be StringPrimitive.create_from_literal("/tmp/kqueue_test_file")
    DarwinFile.create_test_file(test_file)
    
    Note: Add file to kqueue for monitoring
    Let monitor_result be DarwinFile.kqueue_monitor_file(kqueue_fd, test_file)
    If IntegerPrimitive.not_equals(monitor_result, 0):
        DarwinFile.close_fd(kqueue_fd)
        DarwinFile.delete_file(test_file)
        Return false
    End If
    
    Note: Modify file to trigger kqueue event
    DarwinFile.modify_file(test_file)
    
    Note: Check for kqueue events
    Let events_detected be DarwinFile.kqueue_check_events(kqueue_fd, 1000)
    
    Note: Test process monitoring with kqueue
    Let current_pid be DarwinProcess.get_current_pid()
    Let proc_monitor_result be DarwinFile.kqueue_monitor_process(kqueue_fd, current_pid)
    
    Note: Cleanup
    DarwinFile.close_fd(kqueue_fd)
    DarwinFile.delete_file(test_file)
    
    Return BooleanPrimitive.and_operation(
        IntegerPrimitive.greater_than(events_detected, 0),
        IntegerPrimitive.equals(proc_monitor_result, 0)
    )

Process called "test_darwin_gcd_integration" returns Boolean:
    @Reasoning
    Test Grand Central Dispatch integration which is a Darwin-specific
    concurrent programming framework.
    @End Reasoning
    
    Note: Test dispatch queue creation
    Let queue_result be DarwinProcess.create_dispatch_queue("test_queue")
    If IntegerPrimitive.less_than(queue_result, 0):
        Return false
    End If
    
    Note: Test dispatch async execution
    Let async_result be DarwinProcess.test_dispatch_async(queue_result)
    If IntegerPrimitive.not_equals(async_result, 0):
        DarwinProcess.release_dispatch_queue(queue_result)
        Return false
    End If
    
    Note: Test dispatch synchronization
    Let sync_result be DarwinProcess.test_dispatch_sync(queue_result)
    
    Note: Cleanup
    DarwinProcess.release_dispatch_queue(queue_result)
    
    Return IntegerPrimitive.equals(sync_result, 0)
End Process