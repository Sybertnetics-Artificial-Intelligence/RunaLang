Note:
runa/src/runatime/integration/system_interface/tests/platform_tests/windows_tests.runa
Windows Platform-Specific Tests

This module provides tests specific to Windows NT syscall implementations,
verifying Windows-specific features and behaviors.

Test coverage:
- Windows file operations
- NT kernel APIs
- Windows security model
- Registry operations
- COM/WinRT integration
- Windows events and synchronization
- Named pipes
- Windows-specific optimizations
:End Note

Import module "../../../../compiler/frontend/diagnostics/errors" as Errors
Import module "../../../../compiler/frontend/primitives/assembly/syscall" as SyscallPrimitive
Import module "../../../../compiler/frontend/primitives/core/integer_primitive" as IntegerPrimitive
Import module "../../../../compiler/frontend/primitives/core/string_primitive" as StringPrimitive
Import module "../../../../compiler/frontend/primitives/core/memory_core" as MemoryCore
Import module "../../platform_implementations/windows/file_syscalls" as WindowsFile
Import module "../../platform_implementations/windows/process_syscalls" as WindowsProcess
Import module "../../platform_implementations/windows/memory_syscalls" as WindowsMemory

@Reasoning
    Test Windows-specific file operations including alternate data streams,
    file attributes, and Windows-specific file system features.
@End Reasoning

Process called "test_windows_file_operations" returns Boolean:
    Note: Test CreateFile with Windows-specific flags
    Let test_file be StringPrimitive.create_from_literal("C:\\temp\\windows_test_file.txt")
    Let create_result be WindowsFile.create_file_with_attributes(test_file)
    If IntegerPrimitive.less_than(create_result, 0):
        Return false
    End If
    
    Note: Test alternate data streams
    Let ads_name be StringPrimitive.create_from_literal("C:\\temp\\windows_test_file.txt:ads_test")
    Let ads_result be WindowsFile.create_alternate_data_stream(ads_name)
    
    Note: Test Windows file attributes
    Let attr_result be WindowsFile.set_file_attributes(test_file, 32)
    
    Note: Test file locking
    Let lock_result be WindowsFile.lock_file_region(create_result, 0, 1024)
    WindowsFile.unlock_file_region(create_result, 0, 1024)
    
    Note: Cleanup
    WindowsFile.close_handle(create_result)
    WindowsFile.delete_file(test_file)
    
    Return BooleanPrimitive.and_operation(
        IntegerPrimitive.greater_than_or_equal(ads_result, 0),
        BooleanPrimitive.and_operation(
            IntegerPrimitive.equals(attr_result, 0),
            IntegerPrimitive.equals(lock_result, 0)
        )
    )

@Reasoning
    Test Windows NT kernel APIs including NtQuerySystemInformation,
    NtQueryInformationProcess, and other low-level NT functionality.
@End Reasoning

Process called "test_windows_nt_syscalls" returns Boolean:
    Note: Test NtQuerySystemInformation
    Let system_info be WindowsProcess.query_system_information(0)
    If IntegerPrimitive.less_than(system_info, 0):
        Return false
    End If
    
    Note: Test NtQueryInformationProcess
    Let current_process be WindowsProcess.get_current_process_handle()
    Let process_info be WindowsProcess.query_process_information(current_process, 0)
    If IntegerPrimitive.less_than(process_info, 0):
        Return false
    End If
    
    Note: Test NtQueryPerformanceCounter
    Let perf_counter be WindowsProcess.query_performance_counter()
    If IntegerPrimitive.less_than_or_equal(perf_counter, 0):
        Return false
    End If
    
    Note: Test NT object manager
    Let object_result be WindowsProcess.test_nt_object_operations()
    
    Return IntegerPrimitive.equals(object_result, 0)
End Process

@Reasoning
    Test Windows Registry operations which are Windows-specific
    configuration and data storage mechanisms.
@End Reasoning

Process called "test_windows_iocp" returns Boolean:
    Note: Test I/O Completion Ports creation
    Let iocp_handle be WindowsFile.create_io_completion_port()
    If IntegerPrimitive.less_than(iocp_handle, 0):
        Return false
    End If
    
    Note: Test associating file with IOCP
    Let test_file be StringPrimitive.create_from_literal("C:\\temp\\iocp_test.txt")
    Let file_handle be WindowsFile.create_file_with_attributes(test_file)
    If IntegerPrimitive.less_than(file_handle, 0):
        WindowsFile.close_handle(iocp_handle)
        Return false
    End If
    
    Let associate_result be WindowsFile.associate_file_with_iocp(file_handle, iocp_handle)
    
    Note: Test IOCP completion
    Let completion_result be WindowsFile.test_iocp_completion(iocp_handle, 1000)
    
    Note: Cleanup
    WindowsFile.close_handle(file_handle)
    WindowsFile.close_handle(iocp_handle)
    WindowsFile.delete_file(test_file)
    
    Return BooleanPrimitive.and_operation(
        IntegerPrimitive.equals(associate_result, 0),
        IntegerPrimitive.greater_than_or_equal(completion_result, 0)
    )

Process called "test_windows_wmi_integration" returns Boolean:
    @Reasoning
    Test Windows Management Instrumentation integration for system monitoring.
    @End Reasoning
    
    Note: Test WMI service availability
    Let wmi_service be WindowsProcess.test_wmi_service_access()
    If IntegerPrimitive.not_equals(wmi_service, 0):
        Return false
    End If
    
    Note: Test basic WMI query
    Let query_result be WindowsProcess.execute_wmi_query("SELECT * FROM Win32_Process WHERE ProcessId = 0")
    
    Note: Test WMI event monitoring
    Let event_result be WindowsProcess.test_wmi_event_monitoring()
    
    Return BooleanPrimitive.and_operation(
        IntegerPrimitive.greater_than_or_equal(query_result, 0),
        IntegerPrimitive.equals(event_result, 0)
    )
End Process