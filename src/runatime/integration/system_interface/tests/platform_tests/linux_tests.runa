Note:
runa/src/runatime/integration/system_interface/tests/platform_tests/linux_tests.runa
Linux Platform-Specific Tests

This module provides tests specific to Linux syscall implementations,
verifying Linux-specific features and behaviors.

Test coverage:
- Linux file operations
- Process management
- Memory management
- Network operations
- Signal handling
- Security features (SELinux, AppArmor)
- Namespaces and cgroups
- epoll/inotify
- Linux-specific optimizations
:End Note

Import module "../../../../compiler/frontend/diagnostics/errors" as Errors
Import module "../../../../compiler/frontend/primitives/assembly/syscall" as SyscallPrimitive
Import module "../../../../compiler/frontend/primitives/core/integer_primitive" as IntegerPrimitive
Import module "../../../../compiler/frontend/primitives/core/string_primitive" as StringPrimitive
Import module "../../../../compiler/frontend/primitives/core/memory_core" as MemoryCore
Import module "../../platform_implementations/linux/file_syscalls" as LinuxFile
Import module "../../platform_implementations/linux/process_syscalls" as LinuxProcess
Import module "../../platform_implementations/linux/memory_syscalls" as LinuxMemory

@Reasoning
    Test Linux-specific file operations including O_CLOEXEC, O_NONBLOCK,
    and other Linux-specific file descriptor flags and behaviors.
@End Reasoning

@Implementation
    Test file creation with Linux-specific flags, verify proper
    file descriptor behavior, and test Linux-specific file system features.
@End Implementation

Process called "test_linux_file_operations" returns Boolean:
    Note: Test O_CLOEXEC flag support
    Let cloexec_fd be LinuxFile.open_with_cloexec("/dev/null")
    If IntegerPrimitive.less_than(cloexec_fd, 0):
        Return false
    End If
    
    Note: Test O_NONBLOCK flag support
    Let nonblock_fd be LinuxFile.open_with_nonblock("/dev/null")
    If IntegerPrimitive.less_than(nonblock_fd, 0):
        LinuxFile.close_fd(cloexec_fd)
        Return false
    End If
    
    Note: Test Linux-specific file operations
    Let splice_result be LinuxFile.test_splice_operation(cloexec_fd, nonblock_fd)
    
    Note: Cleanup file descriptors
    LinuxFile.close_fd(cloexec_fd)
    LinuxFile.close_fd(nonblock_fd)
    
    Return splice_result

@Reasoning
    Test Linux epoll functionality which is a Linux-specific I/O event
    notification mechanism that provides better performance than select/poll.
@End Reasoning

Process called "test_linux_epoll" returns Boolean:
    Note: Create epoll instance
    Let epoll_fd be LinuxFile.create_epoll_instance()
    If IntegerPrimitive.less_than(epoll_fd, 0):
        Return false
    End If
    
    Note: Create test pipe for epoll monitoring
    Let pipe_fds be LinuxFile.create_pipe()
    Let read_fd be MemoryCore.get_list_element(pipe_fds, 0)
    Let write_fd be MemoryCore.get_list_element(pipe_fds, 1)
    
    Note: Add read end of pipe to epoll
    Let add_result be LinuxFile.epoll_add_fd(epoll_fd, read_fd, 1)
    If IntegerPrimitive.not_equals(add_result, 0):
        LinuxFile.close_fd(epoll_fd)
        LinuxFile.close_fd(read_fd)
        LinuxFile.close_fd(write_fd)
        Return false
    End If
    
    Note: Write data to pipe to trigger epoll event
    Let test_data be StringPrimitive.create_from_literal("test")
    LinuxFile.write_to_fd(write_fd, test_data)
    
    Note: Wait for epoll events
    Let events_ready be LinuxFile.epoll_wait(epoll_fd, 1, 1000)
    
    Note: Cleanup
    LinuxFile.close_fd(epoll_fd)
    LinuxFile.close_fd(read_fd)
    LinuxFile.close_fd(write_fd)
    
    Note: Should have detected one event
    Return IntegerPrimitive.equals(events_ready, 1)

@Reasoning
    Test Linux namespace functionality including PID, network, mount,
    and other namespace types. This tests Linux's containerization features.
@End Reasoning

Process called "test_linux_namespaces" returns Boolean:
    Note: Test unshare system call for PID namespace
    Let unshare_result be LinuxProcess.unshare_pid_namespace()
    If IntegerPrimitive.not_equals(unshare_result, 0):
        Note: Unshare may fail without privileges, that's expected
        Note: Test namespace detection instead
        Let current_pid_ns be LinuxProcess.get_pid_namespace()
        Return IntegerPrimitive.greater_than(current_pid_ns, 0)
    End If
    
    Note: Test network namespace detection
    Let net_ns be LinuxProcess.get_network_namespace()
    If IntegerPrimitive.less_than_or_equal(net_ns, 0):
        Return false
    End If
    
    Note: Test mount namespace detection
    Let mount_ns be LinuxProcess.get_mount_namespace()
    If IntegerPrimitive.less_than_or_equal(mount_ns, 0):
        Return false
    End If
    
    Note: Test /proc/self/ns accessibility
    Let ns_accessible be LinuxProcess.test_proc_ns_access()
    Return ns_accessible