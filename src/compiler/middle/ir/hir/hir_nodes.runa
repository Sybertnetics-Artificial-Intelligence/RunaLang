Note:
High-Level Intermediate Representation (HIR) Node Definitions Module

This module defines the complete set of HIR node types used in the Runa compiler's
intermediate representation. HIR preserves high-level semantic information from
the source code while providing a structured representation suitable for analysis
and transformation. These nodes form the foundation for type checking, semantic
analysis, and further compilation phases.

Core responsibilities:
- HIR node type definitions with semantic information
- Expression, statement, and declaration node hierarchies
- Type annotation and metadata attachment points
- Source location preservation for debugging and error reporting
- Pattern matching support for compiler analysis passes
:End Note

Import "compiler/frontend/diagnostics/errors" as Errors

Note: ===== Base HIR Node Types =====

Type called "HIRNodeId":
    node_identifier as String             Note: Unique node identifier
    node_generation as Integer            Note: Generation/version for updates

Type called "HIRNode":
    node_id as HIRNodeId                  Note: Unique node identifier
    node_type as HIRNodeType              Note: Specific node type
    source_location as SourceLocation     Note: Original source location
    type_signature as Optional[TypeSignature] Note: Inferred or annotated type
    attributes as Dictionary[String, String] Note: Node attributes and metadata
    parent_node as Optional[HIRNodeId]    Note: Parent node reference
    analysis_data as Dictionary[String, Any] Note: Analysis results storage

Type called "HIRNodeType" is:
    | Program                              Note: Root program node
    | Module                               Note: Module definition
    | Function                             Note: Function definition
    | Type                                 Note: Type definition
    | Variable                             Note: Variable declaration
    | Parameter                            Note: Function parameter
    | Field                                Note: Struct/type field
    | Expression                           Note: Expression node
    | Statement                            Note: Statement node
    | Pattern                              Note: Pattern matching node
    | Import                               Note: Import declaration
    | Export                               Note: Export declaration

Note: ===== Program and Module Nodes =====

Type called "HIRProgram":
    program_id as HIRNodeId               Note: Program root identifier
    modules as List[HIRModule]            Note: Program modules
    main_module as Optional[String]       Note: Main module identifier
    dependencies as List[DependencyInfo] Note: External dependencies
    compilation_flags as List[String]     Note: Compilation flags
    metadata as ProgramMetadata           Note: Program-level metadata

Type called "HIRModule":
    module_id as HIRNodeId                Note: Module identifier
    module_name as String                 Note: Module name
    module_path as String                 Note: Module file path
    imports as List[HIRImport]            Note: Import declarations
    exports as List[HIRExport]            Note: Export declarations
    functions as List[HIRFunction]        Note: Function definitions
    types as List[HIRTypeDefinition]      Note: Type definitions
    variables as List[HIRVariableDeclaration] Note: Module-level variables
    visibility as ModuleVisibility        Note: Module visibility level

Type called "ModuleVisibility" is:
    | Public                              Note: Publicly accessible module
    | Internal                            Note: Internal to compilation unit
    | Private                             Note: Private module

Type called "HIRImport":
    import_id as HIRNodeId                Note: Import declaration identifier
    module_path as String                 Note: Imported module path
    import_items as List[ImportItem]      Note: Specific items to import
    import_alias as Optional[String]      Note: Import alias name
    visibility as ImportVisibility        Note: Import visibility

Type called "ImportItem":
    item_name as String                   Note: Name of imported item
    item_alias as Optional[String]        Note: Local alias for item
    item_type as ImportItemType           Note: Type of imported item

Type called "ImportItemType" is:
    | Function                            Note: Imported function
    | Type                                Note: Imported type
    | Variable                            Note: Imported variable
    | Module                              Note: Imported module
    | All                                 Note: Import all items

Type called "HIRExport":
    export_id as HIRNodeId                Note: Export declaration identifier
    exported_items as List[ExportItem]   Note: Items being exported
    export_visibility as ExportVisibility Note: Export visibility level

Type called "ExportItem":
    item_name as String                   Note: Name of exported item
    external_name as Optional[String]     Note: External name if different
    item_type as ExportItemType           Note: Type of exported item

Note: ===== Function Definition Nodes =====

Type called "HIRFunction":
    function_id as HIRNodeId              Note: Function identifier
    function_name as String               Note: Function name
    parameters as List[HIRParameter]      Note: Function parameters
    return_type as Optional[TypeSignature] Note: Return type annotation
    body as HIRBlock                      Note: Function body
    function_attributes as List[FunctionAttribute] Note: Function attributes
    visibility as FunctionVisibility     Note: Function visibility
    is_async as Boolean                   Note: Whether function is async
    is_external as Boolean                Note: Whether function is external
    generic_parameters as List[GenericParameter] Note: Generic type parameters

Type called "HIRParameter":
    parameter_id as HIRNodeId             Note: Parameter identifier
    parameter_name as String              Note: Parameter name
    parameter_type as TypeSignature       Note: Parameter type
    default_value as Optional[HIRExpression] Note: Default parameter value
    is_mutable as Boolean                 Note: Whether parameter is mutable
    parameter_attributes as List[ParameterAttribute] Note: Parameter attributes

Type called "FunctionAttribute" is:
    | Pure                                Note: Function has no side effects
    | Const                               Note: Function can be evaluated at compile time
    | Inline                              Note: Function should be inlined
    | NoInline                            Note: Function should not be inlined
    | Deprecated as String                Note: Function is deprecated with reason
    | Unsafe                              Note: Function performs unsafe operations

Type called "FunctionVisibility" is:
    | Public                              Note: Public function
    | Private                             Note: Private function
    | Internal                            Note: Internal to module
    | Protected                           Note: Protected function

Note: ===== Type Definition Nodes =====

Type called "HIRTypeDefinition":
    type_id as HIRNodeId                  Note: Type definition identifier
    type_name as String                   Note: Type name
    type_kind as TypeKind                 Note: Kind of type definition
    generic_parameters as List[GenericParameter] Note: Generic parameters
    type_constraints as List[TypeConstraint] Note: Type constraints
    visibility as TypeVisibility          Note: Type visibility
    type_attributes as List[TypeAttribute] Note: Type attributes

Type called "TypeKind" is:
    | Struct as StructDefinition          Note: Struct type definition
    | Enum as EnumDefinition              Note: Enum type definition
    | Union as UnionDefinition            Note: Union type definition
    | Alias as TypeAlias                  Note: Type alias definition
    | Trait as TraitDefinition            Note: Trait/interface definition
    | Protocol as ProtocolDefinition      Note: Protocol definition

Type called "StructDefinition":
    fields as List[HIRField]              Note: Struct fields
    is_tuple_struct as Boolean            Note: Whether this is tuple struct
    layout_attributes as List[LayoutAttribute] Note: Memory layout attributes

Type called "HIRField":
    field_id as HIRNodeId                 Note: Field identifier
    field_name as String                  Note: Field name
    field_type as TypeSignature           Note: Field type
    field_attributes as List[FieldAttribute] Note: Field attributes
    visibility as FieldVisibility         Note: Field visibility
    is_mutable as Boolean                 Note: Whether field is mutable

Type called "EnumDefinition":
    variants as List[HIREnumVariant]      Note: Enum variants
    discriminant_type as Optional[TypeSignature] Note: Discriminant type

Type called "HIREnumVariant":
    variant_id as HIRNodeId               Note: Variant identifier
    variant_name as String                Note: Variant name
    variant_data as EnumVariantData       Note: Variant data type
    discriminant_value as Optional[Integer] Note: Explicit discriminant value

Type called "EnumVariantData" is:
    | Unit                                Note: Unit variant (no data)
    | Tuple as List[TypeSignature]        Note: Tuple variant with types
    | Struct as List[HIRField]            Note: Struct variant with fields

Note: ===== Expression Nodes =====

Type called "HIRExpression":
    expression_id as HIRNodeId            Note: Expression identifier
    expression_type as HIRExpressionType  Note: Specific expression type
    inferred_type as Optional[TypeSignature] Note: Inferred expression type
    is_lvalue as Boolean                  Note: Whether expression is lvalue
    has_side_effects as Boolean           Note: Whether expression has side effects
    constant_value as Optional[ConstantValue] Note: Constant value if evaluable

Type called "HIRExpressionType" is:
    | Literal as HIRLiteral               Note: Literal value expression
    | Identifier as HIRIdentifier         Note: Variable/function reference
    | BinaryOperation as HIRBinaryOperation Note: Binary operation
    | UnaryOperation as HIRUnaryOperation Note: Unary operation
    | FunctionCall as HIRFunctionCall     Note: Function call expression
    | MemberAccess as HIRMemberAccess     Note: Member access expression
    | IndexAccess as HIRIndexAccess       Note: Array/collection indexing
    | Cast as HIRCast                     Note: Type cast expression
    | Block as HIRBlock                   Note: Block expression
    | If as HIRIfExpression               Note: Conditional expression
    | Match as HIRMatchExpression         Note: Pattern matching expression
    | Lambda as HIRLambdaExpression       Note: Lambda function expression

Type called "HIRLiteral":
    literal_id as HIRNodeId               Note: Literal identifier
    literal_type as LiteralType           Note: Type of literal
    literal_value as LiteralValue         Note: Literal value
    literal_suffix as Optional[String]    Note: Type suffix (e.g., 'u32')

Type called "LiteralType" is:
    | Integer                             Note: Integer literal
    | Float                               Note: Floating-point literal
    | String                              Note: String literal
    | Character                           Note: Character literal
    | Boolean                             Note: Boolean literal
    | Null                                Note: Null literal

Type called "HIRIdentifier":
    identifier_id as HIRNodeId            Note: Identifier node ID
    identifier_name as String             Note: Identifier name
    resolved_symbol as Optional[SymbolReference] Note: Resolved symbol reference
    scope_depth as Integer                Note: Scope depth where found

Type called "HIRBinaryOperation":
    binary_op_id as HIRNodeId             Note: Binary operation ID
    operator as BinaryOperator            Note: Binary operator type
    left_operand as HIRExpression         Note: Left operand expression
    right_operand as HIRExpression        Note: Right operand expression
    operator_method as Optional[String]   Note: Resolved operator method

Type called "BinaryOperator" is:
    | Add                                 Note: Addition operator
    | Subtract                            Note: Subtraction operator
    | Multiply                            Note: Multiplication operator
    | Divide                              Note: Division operator
    | Modulo                              Note: Modulo operator
    | Equal                               Note: Equality comparison
    | NotEqual                            Note: Inequality comparison
    | LessThan                            Note: Less than comparison
    | LessEqual                           Note: Less than or equal
    | GreaterThan                         Note: Greater than comparison
    | GreaterEqual                        Note: Greater than or equal
    | LogicalAnd                          Note: Logical AND
    | LogicalOr                           Note: Logical OR
    | BitwiseAnd                          Note: Bitwise AND
    | BitwiseOr                           Note: Bitwise OR
    | BitwiseXor                          Note: Bitwise XOR
    | LeftShift                           Note: Left bit shift
    | RightShift                          Note: Right bit shift
    | Assign                              Note: Assignment operator

Type called "HIRUnaryOperation":
    unary_op_id as HIRNodeId              Note: Unary operation ID
    operator as UnaryOperator             Note: Unary operator type
    operand as HIRExpression              Note: Operand expression
    is_prefix as Boolean                  Note: Whether operator is prefix

Type called "UnaryOperator" is:
    | Plus                                Note: Unary plus
    | Minus                               Note: Unary minus/negation
    | Not                                 Note: Logical NOT
    | BitwiseNot                          Note: Bitwise NOT
    | Dereference                         Note: Pointer dereference
    | AddressOf                           Note: Address-of operator
    | PreIncrement                        Note: Pre-increment
    | PostIncrement                       Note: Post-increment
    | PreDecrement                        Note: Pre-decrement
    | PostDecrement                       Note: Post-decrement

Type called "HIRFunctionCall":
    call_id as HIRNodeId                  Note: Function call ID
    function_expression as HIRExpression  Note: Function being called
    arguments as List[HIRExpression]      Note: Call arguments
    type_arguments as List[TypeSignature] Note: Generic type arguments
    resolved_function as Optional[FunctionReference] Note: Resolved function

Note: ===== Statement Nodes =====

Type called "HIRStatement":
    statement_id as HIRNodeId             Note: Statement identifier
    statement_type as HIRStatementType    Note: Specific statement type
    execution_order as Integer            Note: Execution order within block

Type called "HIRStatementType" is:
    | Expression as HIRExpression         Note: Expression statement
    | VariableDeclaration as HIRVariableDeclaration Note: Variable declaration
    | Assignment as HIRAssignment         Note: Assignment statement
    | If as HIRIfStatement                Note: Conditional statement
    | While as HIRWhileLoop               Note: While loop
    | For as HIRForLoop                   Note: For loop
    | Match as HIRMatchStatement          Note: Pattern matching statement
    | Return as HIRReturn                 Note: Return statement
    | Break as HIRBreak                   Note: Break statement
    | Continue as HIRContinue             Note: Continue statement
    | Block as HIRBlock                   Note: Block statement

Type called "HIRVariableDeclaration":
    declaration_id as HIRNodeId           Note: Declaration identifier
    variable_name as String               Note: Variable name
    variable_type as Optional[TypeSignature] Note: Variable type annotation
    initializer as Optional[HIRExpression] Note: Initialization expression
    is_mutable as Boolean                 Note: Whether variable is mutable
    is_constant as Boolean                Note: Whether variable is constant
    variable_attributes as List[VariableAttribute] Note: Variable attributes

Type called "HIRAssignment":
    assignment_id as HIRNodeId            Note: Assignment identifier
    target as HIRExpression               Note: Assignment target (lvalue)
    value as HIRExpression                Note: Assignment value (rvalue)
    assignment_operator as AssignmentOperator Note: Assignment operator type

Type called "AssignmentOperator" is:
    | Simple                              Note: Simple assignment (=)
    | Add                                 Note: Add assignment (+=)
    | Subtract                            Note: Subtract assignment (-=)
    | Multiply                            Note: Multiply assignment (*=)
    | Divide                              Note: Divide assignment (/=)
    | Modulo                              Note: Modulo assignment (%=)
    | BitwiseAnd                          Note: Bitwise AND assignment (&=)
    | BitwiseOr                           Note: Bitwise OR assignment (|=)
    | BitwiseXor                          Note: Bitwise XOR assignment (^=)
    | LeftShift                           Note: Left shift assignment (<<=)
    | RightShift                          Note: Right shift assignment (>>=)

Type called "HIRIfStatement":
    if_id as HIRNodeId                    Note: If statement identifier
    condition as HIRExpression            Note: If condition
    then_block as HIRBlock                Note: Then block
    else_block as Optional[HIRBlock]      Note: Else block
    elif_branches as List[HIRElifBranch]  Note: Elif branches

Type called "HIRElifBranch":
    elif_id as HIRNodeId                  Note: Elif branch identifier
    condition as HIRExpression            Note: Elif condition
    block as HIRBlock                     Note: Elif block

Type called "HIRBlock":
    block_id as HIRNodeId                 Note: Block identifier
    statements as List[HIRStatement]      Note: Block statements
    scope_id as ScopeId                   Note: Associated scope
    is_expression_block as Boolean        Note: Whether block produces value
    block_type as BlockType               Note: Type of block

Type called "BlockType" is:
    | Function                            Note: Function body block
    | Conditional                         Note: If/else block
    | Loop                                Note: Loop body block
    | Match                               Note: Match arm block
    | Scope                               Note: General scope block
    | Unsafe                              Note: Unsafe code block

Note: ===== Loop Statement Nodes =====

Type called "HIRWhileLoop":
    while_id as HIRNodeId                 Note: While loop identifier
    condition as HIRExpression            Note: Loop condition
    body as HIRBlock                      Note: Loop body
    loop_label as Optional[String]        Note: Loop label for break/continue

Type called "HIRForLoop":
    for_id as HIRNodeId                   Note: For loop identifier
    loop_variable as String               Note: Loop variable name
    iterator as HIRExpression             Note: Iterator expression
    body as HIRBlock                      Note: Loop body
    loop_label as Optional[String]        Note: Loop label

Type called "HIRReturn":
    return_id as HIRNodeId                Note: Return statement identifier
    return_value as Optional[HIRExpression] Note: Returned value
    target_function as FunctionReference  Note: Function being returned from

Type called "HIRBreak":
    break_id as HIRNodeId                 Note: Break statement identifier
    target_label as Optional[String]      Note: Target loop label
    break_value as Optional[HIRExpression] Note: Break value

Type called "HIRContinue":
    continue_id as HIRNodeId              Note: Continue statement identifier
    target_label as Optional[String]      Note: Target loop label

Note: ===== Pattern Matching Nodes =====

Type called "HIRMatchStatement":
    match_id as HIRNodeId                 Note: Match statement identifier
    scrutinee as HIRExpression            Note: Expression being matched
    arms as List[HIRMatchArm]             Note: Match arms
    is_exhaustive as Boolean              Note: Whether match is exhaustive

Type called "HIRMatchArm":
    arm_id as HIRNodeId                   Note: Match arm identifier
    pattern as HIRPattern                 Note: Match pattern
    guard as Optional[HIRExpression]      Note: Guard condition
    body as HIRBlock                      Note: Arm body

Type called "HIRPattern":
    pattern_id as HIRNodeId               Note: Pattern identifier
    pattern_type as HIRPatternType        Note: Specific pattern type
    bindings as List[PatternBinding]      Note: Variable bindings

Type called "HIRPatternType" is:
    | Literal as HIRLiteral               Note: Literal pattern
    | Identifier as String                Note: Variable binding pattern
    | Tuple as List[HIRPattern]           Note: Tuple pattern
    | Struct as StructPattern             Note: Struct pattern
    | Enum as EnumPattern                 Note: Enum variant pattern
    | Wildcard                            Note: Wildcard pattern (_)
    | Or as List[HIRPattern]              Note: Or pattern (|)
    | Range as RangePattern               Note: Range pattern

Type called "PatternBinding":
    binding_name as String                Note: Bound variable name
    binding_type as TypeSignature         Note: Bound variable type
    is_mutable as Boolean                 Note: Whether binding is mutable

Note: ===== HIR Utility Functions =====

Process called "create_hir_node" that takes node_type as HIRNodeType, location as SourceLocation returns HIRNode:
    Note: Creates new HIR node with specified type and location
    Note: Assigns unique node ID and initializes metadata
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement HIR node creation
    Throw Errors.NotImplemented

Process called "clone_hir_node" that takes node as HIRNode returns HIRNode:
    Note: Creates deep copy of HIR node with new node ID
    Note: Preserves all semantic information and relationships
    Note: Time complexity: O(n) where n is node complexity, Space complexity: O(n)
    Note: TODO: Implement HIR node cloning
    Throw Errors.NotImplemented

Process called "get_hir_node_children" that takes node as HIRNode returns List[HIRNode]:
    Note: Returns all direct child nodes of given HIR node
    Note: Traverses node structure to find immediate children
    Note: Time complexity: O(c) where c is child count, Space complexity: O(c)
    Note: TODO: Implement HIR node child extraction
    Throw Errors.NotImplemented

Process called "set_hir_node_type" that takes node as HIRNode, type_signature as TypeSignature returns Boolean:
    Note: Sets type signature for HIR node after type inference
    Note: Updates node metadata with inferred type information
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement HIR node type setting
    Throw Errors.NotImplemented

Process called "get_hir_node_source_range" that takes node as HIRNode returns SourceRange:
    Note: Gets source code range spanned by HIR node
    Note: Returns location information for error reporting
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement HIR node source range retrieval
    Throw Errors.NotImplemented

Process called "is_hir_expression_pure" that takes expr as HIRExpression returns Boolean:
    Note: Determines if HIR expression has no side effects
    Note: Analyzes expression tree for function calls and mutations
    Note: Time complexity: O(n) where n is expression nodes, Space complexity: O(1)
    Note: TODO: Implement HIR expression purity analysis
    Throw Errors.NotImplemented

Process called "get_hir_expression_dependencies" that takes expr as HIRExpression returns List[HIRNodeId]:
    Note: Gets list of nodes that expression depends on
    Note: Identifies variable references and function dependencies
    Note: Time complexity: O(n), Space complexity: O(d) where d is dependencies
    Note: TODO: Implement HIR expression dependency analysis
    Throw Errors.NotImplemented

Process called "simplify_hir_expression" that takes expr as HIRExpression returns HIRExpression:
    Note: Applies simplification rules to HIR expression
    Note: Performs constant folding and algebraic simplifications
    Note: Time complexity: O(n), Space complexity: O(n)
    Note: TODO: Implement HIR expression simplification
    Throw Errors.NotImplemented

Process called "validate_hir_node_structure" that takes node as HIRNode returns List[ValidationError]:
    Note: Validates structural integrity of HIR node
    Note: Checks for malformed nodes and invalid relationships
    Note: Time complexity: O(n), Space complexity: O(e) where e is errors
    Note: TODO: Implement HIR node structure validation
    Throw Errors.NotImplemented

Process called "transform_hir_node" that takes node as HIRNode, transformation as NodeTransformation returns HIRNode:
    Note: Applies transformation to HIR node and its children
    Note: Supports visitor-pattern based node transformations
    Note: Time complexity: O(n), Space complexity: O(n)
    Note: TODO: Implement HIR node transformation
    Throw Errors.NotImplemented