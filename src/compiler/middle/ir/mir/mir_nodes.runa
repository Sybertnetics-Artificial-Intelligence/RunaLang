Note:
Mid-Level Intermediate Representation (MIR) Node Definitions Module

This module defines the complete set of MIR node types used in the Runa compiler's
mid-level intermediate representation. MIR represents code in a form suitable for
aggressive optimization while maintaining enough high-level information for
effective analysis. These nodes form the foundation for optimization passes,
register allocation, and further lowering to LIR.

Core responsibilities:
- MIR instruction and operand type definitions
- Basic block and control flow graph structures
- SSA form support with phi nodes and value numbering
- Type system integration with layout information
- Exception handling representation
- Debug information attachment points
:End Note

Import "compiler/frontend/diagnostics/errors" as Errors

Note: ===== Base MIR Node Types =====

Type called "MIRInstructionId":
    instruction_identifier as String     Note: Unique instruction identifier
    block_id as String                   Note: Containing basic block ID
    instruction_index as Integer         Note: Index within basic block

Type called "BasicBlockId":
    block_identifier as String           Note: Unique basic block identifier
    function_id as String                Note: Containing function ID

Type called "SSAValue":
    value_id as String                   Note: Unique SSA value identifier
    value_type as MIRType                Note: Type of this SSA value
    defining_instruction as Optional[MIRInstructionId] Note: Instruction that defines this value
    variable_name as Optional[String]    Note: Original variable name
    version_number as Integer            Note: SSA version number

Type called "MIRType":
    type_id as String                    Note: Unique type identifier
    type_kind as MIRTypeKind             Note: Kind of MIR type
    size_bytes as Integer                Note: Size in bytes
    alignment as Integer                 Note: Required alignment
    is_signed as Boolean                 Note: Whether numeric type is signed
    layout_info as Optional[TypeLayout] Note: Detailed layout information

Type called "MIRTypeKind" is:
    | Void                               Note: Void type
    | Bool                               Note: Boolean type
    | Integer as Integer                 Note: Integer type with bit width
    | Float as Integer                   Note: Floating-point type with bit width
    | Pointer as MIRType                 Note: Pointer to type
    | Array as ArrayTypeInfo             Note: Array type
    | Struct as StructTypeInfo           Note: Struct type
    | Function as FunctionTypeInfo       Note: Function pointer type
    | Union as UnionTypeInfo             Note: Union type

Note: ===== MIR Program Structure =====

Type called "MIRProgram":
    program_id as String                 Note: Unique program identifier
    modules as List[MIRModule]           Note: Program modules
    global_variables as List[MIRGlobalVariable] Note: Global variables
    function_declarations as List[MIRFunctionDeclaration] Note: External function declarations
    type_definitions as List[MIRTypeDefinition] Note: Type definitions
    debug_info as Optional[MIRDebugInfo] Note: Debug information

Type called "MIRModule":
    module_id as String                  Note: Module identifier
    module_name as String                Note: Module name
    functions as List[MIRFunction]       Note: Functions in module
    global_variables as List[MIRGlobalVariable] Note: Module global variables
    imports as List[MIRImport]           Note: Imported symbols
    exports as List[MIRExport]           Note: Exported symbols

Type called "MIRFunction":
    function_id as String                Note: Function identifier
    function_name as String              Note: Function name
    parameters as List[MIRParameter]     Note: Function parameters
    return_type as MIRType               Note: Return type
    basic_blocks as List[MIRBasicBlock]  Note: Function basic blocks
    entry_block as BasicBlockId          Note: Entry basic block
    local_variables as List[SSAValue]    Note: Local variables
    call_convention as CallConvention    Note: Calling convention
    function_attributes as List[FunctionAttribute] Note: Function attributes

Note: ===== Basic Block Structure =====

Type called "MIRBasicBlock":
    block_id as BasicBlockId             Note: Block identifier
    block_name as Optional[String]       Note: Optional block name
    instructions as List[MIRInstruction] Note: Instructions in block
    predecessors as List[BasicBlockId]   Note: Predecessor blocks
    successors as List[BasicBlockId]     Note: Successor blocks
    phi_nodes as List[PhiNode]           Note: Phi nodes at block entry
    terminator as MIRTerminator          Note: Block terminator instruction
    block_frequency as Optional[Float]  Note: Execution frequency estimate

Type called "MIRInstruction":
    instruction_id as MIRInstructionId   Note: Instruction identifier
    opcode as MIROpcode                  Note: Instruction opcode
    operands as List[MIROperand]         Note: Instruction operands
    result as Optional[SSAValue]         Note: Result SSA value
    instruction_type as Optional[MIRType] Note: Result type
    source_location as Optional[SourceLocation] Note: Original source location
    instruction_attributes as List[InstructionAttribute] Note: Instruction attributes

Type called "MIRTerminator":
    terminator_id as String              Note: Terminator identifier
    terminator_type as TerminatorType    Note: Type of terminator
    targets as List[BasicBlockId]        Note: Target basic blocks
    condition as Optional[SSAValue]      Note: Branch condition if applicable

Type called "TerminatorType" is:
    | Return as Optional[SSAValue]       Note: Return instruction
    | Branch as BasicBlockId             Note: Unconditional branch
    | ConditionalBranch as ConditionalBranchInfo Note: Conditional branch
    | Switch as SwitchInfo               Note: Switch statement
    | Unreachable                        Note: Unreachable code marker
    | Call as CallTerminatorInfo         Note: Tail call

Note: ===== MIR Instructions =====

Type called "MIROpcode" is:
    | Load                               Note: Load from memory
    | Store                              Note: Store to memory
    | Add                                Note: Addition
    | Sub                                Note: Subtraction
    | Mul                                Note: Multiplication
    | Div                                Note: Division
    | Mod                                Note: Modulo
    | And                                Note: Bitwise AND
    | Or                                 Note: Bitwise OR
    | Xor                                Note: Bitwise XOR
    | Shl                                Note: Left shift
    | Shr                                Note: Right shift
    | Cmp                                Note: Compare
    | Cast                               Note: Type cast
    | Call                               Note: Function call
    | Alloca                             Note: Stack allocation
    | GetElementPtr                      Note: Get element pointer
    | Phi                                Note: Phi node
    | Select                             Note: Conditional select
    | ExtractValue                       Note: Extract aggregate value
    | InsertValue                        Note: Insert aggregate value

Type called "MIROperand":
    operand_id as String                 Note: Operand identifier
    operand_type as MIROperandType       Note: Type of operand
    operand_value as MIROperandValue     Note: Operand value
    operand_flags as List[OperandFlag]   Note: Operand flags

Type called "MIROperandType" is:
    | SSAValue as SSAValue               Note: SSA value operand
    | Constant as MIRConstant            Note: Constant operand
    | BasicBlock as BasicBlockId         Note: Basic block operand
    | GlobalVariable as String           Note: Global variable operand
    | Function as String                 Note: Function operand

Type called "MIRConstant":
    constant_id as String                Note: Constant identifier
    constant_type as MIRType             Note: Type of constant
    constant_value as ConstantValue      Note: Constant value

Type called "ConstantValue" is:
    | Integer as Integer                 Note: Integer constant
    | Float as Float                     Note: Float constant
    | Boolean as Boolean                 Note: Boolean constant
    | String as String                   Note: String constant
    | Null                               Note: Null constant
    | Undef                              Note: Undefined value
    | Array as List[ConstantValue]       Note: Array constant
    | Struct as List[ConstantValue]      Note: Struct constant

Note: ===== SSA and Phi Nodes =====

Type called "PhiNode":
    phi_id as String                     Note: Phi node identifier
    result_value as SSAValue             Note: Result SSA value
    incoming_values as List[PhiOperand]  Note: Incoming values and blocks
    variable_name as Optional[String]    Note: Original variable name

Type called "PhiOperand":
    value as SSAValue                    Note: Incoming SSA value
    predecessor_block as BasicBlockId    Note: Predecessor block
    edge_probability as Optional[Float]  Note: Edge execution probability

Type called "SSAUseDefChain":
    value as SSAValue                    Note: SSA value
    definition as MIRInstructionId       Note: Defining instruction
    uses as List[MIRInstructionId]       Note: Use sites
    last_use as Optional[MIRInstructionId] Note: Last use site

Note: ===== Memory Operations =====

Type called "MemoryOperation":
    operation_id as String               Note: Memory operation identifier
    operation_type as MemoryOperationType Note: Type of memory operation
    address as SSAValue                  Note: Memory address
    size as Integer                      Note: Size of operation
    alignment as Integer                 Note: Memory alignment
    is_volatile as Boolean               Note: Whether operation is volatile

Type called "MemoryOperationType" is:
    | Load as MIRType                    Note: Load operation
    | Store as StoreInfo                 Note: Store operation
    | Memcpy as MemcpyInfo               Note: Memory copy
    | Memset as MemsetInfo               Note: Memory set
    | Alloca as AllocaInfo               Note: Stack allocation

Type called "StoreInfo":
    stored_value as SSAValue             Note: Value being stored
    store_type as MIRType                Note: Type of stored value

Type called "AllocaInfo":
    allocated_type as MIRType            Note: Type being allocated
    count as Optional[SSAValue]          Note: Number of elements
    alignment as Integer                 Note: Alignment requirement

Note: ===== Control Flow =====

Type called "ConditionalBranchInfo":
    condition as SSAValue                Note: Branch condition
    true_target as BasicBlockId          Note: True branch target
    false_target as BasicBlockId         Note: False branch target
    branch_weights as Optional[BranchWeights] Note: Branch probability weights

Type called "SwitchInfo":
    switch_value as SSAValue             Note: Value being switched on
    default_target as BasicBlockId       Note: Default case target
    cases as List[SwitchCase]            Note: Switch cases

Type called "SwitchCase":
    case_value as MIRConstant            Note: Case value
    target_block as BasicBlockId         Note: Target block for case

Type called "CallInfo":
    function as SSAValue                 Note: Function being called
    arguments as List[SSAValue]          Note: Call arguments
    call_convention as CallConvention    Note: Calling convention
    is_tail_call as Boolean              Note: Whether this is tail call

Note: ===== Exception Handling =====

Type called "ExceptionHandlingNode":
    node_id as String                    Note: Exception node identifier
    node_type as ExceptionNodeType       Note: Type of exception node
    protected_blocks as Set[BasicBlockId] Note: Blocks protected by this node
    handlers as List[ExceptionHandler]   Note: Exception handlers

Type called "ExceptionNodeType" is:
    | TryBegin                           Note: Beginning of try block
    | TryEnd                             Note: End of try block
    | CatchBegin                         Note: Beginning of catch block
    | CatchEnd                           Note: End of catch block
    | FinallyBegin                       Note: Beginning of finally block
    | FinallyEnd                         Note: End of finally block
    | Cleanup                            Note: Cleanup code

Type called "LandingPad":
    landing_pad_id as String             Note: Landing pad identifier
    exception_value as SSAValue          Note: Caught exception value
    exception_type_info as List[MIRType] Note: Exception types handled
    cleanup_actions as List[CleanupAction] Note: Cleanup actions
    is_cleanup as Boolean                Note: Whether this is cleanup landing pad

Note: ===== Type Layout Information =====

Type called "TypeLayout":
    size as Integer                      Note: Total size in bytes
    alignment as Integer                 Note: Required alignment
    field_offsets as Dictionary[String, Integer] Note: Field byte offsets
    padding_bytes as List[PaddingInfo]   Note: Padding locations
    is_packed as Boolean                 Note: Whether struct is packed

Type called "ArrayTypeInfo":
    element_type as MIRType              Note: Array element type
    element_count as Integer             Note: Number of elements
    is_variable_length as Boolean        Note: Whether array is variable length

Type called "StructTypeInfo":
    field_types as List[MIRType]         Note: Types of struct fields
    field_names as List[String]          Note: Names of struct fields
    layout as TypeLayout                 Note: Struct memory layout

Type called "FunctionTypeInfo":
    parameter_types as List[MIRType]     Note: Parameter types
    return_type as MIRType               Note: Return type
    is_variadic as Boolean               Note: Whether function is variadic
    call_convention as CallConvention    Note: Calling convention

Note: ===== Utility Functions =====

Process called "create_mir_instruction" that takes opcode as MIROpcode, operands as List[MIROperand], result_type as Optional[MIRType] returns MIRInstruction:
    Note: Creates new MIR instruction with specified opcode and operands
    Note: Assigns unique instruction ID and initializes metadata
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement MIR instruction creation
    Throw Errors.NotImplemented

Process called "create_basic_block" that takes block_name as Optional[String] returns MIRBasicBlock:
    Note: Creates new basic block with unique identifier
    Note: Initializes empty instruction list and metadata
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement basic block creation
    Throw Errors.NotImplemented

Process called "create_ssa_value" that takes value_type as MIRType, variable_name as Optional[String] returns SSAValue:
    Note: Creates new SSA value with specified type and name
    Note: Assigns unique value ID and version number
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement SSA value creation
    Throw Errors.NotImplemented

Process called "get_instruction_operands" that takes instruction as MIRInstruction returns List[SSAValue]:
    Note: Extracts all SSA value operands from instruction
    Note: Returns only operands that are SSA values
    Note: Time complexity: O(o) where o is operand count, Space complexity: O(v) where v is SSA values
    Note: TODO: Implement instruction operand extraction
    Throw Errors.NotImplemented

Process called "replace_ssa_value" that takes old_value as SSAValue, new_value as SSAValue, instruction as MIRInstruction returns MIRInstruction:
    Note: Replaces all occurrences of old SSA value with new value
    Note: Updates instruction operands and maintains consistency
    Note: Time complexity: O(o), Space complexity: O(1)
    Note: TODO: Implement SSA value replacement
    Throw Errors.NotImplemented

Process called "is_terminator_instruction" that takes instruction as MIRInstruction returns Boolean:
    Note: Checks if instruction is a terminator instruction
    Note: Terminator instructions end basic blocks
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement terminator instruction check
    Throw Errors.NotImplemented

Process called "get_mir_type_size" that takes mir_type as MIRType returns Integer:
    Note: Gets size in bytes for MIR type
    Note: Computes size including padding and alignment
    Note: Time complexity: O(1), Space complexity: O(1)
    Note: TODO: Implement MIR type size computation
    Throw Errors.NotImplemented

Process called "clone_mir_instruction" that takes instruction as MIRInstruction returns MIRInstruction:
    Note: Creates deep copy of MIR instruction with new ID
    Note: Preserves operands and metadata
    Note: Time complexity: O(o), Space complexity: O(o)
    Note: TODO: Implement MIR instruction cloning
    Throw Errors.NotImplemented

Process called "validate_mir_node" that takes node as MIRInstruction returns List[ValidationError]:
    Note: Validates structural integrity of MIR node
    Note: Checks operand types, SSA form, and other constraints
    Note: Time complexity: O(o), Space complexity: O(e) where e is errors
    Note: TODO: Implement MIR node validation
    Throw Errors.NotImplemented

Process called "compute_instruction_hash" that takes instruction as MIRInstruction returns String:
    Note: Computes hash of instruction for deduplication
    Note: Includes opcode and operand information
    Note: Time complexity: O(o), Space complexity: O(1)
    Note: TODO: Implement instruction hash computation
    Throw Errors.NotImplemented