Note:
runa/src/compiler/backend/syscalls/platforms/freebsd_x64.runa
FreeBSD x86_64 Syscall Definitions

This module contains syscall definitions specific to FreeBSD on x86_64 architecture.
It provides syscall numbers, calling conventions, and platform-specific details
for the FreeBSD x86_64 ABI.

Key features and capabilities:
- Complete FreeBSD x86_64 syscall number mappings
- Register allocation for syscall parameters (RDI, RSI, RDX, R10, R8, R9)
- FreeBSD-specific syscall conventions
- Error return value handling (errno)
- Jail system call support
- Capsicum capability framework
- kqueue event notification system
- ZFS file system operations
- DTrace probe points
- FreeBSD security models
- Virtual memory operations
- Network stack features (SCTP, etc.)
- Process debugging interfaces
- Resource limits and quotas
- Audit subsystem integration
- MAC (Mandatory Access Control) framework
- Performance monitoring counters
:End Note

Import "compiler/frontend/diagnostics/errors" as Errors
Import "compiler/backend/syscalls/syscall_definitions" as SyscallDefs
Import "compiler/frontend/primitives/types/ascii_conversion" as ASCII
Import "../../../frontend/primitives/types/compiler_internals" as Internals
Import "platform_interface.runa" as PlatformInterface

Note: =====================================================================
Note: FREEBSD DATA STRUCTURES
Note: =====================================================================

Process called "add_syscall_mapping" that takes syscalls as Internals.InternalMap, name as String, number as Integer:
    Note: Helper function to add syscall mapping
    Internals.internal_map_set(syscalls, name, number)
End Process

Type called "FreeBSDSyscallInfo":
    syscall_number as Integer               Note: FreeBSD syscall number
    compat_level as String                  Note: Compatibility level (FREEBSD11, etc.)
    is_obsolete as Boolean                  Note: Whether syscall is obsolete
    replacement as Optional[String]         Note: Replacement if obsolete
    min_version as Integer                  Note: Minimum FreeBSD version
    requires_capability as Boolean          Note: Requires Capsicum capability
    audit_event as Optional[String]         Note: Associated audit event

Type called "JailContext":
    jail_id as Integer                      Note: Jail identifier
    jail_name as String                     Note: Jail name
    restrictions as Internals.InternalArray            Note: Jail restrictions
    allowed_syscalls as Internals.InternalArray        Note: Permitted syscalls in jail
    network_stack as String                 Note: Network stack type (inherited, new)
    file_system_view as String              Note: File system visibility

Type called "CapsicumRights":
    rights as Internals.InternalArray                  Note: Capability rights
    fcntl_rights as Internals.InternalArray           Note: fcntl allowed operations
    ioctl_cmds as Internals.InternalArray            Note: Allowed ioctl commands
    is_capability as Boolean                Note: Whether fd is capability

Type called "KqueueEvent":
    ident as Integer                        Note: Event identifier
    filter as String                        Note: Event filter type
    flags as Integer                        Note: Action flags
    fflags as Integer                       Note: Filter-specific flags
    data as Integer                         Note: Filter-specific data
    udata as Integer                        Note: User-defined data

Note: =====================================================================
Note: FREEBSD PLATFORM IMPLEMENTATION
Note: =====================================================================

Type called "FreeBSDX64Platform" implements PlatformInterface.PlatformSyscalls:
    Note: FreeBSD x86_64 platform implementation
    
    @Implementation
    Implements the PlatformSyscalls interface for FreeBSD on x86_64 architecture.
    Provides syscall numbers, calling conventions, and error mappings.
    @End Implementation
    
    syscall_table as Internals.InternalMap
    error_mappings as Internals.InternalMap
    calling_convention as PlatformInterface.CallingConvention
    freebsd_version as String
    jail_context as Optional[JailContext]
    capsicum_mode as Boolean
End Type

Note: =====================================================================
Note: INTERFACE IMPLEMENTATION METHODS
Note: =====================================================================

Process called "create_freebsd_x64_platform" returns FreeBSDX64Platform:
    Note: Create and initialize FreeBSD x64 platform
    
    Let platform be FreeBSDX64Platform
    Set platform.syscall_table to get_freebsd_x64_syscall_table()
    Set platform.error_mappings to create_error_mappings()
    Set platform.calling_convention to create_calling_convention()
    Set platform.freebsd_version to get_freebsd_version()
    Set platform.jail_context to detect_jail_context()
    Set platform.capsicum_mode to false
    Return platform
End Process

Process called "get_syscall_number" that takes self as FreeBSDX64Platform, name as String returns Integer:
    Note: Implementation of PlatformSyscalls.get_syscall_number
    
    Let name_ptr be Internals.string_to_ptr(name)
    Let result be Internals.internal_map_get(self.syscall_table, name_ptr)
    If result equals 0:
        Return -1
    End If
    Return result
End Process

Process called "get_calling_convention" that takes self as FreeBSDX64Platform returns PlatformInterface.CallingConvention:
    Note: Implementation of PlatformSyscalls.get_calling_convention
    
    Return self.calling_convention
End Process

Process called "supports_syscall" that takes self as FreeBSDX64Platform, name as String returns Boolean:
    Note: Implementation of PlatformSyscalls.supports_syscall
    
    Let name_ptr be Internals.string_to_ptr(name)
    Let result be Internals.internal_map_get(self.syscall_table, name_ptr)
    Return result does not equal 0
End Process

Process called "get_error_mapping" that takes self as FreeBSDX64Platform returns Internals.InternalMap:
    Note: Implementation of PlatformSyscalls.get_error_mapping
    
    Return self.error_mappings
End Process

Process called "get_platform_name" that takes self as FreeBSDX64Platform returns String:
    Note: Implementation of PlatformSyscalls.get_platform_name
    
    Return "freebsd_x86_64"
End Process

Process called "get_kernel_version" that takes self as FreeBSDX64Platform returns String:
    Note: Implementation of PlatformSyscalls.get_kernel_version
    
    Return self.freebsd_version
End Process

Process called "get_architecture" that takes self as FreeBSDX64Platform returns String:
    Note: Implementation of PlatformSyscalls.get_architecture
    
    Return "x86_64"
End Process

Process called "get_max_syscall_args" that takes self as FreeBSDX64Platform returns Integer:
    Note: Implementation of PlatformSyscalls.get_max_syscall_args
    
    Return 6  Note: FreeBSD x64 supports up to 6 syscall arguments
End Process

Note: =====================================================================
Note: FREEBSD VERSION DETECTION AND HELPER FUNCTIONS
Note: =====================================================================

Process called "get_freebsd_version" returns String:
    Note: Get FreeBSD version string
    
    @Implementation
    Uses uname syscall to get FreeBSD version information.
    Parses the version string to extract major and minor version.
    @End Implementation
    
    Let uname_buffer be SyscallDefs.allocate_buffer(512)
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("uname")
    
    Let result be SyscallDefs.runa_syscall1(syscall_num, uname_buffer.address)
    
    If result is greater than or equal to 0:
        Note: Extract version from uname structure (offset 65 for release field)
        Let version_str be ""
        Let offset be 65
        While offset is less than 128:
            Let byte be SyscallDefs.read_byte_at(uname_buffer, offset)
            If byte equals 0:
                Break
            End If
            Note: Append character to version string
            Set version_str to ASCII.concat_strings(version_str, ASCII.from_char(byte))
            Set offset to offset + 1
        End While
        
        SyscallDefs.free_buffer(uname_buffer.address, 512)
        Return version_str
    End If
    
    SyscallDefs.free_buffer(uname_buffer.address, 512)
    Return "Unknown FreeBSD"
End Process

Process called "detect_jail_context" returns Optional[JailContext]:
    Note: Detect if running in a FreeBSD jail
    
    @Implementation
    Uses jail_get syscall to check if we're running in a jail.
    Returns jail context information if in jail, null if not.
    @End Implementation
    
    Let jail_id_buffer be SyscallDefs.allocate_buffer(4)
    Let platform be PlatformInterface.get_current_platform()
    Let syscall_num be platform.get_syscall_number("jail_get")
    
    Note: Query current jail ID
    Let result be SyscallDefs.runa_syscall3(syscall_num, jail_id_buffer.address, 4, 0)
    
    If result is greater than 0:
        Let jail_id be SyscallDefs.read_32bit_at(jail_id_buffer, 0)
        If jail_id is greater than 0:
            Let jail_ctx be JailContext
            Set jail_ctx.jail_id to jail_id
            Set jail_ctx.jail_name to "jail_" + ASCII.integer_to_string(jail_id)
            Set jail_ctx.restrictions to Internals.create_internal_array(0)
            Set jail_ctx.allowed_syscalls to Internals.create_internal_array(0)
            Set jail_ctx.network_stack to "inherited"
            Set jail_ctx.file_system_view to "restricted"
            SyscallDefs.free_buffer(jail_id_buffer.address, 4)
            Return jail_ctx
        End If
    End If
    
    SyscallDefs.free_buffer(jail_id_buffer.address, 4)
    Return Optional.none()
End Process

Process called "create_calling_convention" returns PlatformInterface.CallingConvention:
    Note: Create FreeBSD x86_64 calling convention
    
    Let convention be PlatformInterface.CallingConvention
    Set convention.name to "SystemV"
    Set convention.syscall_register to "rax"
    
    Let param_regs be Internals.create_internal_array(6)
    Internals.internal_array_add(param_regs, Internals.string_to_ptr("rdi"))
    Internals.internal_array_add(param_regs, Internals.string_to_ptr("rsi"))
    Internals.internal_array_add(param_regs, Internals.string_to_ptr("rdx"))
    Internals.internal_array_add(param_regs, Internals.string_to_ptr("r10"))
    Internals.internal_array_add(param_regs, Internals.string_to_ptr("r8"))
    Internals.internal_array_add(param_regs, Internals.string_to_ptr("r9"))
    Set convention.param_registers to param_regs
    
    Set convention.return_register to "rax"
    Set convention.error_register to "rax"  Note: Negative for errors
    Set convention.max_params to 6
    Set convention.instruction to "syscall"
    
    Return convention
End Process

Process called "create_error_mappings" returns Internals.InternalMap:
    Note: Create FreeBSD error code mappings
    
    Let mappings be Internals.create_internal_map()
    
    Note: Add standard BSD error codes
    Let err be PlatformInterface.ErrorMapping
    Set err.platform_code to 1
    Set err.standard_code to 1  Note: EPERM
    Set err.error_name to "EPERM"
    Set err.description to "Operation not permitted"
    Internals.internal_map_insert(mappings, 1, err)
    
    Set err.platform_code to 2
    Set err.standard_code to 2  Note: ENOENT
    Set err.error_name to "ENOENT"
    Set err.description to "No such file or directory"
    Internals.internal_map_insert(mappings, 2, err)
    
    Note: Add more FreeBSD-specific error codes as needed
    
    Return mappings
End Process

Note: =====================================================================
Note: FREEBSD SYSCALL NUMBERS
Note: =====================================================================

Process called "get_freebsd_x64_syscall_table" returns Internals.InternalMap:
    Note: Return complete syscall number mapping for FreeBSD x86_64
    Note: Based on FreeBSD sys/syscall.h
    Note: Includes FreeBSD-specific extensions
    Note: Compatible with FreeBSD 12.x and 13.x
    
    @Implementation
    Provides the FreeBSD syscall table for x86_64.
    @End Implementation
    
    Let syscalls be Internals.internal_map_create()
    
    Note: Core system calls
    add_syscall_mapping(syscalls, "syscall", 0)
    add_syscall_mapping(syscalls, "exit", 1)
    add_syscall_mapping(syscalls, "fork", 2)
    add_syscall_mapping(syscalls, "read", 3)
    add_syscall_mapping(syscalls, "write", 4)
    add_syscall_mapping(syscalls, "open", 5)
    add_syscall_mapping(syscalls, "close", 6)
    add_syscall_mapping(syscalls, "wait4", 7)
    add_syscall_mapping(syscalls, "link", 9)
    add_syscall_mapping(syscalls, "unlink", 10)
    add_syscall_mapping(syscalls, "chdir", 12)
    add_syscall_mapping(syscalls, "fchdir", 13)
    add_syscall_mapping(syscalls, "mknod", 14)
    add_syscall_mapping(syscalls, "chmod", 15)
    add_syscall_mapping(syscalls, "chown", 16)
    add_syscall_mapping(syscalls, "break", 17)
    add_syscall_mapping(syscalls, "getfsstat", 18)
    add_syscall_mapping(syscalls, "lseek", 19)
    add_syscall_mapping(syscalls, "getpid", 20)
    add_syscall_mapping(syscalls, "mount", 21)
    add_syscall_mapping(syscalls, "unmount", 22)
    add_syscall_mapping(syscalls, "setuid", 23)
    add_syscall_mapping(syscalls, "getuid", 24)
    add_syscall_mapping(syscalls, "geteuid", 25)
    add_syscall_mapping(syscalls, "ptrace", 26)
    add_syscall_mapping(syscalls, "recvmsg", 27)
    add_syscall_mapping(syscalls, "sendmsg", 28)
    add_syscall_mapping(syscalls, "recvfrom", 29)
    add_syscall_mapping(syscalls, "accept", 30)
    add_syscall_mapping(syscalls, "getpeername", 31)
    add_syscall_mapping(syscalls, "getsockname", 32)
    add_syscall_mapping(syscalls, "access", 33)
    add_syscall_mapping(syscalls, "chflags", 34)
    add_syscall_mapping(syscalls, "fchflags", 35)
    add_syscall_mapping(syscalls, "sync", 36)
    add_syscall_mapping(syscalls, "kill", 37)
    add_syscall_mapping(syscalls, "stat", 38)
    add_syscall_mapping(syscalls, "getppid", 39)
    add_syscall_mapping(syscalls, "lstat", 40)
    add_syscall_mapping(syscalls, "dup", 41)
    add_syscall_mapping(syscalls, "pipe", 42)
    add_syscall_mapping(syscalls, "getegid", 43)
    add_syscall_mapping(syscalls, "profil", 44)
    add_syscall_mapping(syscalls, "ktrace", 45)
    add_syscall_mapping(syscalls, "sigaction", 46)
    add_syscall_mapping(syscalls, "getgid", 47)
    add_syscall_mapping(syscalls, "sigprocmask", 48)
    add_syscall_mapping(syscalls, "getlogin", 49)
    add_syscall_mapping(syscalls, "setlogin", 50)
    add_syscall_mapping(syscalls, "acct", 51)
    add_syscall_mapping(syscalls, "sigpending", 52)
    add_syscall_mapping(syscalls, "sigaltstack", 53)
    add_syscall_mapping(syscalls, "ioctl", 54)
    add_syscall_mapping(syscalls, "reboot", 55)
    add_syscall_mapping(syscalls, "revoke", 56)
    add_syscall_mapping(syscalls, "symlink", 57)
    add_syscall_mapping(syscalls, "readlink", 58)
    add_syscall_mapping(syscalls, "execve", 59)
    add_syscall_mapping(syscalls, "umask", 60)
    add_syscall_mapping(syscalls, "chroot", 61)
    add_syscall_mapping(syscalls, "fstat", 62)
    add_syscall_mapping(syscalls, "getkerninfo", 63)
    add_syscall_mapping(syscalls, "getpagesize", 64)
    add_syscall_mapping(syscalls, "msync", 65)
    add_syscall_mapping(syscalls, "vfork", 66)
    add_syscall_mapping(syscalls, "sbrk", 69)
    add_syscall_mapping(syscalls, "sstk", 70)
    add_syscall_mapping(syscalls, "mmap", 71)
    add_syscall_mapping(syscalls, "vadvise", 72)
    add_syscall_mapping(syscalls, "munmap", 73)
    add_syscall_mapping(syscalls, "mprotect", 74)
    add_syscall_mapping(syscalls, "madvise", 75)
    add_syscall_mapping(syscalls, "mincore", 78)
    add_syscall_mapping(syscalls, "getgroups", 79)
    add_syscall_mapping(syscalls, "setgroups", 80)
    add_syscall_mapping(syscalls, "getpgrp", 81)
    add_syscall_mapping(syscalls, "setpgid", 82)
    add_syscall_mapping(syscalls, "setitimer", 83)
    add_syscall_mapping(syscalls, "swapon", 85)
    add_syscall_mapping(syscalls, "getitimer", 86)
    add_syscall_mapping(syscalls, "gethostname", 87)
    add_syscall_mapping(syscalls, "sethostname", 88)
    add_syscall_mapping(syscalls, "getdtablesize", 89)
    add_syscall_mapping(syscalls, "dup2", 90)
    add_syscall_mapping(syscalls, "fcntl", 92)
    add_syscall_mapping(syscalls, "select", 93)
    add_syscall_mapping(syscalls, "fsync", 95)
    add_syscall_mapping(syscalls, "setpriority", 96)
    add_syscall_mapping(syscalls, "socket", 97)
    add_syscall_mapping(syscalls, "connect", 98)
    add_syscall_mapping(syscalls, "accept", 99)
    add_syscall_mapping(syscalls, "getpriority", 100)
    add_syscall_mapping(syscalls, "bind", 104)
    add_syscall_mapping(syscalls, "setsockopt", 105)
    add_syscall_mapping(syscalls, "listen", 106)
    add_syscall_mapping(syscalls, "gettimeofday", 116)
    add_syscall_mapping(syscalls, "getrusage", 117)
    add_syscall_mapping(syscalls, "getsockopt", 118)
    add_syscall_mapping(syscalls, "readv", 120)
    add_syscall_mapping(syscalls, "writev", 121)
    add_syscall_mapping(syscalls, "settimeofday", 122)
    add_syscall_mapping(syscalls, "fchown", 123)
    add_syscall_mapping(syscalls, "fchmod", 124)
    add_syscall_mapping(syscalls, "setreuid", 126)
    add_syscall_mapping(syscalls, "setregid", 127)
    add_syscall_mapping(syscalls, "rename", 128)
    add_syscall_mapping(syscalls, "flock", 131)
    add_syscall_mapping(syscalls, "mkfifo", 132)
    add_syscall_mapping(syscalls, "sendto", 133)
    add_syscall_mapping(syscalls, "shutdown", 134)
    add_syscall_mapping(syscalls, "socketpair", 135)
    add_syscall_mapping(syscalls, "mkdir", 136)
    add_syscall_mapping(syscalls, "rmdir", 137)
    add_syscall_mapping(syscalls, "utimes", 138)
    add_syscall_mapping(syscalls, "adjtime", 140)
    add_syscall_mapping(syscalls, "setsid", 147)
    add_syscall_mapping(syscalls, "quotactl", 148)
    add_syscall_mapping(syscalls, "nfssvc", 155)
    add_syscall_mapping(syscalls, "statfs", 157)
    add_syscall_mapping(syscalls, "fstatfs", 158)
    add_syscall_mapping(syscalls, "getfh", 161)
    add_syscall_mapping(syscalls, "sysarch", 165)
    add_syscall_mapping(syscalls, "rtprio", 166)
    add_syscall_mapping(syscalls, "semsys", 169)
    add_syscall_mapping(syscalls, "msgsys", 170)
    add_syscall_mapping(syscalls, "shmsys", 171)
    add_syscall_mapping(syscalls, "pread", 173)
    add_syscall_mapping(syscalls, "pwrite", 174)
    add_syscall_mapping(syscalls, "ntp_adjtime", 176)
    add_syscall_mapping(syscalls, "setgid", 181)
    add_syscall_mapping(syscalls, "setegid", 182)
    add_syscall_mapping(syscalls, "seteuid", 183)
    add_syscall_mapping(syscalls, "stat", 188)
    add_syscall_mapping(syscalls, "fstat", 189)
    add_syscall_mapping(syscalls, "lstat", 190)
    add_syscall_mapping(syscalls, "pathconf", 191)
    add_syscall_mapping(syscalls, "fpathconf", 192)
    add_syscall_mapping(syscalls, "getrlimit", 194)
    add_syscall_mapping(syscalls, "setrlimit", 195)
    add_syscall_mapping(syscalls, "getdirentries", 196)
    add_syscall_mapping(syscalls, "__sysctl", 202)
    add_syscall_mapping(syscalls, "mlock", 203)
    add_syscall_mapping(syscalls, "munlock", 204)
    add_syscall_mapping(syscalls, "undelete", 205)
    add_syscall_mapping(syscalls, "futimes", 206)
    add_syscall_mapping(syscalls, "getpgid", 207)
    add_syscall_mapping(syscalls, "poll", 209)
    add_syscall_mapping(syscalls, "__semctl", 220)
    add_syscall_mapping(syscalls, "semget", 221)
    add_syscall_mapping(syscalls, "semop", 222)
    add_syscall_mapping(syscalls, "msgctl", 224)
    add_syscall_mapping(syscalls, "msgget", 225)
    add_syscall_mapping(syscalls, "msgsnd", 226)
    add_syscall_mapping(syscalls, "msgrcv", 227)
    add_syscall_mapping(syscalls, "shmat", 228)
    add_syscall_mapping(syscalls, "shmctl", 229)
    add_syscall_mapping(syscalls, "shmdt", 230)
    add_syscall_mapping(syscalls, "shmget", 231)
    add_syscall_mapping(syscalls, "clock_gettime", 232)
    add_syscall_mapping(syscalls, "clock_settime", 233)
    add_syscall_mapping(syscalls, "clock_getres", 234)
    add_syscall_mapping(syscalls, "ktimer_create", 235)
    add_syscall_mapping(syscalls, "ktimer_delete", 236)
    add_syscall_mapping(syscalls, "ktimer_settime", 237)
    add_syscall_mapping(syscalls, "ktimer_gettime", 238)
    add_syscall_mapping(syscalls, "ktimer_getoverrun", 239)
    add_syscall_mapping(syscalls, "nanosleep", 240)
    add_syscall_mapping(syscalls, "ffclock_getcounter", 241)
    add_syscall_mapping(syscalls, "ffclock_setestimate", 242)
    add_syscall_mapping(syscalls, "ffclock_getestimate", 243)
    add_syscall_mapping(syscalls, "clock_nanosleep", 244)
    add_syscall_mapping(syscalls, "clock_getcpuclockid2", 247)
    add_syscall_mapping(syscalls, "ntp_gettime", 248)
    add_syscall_mapping(syscalls, "minherit", 250)
    add_syscall_mapping(syscalls, "rfork", 251)
    add_syscall_mapping(syscalls, "issetugid", 253)
    add_syscall_mapping(syscalls, "lchown", 254)
    add_syscall_mapping(syscalls, "aio_read", 255)
    add_syscall_mapping(syscalls, "aio_write", 256)
    add_syscall_mapping(syscalls, "lio_listio", 257)
    add_syscall_mapping(syscalls, "getdents", 272)
    add_syscall_mapping(syscalls, "lchmod", 274)
    add_syscall_mapping(syscalls, "lutimes", 276)
    add_syscall_mapping(syscalls, "nstat", 278)
    add_syscall_mapping(syscalls, "nfstat", 279)
    add_syscall_mapping(syscalls, "nlstat", 280)
    add_syscall_mapping(syscalls, "preadv", 289)
    add_syscall_mapping(syscalls, "pwritev", 290)
    add_syscall_mapping(syscalls, "fhopen", 298)
    add_syscall_mapping(syscalls, "fhstat", 299)
    add_syscall_mapping(syscalls, "modnext", 300)
    add_syscall_mapping(syscalls, "modstat", 301)
    add_syscall_mapping(syscalls, "modfnext", 302)
    add_syscall_mapping(syscalls, "modfind", 303)
    add_syscall_mapping(syscalls, "kldload", 304)
    add_syscall_mapping(syscalls, "kldunload", 305)
    add_syscall_mapping(syscalls, "kldfind", 306)
    add_syscall_mapping(syscalls, "kldnext", 307)
    add_syscall_mapping(syscalls, "kldstat", 308)
    add_syscall_mapping(syscalls, "kldfirstmod", 309)
    add_syscall_mapping(syscalls, "getsid", 310)
    add_syscall_mapping(syscalls, "setresuid", 311)
    add_syscall_mapping(syscalls, "setresgid", 312)
    add_syscall_mapping(syscalls, "aio_return", 314)
    add_syscall_mapping(syscalls, "aio_suspend", 315)
    add_syscall_mapping(syscalls, "aio_cancel", 316)
    add_syscall_mapping(syscalls, "aio_error", 317)
    add_syscall_mapping(syscalls, "yield", 321)
    add_syscall_mapping(syscalls, "mlockall", 324)
    add_syscall_mapping(syscalls, "munlockall", 325)
    add_syscall_mapping(syscalls, "__getcwd", 326)
    add_syscall_mapping(syscalls, "sched_setparam", 327)
    add_syscall_mapping(syscalls, "sched_getparam", 328)
    add_syscall_mapping(syscalls, "sched_setscheduler", 329)
    add_syscall_mapping(syscalls, "sched_getscheduler", 330)
    add_syscall_mapping(syscalls, "sched_yield", 331)
    add_syscall_mapping(syscalls, "sched_get_priority_max", 332)
    add_syscall_mapping(syscalls, "sched_get_priority_min", 333)
    add_syscall_mapping(syscalls, "sched_rr_get_interval", 334)
    add_syscall_mapping(syscalls, "utrace", 335)
    add_syscall_mapping(syscalls, "kldsym", 337)
    add_syscall_mapping(syscalls, "jail", 338)
    add_syscall_mapping(syscalls, "nnpfs_syscall", 339)
    add_syscall_mapping(syscalls, "sigprocmask", 340)
    add_syscall_mapping(syscalls, "sigsuspend", 341)
    add_syscall_mapping(syscalls, "sigpending", 343)
    add_syscall_mapping(syscalls, "sigtimedwait", 345)
    add_syscall_mapping(syscalls, "sigwaitinfo", 346)
    add_syscall_mapping(syscalls, "__acl_get_file", 347)
    add_syscall_mapping(syscalls, "__acl_set_file", 348)
    add_syscall_mapping(syscalls, "__acl_get_fd", 349)
    add_syscall_mapping(syscalls, "__acl_set_fd", 350)
    add_syscall_mapping(syscalls, "__acl_delete_file", 351)
    add_syscall_mapping(syscalls, "__acl_delete_fd", 352)
    add_syscall_mapping(syscalls, "__acl_aclcheck_file", 353)
    add_syscall_mapping(syscalls, "__acl_aclcheck_fd", 354)
    add_syscall_mapping(syscalls, "extattrctl", 355)
    add_syscall_mapping(syscalls, "extattr_set_file", 356)
    add_syscall_mapping(syscalls, "extattr_get_file", 357)
    add_syscall_mapping(syscalls, "extattr_delete_file", 358)
    add_syscall_mapping(syscalls, "aio_waitcomplete", 359)
    add_syscall_mapping(syscalls, "getresuid", 360)
    add_syscall_mapping(syscalls, "getresgid", 361)
    add_syscall_mapping(syscalls, "kqueue", 362)
    add_syscall_mapping(syscalls, "kevent", 363)
    add_syscall_mapping(syscalls, "extattr_set_fd", 371)
    add_syscall_mapping(syscalls, "extattr_get_fd", 372)
    add_syscall_mapping(syscalls, "extattr_delete_fd", 373)
    add_syscall_mapping(syscalls, "__setugid", 374)
    add_syscall_mapping(syscalls, "eaccess", 376)
    add_syscall_mapping(syscalls, "afs3_syscall", 377)
    add_syscall_mapping(syscalls, "nmount", 378)
    add_syscall_mapping(syscalls, "__mac_get_proc", 384)
    add_syscall_mapping(syscalls, "__mac_set_proc", 385)
    add_syscall_mapping(syscalls, "__mac_get_fd", 386)
    add_syscall_mapping(syscalls, "__mac_get_file", 387)
    add_syscall_mapping(syscalls, "__mac_set_fd", 388)
    add_syscall_mapping(syscalls, "__mac_set_file", 389)
    add_syscall_mapping(syscalls, "kenv", 390)
    add_syscall_mapping(syscalls, "lchflags", 391)
    add_syscall_mapping(syscalls, "uuidgen", 392)
    add_syscall_mapping(syscalls, "sendfile", 393)
    add_syscall_mapping(syscalls, "mac_syscall", 394)
    add_syscall_mapping(syscalls, "getfsstat", 395)
    add_syscall_mapping(syscalls, "statfs", 396)
    add_syscall_mapping(syscalls, "fstatfs", 397)
    add_syscall_mapping(syscalls, "fhstatfs", 398)
    add_syscall_mapping(syscalls, "ksem_close", 400)
    add_syscall_mapping(syscalls, "ksem_post", 401)
    add_syscall_mapping(syscalls, "ksem_wait", 402)
    add_syscall_mapping(syscalls, "ksem_trywait", 403)
    add_syscall_mapping(syscalls, "ksem_init", 404)
    add_syscall_mapping(syscalls, "ksem_open", 405)
    add_syscall_mapping(syscalls, "ksem_unlink", 406)
    add_syscall_mapping(syscalls, "ksem_getvalue", 407)
    add_syscall_mapping(syscalls, "ksem_destroy", 408)
    add_syscall_mapping(syscalls, "__mac_get_pid", 409)
    add_syscall_mapping(syscalls, "__mac_get_link", 410)
    add_syscall_mapping(syscalls, "__mac_set_link", 411)
    add_syscall_mapping(syscalls, "extattr_set_link", 412)
    add_syscall_mapping(syscalls, "extattr_get_link", 413)
    add_syscall_mapping(syscalls, "extattr_delete_link", 414)
    add_syscall_mapping(syscalls, "__mac_execve", 415)
    add_syscall_mapping(syscalls, "sigaction", 416)
    add_syscall_mapping(syscalls, "sigreturn", 417)
    add_syscall_mapping(syscalls, "getcontext", 421)
    add_syscall_mapping(syscalls, "setcontext", 422)
    add_syscall_mapping(syscalls, "swapcontext", 423)
    add_syscall_mapping(syscalls, "swapoff", 424)
    add_syscall_mapping(syscalls, "__acl_get_link", 425)
    add_syscall_mapping(syscalls, "__acl_set_link", 426)
    add_syscall_mapping(syscalls, "__acl_delete_link", 427)
    add_syscall_mapping(syscalls, "__acl_aclcheck_link", 428)
    add_syscall_mapping(syscalls, "sigwait", 429)
    add_syscall_mapping(syscalls, "thr_create", 430)
    add_syscall_mapping(syscalls, "thr_exit", 431)
    add_syscall_mapping(syscalls, "thr_self", 432)
    add_syscall_mapping(syscalls, "thr_kill", 433)
    add_syscall_mapping(syscalls, "jail_attach", 436)
    add_syscall_mapping(syscalls, "extattr_list_fd", 437)
    add_syscall_mapping(syscalls, "extattr_list_file", 438)
    add_syscall_mapping(syscalls, "extattr_list_link", 439)
    add_syscall_mapping(syscalls, "ksem_timedwait", 441)
    add_syscall_mapping(syscalls, "thr_suspend", 442)
    add_syscall_mapping(syscalls, "thr_wake", 443)
    add_syscall_mapping(syscalls, "kldunloadf", 444)
    add_syscall_mapping(syscalls, "audit", 445)
    add_syscall_mapping(syscalls, "auditon", 446)
    add_syscall_mapping(syscalls, "getauid", 447)
    add_syscall_mapping(syscalls, "setauid", 448)
    add_syscall_mapping(syscalls, "getaudit", 449)
    add_syscall_mapping(syscalls, "setaudit", 450)
    add_syscall_mapping(syscalls, "getaudit_addr", 451)
    add_syscall_mapping(syscalls, "setaudit_addr", 452)
    add_syscall_mapping(syscalls, "auditctl", 453)
    add_syscall_mapping(syscalls, "_umtx_op", 454)
    add_syscall_mapping(syscalls, "thr_new", 455)
    add_syscall_mapping(syscalls, "sigqueue", 456)
    add_syscall_mapping(syscalls, "kmq_open", 457)
    add_syscall_mapping(syscalls, "kmq_setattr", 458)
    add_syscall_mapping(syscalls, "kmq_timedreceive", 459)
    add_syscall_mapping(syscalls, "kmq_timedsend", 460)
    add_syscall_mapping(syscalls, "kmq_notify", 461)
    add_syscall_mapping(syscalls, "kmq_unlink", 462)
    add_syscall_mapping(syscalls, "abort2", 463)
    add_syscall_mapping(syscalls, "thr_set_name", 464)
    add_syscall_mapping(syscalls, "aio_fsync", 465)
    add_syscall_mapping(syscalls, "rtprio_thread", 466)
    add_syscall_mapping(syscalls, "sctp_peeloff", 471)
    add_syscall_mapping(syscalls, "sctp_generic_sendmsg", 472)
    add_syscall_mapping(syscalls, "sctp_generic_sendmsg_iov", 473)
    add_syscall_mapping(syscalls, "sctp_generic_recvmsg", 474)
    add_syscall_mapping(syscalls, "pread", 475)
    add_syscall_mapping(syscalls, "pwrite", 476)
    add_syscall_mapping(syscalls, "mmap", 477)
    add_syscall_mapping(syscalls, "lseek", 478)
    add_syscall_mapping(syscalls, "truncate", 479)
    add_syscall_mapping(syscalls, "ftruncate", 480)
    add_syscall_mapping(syscalls, "thr_kill2", 481)
    add_syscall_mapping(syscalls, "shm_open", 482)
    add_syscall_mapping(syscalls, "shm_unlink", 483)
    add_syscall_mapping(syscalls, "cpuset", 484)
    add_syscall_mapping(syscalls, "cpuset_setid", 485)
    add_syscall_mapping(syscalls, "cpuset_getid", 486)
    add_syscall_mapping(syscalls, "cpuset_getaffinity", 487)
    add_syscall_mapping(syscalls, "cpuset_setaffinity", 488)
    add_syscall_mapping(syscalls, "faccessat", 489)
    add_syscall_mapping(syscalls, "fchmodat", 490)
    add_syscall_mapping(syscalls, "fchownat", 491)
    add_syscall_mapping(syscalls, "fexecve", 492)
    add_syscall_mapping(syscalls, "fstatat", 493)
    add_syscall_mapping(syscalls, "futimesat", 494)
    add_syscall_mapping(syscalls, "linkat", 495)
    add_syscall_mapping(syscalls, "mkdirat", 496)
    add_syscall_mapping(syscalls, "mkfifoat", 497)
    add_syscall_mapping(syscalls, "mknodat", 498)
    add_syscall_mapping(syscalls, "openat", 499)
    add_syscall_mapping(syscalls, "readlinkat", 500)
    add_syscall_mapping(syscalls, "renameat", 501)
    add_syscall_mapping(syscalls, "symlinkat", 502)
    add_syscall_mapping(syscalls, "unlinkat", 503)
    add_syscall_mapping(syscalls, "posix_openpt", 504)
    add_syscall_mapping(syscalls, "gssd_syscall", 505)
    add_syscall_mapping(syscalls, "jail_get", 506)
    add_syscall_mapping(syscalls, "jail_set", 507)
    add_syscall_mapping(syscalls, "jail_remove", 508)
    add_syscall_mapping(syscalls, "closefrom", 509)
    add_syscall_mapping(syscalls, "__semctl", 510)
    add_syscall_mapping(syscalls, "msgctl", 511)
    add_syscall_mapping(syscalls, "shmctl", 512)
    add_syscall_mapping(syscalls, "lpathconf", 513)
    add_syscall_mapping(syscalls, "__cap_rights_get", 515)
    add_syscall_mapping(syscalls, "cap_enter", 516)
    add_syscall_mapping(syscalls, "cap_getmode", 517)
    add_syscall_mapping(syscalls, "pdfork", 518)
    add_syscall_mapping(syscalls, "pdkill", 519)
    add_syscall_mapping(syscalls, "pdgetpid", 520)
    add_syscall_mapping(syscalls, "pselect", 522)
    add_syscall_mapping(syscalls, "getloginclass", 523)
    add_syscall_mapping(syscalls, "setloginclass", 524)
    add_syscall_mapping(syscalls, "rctl_get_racct", 525)
    add_syscall_mapping(syscalls, "rctl_get_rules", 526)
    add_syscall_mapping(syscalls, "rctl_get_limits", 527)
    add_syscall_mapping(syscalls, "rctl_add_rule", 528)
    add_syscall_mapping(syscalls, "rctl_remove_rule", 529)
    add_syscall_mapping(syscalls, "posix_fallocate", 530)
    add_syscall_mapping(syscalls, "posix_fadvise", 531)
    add_syscall_mapping(syscalls, "wait6", 532)
    add_syscall_mapping(syscalls, "cap_rights_limit", 533)
    add_syscall_mapping(syscalls, "cap_ioctls_limit", 534)
    add_syscall_mapping(syscalls, "cap_ioctls_get", 535)
    add_syscall_mapping(syscalls, "cap_fcntls_limit", 536)
    add_syscall_mapping(syscalls, "cap_fcntls_get", 537)
    add_syscall_mapping(syscalls, "bindat", 538)
    add_syscall_mapping(syscalls, "connectat", 539)
    add_syscall_mapping(syscalls, "chflagsat", 540)
    add_syscall_mapping(syscalls, "accept4", 541)
    add_syscall_mapping(syscalls, "pipe2", 542)
    add_syscall_mapping(syscalls, "aio_mlock", 543)
    add_syscall_mapping(syscalls, "procctl", 544)
    add_syscall_mapping(syscalls, "ppoll", 545)
    add_syscall_mapping(syscalls, "futimens", 546)
    add_syscall_mapping(syscalls, "utimensat", 547)
    add_syscall_mapping(syscalls, "fdatasync", 550)
    add_syscall_mapping(syscalls, "fstat", 551)
    add_syscall_mapping(syscalls, "fstatat", 552)
    add_syscall_mapping(syscalls, "fhstat", 553)
    add_syscall_mapping(syscalls, "getdirentries", 554)
    add_syscall_mapping(syscalls, "statfs", 555)
    add_syscall_mapping(syscalls, "fstatfs", 556)
    add_syscall_mapping(syscalls, "getfsstat", 557)
    add_syscall_mapping(syscalls, "fhstatfs", 558)
    add_syscall_mapping(syscalls, "mknodat", 559)
    add_syscall_mapping(syscalls, "kevent", 560)
    add_syscall_mapping(syscalls, "cpuset_getdomain", 561)
    add_syscall_mapping(syscalls, "cpuset_setdomain", 562)
    add_syscall_mapping(syscalls, "getrandom", 563)
    add_syscall_mapping(syscalls, "getfhat", 564)
    add_syscall_mapping(syscalls, "fhlink", 565)
    add_syscall_mapping(syscalls, "fhlinkat", 566)
    add_syscall_mapping(syscalls, "fhreadlink", 567)
    add_syscall_mapping(syscalls, "funlinkat", 568)
    add_syscall_mapping(syscalls, "copy_file_range", 569)
    add_syscall_mapping(syscalls, "__sysctlbyname", 570)
    add_syscall_mapping(syscalls, "shm_open2", 571)
    add_syscall_mapping(syscalls, "shm_rename", 572)
    add_syscall_mapping(syscalls, "sigfastblock", 573)
    add_syscall_mapping(syscalls, "__realpathat", 574)
    add_syscall_mapping(syscalls, "close_range", 575)
    add_syscall_mapping(syscalls, "rpctls_syscall", 576)
    add_syscall_mapping(syscalls, "__specialfd", 577)
    add_syscall_mapping(syscalls, "aio_writev", 578)
    add_syscall_mapping(syscalls, "aio_readv", 579)
    
    Return syscalls

Process called "get_jail_syscalls" returns Internals.InternalMap:
    Note: Jail-related system calls
    Note: jail=338, jail_attach=436, jail_get=506
    Note: jail_set=507, jail_remove=508
    
    Let syscalls be Internals.internal_map_create()
    
    add_syscall_mapping(syscalls, "jail", 338)
    add_syscall_mapping(syscalls, "jail_attach", 436)
    add_syscall_mapping(syscalls, "jail_get", 506)
    add_syscall_mapping(syscalls, "jail_set", 507)
    add_syscall_mapping(syscalls, "jail_remove", 508)
    
    Return syscalls

Process called "get_capsicum_syscalls" returns Internals.InternalMap:
    Note: Capsicum capability syscalls
    Note: cap_enter=516, cap_getmode=517
    Note: cap_rights_limit=533, cap_ioctls_limit=534
    
    Let syscalls be Internals.internal_map_create()
    
    add_syscall_mapping(syscalls, "__cap_rights_get", 515)
    add_syscall_mapping(syscalls, "cap_enter", 516)
    add_syscall_mapping(syscalls, "cap_getmode", 517)
    add_syscall_mapping(syscalls, "cap_rights_limit", 533)
    add_syscall_mapping(syscalls, "cap_ioctls_limit", 534)
    add_syscall_mapping(syscalls, "cap_ioctls_get", 535)
    add_syscall_mapping(syscalls, "cap_fcntls_limit", 536)
    add_syscall_mapping(syscalls, "cap_fcntls_get", 537)
    
    Return syscalls

Process called "get_kqueue_syscalls" returns Internals.InternalMap:
    Note: kqueue event notification syscalls
    Note: kqueue=362, kevent=363
    Note: More efficient than select/poll
    
    Let syscalls be Internals.internal_map_create()
    
    add_syscall_mapping(syscalls, "kqueue", 362)
    add_syscall_mapping(syscalls, "kevent", 363)
    add_syscall_mapping(syscalls, "kevent", 560)  Note: New kevent syscall
    
    Return syscalls

Process called "get_zfs_syscalls" returns Internals.InternalMap:
    Note: ZFS-specific operations
    Note: Through ioctl interface
    Note: Dataset management
    
    Let syscalls be Internals.internal_map_create()
    
    Note: ZFS operations go through ioctl (54)
    add_syscall_mapping(syscalls, "ioctl", 54)
    
    Note: ZFS ioctl command codes
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_CREATE", 0x5A00)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_DESTROY", 0x5A01)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_IMPORT", 0x5A02)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_EXPORT", 0x5A03)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_CONFIGS", 0x5A04)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_STATS", 0x5A05)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_TRYIMPORT", 0x5A06)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_SCAN", 0x5A07)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_FREEZE", 0x5A08)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_UPGRADE", 0x5A09)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_GET_HISTORY", 0x5A0A)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_ADD", 0x5A0B)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_REMOVE", 0x5A0C)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_SET_STATE", 0x5A0D)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_ATTACH", 0x5A0E)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_DETACH", 0x5A0F)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_SETPATH", 0x5A10)
    add_syscall_mapping(syscalls, "ZFS_IOC_VDEV_SETFRU", 0x5A11)
    add_syscall_mapping(syscalls, "ZFS_IOC_OBJSET_STATS", 0x5A12)
    add_syscall_mapping(syscalls, "ZFS_IOC_OBJSET_ZPLPROPS", 0x5A13)
    add_syscall_mapping(syscalls, "ZFS_IOC_DATASET_LIST_NEXT", 0x5A14)
    add_syscall_mapping(syscalls, "ZFS_IOC_SNAPSHOT_LIST_NEXT", 0x5A15)
    add_syscall_mapping(syscalls, "ZFS_IOC_SET_PROP", 0x5A16)
    add_syscall_mapping(syscalls, "ZFS_IOC_CREATE", 0x5A17)
    add_syscall_mapping(syscalls, "ZFS_IOC_DESTROY", 0x5A18)
    add_syscall_mapping(syscalls, "ZFS_IOC_ROLLBACK", 0x5A19)
    add_syscall_mapping(syscalls, "ZFS_IOC_RENAME", 0x5A1A)
    add_syscall_mapping(syscalls, "ZFS_IOC_RECV", 0x5A1B)
    add_syscall_mapping(syscalls, "ZFS_IOC_SEND", 0x5A1C)
    add_syscall_mapping(syscalls, "ZFS_IOC_INJECT_FAULT", 0x5A1D)
    add_syscall_mapping(syscalls, "ZFS_IOC_CLEAR_FAULT", 0x5A1E)
    add_syscall_mapping(syscalls, "ZFS_IOC_INJECT_LIST_NEXT", 0x5A1F)
    add_syscall_mapping(syscalls, "ZFS_IOC_ERROR_LOG", 0x5A20)
    add_syscall_mapping(syscalls, "ZFS_IOC_CLEAR", 0x5A21)
    add_syscall_mapping(syscalls, "ZFS_IOC_PROMOTE", 0x5A22)
    add_syscall_mapping(syscalls, "ZFS_IOC_SNAPSHOT", 0x5A23)
    add_syscall_mapping(syscalls, "ZFS_IOC_DSOBJ_TO_DSNAME", 0x5A24)
    add_syscall_mapping(syscalls, "ZFS_IOC_OBJ_TO_PATH", 0x5A25)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_SET_PROPS", 0x5A26)
    add_syscall_mapping(syscalls, "ZFS_IOC_POOL_GET_PROPS", 0x5A27)
    add_syscall_mapping(syscalls, "ZFS_IOC_SET_FSACL", 0x5A28)
    add_syscall_mapping(syscalls, "ZFS_IOC_GET_FSACL", 0x5A29)
    add_syscall_mapping(syscalls, "ZFS_IOC_SHARE", 0x5A2A)
    add_syscall_mapping(syscalls, "ZFS_IOC_INHERIT_PROP", 0x5A2B)
    add_syscall_mapping(syscalls, "ZFS_IOC_SMB_ACL", 0x5A2C)
    
    Return syscalls

Note: =====================================================================
Note: CALLING CONVENTION
Note: =====================================================================

Process called "get_parameter_registers" returns Internals.InternalArray:
    Note: Return parameter registers in order
    Note: RDI, RSI, RDX, R10, R8, R9
    Note: Similar to Linux x86_64
    Note: Additional parameters on stack
    
    Let registers be Internals.internal_array_create()
    Internals.internal_array_add(registers, "RDI")  Note: First parameter
    Internals.internal_array_add(registers, "RSI")  Note: Second parameter  
    Internals.internal_array_add(registers, "RDX")  Note: Third parameter
    Internals.internal_array_add(registers, "R10")  Note: Fourth parameter (RCX clobbered)
    Internals.internal_array_add(registers, "R8")   Note: Fifth parameter
    Internals.internal_array_add(registers, "R9")   Note: Sixth parameter
    Note: Additional parameters go on stack
    
    Return registers

Process called "get_return_register" returns String:
    Note: Return value register (RAX)
    Note: Error indicated by carry flag
    Note: errno value in RAX on error
    
    Return "RAX"  Note: System calls return in RAX

Process called "get_clobber_list" returns Internals.InternalArray:
    Note: Registers clobbered by syscall
    Note: RCX and R11 modified
    Note: Similar to Linux behavior
    
    Let clobbers be Internals.internal_array_create()
    Internals.internal_array_add(clobbers, "RCX")  Note: Used by syscall instruction
    Internals.internal_array_add(clobbers, "R11")  Note: Used to save RFLAGS
    
    Return clobbers

Note: =====================================================================
Note: JAIL OPERATIONS
Note: =====================================================================

Process called "create_jail_context" that takes config as Internals.InternalMap returns JailContext:
    Note: Create new jail configuration
    Note: Set jail parameters
    Note: Configure restrictions
    
    Let context be JailContext()
    
    Note: Set jail parameters from config
    Set context.jail_id to config.get("jail_id", 0)
    Set context.jail_name to config.get("name", "default_jail")
    Set context.network_stack to config.get("network", "inherited")
    Set context.file_system_view to config.get("fs_view", "restricted")
    
    Note: Set restrictions
    Set context.restrictions to Internals.internal_array_create()
    If config.get("allow_raw_sockets", false):
        Internals.internal_array_add(context.restrictions, "allow.raw_sockets")
    End If
    If config.get("allow_mount", false):
        Internals.internal_array_add(context.restrictions, "allow.mount")
    End If
    If config.get("allow_set_hostname", false):
        Internals.internal_array_add(context.restrictions, "allow.set_hostname")
    End If
    If config.get("allow_sysvipc", false):
        Internals.internal_array_add(context.restrictions, "allow.sysvipc")
    End If
    
    Note: Set allowed syscalls
    Set context.allowed_syscalls to Internals.internal_array_create()
    Internals.internal_array_add(context.allowed_syscalls, "read")
    Internals.internal_array_add(context.allowed_syscalls, "write")
    Internals.internal_array_add(context.allowed_syscalls, "open")
    Internals.internal_array_add(context.allowed_syscalls, "close")
    Internals.internal_array_add(context.allowed_syscalls, "stat")
    Internals.internal_array_add(context.allowed_syscalls, "fstat")
    Internals.internal_array_add(context.allowed_syscalls, "lstat")
    Internals.internal_array_add(context.allowed_syscalls, "poll")
    Internals.internal_array_add(context.allowed_syscalls, "lseek")
    Internals.internal_array_add(context.allowed_syscalls, "mmap")
    Internals.internal_array_add(context.allowed_syscalls, "mprotect")
    Internals.internal_array_add(context.allowed_syscalls, "munmap")
    Internals.internal_array_add(context.allowed_syscalls, "brk")
    Internals.internal_array_add(context.allowed_syscalls, "rt_sigaction")
    Internals.internal_array_add(context.allowed_syscalls, "rt_sigprocmask")
    Internals.internal_array_add(context.allowed_syscalls, "ioctl")
    Internals.internal_array_add(context.allowed_syscalls, "access")
    Internals.internal_array_add(context.allowed_syscalls, "pipe")
    Internals.internal_array_add(context.allowed_syscalls, "select")
    Internals.internal_array_add(context.allowed_syscalls, "mremap")
    Internals.internal_array_add(context.allowed_syscalls, "msync")
    Internals.internal_array_add(context.allowed_syscalls, "mincore")
    Internals.internal_array_add(context.allowed_syscalls, "madvise")
    Internals.internal_array_add(context.allowed_syscalls, "dup")
    Internals.internal_array_add(context.allowed_syscalls, "dup2")
    Internals.internal_array_add(context.allowed_syscalls, "pause")
    Internals.internal_array_add(context.allowed_syscalls, "nanosleep")
    Internals.internal_array_add(context.allowed_syscalls, "getitimer")
    Internals.internal_array_add(context.allowed_syscalls, "alarm")
    Internals.internal_array_add(context.allowed_syscalls, "setitimer")
    Internals.internal_array_add(context.allowed_syscalls, "getpid")
    
    Return context

Process called "check_jail_restrictions" that takes syscall_name as String, jail_id as Integer returns Boolean:
    Note: Check if syscall allowed in jail
    Note: Enforce jail security policy
    Note: Return permission status
    
    Note: Get jail syscalls
    Let jail_syscalls be get_jail_syscalls()
    
    Note: Always allow basic syscalls
    Let allowed_basic be List[String]()
    allowed_basic.add("read")
    allowed_basic.add("write")
    allowed_basic.add("open")
    allowed_basic.add("close")
    allowed_basic.add("stat")
    allowed_basic.add("fstat")
    allowed_basic.add("lstat")
    allowed_basic.add("exit")
    allowed_basic.add("getpid")
    allowed_basic.add("getuid")
    allowed_basic.add("getgid")
    
    Note: Check if syscall is in allowed list
    Let i be 0
    While i is less than allowed_basic.length():
        If syscall_name is equal to allowed_basic[i]:
            Return true
        End If
        Set i to i plus 1
    End While
    
    Note: Deny jail-manipulation syscalls from within jail
    If syscall_name is equal to "jail" or syscall_name is equal to "jail_set" or syscall_name is equal to "jail_remove":
        Return false
    End If
    
    Note: Deny capability mode changes from jail
    If syscall_name is equal to "cap_enter":
        Return false
    End If
    
    Note: Default allow if not explicitly denied
    Return true

Process called "get_jail_info" that takes jail_id as Integer returns JailContext:
    Note: Query jail configuration
    Note: Get current restrictions
    Note: Return jail context
    
    Let context be JailContext()
    
    Note: Prepare iovec structures for jail_get syscall
    Let params_buffer be SyscallDefs.allocate_buffer(256)
    Let iov_buffer be SyscallDefs.allocate_buffer(32)  Note: 2 iovecs * 16 bytes
    
    Note: Setup jail ID parameter
    SyscallDefs.write_32bit_at(params_buffer, 0, jail_id)
    
    Note: Setup iovec for jail ID
    SyscallDefs.write_64bit_at(iov_buffer, 0, params_buffer.address)  Note: iov_base
    SyscallDefs.write_64bit_at(iov_buffer, 8, 4)  Note: iov_len
    
    Note: Setup iovec for output
    Let result_buffer be SyscallDefs.allocate_buffer(512)
    SyscallDefs.write_64bit_at(iov_buffer, 16, result_buffer.address)  Note: iov_base
    SyscallDefs.write_64bit_at(iov_buffer, 24, 512)  Note: iov_len
    
    Note: Call jail_get (506)
    Let result be SyscallDefs.runa_syscall2(506, iov_buffer.address, 2)
    
    If result is greater than or equal to 0:
        Set context.jail_id to jail_id
        Set context.jail_name to "jail_"  joined with jail_id
        Set context.network_stack to "inherited"
        Set context.file_system_view to "restricted"
        Set context.restrictions to Internals.internal_array_create()
        Set context.allowed_syscalls to Internals.internal_array_create()
    Otherwise:
        Set context.jail_id to minus 1
        Set context.jail_name to "error"
    End If
    
    SyscallDefs.free_buffer(params_buffer.address, 256)
    SyscallDefs.free_buffer(iov_buffer.address, 32)
    SyscallDefs.free_buffer(result_buffer.address, 512)
    
    Return context

Note: =====================================================================
Note: CAPSICUM CAPABILITIES
Note: =====================================================================

Process called "enter_capability_mode" returns Boolean:
    Note: Enter Capsicum capability mode
    Note: Restrict future operations
    Note: No escape once entered
    
    Let result be SyscallDefs.runa_syscall0(516)  Note: cap_enter syscall
    Return result is equal to 0

Process called "limit_fd_rights" that takes fd as Integer, rights as CapsicumRights returns Boolean:
    Note: Limit file descriptor rights
    Note: Apply Capsicum capabilities
    Note: Permanent restriction
    
    Note: cap_rights_limit syscall (533)
    Let rights_buffer be SyscallDefs.allocate_buffer(16)  Note: cap_rights_t structure
    
    Note: Encode rights into bitmask
    Let rights_mask be 0
    Let i be 0
    While i is less than rights.rights.length():
        Let right be rights.rights[i]
        If right is equal to "read": Set rights_mask to rights_mask or 0x0000000000000001
        Otherwise right is equal to "write": Set rights_mask to rights_mask or 0x0000000000000002
        Otherwise right is equal to "seek": Set rights_mask to rights_mask or 0x0000000000000008
        Otherwise right is equal to "fstat": Set rights_mask to rights_mask or 0x0000000000000010
        Otherwise right is equal to "ioctl": Set rights_mask to rights_mask or 0x0000000000000080
        Otherwise right is equal to "fcntl": Set rights_mask to rights_mask or 0x0000000000000100
        Otherwise right is equal to "mmap": Set rights_mask to rights_mask or 0x0000000000001000
        Otherwise right is equal to "poll": Set rights_mask to rights_mask or 0x0000000000010000
        Set i to i plus 1
    End While
    
    SyscallDefs.write_64bit_at(rights_buffer, 0, rights_mask)
    SyscallDefs.write_64bit_at(rights_buffer, 8, 0)  Note: Second word of rights
    
    Let result be SyscallDefs.runa_syscall2(533, fd, rights_buffer.address)
    SyscallDefs.free_buffer(rights_buffer.address, 16)
    
    Return result is equal to 0

Process called "check_capability_rights" that takes fd as Integer returns CapsicumRights:
    Note: Query current fd capabilities
    Note: Return rights structure
    Note: Check what operations allowed
    
    Let rights be CapsicumRights()
    rights.rights = Internals.internal_array_create()
    rights.fcntl_rights = Internals.internal_array_create()
    rights.ioctl_cmds = Internals.internal_array_create()
    
    Let rights_buffer be SyscallDefs.allocate_buffer(16)  Note: cap_rights_t structure
    
    Note: __cap_rights_get syscall (515)
    Let result be SyscallDefs.runa_syscall2(515, fd, rights_buffer.address)
    
    If result is equal to 0:
        Let rights_mask be SyscallDefs.read_64bit_at(rights_buffer, 0)
        
        Note: Decode rights mask into list
        If (rights_mask and 0x0000000000000001) is not equal to 0: rights.rights.add("read")
        If (rights_mask and 0x0000000000000002) is not equal to 0: rights.rights.add("write")
        If (rights_mask and 0x0000000000000008) is not equal to 0: rights.rights.add("seek")
        If (rights_mask and 0x0000000000000010) is not equal to 0: rights.rights.add("fstat")
        If (rights_mask and 0x0000000000000080) is not equal to 0: rights.rights.add("ioctl")
        If (rights_mask and 0x0000000000000100) is not equal to 0: rights.rights.add("fcntl")
        If (rights_mask and 0x0000000000001000) is not equal to 0: rights.rights.add("mmap")
        If (rights_mask and 0x0000000000010000) is not equal to 0: rights.rights.add("poll")
        
        rights.is_capability = true
    Otherwise:
        rights.is_capability = false
    End If
    
    SyscallDefs.free_buffer(rights_buffer.address, 16)
    Return rights

Note: =====================================================================
Note: KQUEUE EVENT SYSTEM
Note: =====================================================================

Process called "create_kqueue" returns Integer:
    Note: Create new kernel event queue
    Note: More scalable than select/poll
    Note: Return kqueue descriptor
    
    Let kq be SyscallDefs.runa_syscall0(362)  Note: kqueue syscall
    Return kq

Process called "register_kevent" that takes kq as Integer, event as KqueueEvent returns Boolean:
    Note: Register event with kqueue
    Note: Set up monitoring
    Note: Configure filters
    
    Note: kevent structure is 64 bytes on FreeBSD x64
    Let event_buffer be SyscallDefs.allocate_buffer(64)
    
    Note: Map filter string to integer constant
    Let filter_value be 0
    If event.filter is equal to "EVFILT_READ": Set filter_value to minus 1
    Otherwise event.filter is equal to "EVFILT_WRITE": Set filter_value to minus 2
    Otherwise event.filter is equal to "EVFILT_AIO": Set filter_value to minus 3
    Otherwise event.filter is equal to "EVFILT_VNODE": Set filter_value to minus 4
    Otherwise event.filter is equal to "EVFILT_PROC": Set filter_value to minus 5
    Otherwise event.filter is equal to "EVFILT_SIGNAL": Set filter_value to minus 6
    Otherwise event.filter is equal to "EVFILT_TIMER": Set filter_value to minus 7
    Otherwise event.filter is equal to "EVFILT_USER": Set filter_value to minus 11
    
    Note: Initialize kevent structure
    SyscallDefs.write_64bit_at(event_buffer, 0, event.ident)       Note: Identifier
    SyscallDefs.write_16bit_at(event_buffer, 8, filter_value)      Note: Filter type
    SyscallDefs.write_16bit_at(event_buffer, 10, event.flags)      Note: Action flags
    SyscallDefs.write_32bit_at(event_buffer, 12, event.fflags)     Note: Filter flags
    SyscallDefs.write_64bit_at(event_buffer, 16, event.data)       Note: Filter data
    SyscallDefs.write_64bit_at(event_buffer, 24, event.udata)      Note: User data
    
    Note: kevent syscall (363) - register event
    Let result be SyscallDefs.runa_syscall6(363, kq, event_buffer.address, 1, 0, 0, 0)
    SyscallDefs.free_buffer(event_buffer.address, 64)
    
    Return result is equal to 1

Process called "wait_for_kevents" that takes kq as Integer, timeout as Integer returns List[KqueueEvent]:
    Note: Wait for kqueue events
    Note: Return triggered events
    Note: Handle timeout
    
    Let events be List[KqueueEvent]()
    Let max_events be 16
    Let event_buffer be SyscallDefs.allocate_buffer(64 times max_events)  Note: Space for multiple events
    
    Let timeout_ptr be 0
    Let timeout_buffer be SyscallDefs.allocate_buffer(16)  Note: timespec structure
    
    If timeout is greater than or equal to 0:
        Note: Convert milliseconds to timespec
        Let seconds be timeout divided by 1000
        Let nanoseconds be (timeout modulo 1000) times 1000000
        SyscallDefs.write_64bit_at(timeout_buffer, 0, seconds)
        SyscallDefs.write_64bit_at(timeout_buffer, 8, nanoseconds)
        Set timeout_ptr to timeout_buffer.address
    End If
    
    Note: kevent syscall - wait for events
    Let result be SyscallDefs.runa_syscall6(363, kq, 0, 0, event_buffer.address, max_events, timeout_ptr)
    
    If result is greater than 0:
        Let i be 0
        While i is less than result:
            Let offset be i times 64
            Let event be KqueueEvent()
            event.ident = SyscallDefs.read_64bit_at(event_buffer, offset)
            
            Let filter_val be SyscallDefs.read_16bit_at(event_buffer, offset plus 8)
            If filter_val is equal to minus 1: event.filter = "EVFILT_READ"
            Otherwise filter_val is equal to minus 2: event.filter = "EVFILT_WRITE"
            Otherwise filter_val is equal to minus 3: event.filter = "EVFILT_AIO"
            Otherwise filter_val is equal to minus 4: event.filter = "EVFILT_VNODE"
            Otherwise filter_val is equal to minus 5: event.filter = "EVFILT_PROC"
            Otherwise filter_val is equal to minus 6: event.filter = "EVFILT_SIGNAL"
            Otherwise filter_val is equal to minus 7: event.filter = "EVFILT_TIMER"
            Otherwise filter_val is equal to minus 11: event.filter = "EVFILT_USER"
            Otherwise: event.filter = "EVFILT_UNKNOWN"
            
            event.flags = SyscallDefs.read_16bit_at(event_buffer, offset plus 10)
            event.fflags = SyscallDefs.read_32bit_at(event_buffer, offset plus 12)
            event.data = SyscallDefs.read_64bit_at(event_buffer, offset plus 16)
            event.udata = SyscallDefs.read_64bit_at(event_buffer, offset plus 24)
            events.add(event)
            Set i to i plus 1
        End While
    End If
    
    SyscallDefs.free_buffer(event_buffer.address, 64 times max_events)
    If timeout_ptr is not equal to 0:
        SyscallDefs.free_buffer(timeout_buffer.address, 16)
    End If
    
    Return events

Note: =====================================================================
Note: PLATFORM-SPECIFIC FEATURES
Note: =====================================================================

Process called "get_dtrace_probes" returns Dictionary[String, Integer]:
    Note: DTrace probe points
    Note: For system observability
    Note: Performance analysis
    
    Let probes be Dictionary[String, Integer]()
    
    Note: Common DTrace provider probe IDs
    probes.set("syscall:::entry", 0x1000)
    probes.set("syscall:::return", 0x1001)
    probes.set("proc:::exec-success", 0x2000)
    probes.set("proc:::exec-failure", 0x2001)
    probes.set("proc:::exit", 0x2002)
    probes.set("proc:::fork", 0x2003)
    probes.set("proc:::signal-send", 0x2004)
    probes.set("proc:::signal-discard", 0x2005)
    probes.set("io:::start", 0x3000)
    probes.set("io:::done", 0x3001)
    probes.set("io:::wait-start", 0x3002)
    probes.set("io:::wait-done", 0x3003)
    probes.set("sched:::on-cpu", 0x4000)
    probes.set("sched:::off-cpu", 0x4001)
    probes.set("sched:::preempt", 0x4002)
    probes.set("sched:::sleep", 0x4003)
    probes.set("sched:::wakeup", 0x4004)
    probes.set("vminfo:::pagefault", 0x5000)
    probes.set("vminfo:::maj_fault", 0x5001)
    probes.set("vminfo:::cow_fault", 0x5002)
    probes.set("vminfo:::zfod", 0x5003)
    probes.set("tcp:::send", 0x6000)
    probes.set("tcp:::receive", 0x6001)
    probes.set("tcp:::connect-established", 0x6002)
    probes.set("tcp:::connect-refused", 0x6003)
    probes.set("tcp:::accept-established", 0x6004)
    probes.set("tcp:::accept-refused", 0x6005)
    
    Return probes

Process called "get_mac_framework_calls" returns Dictionary[String, Integer]:
    Note: Mandatory Access Control syscalls
    Note: Security framework operations
    Note: Policy enforcement
    
    Let mac_calls be Dictionary[String, Integer]()
    
    Note: MAC framework syscalls
    mac_calls.set("__mac_get_proc", 384)      Note: Get process MAC label
    mac_calls.set("__mac_set_proc", 385)      Note: Set process MAC label
    mac_calls.set("__mac_get_fd", 386)        Note: Get file descriptor MAC label
    mac_calls.set("__mac_get_file", 387)      Note: Get file MAC label
    mac_calls.set("__mac_set_fd", 388)        Note: Set file descriptor MAC label
    mac_calls.set("__mac_set_file", 389)      Note: Set file MAC label
    mac_calls.set("__mac_get_pid", 409)       Note: Get MAC label by PID
    mac_calls.set("__mac_get_link", 410)      Note: Get link MAC label
    mac_calls.set("__mac_set_link", 411)      Note: Set link MAC label
    mac_calls.set("__mac_execve", 415)        Note: Execute with MAC label
    mac_calls.set("mac_syscall", 394)         Note: Policy-specific syscall
    
    Return mac_calls

Process called "get_audit_syscalls" returns Dictionary[String, Integer]:
    Note: Audit subsystem calls
    Note: Security event logging
    Note: Compliance support
    
    Let audit_calls be Dictionary[String, Integer]()
    
    Note: Audit subsystem syscalls
    audit_calls.set("audit", 445)              Note: Submit audit record
    audit_calls.set("auditon", 446)            Note: Audit system control
    audit_calls.set("getauid", 447)            Note: Get audit user ID
    audit_calls.set("setauid", 448)            Note: Set audit user ID
    audit_calls.set("getaudit", 449)           Note: Get audit state
    audit_calls.set("setaudit", 450)           Note: Set audit state
    audit_calls.set("getaudit_addr", 451)      Note: Get audit state with address
    audit_calls.set("setaudit_addr", 452)      Note: Set audit state with address
    audit_calls.set("auditctl", 453)           Note: Configure audit parameters
    
    Return audit_calls

Note: =====================================================================
Note: ERROR HANDLING
Note: =====================================================================

Process called "is_error_return" that takes value as Integer, carry_flag as Boolean returns Boolean:
    Note: Check if syscall returned error
    Note: FreeBSD uses carry flag
    Note: errno in return value
    
    Note: On FreeBSD, error indicated by carry flag set
    If carry_flag:
        Return true  Note: Error occurred
    End If
    
    Note: Also check for typical error values
    If value is less than 0 and value is greater than minus 4096:
        Return true  Note: Likely errno value
    End If
    
    Return false

Process called "extract_errno" that takes error_value as Integer returns Integer:
    Note: Extract errno from return
    Note: When carry flag set
    Note: Map to FreeBSD errno
    
    Note: When carry flag is set, RAX contains errno
    If error_value is less than 0:
        Note: Convert negative value to positive errno
        Return minus error_value
    End If
    
    Note: Direct errno value
    Return error_value

Note: =====================================================================
Note: COMPATIBILITY LAYERS
Note: =====================================================================

Process called "get_linux_compat_syscalls" returns Dictionary[String, Integer]:
    Note: Linux compatibility layer
    Note: Run Linux binaries on FreeBSD
    Note: Translated syscall numbers
    
    Let compat_calls be Dictionary[String, Integer]()
    
    Note: Linux ABI syscalls (different numbers than native FreeBSD)
    compat_calls.set("linux_read", 0)
    compat_calls.set("linux_write", 1)
    compat_calls.set("linux_open", 2)
    compat_calls.set("linux_close", 3)
    compat_calls.set("linux_stat", 4)
    compat_calls.set("linux_fstat", 5)
    compat_calls.set("linux_lstat", 6)
    compat_calls.set("linux_poll", 7)
    compat_calls.set("linux_lseek", 8)
    compat_calls.set("linux_mmap", 9)
    compat_calls.set("linux_mprotect", 10)
    compat_calls.set("linux_munmap", 11)
    compat_calls.set("linux_brk", 12)
    compat_calls.set("linux_rt_sigaction", 13)
    compat_calls.set("linux_rt_sigprocmask", 14)
    compat_calls.set("linux_ioctl", 16)
    compat_calls.set("linux_access", 21)
    compat_calls.set("linux_pipe", 22)
    compat_calls.set("linux_select", 23)
    compat_calls.set("linux_mremap", 25)
    compat_calls.set("linux_msync", 26)
    compat_calls.set("linux_mincore", 27)
    compat_calls.set("linux_madvise", 28)
    compat_calls.set("linux_shmget", 29)
    compat_calls.set("linux_shmat", 30)
    compat_calls.set("linux_shmctl", 31)
    compat_calls.set("linux_dup", 32)
    compat_calls.set("linux_dup2", 33)
    compat_calls.set("linux_pause", 34)
    compat_calls.set("linux_nanosleep", 35)
    compat_calls.set("linux_getitimer", 36)
    compat_calls.set("linux_alarm", 37)
    compat_calls.set("linux_setitimer", 38)
    compat_calls.set("linux_getpid", 39)
    compat_calls.set("linux_sendfile", 40)
    compat_calls.set("linux_socket", 41)
    compat_calls.set("linux_connect", 42)
    compat_calls.set("linux_accept", 43)
    compat_calls.set("linux_sendto", 44)
    compat_calls.set("linux_recvfrom", 45)
    compat_calls.set("linux_sendmsg", 46)
    compat_calls.set("linux_recvmsg", 47)
    compat_calls.set("linux_shutdown", 48)
    compat_calls.set("linux_bind", 49)
    compat_calls.set("linux_listen", 50)
    compat_calls.set("linux_clone", 56)
    compat_calls.set("linux_fork", 57)
    compat_calls.set("linux_vfork", 58)
    compat_calls.set("linux_execve", 59)
    compat_calls.set("linux_exit", 60)
    compat_calls.set("linux_wait4", 61)
    compat_calls.set("linux_kill", 62)
    compat_calls.set("linux_uname", 63)
    
    Return compat_calls

Process called "get_freebsd32_syscalls" returns Dictionary[String, Integer]:
    Note: 32-bit compatibility on 64-bit
    Note: Different syscall numbers
    Note: Structure translation
    
    Let compat32_calls be Dictionary[String, Integer]()
    
    Note: FreeBSD32 ABI syscalls for 32-bit binaries on 64-bit kernel
    compat32_calls.set("freebsd32_read", 3)
    compat32_calls.set("freebsd32_write", 4)
    compat32_calls.set("freebsd32_open", 5)
    compat32_calls.set("freebsd32_close", 6)
    compat32_calls.set("freebsd32_wait4", 7)
    compat32_calls.set("freebsd32_link", 9)
    compat32_calls.set("freebsd32_unlink", 10)
    compat32_calls.set("freebsd32_chdir", 12)
    compat32_calls.set("freebsd32_fchdir", 13)
    compat32_calls.set("freebsd32_mknod", 14)
    compat32_calls.set("freebsd32_chmod", 15)
    compat32_calls.set("freebsd32_chown", 16)
    compat32_calls.set("freebsd32_break", 17)
    compat32_calls.set("freebsd32_getpid", 20)
    compat32_calls.set("freebsd32_mount", 21)
    compat32_calls.set("freebsd32_unmount", 22)
    compat32_calls.set("freebsd32_setuid", 23)
    compat32_calls.set("freebsd32_getuid", 24)
    compat32_calls.set("freebsd32_geteuid", 25)
    compat32_calls.set("freebsd32_ptrace", 26)
    compat32_calls.set("freebsd32_recvmsg", 27)
    compat32_calls.set("freebsd32_sendmsg", 28)
    compat32_calls.set("freebsd32_recvfrom", 29)
    compat32_calls.set("freebsd32_accept", 30)
    compat32_calls.set("freebsd32_getpeername", 31)
    compat32_calls.set("freebsd32_getsockname", 32)
    compat32_calls.set("freebsd32_access", 33)
    compat32_calls.set("freebsd32_chflags", 34)
    compat32_calls.set("freebsd32_fchflags", 35)
    compat32_calls.set("freebsd32_sync", 36)
    compat32_calls.set("freebsd32_kill", 37)
    compat32_calls.set("freebsd32_getppid", 39)
    compat32_calls.set("freebsd32_dup", 41)
    compat32_calls.set("freebsd32_pipe", 42)
    compat32_calls.set("freebsd32_getegid", 43)
    compat32_calls.set("freebsd32_profil", 44)
    compat32_calls.set("freebsd32_ktrace", 45)
    compat32_calls.set("freebsd32_getgid", 47)
    compat32_calls.set("freebsd32_getlogin", 49)
    compat32_calls.set("freebsd32_setlogin", 50)
    compat32_calls.set("freebsd32_acct", 51)
    compat32_calls.set("freebsd32_sigaltstack", 53)
    compat32_calls.set("freebsd32_ioctl", 54)
    compat32_calls.set("freebsd32_reboot", 55)
    compat32_calls.set("freebsd32_revoke", 56)
    compat32_calls.set("freebsd32_symlink", 57)
    compat32_calls.set("freebsd32_readlink", 58)
    compat32_calls.set("freebsd32_execve", 59)
    compat32_calls.set("freebsd32_umask", 60)
    compat32_calls.set("freebsd32_chroot", 61)
    
    Return compat32_calls
End Process

Note: =====================================================================
Note: PLATFORM REGISTRATION
Note: =====================================================================

Process called "register_freebsd_x64_platform" returns Nothing:
    Note: Register this platform with the global registry
    
    @Implementation
    Creates an instance of FreeBSDX64Platform and registers it with the
    global platform registry so it can be used by the syscall layer.
    @End Implementation
    
    Let platform be create_freebsd_x64_platform()
    PlatformInterface.register_platform("freebsd_x86_64", platform)
End Process