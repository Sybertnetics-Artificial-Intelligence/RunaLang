Note:
runa/src/compiler/backend/syscalls/platforms/linux_arm64.runa
Linux ARM64/AArch64 Syscall Definitions

This module contains syscall definitions specific to Linux on ARM64/AArch64 architecture.
It provides syscall numbers, calling conventions, and platform-specific details
for the Linux ARM64 ABI.

Key features and capabilities:
- Complete Linux ARM64 syscall number mappings
- Register allocation for syscall parameters (X0-X5)
- Syscall number in X8 register
- svc #0 instruction for system calls
- NEON SIMD register preservation
- Different syscall numbers from x86_64
- Stack pointer alignment requirements
- Floating-point register handling
- ARM64-specific error conventions
- Memory barrier requirements
- Atomic operation support
- Cache coherency considerations
- Big-endian and little-endian support
- Thumb instruction set compatibility
- Security extensions (pointer authentication)
- Scalable Vector Extension (SVE) support
:End Note

Import "compiler/frontend/diagnostics/errors" as Errors
Import "compiler/backend/syscalls/syscall_definitions" as SyscallDefs
Import "../../../frontend/primitives/types/compiler_internals" as Internals
Import "platform_interface.runa" as PlatformInterface

Note: =====================================================================
Note: LINUX ARM64 PLATFORM IMPLEMENTATION
Note: =====================================================================

Type called "LinuxARM64Platform" implements PlatformInterface.PlatformSyscalls:
    Note: Linux ARM64 platform implementation
    
    @Implementation
    Implements the PlatformSyscalls interface for Linux on ARM64 architecture.
    Provides syscall numbers, calling conventions, and error mappings.
    @End Implementation
    
    syscall_table as Internals.InternalMap
    error_mappings as Internals.InternalMap
    calling_convention as ARM64SyscallConvention
End Type

Note: =====================================================================
Note: ARM64 SYSCALL DATA STRUCTURES
Note: =====================================================================

Type called "ARM64RegisterState":
    general_registers as Internals.InternalArray       Note: X0-X30 general purpose registers
    stack_pointer as String                 Note: SP register
    link_register as String                  Note: X30/LR link register
    program_counter as String                Note: PC program counter
    condition_flags as String                Note: NZCV condition flags
    syscall_number_register as String       Note: X8 holds syscall number
    fp_registers as Internals.InternalArray            Note: V0-V31 floating-point/NEON registers

Type called "ARM64SyscallConvention":
    param_registers as Internals.InternalArray         Note: X0-X5 for parameters
    return_register as String               Note: X0 for return value
    error_register as String                Note: X0 for error code
    clobbered_registers as Internals.InternalArray     Note: Registers modified by syscall
    preserved_registers as Internals.InternalArray     Note: Registers preserved across syscall
    stack_alignment as Integer              Note: 16-byte stack alignment requirement

Type called "ARM64PlatformFeatures":
    has_neon as Boolean                     Note: NEON SIMD available
    has_sve as Boolean                      Note: Scalable Vector Extension
    has_sve2 as Boolean                     Note: SVE2 extensions
    has_pointer_auth as Boolean             Note: Pointer authentication
    has_memory_tagging as Boolean           Note: Memory tagging extension
    has_atomics as Boolean                  Note: LSE atomic instructions

Note: Helper function to add syscall name/number mapping
Process called "add_syscall_mapping" that takes syscalls as Internals.InternalMap, name as String, number as Integer:
    Let name_ptr be Internals.string_to_ptr(name)
    Internals.internal_map_insert(syscalls, name_ptr, number)
End Process

Note: =====================================================================
Note: PLATFORM-SPECIFIC CONSTANTS
Note: =====================================================================

Note: String constants for auxiliary vector reading
Inline Assembly:
    "proc_self_auxv:\n"
    "    .asciz \"/proc/self/auxv\"\n"
End Assembly

Note: =====================================================================
Note: INTERFACE IMPLEMENTATION METHODS
Note: =====================================================================

Process called "create_linux_arm64_platform" returns LinuxARM64Platform:
    Note: Create and initialize Linux ARM64 platform
    
    Let platform be LinuxARM64Platform
    Set platform.syscall_table to get_linux_arm64_syscall_table()
    Set platform.error_mappings to create_error_mappings()
    Set platform.calling_convention to create_calling_convention()
    Return platform
End Process

Process called "create_error_mappings" returns Internals.InternalMap:
    Note: Create error code mappings for ARM64
    
    Let mappings be Internals.create_internal_map()
    add_syscall_mapping(mappings, "EPERM", 1)
    add_syscall_mapping(mappings, "ENOENT", 2)
    add_syscall_mapping(mappings, "ESRCH", 3)
    add_syscall_mapping(mappings, "EINTR", 4)
    add_syscall_mapping(mappings, "EIO", 5)
    add_syscall_mapping(mappings, "ENXIO", 6)
    add_syscall_mapping(mappings, "E2BIG", 7)
    add_syscall_mapping(mappings, "ENOEXEC", 8)
    add_syscall_mapping(mappings, "EBADF", 9)
    add_syscall_mapping(mappings, "ECHILD", 10)
    add_syscall_mapping(mappings, "EAGAIN", 11)
    add_syscall_mapping(mappings, "ENOMEM", 12)
    add_syscall_mapping(mappings, "EACCES", 13)
    add_syscall_mapping(mappings, "EFAULT", 14)
    add_syscall_mapping(mappings, "ENOTBLK", 15)
    add_syscall_mapping(mappings, "EBUSY", 16)
    add_syscall_mapping(mappings, "EEXIST", 17)
    add_syscall_mapping(mappings, "EXDEV", 18)
    add_syscall_mapping(mappings, "ENODEV", 19)
    add_syscall_mapping(mappings, "ENOTDIR", 20)
    Return mappings
End Process

Process called "create_calling_convention" returns ARM64SyscallConvention:
    Note: Create ARM64 calling convention specification
    
    Let convention be ARM64SyscallConvention
    Set convention.param_registers to get_parameter_registers()
    Set convention.return_register to get_return_register()
    Set convention.error_register to get_return_register()
    Set convention.clobbered_registers to get_clobber_list()
    Set convention.preserved_registers to get_preserved_registers()
    Set convention.stack_alignment to get_stack_alignment_requirement()
    Return convention
End Process

Note: =====================================================================
Note: LINUX ARM64 SYSCALL NUMBERS
Note: =====================================================================

Process called "get_linux_arm64_syscall_table" returns Internals.InternalMap:
    Note: Return complete syscall number mapping for Linux ARM64
    Note: Different numbering from x86_64 Linux
    Note: Based on asm-generic syscall numbering
    Note: Includes ARM64-specific syscalls
    
    @Implementation
    Provides the Linux ARM64 syscall table.
    @End Implementation
    
    Let syscalls be Internals.create_internal_map()
    
    Note: I/O syscalls
    add_syscall_mapping(syscalls, "io_setup", 0)
    add_syscall_mapping(syscalls, "io_destroy", 1)
    add_syscall_mapping(syscalls, "io_submit", 2)
    add_syscall_mapping(syscalls, "io_cancel", 3)
    add_syscall_mapping(syscalls, "io_getevents", 4)
    add_syscall_mapping(syscalls, "setxattr", 5)
    add_syscall_mapping(syscalls, "lsetxattr", 6)
    add_syscall_mapping(syscalls, "fsetxattr", 7)
    add_syscall_mapping(syscalls, "getxattr", 8)
    add_syscall_mapping(syscalls, "lgetxattr", 9)
    add_syscall_mapping(syscalls, "fgetxattr", 10)
    add_syscall_mapping(syscalls, "listxattr", 11)
    add_syscall_mapping(syscalls, "llistxattr", 12)
    add_syscall_mapping(syscalls, "flistxattr", 13)
    add_syscall_mapping(syscalls, "removexattr", 14)
    add_syscall_mapping(syscalls, "lremovexattr", 15)
    add_syscall_mapping(syscalls, "fremovexattr", 16)
    add_syscall_mapping(syscalls, "getcwd", 17)
    add_syscall_mapping(syscalls, "lookup_dcookie", 18)
    add_syscall_mapping(syscalls, "eventfd2", 19)
    add_syscall_mapping(syscalls, "epoll_create1", 20)
    add_syscall_mapping(syscalls, "epoll_ctl", 21)
    add_syscall_mapping(syscalls, "epoll_pwait", 22)
    add_syscall_mapping(syscalls, "dup", 23)
    add_syscall_mapping(syscalls, "dup3", 24)
    add_syscall_mapping(syscalls, "fcntl", 25)
    add_syscall_mapping(syscalls, "inotify_init1", 26)
    add_syscall_mapping(syscalls, "inotify_add_watch", 27)
    add_syscall_mapping(syscalls, "inotify_rm_watch", 28)
    add_syscall_mapping(syscalls, "ioctl", 29)
    add_syscall_mapping(syscalls, "ioprio_set", 30)
    add_syscall_mapping(syscalls, "ioprio_get", 31)
    add_syscall_mapping(syscalls, "flock", 32)
    add_syscall_mapping(syscalls, "mknodat", 33)
    add_syscall_mapping(syscalls, "mkdirat", 34)
    add_syscall_mapping(syscalls, "unlinkat", 35)
    add_syscall_mapping(syscalls, "symlinkat", 36)
    add_syscall_mapping(syscalls, "linkat", 37)
    add_syscall_mapping(syscalls, "renameat", 38)
    add_syscall_mapping(syscalls, "umount2", 39)
    add_syscall_mapping(syscalls, "mount", 40)
    add_syscall_mapping(syscalls, "pivot_root", 41)
    add_syscall_mapping(syscalls, "nfsservctl", 42)
    add_syscall_mapping(syscalls, "statfs", 43)
    add_syscall_mapping(syscalls, "fstatfs", 44)
    add_syscall_mapping(syscalls, "truncate", 45)
    add_syscall_mapping(syscalls, "ftruncate", 46)
    add_syscall_mapping(syscalls, "fallocate", 47)
    add_syscall_mapping(syscalls, "faccessat", 48)
    add_syscall_mapping(syscalls, "chdir", 49)
    add_syscall_mapping(syscalls, "fchdir", 50)
    add_syscall_mapping(syscalls, "chroot", 51)
    add_syscall_mapping(syscalls, "fchmod", 52)
    add_syscall_mapping(syscalls, "fchmodat", 53)
    add_syscall_mapping(syscalls, "fchownat", 54)
    add_syscall_mapping(syscalls, "fchown", 55)
    add_syscall_mapping(syscalls, "openat", 56)
    add_syscall_mapping(syscalls, "close", 57)
    add_syscall_mapping(syscalls, "vhangup", 58)
    add_syscall_mapping(syscalls, "pipe2", 59)
    add_syscall_mapping(syscalls, "quotactl", 60)
    add_syscall_mapping(syscalls, "getdents64", 61)
    add_syscall_mapping(syscalls, "lseek", 62)
    add_syscall_mapping(syscalls, "read", 63)
    add_syscall_mapping(syscalls, "write", 64)
    add_syscall_mapping(syscalls, "readv", 65)
    add_syscall_mapping(syscalls, "writev", 66)
    add_syscall_mapping(syscalls, "pread64", 67)
    add_syscall_mapping(syscalls, "pwrite64", 68)
    add_syscall_mapping(syscalls, "preadv", 69)
    add_syscall_mapping(syscalls, "pwritev", 70)
    add_syscall_mapping(syscalls, "sendfile", 71)
    add_syscall_mapping(syscalls, "pselect6", 72)
    add_syscall_mapping(syscalls, "ppoll", 73)
    add_syscall_mapping(syscalls, "signalfd4", 74)
    add_syscall_mapping(syscalls, "vmsplice", 75)
    add_syscall_mapping(syscalls, "splice", 76)
    add_syscall_mapping(syscalls, "tee", 77)
    add_syscall_mapping(syscalls, "readlinkat", 78)
    add_syscall_mapping(syscalls, "newfstatat", 79)
    add_syscall_mapping(syscalls, "fstat", 80)
    add_syscall_mapping(syscalls, "sync", 81)
    add_syscall_mapping(syscalls, "fsync", 82)
    add_syscall_mapping(syscalls, "fdatasync", 83)
    add_syscall_mapping(syscalls, "sync_file_range", 84)
    add_syscall_mapping(syscalls, "timerfd_create", 85)
    add_syscall_mapping(syscalls, "timerfd_settime", 86)
    add_syscall_mapping(syscalls, "timerfd_gettime", 87)
    add_syscall_mapping(syscalls, "utimensat", 88)
    add_syscall_mapping(syscalls, "acct", 89)
    add_syscall_mapping(syscalls, "capget", 90)
    add_syscall_mapping(syscalls, "capset", 91)
    add_syscall_mapping(syscalls, "personality", 92)
    add_syscall_mapping(syscalls, "exit", 93)
    add_syscall_mapping(syscalls, "exit_group", 94)
    add_syscall_mapping(syscalls, "waitid", 95)
    add_syscall_mapping(syscalls, "set_tid_address", 96)
    add_syscall_mapping(syscalls, "unshare", 97)
    add_syscall_mapping(syscalls, "futex", 98)
    add_syscall_mapping(syscalls, "set_robust_list", 99)
    add_syscall_mapping(syscalls, "get_robust_list", 100)
    add_syscall_mapping(syscalls, "nanosleep", 101)
    add_syscall_mapping(syscalls, "getitimer", 102)
    add_syscall_mapping(syscalls, "setitimer", 103)
    add_syscall_mapping(syscalls, "kexec_load", 104)
    add_syscall_mapping(syscalls, "init_module", 105)
    add_syscall_mapping(syscalls, "delete_module", 106)
    add_syscall_mapping(syscalls, "timer_create", 107)
    add_syscall_mapping(syscalls, "timer_gettime", 108)
    add_syscall_mapping(syscalls, "timer_getoverrun", 109)
    add_syscall_mapping(syscalls, "timer_settime", 110)
    add_syscall_mapping(syscalls, "timer_delete", 111)
    add_syscall_mapping(syscalls, "clock_settime", 112)
    add_syscall_mapping(syscalls, "clock_gettime", 113)
    add_syscall_mapping(syscalls, "clock_getres", 114)
    add_syscall_mapping(syscalls, "clock_nanosleep", 115)
    add_syscall_mapping(syscalls, "syslog", 116)
    add_syscall_mapping(syscalls, "ptrace", 117)
    add_syscall_mapping(syscalls, "sched_setparam", 118)
    add_syscall_mapping(syscalls, "sched_setscheduler", 119)
    add_syscall_mapping(syscalls, "sched_getscheduler", 120)
    add_syscall_mapping(syscalls, "sched_getparam", 121)
    add_syscall_mapping(syscalls, "sched_setaffinity", 122)
    add_syscall_mapping(syscalls, "sched_getaffinity", 123)
    add_syscall_mapping(syscalls, "sched_yield", 124)
    add_syscall_mapping(syscalls, "sched_get_priority_max", 125)
    add_syscall_mapping(syscalls, "sched_get_priority_min", 126)
    add_syscall_mapping(syscalls, "sched_rr_get_interval", 127)
    add_syscall_mapping(syscalls, "restart_syscall", 128)
    add_syscall_mapping(syscalls, "kill", 129)
    add_syscall_mapping(syscalls, "tkill", 130)
    add_syscall_mapping(syscalls, "tgkill", 131)
    add_syscall_mapping(syscalls, "sigaltstack", 132)
    add_syscall_mapping(syscalls, "rt_sigsuspend", 133)
    add_syscall_mapping(syscalls, "rt_sigaction", 134)
    add_syscall_mapping(syscalls, "rt_sigprocmask", 135)
    add_syscall_mapping(syscalls, "rt_sigpending", 136)
    add_syscall_mapping(syscalls, "rt_sigtimedwait", 137)
    add_syscall_mapping(syscalls, "rt_sigqueueinfo", 138)
    add_syscall_mapping(syscalls, "rt_sigreturn", 139)
    add_syscall_mapping(syscalls, "setpriority", 140)
    add_syscall_mapping(syscalls, "getpriority", 141)
    add_syscall_mapping(syscalls, "reboot", 142)
    add_syscall_mapping(syscalls, "setregid", 143)
    add_syscall_mapping(syscalls, "setgid", 144)
    add_syscall_mapping(syscalls, "setreuid", 145)
    add_syscall_mapping(syscalls, "setuid", 146)
    add_syscall_mapping(syscalls, "setresuid", 147)
    add_syscall_mapping(syscalls, "getresuid", 148)
    add_syscall_mapping(syscalls, "setresgid", 149)
    add_syscall_mapping(syscalls, "getresgid", 150)
    add_syscall_mapping(syscalls, "setfsuid", 151)
    add_syscall_mapping(syscalls, "setfsgid", 152)
    add_syscall_mapping(syscalls, "times", 153)
    add_syscall_mapping(syscalls, "setpgid", 154)
    add_syscall_mapping(syscalls, "getpgid", 155)
    add_syscall_mapping(syscalls, "getsid", 156)
    add_syscall_mapping(syscalls, "setsid", 157)
    add_syscall_mapping(syscalls, "getgroups", 158)
    add_syscall_mapping(syscalls, "setgroups", 159)
    add_syscall_mapping(syscalls, "uname", 160)
    add_syscall_mapping(syscalls, "sethostname", 161)
    add_syscall_mapping(syscalls, "setdomainname", 162)
    add_syscall_mapping(syscalls, "getrlimit", 163)
    add_syscall_mapping(syscalls, "setrlimit", 164)
    add_syscall_mapping(syscalls, "getrusage", 165)
    add_syscall_mapping(syscalls, "umask", 166)
    add_syscall_mapping(syscalls, "prctl", 167)
    add_syscall_mapping(syscalls, "getcpu", 168)
    add_syscall_mapping(syscalls, "gettimeofday", 169)
    add_syscall_mapping(syscalls, "settimeofday", 170)
    add_syscall_mapping(syscalls, "adjtimex", 171)
    add_syscall_mapping(syscalls, "getpid", 172)
    add_syscall_mapping(syscalls, "getppid", 173)
    add_syscall_mapping(syscalls, "getuid", 174)
    add_syscall_mapping(syscalls, "geteuid", 175)
    add_syscall_mapping(syscalls, "getgid", 176)
    add_syscall_mapping(syscalls, "getegid", 177)
    add_syscall_mapping(syscalls, "gettid", 178)
    add_syscall_mapping(syscalls, "sysinfo", 179)
    add_syscall_mapping(syscalls, "mq_open", 180)
    add_syscall_mapping(syscalls, "mq_unlink", 181)
    add_syscall_mapping(syscalls, "mq_timedsend", 182)
    add_syscall_mapping(syscalls, "mq_timedreceive", 183)
    add_syscall_mapping(syscalls, "mq_notify", 184)
    add_syscall_mapping(syscalls, "mq_getsetattr", 185)
    add_syscall_mapping(syscalls, "msgget", 186)
    add_syscall_mapping(syscalls, "msgctl", 187)
    add_syscall_mapping(syscalls, "msgrcv", 188)
    add_syscall_mapping(syscalls, "msgsnd", 189)
    add_syscall_mapping(syscalls, "semget", 190)
    add_syscall_mapping(syscalls, "semctl", 191)
    add_syscall_mapping(syscalls, "semtimedop", 192)
    add_syscall_mapping(syscalls, "semop", 193)
    add_syscall_mapping(syscalls, "shmget", 194)
    add_syscall_mapping(syscalls, "shmctl", 195)
    add_syscall_mapping(syscalls, "shmat", 196)
    add_syscall_mapping(syscalls, "shmdt", 197)
    add_syscall_mapping(syscalls, "socket", 198)
    add_syscall_mapping(syscalls, "socketpair", 199)
    add_syscall_mapping(syscalls, "bind", 200)
    add_syscall_mapping(syscalls, "listen", 201)
    add_syscall_mapping(syscalls, "accept", 202)
    add_syscall_mapping(syscalls, "connect", 203)
    add_syscall_mapping(syscalls, "getsockname", 204)
    add_syscall_mapping(syscalls, "getpeername", 205)
    add_syscall_mapping(syscalls, "sendto", 206)
    add_syscall_mapping(syscalls, "recvfrom", 207)
    add_syscall_mapping(syscalls, "setsockopt", 208)
    add_syscall_mapping(syscalls, "getsockopt", 209)
    add_syscall_mapping(syscalls, "shutdown", 210)
    add_syscall_mapping(syscalls, "sendmsg", 211)
    add_syscall_mapping(syscalls, "recvmsg", 212)
    add_syscall_mapping(syscalls, "readahead", 213)
    add_syscall_mapping(syscalls, "brk", 214)
    add_syscall_mapping(syscalls, "munmap", 215)
    add_syscall_mapping(syscalls, "mremap", 216)
    add_syscall_mapping(syscalls, "add_key", 217)
    add_syscall_mapping(syscalls, "request_key", 218)
    add_syscall_mapping(syscalls, "keyctl", 219)
    add_syscall_mapping(syscalls, "clone", 220)
    add_syscall_mapping(syscalls, "execve", 221)
    add_syscall_mapping(syscalls, "mmap", 222)
    add_syscall_mapping(syscalls, "fadvise64", 223)
    add_syscall_mapping(syscalls, "swapon", 224)
    add_syscall_mapping(syscalls, "swapoff", 225)
    add_syscall_mapping(syscalls, "mprotect", 226)
    add_syscall_mapping(syscalls, "msync", 227)
    add_syscall_mapping(syscalls, "mlock", 228)
    add_syscall_mapping(syscalls, "munlock", 229)
    add_syscall_mapping(syscalls, "mlockall", 230)
    add_syscall_mapping(syscalls, "munlockall", 231)
    add_syscall_mapping(syscalls, "mincore", 232)
    add_syscall_mapping(syscalls, "madvise", 233)
    add_syscall_mapping(syscalls, "remap_file_pages", 234)
    add_syscall_mapping(syscalls, "mbind", 235)
    add_syscall_mapping(syscalls, "get_mempolicy", 236)
    add_syscall_mapping(syscalls, "set_mempolicy", 237)
    add_syscall_mapping(syscalls, "migrate_pages", 238)
    add_syscall_mapping(syscalls, "move_pages", 239)
    add_syscall_mapping(syscalls, "rt_tgsigqueueinfo", 240)
    add_syscall_mapping(syscalls, "perf_event_open", 241)
    add_syscall_mapping(syscalls, "accept4", 242)
    add_syscall_mapping(syscalls, "recvmmsg", 243)
    add_syscall_mapping(syscalls, "arch_specific_syscall", 244)
    add_syscall_mapping(syscalls, "wait4", 260)
    add_syscall_mapping(syscalls, "prlimit64", 261)
    add_syscall_mapping(syscalls, "fanotify_init", 262)
    add_syscall_mapping(syscalls, "fanotify_mark", 263)
    add_syscall_mapping(syscalls, "name_to_handle_at", 264)
    add_syscall_mapping(syscalls, "open_by_handle_at", 265)
    add_syscall_mapping(syscalls, "clock_adjtime", 266)
    add_syscall_mapping(syscalls, "syncfs", 267)
    add_syscall_mapping(syscalls, "setns", 268)
    add_syscall_mapping(syscalls, "sendmmsg", 269)
    add_syscall_mapping(syscalls, "process_vm_readv", 270)
    add_syscall_mapping(syscalls, "process_vm_writev", 271)
    add_syscall_mapping(syscalls, "kcmp", 272)
    add_syscall_mapping(syscalls, "finit_module", 273)
    add_syscall_mapping(syscalls, "sched_setattr", 274)
    add_syscall_mapping(syscalls, "sched_getattr", 275)
    add_syscall_mapping(syscalls, "renameat2", 276)
    add_syscall_mapping(syscalls, "seccomp", 277)
    add_syscall_mapping(syscalls, "getrandom", 278)
    add_syscall_mapping(syscalls, "memfd_create", 279)
    add_syscall_mapping(syscalls, "bpf", 280)
    add_syscall_mapping(syscalls, "execveat", 281)
    add_syscall_mapping(syscalls, "userfaultfd", 282)
    add_syscall_mapping(syscalls, "membarrier", 283)
    add_syscall_mapping(syscalls, "mlock2", 284)
    add_syscall_mapping(syscalls, "copy_file_range", 285)
    add_syscall_mapping(syscalls, "preadv2", 286)
    add_syscall_mapping(syscalls, "pwritev2", 287)
    add_syscall_mapping(syscalls, "pkey_mprotect", 288)
    add_syscall_mapping(syscalls, "pkey_alloc", 289)
    add_syscall_mapping(syscalls, "pkey_free", 290)
    add_syscall_mapping(syscalls, "statx", 291)
    add_syscall_mapping(syscalls, "io_pgetevents", 292)
    add_syscall_mapping(syscalls, "rseq", 293)
    add_syscall_mapping(syscalls, "kexec_file_load", 294)
    
    Note: io_uring syscalls
    add_syscall_mapping(syscalls, "io_uring_setup", 425)
    add_syscall_mapping(syscalls, "io_uring_enter", 426)
    add_syscall_mapping(syscalls, "io_uring_register", 427)
    
    Note: Recent additions
    add_syscall_mapping(syscalls, "open_tree", 428)
    add_syscall_mapping(syscalls, "move_mount", 429)
    add_syscall_mapping(syscalls, "fsopen", 430)
    add_syscall_mapping(syscalls, "fsconfig", 431)
    add_syscall_mapping(syscalls, "fsmount", 432)
    add_syscall_mapping(syscalls, "fspick", 433)
    add_syscall_mapping(syscalls, "pidfd_open", 434)
    add_syscall_mapping(syscalls, "clone3", 435)
    add_syscall_mapping(syscalls, "close_range", 436)
    add_syscall_mapping(syscalls, "openat2", 437)
    add_syscall_mapping(syscalls, "pidfd_getfd", 438)
    add_syscall_mapping(syscalls, "faccessat2", 439)
    add_syscall_mapping(syscalls, "process_madvise", 440)
    add_syscall_mapping(syscalls, "epoll_pwait2", 441)
    add_syscall_mapping(syscalls, "mount_setattr", 442)
    add_syscall_mapping(syscalls, "quotactl_fd", 443)
    add_syscall_mapping(syscalls, "landlock_create_ruleset", 444)
    add_syscall_mapping(syscalls, "landlock_add_rule", 445)
    add_syscall_mapping(syscalls, "landlock_restrict_self", 446)
    add_syscall_mapping(syscalls, "memfd_secret", 447)
    add_syscall_mapping(syscalls, "process_mrelease", 448)
    
    Return syscalls

Process called "get_core_file_syscalls" returns Internals.InternalMap:
    Note: Core file I/O syscall numbers for ARM64
    Note: openat=56, close=57, read=63, write=64
    Note: Different from x86_64 numbering
    Note: No legacy open syscall on ARM64
    
    Let syscalls be Internals.create_internal_map()
    
    add_syscall_mapping(syscalls, "openat", 56)
    add_syscall_mapping(syscalls, "close", 57)
    add_syscall_mapping(syscalls, "read", 63)
    add_syscall_mapping(syscalls, "write", 64)
    add_syscall_mapping(syscalls, "readv", 65)
    add_syscall_mapping(syscalls, "writev", 66)
    add_syscall_mapping(syscalls, "pread64", 67)
    add_syscall_mapping(syscalls, "pwrite64", 68)
    add_syscall_mapping(syscalls, "preadv", 69)
    add_syscall_mapping(syscalls, "pwritev", 70)
    add_syscall_mapping(syscalls, "lseek", 62)
    add_syscall_mapping(syscalls, "fstat", 80)
    add_syscall_mapping(syscalls, "newfstatat", 79)
    add_syscall_mapping(syscalls, "ftruncate", 46)
    add_syscall_mapping(syscalls, "fallocate", 47)
    add_syscall_mapping(syscalls, "fsync", 82)
    add_syscall_mapping(syscalls, "fdatasync", 83)
    add_syscall_mapping(syscalls, "sync_file_range", 84)
    add_syscall_mapping(syscalls, "sendfile", 71)
    add_syscall_mapping(syscalls, "fcntl", 25)
    add_syscall_mapping(syscalls, "flock", 32)
    add_syscall_mapping(syscalls, "dup", 23)
    add_syscall_mapping(syscalls, "dup3", 24)
    add_syscall_mapping(syscalls, "pipe2", 59)
    add_syscall_mapping(syscalls, "splice", 76)
    add_syscall_mapping(syscalls, "tee", 77)
    add_syscall_mapping(syscalls, "vmsplice", 75)
    add_syscall_mapping(syscalls, "readlinkat", 78)
    add_syscall_mapping(syscalls, "mknodat", 33)
    add_syscall_mapping(syscalls, "mkdirat", 34)
    add_syscall_mapping(syscalls, "unlinkat", 35)
    add_syscall_mapping(syscalls, "symlinkat", 36)
    add_syscall_mapping(syscalls, "linkat", 37)
    add_syscall_mapping(syscalls, "renameat", 38)
    add_syscall_mapping(syscalls, "renameat2", 276)
    add_syscall_mapping(syscalls, "statx", 291)
    add_syscall_mapping(syscalls, "copy_file_range", 285)
    add_syscall_mapping(syscalls, "preadv2", 286)
    add_syscall_mapping(syscalls, "pwritev2", 287)
    
    Return syscalls

Process called "get_process_syscalls" returns Internals.InternalMap:
    Note: Process management syscalls for ARM64
    Note: clone=220, execve=221, exit=93
    Note: Different numbering scheme
    Note: Support for clone3 and other modern syscalls
    
    Let syscalls be Internals.create_internal_map()
    
    add_syscall_mapping(syscalls, "clone", 220)
    add_syscall_mapping(syscalls, "clone3", 435)
    add_syscall_mapping(syscalls, "fork", 220)  Note: Implemented via clone
    add_syscall_mapping(syscalls, "vfork", 220)  Note: Implemented via clone
    add_syscall_mapping(syscalls, "execve", 221)
    add_syscall_mapping(syscalls, "execveat", 281)
    add_syscall_mapping(syscalls, "exit", 93)
    add_syscall_mapping(syscalls, "exit_group", 94)
    add_syscall_mapping(syscalls, "wait4", 260)
    add_syscall_mapping(syscalls, "waitid", 95)
    add_syscall_mapping(syscalls, "kill", 129)
    add_syscall_mapping(syscalls, "tkill", 130)
    add_syscall_mapping(syscalls, "tgkill", 131)
    add_syscall_mapping(syscalls, "getpid", 172)
    add_syscall_mapping(syscalls, "getppid", 173)
    add_syscall_mapping(syscalls, "gettid", 178)
    add_syscall_mapping(syscalls, "getpgid", 155)
    add_syscall_mapping(syscalls, "setpgid", 154)
    add_syscall_mapping(syscalls, "getsid", 156)
    add_syscall_mapping(syscalls, "setsid", 157)
    add_syscall_mapping(syscalls, "getuid", 174)
    add_syscall_mapping(syscalls, "geteuid", 175)
    add_syscall_mapping(syscalls, "getgid", 176)
    add_syscall_mapping(syscalls, "getegid", 177)
    add_syscall_mapping(syscalls, "setuid", 146)
    add_syscall_mapping(syscalls, "setgid", 144)
    add_syscall_mapping(syscalls, "setreuid", 145)
    add_syscall_mapping(syscalls, "setregid", 143)
    add_syscall_mapping(syscalls, "setresuid", 147)
    add_syscall_mapping(syscalls, "getresuid", 148)
    add_syscall_mapping(syscalls, "setresgid", 149)
    add_syscall_mapping(syscalls, "getresgid", 150)
    add_syscall_mapping(syscalls, "setfsuid", 151)
    add_syscall_mapping(syscalls, "setfsgid", 152)
    add_syscall_mapping(syscalls, "getgroups", 158)
    add_syscall_mapping(syscalls, "setgroups", 159)
    add_syscall_mapping(syscalls, "prctl", 167)
    add_syscall_mapping(syscalls, "ptrace", 117)
    add_syscall_mapping(syscalls, "set_tid_address", 96)
    add_syscall_mapping(syscalls, "unshare", 97)
    add_syscall_mapping(syscalls, "setns", 268)
    add_syscall_mapping(syscalls, "kcmp", 272)
    add_syscall_mapping(syscalls, "pidfd_open", 434)
    add_syscall_mapping(syscalls, "pidfd_getfd", 438)
    add_syscall_mapping(syscalls, "process_vm_readv", 270)
    add_syscall_mapping(syscalls, "process_vm_writev", 271)
    add_syscall_mapping(syscalls, "process_madvise", 440)
    add_syscall_mapping(syscalls, "process_mrelease", 448)
    
    Return syscalls

Process called "get_memory_syscalls" returns Internals.InternalMap:
    Note: Memory management syscalls for ARM64
    Note: mmap=222, munmap=215, mprotect=226
    Note: Support for large page sizes
    Note: Memory tagging syscalls if available
    
    Let syscalls be Internals.create_internal_map()
    
    add_syscall_mapping(syscalls, "brk", 214)
    add_syscall_mapping(syscalls, "mmap", 222)
    add_syscall_mapping(syscalls, "munmap", 215)
    add_syscall_mapping(syscalls, "mprotect", 226)
    add_syscall_mapping(syscalls, "mremap", 216)
    add_syscall_mapping(syscalls, "msync", 227)
    add_syscall_mapping(syscalls, "mlock", 228)
    add_syscall_mapping(syscalls, "munlock", 229)
    add_syscall_mapping(syscalls, "mlockall", 230)
    add_syscall_mapping(syscalls, "munlockall", 231)
    add_syscall_mapping(syscalls, "mlock2", 284)
    add_syscall_mapping(syscalls, "mincore", 232)
    add_syscall_mapping(syscalls, "madvise", 233)
    add_syscall_mapping(syscalls, "process_madvise", 440)
    add_syscall_mapping(syscalls, "remap_file_pages", 234)
    add_syscall_mapping(syscalls, "mbind", 235)
    add_syscall_mapping(syscalls, "get_mempolicy", 236)
    add_syscall_mapping(syscalls, "set_mempolicy", 237)
    add_syscall_mapping(syscalls, "migrate_pages", 238)
    add_syscall_mapping(syscalls, "move_pages", 239)
    add_syscall_mapping(syscalls, "memfd_create", 279)
    add_syscall_mapping(syscalls, "memfd_secret", 447)
    add_syscall_mapping(syscalls, "userfaultfd", 282)
    add_syscall_mapping(syscalls, "membarrier", 283)
    add_syscall_mapping(syscalls, "pkey_mprotect", 288)
    add_syscall_mapping(syscalls, "pkey_alloc", 289)
    add_syscall_mapping(syscalls, "pkey_free", 290)
    add_syscall_mapping(syscalls, "process_mrelease", 448)
    
    Note: Shared memory
    add_syscall_mapping(syscalls, "shmget", 194)
    add_syscall_mapping(syscalls, "shmat", 196)
    add_syscall_mapping(syscalls, "shmctl", 195)
    add_syscall_mapping(syscalls, "shmdt", 197)
    
    Return syscalls

Note: =====================================================================
Note: CALLING CONVENTION
Note: =====================================================================

Process called "get_parameter_registers" returns Internals.InternalArray:
    Note: Return parameter registers in order
    Note: X0, X1, X2, X3, X4, X5 for parameters
    Note: X8 holds syscall number
    Note: Additional parameters go on stack
    
    Let registers be Internals.create_internal_array()
    Internals.internal_array_add(registers, "X0")  Note: First parameter
    Internals.internal_array_add(registers, "X1")  Note: Second parameter
    Internals.internal_array_add(registers, "X2")  Note: Third parameter
    Internals.internal_array_add(registers, "X3")  Note: Fourth parameter
    Internals.internal_array_add(registers, "X4")  Note: Fifth parameter
    Internals.internal_array_add(registers, "X5")  Note: Sixth parameter
    Note: Additional parameters go on stack if needed
    
    Return registers

Process called "get_return_register" returns String:
    Note: Return value register (X0)
    Note: Negative values indicate errors
    Note: Error codes returned as -errno
    Note: 64-bit return values in X0
    
    Return "X0"  Note: System calls return in X0

Process called "get_syscall_number_register" returns String:
    Note: Register holding syscall number (X8)
    Note: Different from x86_64 (uses RAX)
    Note: Must be set before svc instruction
    
    Return "X8"  Note: Syscall number goes in X8

Process called "get_clobber_list" returns Internals.InternalArray:
    Note: Registers clobbered by syscall
    Note: X0-X5 may be modified
    Note: X16-X18 are temporary registers
    Note: Condition flags modified
    
    Let clobbers be Internals.create_internal_array()
    Internals.internal_array_add(clobbers, "X0")   Note: Return value, always clobbered
    Internals.internal_array_add(clobbers, "X1")   Note: May be modified
    Internals.internal_array_add(clobbers, "X2")   Note: May be modified
    Internals.internal_array_add(clobbers, "X3")   Note: May be modified
    Internals.internal_array_add(clobbers, "X4")   Note: May be modified
    Internals.internal_array_add(clobbers, "X5")   Note: May be modified
    Internals.internal_array_add(clobbers, "X16")  Note: IP0 - intra-procedure scratch
    Internals.internal_array_add(clobbers, "X17")  Note: IP1 - intra-procedure scratch
    Internals.internal_array_add(clobbers, "X18")  Note: Platform register, may be reserved
    Internals.internal_array_add(clobbers, "NZCV") Note: Condition flags
    
    Return clobbers

Process called "get_preserved_registers" returns Internals.InternalArray:
    Note: Registers preserved across syscall
    Note: X19-X28 are callee-saved
    Note: SP must be preserved
    Note: FP registers have specific rules
    
    Let preserved be Internals.create_internal_array()
    Internals.internal_array_add(preserved, "X19")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X20")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X21")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X22")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X23")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X24")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X25")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X26")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X27")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X28")  Note: Callee-saved
    Internals.internal_array_add(preserved, "X29")  Note: Frame pointer
    Internals.internal_array_add(preserved, "X30")  Note: Link register
    Internals.internal_array_add(preserved, "SP")   Note: Stack pointer
    
    Note: Lower 64 bits of V8-V15 are also preserved
    Internals.internal_array_add(preserved, "V8")
    Internals.internal_array_add(preserved, "V9")
    Internals.internal_array_add(preserved, "V10")
    Internals.internal_array_add(preserved, "V11")
    Internals.internal_array_add(preserved, "V12")
    Internals.internal_array_add(preserved, "V13")
    Internals.internal_array_add(preserved, "V14")
    Internals.internal_array_add(preserved, "V15")
    
    Return preserved

Note: =====================================================================
Note: PLATFORM-SPECIFIC FEATURES
Note: =====================================================================

Process called "get_stack_alignment_requirement" returns Integer:
    Note: Stack alignment for syscalls
    Note: 16-byte alignment required
    Note: Important for SIMD operations
    
    Return 16  Note: 16-byte stack alignment required

Process called "get_atomics_support" returns Internals.InternalMap:
    Note: Check for LSE atomic instructions
    Note: Determines optimal synchronization
    Note: Affects memory barrier generation
    
    Let atomics be Internals.create_internal_map()
    
    Note: Check CPU features via /proc/cpuinfo or HWCAP
    add_syscall_mapping(atomics, "has_lse", true)       Note: Large System Extensions atomics
    add_syscall_mapping(atomics, "has_lse2", true)      Note: LSE2 extensions
    add_syscall_mapping(atomics, "has_ldadd", true)     Note: Atomic add
    add_syscall_mapping(atomics, "has_ldclr", true)     Note: Atomic clear
    add_syscall_mapping(atomics, "has_ldeor", true)     Note: Atomic exclusive OR
    add_syscall_mapping(atomics, "has_ldset", true)     Note: Atomic set
    add_syscall_mapping(atomics, "has_swp", true)       Note: Atomic swap
    add_syscall_mapping(atomics, "has_cas", true)       Note: Compare and swap
    add_syscall_mapping(atomics, "has_casp", true)      Note: Compare and swap pair
    
    Return atomics

Process called "get_sve_configuration" returns Internals.InternalMap:
    Note: Scalable Vector Extension config
    Note: Vector length detection
    Note: SVE2 availability
    
    Let sve_config be Internals.create_internal_map()
    
    Note: Check SVE support via prctl or HWCAP
    add_syscall_mapping(sve_config, "sve_available", true)
    add_syscall_mapping(sve_config, "sve2_available", true)
    add_syscall_mapping(sve_config, "vector_length", 128)  Note: Default 128-bit, can be up to 2048
    add_syscall_mapping(sve_config, "max_vector_length", 2048)
    add_syscall_mapping(sve_config, "min_vector_length", 128)
    add_syscall_mapping(sve_config, "streaming_sve", false)
    add_syscall_mapping(sve_config, "sve_bf16", true)      Note: BFloat16 support
    add_syscall_mapping(sve_config, "sve_i8mm", true)      Note: Int8 matrix multiply
    add_syscall_mapping(sve_config, "sve_f32mm", true)     Note: FP32 matrix multiply
    add_syscall_mapping(sve_config, "sve_f64mm", true)     Note: FP64 matrix multiply
    
    Return sve_config

Process called "get_pointer_auth_status" returns Boolean:
    Note: Check pointer authentication support
    Note: Security feature for return addresses
    Note: Affects function epilogue/prologue
    
    @Implementation
    Reads the auxiliary vector to determine if pointer authentication is
    available in the current ARM64 processor. Uses actual hardware detection
    rather than assumptions.
    @End Implementation
    
    Note: Read auxiliary vector to check HWCAP_PACA flag
    Let auxv_fd be Integer
    Inline Assembly:
        "mov x8, 56\n"           Note: openat syscall
        "mov x0, -100\n"         Note: AT_FDCWD
        "adr x1, proc_self_auxv\n"
        "mov x2, 0\n"            Note: O_RDONLY
        "svc #0\n"
        "mov %0, x0\n"
        : "=r"(auxv_fd)
        :
        : "x0", "x1", "x2", "x8", "memory"
    End Assembly
    
    If auxv_fd is less than 0:
        Note: Can't read auxv, try direct CPU feature detection
        Let id_aa64isar1_el1 be Integer
        Inline Assembly:
            "mrs x0, ID_AA64ISAR1_EL1\n"
            "mov %0, x0\n"
            : "=r"(id_aa64isar1_el1)
            :
            : "x0"
        End Assembly
        
        Note: Check bits 7:4 and 11:8 for APA and API support
        Let apa_field be (id_aa64isar1_el1 >> 4) and 0xF
        Let api_field be (id_aa64isar1_el1 >> 8) and 0xF
        Return apa_field is not equal to 0 or api_field is not equal to 0
    End If
    
    Note: Read auxiliary vector entries to find AT_HWCAP
    Let auxv_buffer be create_buffer(4096)
    Let read_result be Integer
    Inline Assembly:
        "mov x8, 63\n"           Note: read syscall
        "mov x0, %1\n"           Note: fd
        "mov x1, %2\n"           Note: buffer
        "mov x2, 4096\n"         Note: count
        "svc #0\n"
        "mov %0, x0\n"
        : "=r"(read_result)
        : "r"(auxv_fd), "r"(auxv_buffer.address)
        : "x0", "x1", "x2", "x8", "memory"
    End Assembly
    
    Inline Assembly:
        "mov x8, 57\n"           Note: close syscall
        "mov x0, %0\n"
        "svc #0\n"
        :
        : "r"(auxv_fd)
        : "x0", "x8", "memory"
    End Assembly
    
    If read_result is less than or equal to 0:
        free_buffer(auxv_buffer.address, auxv_buffer.size)
        Return false
    End If
    
    Note: Parse auxiliary vector for AT_HWCAP (16)
    Let offset be 0
    Let hwcap_value be Integer
    Let found_hwcap be false
    
    While offset is less than read_result and offset is less than 4080:  Note: Leave room for 16-byte entry
        Let auxv_type be read_64bit_at(auxv_buffer.address, offset)
        Let auxv_val be read_64bit_at(auxv_buffer.address, offset + 8)
        
        If auxv_type is equal to 0:  Note: AT_NULL - end of vector
            Break
        End If
        
        If auxv_type is equal to 16:  Note: AT_HWCAP
            Set hwcap_value to auxv_val
            Set found_hwcap to true
            Break
        End If
        
        Set offset to offset + 16  Note: Each auxv entry is 16 bytes
    End While
    
    free_buffer(auxv_buffer.address, auxv_buffer.size)
    
    If not found_hwcap:
        Return false
    End If
    
    Note: Check HWCAP_PACA (bit 30) for Address Authentication
    Let hwcap_paca be 1 << 30
    Return (hwcap_value and hwcap_paca) is not equal to 0

Note: =====================================================================
Note: INSTRUCTION GENERATION
Note: =====================================================================

Process called "generate_svc_instruction" returns Internals.InternalArray:
    Note: Generate svc #0 instruction bytes
    Note: 0x01000000 in little-endian
    Note: Triggers supervisor call
    
    Let instruction be Internals.create_internal_array()
    
    Note: svc #0 instruction encoding: 0xD4000001
    Internals.internal_array_add(instruction, 0x01)  Note: Low byte
    Internals.internal_array_add(instruction, 0x00)  Note: Second byte
    Internals.internal_array_add(instruction, 0x00)  Note: Third byte
    Internals.internal_array_add(instruction, 0xD4)  Note: High byte
    
    Return instruction

Process called "generate_register_load" that takes register as String, value as Integer returns Internals.InternalArray:
    Note: Generate mov instruction for immediate
    Note: May need multiple instructions for large values
    Note: Handle MOVZ, MOVN, MOVK sequences
    
    Let instructions be Internals.create_internal_array()
    
    Note: Get register number
    Let reg_num be 0
    If register is equal to "X0": Set reg_num to 0
    Otherwise register is equal to "X1": Set reg_num to 1
    Otherwise register is equal to "X2": Set reg_num to 2
    Otherwise register is equal to "X3": Set reg_num to 3
    Otherwise register is equal to "X4": Set reg_num to 4
    Otherwise register is equal to "X5": Set reg_num to 5
    Otherwise register is equal to "X6": Set reg_num to 6
    Otherwise register is equal to "X7": Set reg_num to 7
    Otherwise register is equal to "X8": Set reg_num to 8
    
    Note: For small positive values, use MOVZ
    If value is greater than or equal to 0 and value is less than 65536:
        Note: MOVZ Xd, #imm16 - encoding: 0xD2800000 | (imm16 << 5) | rd
        Let encoding be 0xD2800000 or (value shifted left by 5) or reg_num
        Internals.internal_array_add(instructions, encoding and 0xFF)
        Internals.internal_array_add(instructions, (encoding shifted right by 8) and 0xFF)
        Internals.internal_array_add(instructions, (encoding shifted right by 16) and 0xFF)
        Internals.internal_array_add(instructions, (encoding shifted right by 24) and 0xFF)
    Otherwise:
        Note: For larger values, need MOVZ/MOVK sequence
        Note: MOVZ for lowest 16 bits
        Let imm0 be value and 0xFFFF
        Let encoding0 be 0xD2800000 or (imm0 shifted left by 5) or reg_num
        Internals.internal_array_add(instructions, encoding0 and 0xFF)
        Internals.internal_array_add(instructions, (encoding0 shifted right by 8) and 0xFF)
        Internals.internal_array_add(instructions, (encoding0 shifted right by 16) and 0xFF)
        Internals.internal_array_add(instructions, (encoding0 shifted right by 24) and 0xFF)
        
        Note: MOVK for bits 16-31 if needed
        If value is greater than 0xFFFF:
            Let imm1 be (value shifted right by 16) and 0xFFFF
            Let encoding1 be 0xF2A00000 or (imm1 shifted left by 5) or reg_num
            Internals.internal_array_add(instructions, encoding1 and 0xFF)
            Internals.internal_array_add(instructions, (encoding1 shifted right by 8) and 0xFF)
            Internals.internal_array_add(instructions, (encoding1 shifted right by 16) and 0xFF)
            Internals.internal_array_add(instructions, (encoding1 shifted right by 24) and 0xFF)
        End If
    End If
    
    Return instructions

Process called "generate_memory_barrier" that takes barrier_type as String returns Internals.InternalArray:
    Note: Generate memory barrier instructions
    Note: DMB, DSB, ISB variants
    Note: Required for certain syscalls
    
    Let instruction be Internals.create_internal_array()
    
    If barrier_type is equal to "DMB_ISH":
        Note: Data Memory Barrier - Inner Shareable
        Note: Encoding: 0xD5033BBF
        Internals.internal_array_add(instruction, 0xBF)
        Internals.internal_array_add(instruction, 0x3B)
        Internals.internal_array_add(instruction, 0x03)
        Internals.internal_array_add(instruction, 0xD5)
    Otherwise barrier_type is equal to "DMB_SY":
        Note: Data Memory Barrier - Full System
        Note: Encoding: 0xD5033FBF
        Internals.internal_array_add(instruction, 0xBF)
        Internals.internal_array_add(instruction, 0x3F)
        Internals.internal_array_add(instruction, 0x03)
        Internals.internal_array_add(instruction, 0xD5)
    Otherwise barrier_type is equal to "DSB_ISH":
        Note: Data Synchronization Barrier - Inner Shareable
        Note: Encoding: 0xD5033B9F
        Internals.internal_array_add(instruction, 0x9F)
        Internals.internal_array_add(instruction, 0x3B)
        Internals.internal_array_add(instruction, 0x03)
        Internals.internal_array_add(instruction, 0xD5)
    Otherwise barrier_type is equal to "DSB_SY":
        Note: Data Synchronization Barrier - Full System
        Note: Encoding: 0xD5033F9F
        Internals.internal_array_add(instruction, 0x9F)
        Internals.internal_array_add(instruction, 0x3F)
        Internals.internal_array_add(instruction, 0x03)
        Internals.internal_array_add(instruction, 0xD5)
    Otherwise barrier_type is equal to "ISB":
        Note: Instruction Synchronization Barrier
        Note: Encoding: 0xD5033FDF
        Internals.internal_array_add(instruction, 0xDF)
        Internals.internal_array_add(instruction, 0x3F)
        Internals.internal_array_add(instruction, 0x03)
        Internals.internal_array_add(instruction, 0xD5)
    Otherwise:
        Note: Default to DMB SY
        Internals.internal_array_add(instruction, 0xBF)
        Internals.internal_array_add(instruction, 0x3F)
        Internals.internal_array_add(instruction, 0x03)
        Internals.internal_array_add(instruction, 0xD5)
    End If
    
    Return instruction

Note: =====================================================================
Note: ERROR HANDLING
Note: =====================================================================

Process called "is_error_return" that takes value as Integer returns Boolean:
    Note: Check if syscall return indicates error
    Note: Linux ARM64 returns -errno for errors
    Note: Check if value between -1 and -4095
    Note: Same convention as x86_64
    
    Note: Error if return value is between -4095 and -1
    If value is less than 0 and value is greater than or equal to minus 4095:
        Return true
    End If
    
    Return false

Process called "extract_errno" that takes error_value as Integer returns Integer:
    Note: Extract errno from error return
    Note: Negate the return value
    Note: Map to standard errno codes
    
    Note: Errno is negative of the error return
    If error_value is less than 0:
        Return minus error_value
    End If
    
    Note: Already positive errno
    Return error_value

Note: =====================================================================
Note: OPTIMIZATION FEATURES
Note: =====================================================================

Process called "can_use_ldp_stp" returns Boolean:
    Note: Check if load/store pair instructions available
    Note: Improves parameter loading efficiency
    Note: Reduces instruction count
    
    Note: LDP/STP are part of base ARM64 ISA
    Return true  Note: Always available on ARM64

Process called "optimize_syscall_sequence" that takes syscalls as Internals.InternalArray returns Internals.InternalArray:
    Note: Optimize multiple syscalls
    Note: Minimize register reloading
    Note: Batch similar operations
    
    Let optimized be Internals.create_internal_array()
    
    Note: Group syscalls by type for better caching
    Let file_ops be Internals.create_internal_array()
    Let process_ops be Internals.create_internal_array()
    Let memory_ops be Internals.create_internal_array()
    Let other_ops be Internals.create_internal_array()
    
    Let i be 0
    While i is less than Internals.internal_array_length(syscalls):
        Let syscall be Internals.internal_array_get(syscalls, i)
        
        Note: Categorize syscalls
        If syscall is equal to "read" or syscall is equal to "write" or syscall is equal to "open" or syscall is equal to "close":
            Internals.internal_array_add(file_ops, syscall)
        Otherwise syscall is equal to "fork" or syscall is equal to "execve" or syscall is equal to "wait" or syscall is equal to "exit":
            Internals.internal_array_add(process_ops, syscall)
        Otherwise syscall is equal to "mmap" or syscall is equal to "munmap" or syscall is equal to "mprotect" or syscall is equal to "brk":
            Internals.internal_array_add(memory_ops, syscall)
        Otherwise:
            Internals.internal_array_add(other_ops, syscall)
        End If
        
        Set i to i plus 1
    End While
    
    Note: Add syscalls in optimized order
    Let j be 0
    While j is less than Internals.internal_array_length(memory_ops):
        Internals.internal_array_add(optimized, Internals.internal_array_get(memory_ops, j))
        Set j to j plus 1
    End While
    
    Set j to 0
    While j is less than Internals.internal_array_length(file_ops):
        Internals.internal_array_add(optimized, Internals.internal_array_get(file_ops, j))
        Set j to j plus 1
    End While
    
    Set j to 0
    While j is less than Internals.internal_array_length(process_ops):
        Internals.internal_array_add(optimized, Internals.internal_array_get(process_ops, j))
        Set j to j plus 1
    End While
    
    Set j to 0
    While j is less than Internals.internal_array_length(other_ops):
        Internals.internal_array_add(optimized, Internals.internal_array_get(other_ops, j))
        Set j to j plus 1
    End While
    
    Return optimized
End Process

Note: =====================================================================
Note: PLATFORM REGISTRATION
Note: =====================================================================

Process called "register_linux_arm64_platform" returns Nothing:
    Note: Register this platform with the global registry
    
    @Implementation
    Creates an instance of LinuxARM64Platform and registers it with the
    global platform registry so it can be used by the syscall layer.
    @End Implementation
    
    Let platform be create_linux_arm64_platform()
    PlatformInterface.register_platform("linux_aarch64", platform)
End Process