Note: Centralized Syscall Registry
Note: This module provides a centralized registry of syscall metadata, names, and
Note: categories. It serves as the single source of truth for syscall information
Note: that is platform-agnostic, allowing platform files to reference common
Note: syscall names and metadata.

Import module "compiler/frontend/primitives/types/compiler_internals" as Internals

@Reasoning
The syscall registry serves as the single source of truth for syscall information.
It defines standard syscall names as constants, tracks which platforms support
each syscall, and provides metadata for version compatibility checking.
This centralized approach prevents duplication and inconsistencies.
@End Reasoning

Note: =====================================================================
Note: SYSCALL NAME CONSTANTS
Note: =====================================================================
Note: Standard syscall names used across all platforms

Note: File I/O syscalls
Constant SYSCALL_READ as String is "read"
Constant SYSCALL_WRITE as String is "write"
Constant SYSCALL_OPEN as String is "open"
Constant SYSCALL_CLOSE as String is "close"
Constant SYSCALL_STAT as String is "stat"
Constant SYSCALL_FSTAT as String is "fstat"
Constant SYSCALL_LSTAT as String is "lstat"
Constant SYSCALL_LSEEK as String is "lseek"
Constant SYSCALL_MMAP as String is "mmap"
Constant SYSCALL_MUNMAP as String is "munmap"
Constant SYSCALL_MSYNC as String is "msync"
Constant SYSCALL_MADVISE as String is "madvise"
Constant SYSCALL_FCNTL as String is "fcntl"
Constant SYSCALL_IOCTL as String is "ioctl"
Constant SYSCALL_DUP as String is "dup"
Constant SYSCALL_DUP2 as String is "dup2"
Constant SYSCALL_PIPE as String is "pipe"
Constant SYSCALL_PIPE2 as String is "pipe2"
Constant SYSCALL_FSYNC as String is "fsync"
Constant SYSCALL_FDATASYNC as String is "fdatasync"

Note: Process management syscalls
Constant SYSCALL_FORK as String is "fork"
Constant SYSCALL_VFORK as String is "vfork"
Constant SYSCALL_EXECVE as String is "execve"
Constant SYSCALL_EXIT as String is "exit"
Constant SYSCALL_EXIT_GROUP as String is "exit_group"
Constant SYSCALL_WAIT4 as String is "wait4"
Constant SYSCALL_WAITPID as String is "waitpid"
Constant SYSCALL_KILL as String is "kill"
Constant SYSCALL_GETPID as String is "getpid"
Constant SYSCALL_GETPPID as String is "getppid"
Constant SYSCALL_GETUID as String is "getuid"
Constant SYSCALL_GETEUID as String is "geteuid"
Constant SYSCALL_GETGID as String is "getgid"
Constant SYSCALL_GETEGID as String is "getegid"
Constant SYSCALL_SETUID as String is "setuid"
Constant SYSCALL_SETGID as String is "setgid"
Constant SYSCALL_SETSID as String is "setsid"

Note: Memory management syscalls
Constant SYSCALL_BRK as String is "brk"
Constant SYSCALL_SBRK as String is "sbrk"
Constant SYSCALL_MPROTECT as String is "mprotect"
Constant SYSCALL_MLOCK as String is "mlock"
Constant SYSCALL_MUNLOCK as String is "munlock"
Constant SYSCALL_MLOCKALL as String is "mlockall"
Constant SYSCALL_MUNLOCKALL as String is "munlockall"
Constant SYSCALL_MREMAP as String is "mremap"

Note: Network syscalls
Constant SYSCALL_SOCKET as String is "socket"
Constant SYSCALL_BIND as String is "bind"
Constant SYSCALL_LISTEN as String is "listen"
Constant SYSCALL_ACCEPT as String is "accept"
Constant SYSCALL_ACCEPT4 as String is "accept4"
Constant SYSCALL_CONNECT as String is "connect"
Constant SYSCALL_SEND as String is "send"
Constant SYSCALL_SENDTO as String is "sendto"
Constant SYSCALL_SENDMSG as String is "sendmsg"
Constant SYSCALL_RECV as String is "recv"
Constant SYSCALL_RECVFROM as String is "recvfrom"
Constant SYSCALL_RECVMSG as String is "recvmsg"
Constant SYSCALL_SHUTDOWN as String is "shutdown"
Constant SYSCALL_GETSOCKOPT as String is "getsockopt"
Constant SYSCALL_SETSOCKOPT as String is "setsockopt"
Constant SYSCALL_POLL as String is "poll"
Constant SYSCALL_SELECT as String is "select"
Constant SYSCALL_EPOLL_CREATE as String is "epoll_create"
Constant SYSCALL_EPOLL_CTL as String is "epoll_ctl"
Constant SYSCALL_EPOLL_WAIT as String is "epoll_wait"

Note: Time syscalls
Constant SYSCALL_TIME as String is "time"
Constant SYSCALL_GETTIMEOFDAY as String is "gettimeofday"
Constant SYSCALL_SETTIMEOFDAY as String is "settimeofday"
Constant SYSCALL_CLOCK_GETTIME as String is "clock_gettime"
Constant SYSCALL_CLOCK_SETTIME as String is "clock_settime"
Constant SYSCALL_CLOCK_GETRES as String is "clock_getres"
Constant SYSCALL_NANOSLEEP as String is "nanosleep"

Note: Signal syscalls
Constant SYSCALL_SIGACTION as String is "sigaction"
Constant SYSCALL_SIGPROCMASK as String is "sigprocmask"
Constant SYSCALL_SIGPENDING as String is "sigpending"
Constant SYSCALL_SIGSUSPEND as String is "sigsuspend"
Constant SYSCALL_SIGRETURN as String is "sigreturn"
Constant SYSCALL_RT_SIGACTION as String is "rt_sigaction"
Constant SYSCALL_RT_SIGPROCMASK as String is "rt_sigprocmask"
Constant SYSCALL_RT_SIGRETURN as String is "rt_sigreturn"

Note: Directory syscalls
Constant SYSCALL_GETCWD as String is "getcwd"
Constant SYSCALL_CHDIR as String is "chdir"
Constant SYSCALL_FCHDIR as String is "fchdir"
Constant SYSCALL_MKDIR as String is "mkdir"
Constant SYSCALL_RMDIR as String is "rmdir"
Constant SYSCALL_GETDENTS as String is "getdents"
Constant SYSCALL_GETDENTS64 as String is "getdents64"
Constant SYSCALL_RENAME as String is "rename"
Constant SYSCALL_LINK as String is "link"
Constant SYSCALL_UNLINK as String is "unlink"
Constant SYSCALL_SYMLINK as String is "symlink"
Constant SYSCALL_READLINK as String is "readlink"
Constant SYSCALL_CHMOD as String is "chmod"
Constant SYSCALL_CHOWN as String is "chown"
Constant SYSCALL_ACCESS as String is "access"

Note: =====================================================================
Note: SYSCALL METADATA TYPES
Note: =====================================================================

Type called "SyscallMetadata":
    Note: Complete metadata for a syscall
    
    @Implementation
    This structure contains all information needed to determine if a syscall
    is available and how to use it on a given platform. The metadata includes
    platform support, version requirements, and categorization.
    @End Implementation
    
    name as String
    category as String
    platforms as Internals.InternalArray  Note: Array of platform name strings
    min_kernel_version as Internals.InternalMap  Note: Map of platform to version string
    max_args as Integer
    is_deprecated as Boolean
    replacement as String  Note: Name of replacement syscall if deprecated
End Type

Type called "SyscallCategory":
    Note: Categories for organizing syscalls
    
    @Implementation
    Categories help organize syscalls by functionality, making it easier
    to find related operations and understand system capabilities.
    @End Implementation
    
    name as String
    description as String
    syscall_names as Internals.InternalArray  Note: Array of syscall name strings
End Type

Type called "PlatformAvailability":
    Note: Platform-specific syscall availability
    
    @Implementation
    Tracks which syscalls are available on each platform and any
    platform-specific requirements or limitations.
    @End Implementation
    
    platform_name as String
    supported_syscalls as Internals.InternalArray  Note: Array of supported syscall names
    kernel_version as String
    architecture as String
End Type

Note: =====================================================================
Note: HELPER FUNCTIONS FOR INTERNAL STRUCTURES
Note: =====================================================================

Process called "create_platform_array" that takes p1 as String, p2 as String, p3 as String returns Internals.InternalArray:
    Note: Helper to create platform arrays
    
    Let arr be Internals.create_internal_array(3)
    Internals.internal_array_add(arr, string_to_int_ptr(p1))
    Internals.internal_array_add(arr, string_to_int_ptr(p2))
    Internals.internal_array_add(arr, string_to_int_ptr(p3))
    Return arr
End Process

Process called "create_single_platform_array" that takes platform as String returns Internals.InternalArray:
    Note: Helper for single platform
    
    Let arr be Internals.create_internal_array(1)
    Internals.internal_array_add(arr, string_to_int_ptr(platform))
    Return arr
End Process

Process called "string_to_int_ptr" that takes s as String returns Integer:
    Note: Convert string to integer pointer for storage
    Return Internals.string_to_ptr(s)
End Process

Process called "int_ptr_to_string" that takes ptr as Integer returns String:
    Note: Convert integer pointer back to string
    Return Internals.ptr_to_string(ptr)
End Process

External Process called "allocate_metadata" that takes metadata as SyscallMetadata returns Integer
    Note: Allocate and store metadata, return pointer

External Process called "read_metadata" that takes ptr as Integer returns SyscallMetadata
    Note: Read metadata from pointer

Note: =====================================================================
Note: SYSCALL REGISTRY OPERATIONS
Note: =====================================================================

Process called "initialize_registry" returns Internals.InternalMap:
    Note: Initialize the syscall metadata registry
    
    @Implementation
    Creates and populates the complete syscall registry with metadata
    for all known syscalls. This is the authoritative source for syscall
    information across the system.
    @End Implementation
    
    Let registry be Internals.create_internal_map(256)  Note: Initial bucket count
    
    Note: Register file I/O syscalls
    Let common_platforms be create_platform_array("linux", "freebsd", "macos")
    register_syscall(registry, SYSCALL_READ, "file_io", 3, common_platforms)
    register_syscall(registry, SYSCALL_WRITE, "file_io", 3, common_platforms)
    register_syscall(registry, SYSCALL_OPEN, "file_io", 3, common_platforms)
    register_syscall(registry, SYSCALL_CLOSE, "file_io", 1, common_platforms)
    register_syscall(registry, SYSCALL_STAT, "file_io", 2, common_platforms)
    register_syscall(registry, SYSCALL_FSTAT, "file_io", 2, common_platforms)
    register_syscall(registry, SYSCALL_LSTAT, "file_io", 2, common_platforms)
    register_syscall(registry, SYSCALL_LSEEK, "file_io", 3, common_platforms)
    register_syscall(registry, SYSCALL_FSYNC, "file_io", 1, common_platforms)
    
    Let linux_freebsd be create_platform_array("linux", "freebsd", "")
    register_syscall(registry, SYSCALL_FDATASYNC, "file_io", 1, linux_freebsd)
    
    Note: Register memory management syscalls
    register_syscall(registry, SYSCALL_MMAP, "memory", 6, common_platforms)
    register_syscall(registry, SYSCALL_MUNMAP, "memory", 2, common_platforms)
    register_syscall(registry, SYSCALL_MPROTECT, "memory", 3, common_platforms)
    register_syscall(registry, SYSCALL_MADVISE, "memory", 3, common_platforms)
    register_syscall(registry, SYSCALL_BRK, "memory", 1, linux_freebsd)
    register_syscall(registry, SYSCALL_MLOCK, "memory", 2, common_platforms)
    register_syscall(registry, SYSCALL_MUNLOCK, "memory", 2, common_platforms)
    
    Note: Register process management syscalls
    register_syscall(registry, SYSCALL_FORK, "process", 0, common_platforms)
    register_syscall(registry, SYSCALL_VFORK, "process", 0, linux_freebsd)
    register_syscall(registry, SYSCALL_EXECVE, "process", 3, common_platforms)
    register_syscall(registry, SYSCALL_EXIT, "process", 1, common_platforms)
    
    Let linux_only be create_single_platform_array("linux")
    register_syscall(registry, SYSCALL_EXIT_GROUP, "process", 1, linux_only)
    register_syscall(registry, SYSCALL_GETPID, "process", 0, common_platforms)
    register_syscall(registry, SYSCALL_GETPPID, "process", 0, common_platforms)
    register_syscall(registry, SYSCALL_KILL, "process", 2, common_platforms)
    register_syscall(registry, SYSCALL_WAIT4, "process", 4, common_platforms)
    
    Note: Register network syscalls
    register_syscall(registry, SYSCALL_SOCKET, "network", 3, common_platforms)
    register_syscall(registry, SYSCALL_BIND, "network", 3, common_platforms)
    register_syscall(registry, SYSCALL_LISTEN, "network", 2, common_platforms)
    register_syscall(registry, SYSCALL_ACCEPT, "network", 3, common_platforms)
    register_syscall(registry, SYSCALL_ACCEPT4, "network", 4, linux_freebsd)
    register_syscall(registry, SYSCALL_CONNECT, "network", 3, common_platforms)
    register_syscall(registry, SYSCALL_SEND, "network", 4, common_platforms)
    register_syscall(registry, SYSCALL_RECV, "network", 4, common_platforms)
    register_syscall(registry, SYSCALL_POLL, "network", 3, common_platforms)
    register_syscall(registry, SYSCALL_SELECT, "network", 5, common_platforms)
    
    Note: Register time syscalls
    register_syscall(registry, SYSCALL_TIME, "time", 1, common_platforms)
    register_syscall(registry, SYSCALL_GETTIMEOFDAY, "time", 2, common_platforms)
    register_syscall(registry, SYSCALL_CLOCK_GETTIME, "time", 2, common_platforms)
    register_syscall(registry, SYSCALL_NANOSLEEP, "time", 2, common_platforms)
    
    Note: Register signal syscalls
    register_syscall(registry, SYSCALL_SIGACTION, "signal", 3, common_platforms)
    register_syscall(registry, SYSCALL_SIGPROCMASK, "signal", 3, common_platforms)
    register_syscall(registry, SYSCALL_RT_SIGACTION, "signal", 4, linux_only)
    register_syscall(registry, SYSCALL_RT_SIGPROCMASK, "signal", 4, linux_only)
    
    Note: Register directory syscalls
    register_syscall(registry, SYSCALL_GETCWD, "directory", 2, common_platforms)
    register_syscall(registry, SYSCALL_CHDIR, "directory", 1, common_platforms)
    register_syscall(registry, SYSCALL_MKDIR, "directory", 2, common_platforms)
    register_syscall(registry, SYSCALL_RMDIR, "directory", 1, common_platforms)
    register_syscall(registry, SYSCALL_RENAME, "directory", 2, common_platforms)
    register_syscall(registry, SYSCALL_UNLINK, "directory", 1, common_platforms)
    register_syscall(registry, SYSCALL_ACCESS, "directory", 2, common_platforms)
    
    Return registry
End Process

Process called "register_syscall" that takes registry as Internals.InternalMap, name as String, category as String, max_args as Integer, platforms as Internals.InternalArray returns Nothing:
    Note: Register a single syscall in the registry
    
    @Implementation
    Helper function to register syscalls with their metadata.
    Creates a SyscallMetadata structure and adds it to the registry.
    @End Implementation
    
    Let metadata be SyscallMetadata()
    Set metadata.name to name
    Set metadata.category to category
    Set metadata.max_args to max_args
    Set metadata.platforms to platforms
    Set metadata.is_deprecated to false
    Set metadata.replacement to ""
    
    Note: Initialize version requirements map
    Set metadata.min_kernel_version to Internals.create_internal_map(16)
    
    Note: Add to registry - need to serialize metadata to store as integer
    Note: This is a limitation - we store the metadata pointer as integer
    Let metadata_ptr be allocate_metadata(metadata)
    Internals.internal_map_set(registry, name, metadata_ptr)
End Process

Process called "get_syscall_metadata" that takes name as String returns SyscallMetadata:
    Note: Get metadata for a specific syscall
    
    @Implementation
    Looks up syscall metadata by name. Returns empty metadata if not found.
    @End Implementation
    
    Let registry be initialize_registry()
    
    Let metadata_ptr be Internals.internal_map_get(registry, name)
    If metadata_ptr not equals 0:
        Return read_metadata(metadata_ptr)
    End If
    
    Note: Return empty metadata for unknown syscall
    Let empty_metadata be SyscallMetadata
    Set empty_metadata.name to ""
    Set empty_metadata.category to "unknown"
    Set empty_metadata.max_args to 0
    Set empty_metadata.is_deprecated to false
    Return empty_metadata
End Process

Process called "is_syscall_supported" that takes name as String, platform as String returns Boolean:
    Note: Check if a syscall is supported on a platform
    
    @Implementation
    Determines if a specific syscall is available on the given platform
    by checking the metadata registry.
    @End Implementation
    
    Let metadata be get_syscall_metadata(name)
    
    If metadata.name equals "":
        Return false  Note: Unknown syscall
    End If
    
    Note: Check if platform is in supported list
    Let platform_iter be Internals.internal_array_iterator(metadata.platforms)
    While Internals.internal_array_has_next(platform_iter):
        Let platform_ptr be Internals.internal_array_next(platform_iter)
        Let supported_platform be int_ptr_to_string(platform_ptr)
        If supported_platform equals platform:
            Return true
        End If
    End While
    
    Return false
End Process

Process called "get_syscalls_by_category" that takes category as String returns Internals.InternalArray:
    Note: Get all syscalls in a category
    
    @Implementation
    Returns a list of all syscall names that belong to the specified category.
    Useful for discovering related functionality.
    @End Implementation
    
    Let registry be initialize_registry()
    Let result be Internals.create_internal_array(32)
    
    Note: Iterate through registry entries
    Let iter be Internals.internal_map_iterator(registry)
    While Internals.internal_map_has_next(iter):
        Let kv be Internals.internal_map_next(iter)
        Let metadata be read_metadata(kv.value)
        If metadata.category equals category:
            Internals.internal_array_add(result, string_to_int_ptr(kv.key))
        End If
    End While
    Return result
End Process

Process called "get_platform_syscalls" that takes platform as String returns Internals.InternalArray:
    Note: Get all syscalls supported by a platform
    
    @Implementation
    Returns a list of all syscalls that are available on the specified platform.
    Used for platform capability discovery.
    @End Implementation
    
    Let registry be initialize_registry()
    Let result be Internals.create_internal_array(64)
    
    Note: Iterate and filter by platform
    Let iter be Internals.internal_map_iterator(registry)
    While Internals.internal_map_has_next(iter):
        Let kv be Internals.internal_map_next(iter)
        Let metadata be read_metadata(kv.value)
        
        Note: Check if platform is supported
        Let platform_iter be Internals.internal_array_iterator(metadata.platforms)
        While Internals.internal_array_has_next(platform_iter):
            Let platform_ptr be Internals.internal_array_next(platform_iter)
            Let supported_platform be int_ptr_to_string(platform_ptr)
            If supported_platform equals platform:
                Internals.internal_array_add(result, string_to_int_ptr(kv.key))
                Break
            End If
        End While
    End While
    Return result
End Process

Process called "get_deprecated_syscalls" returns Internals.InternalArray:
    Note: Get list of deprecated syscalls
    
    @Implementation
    Returns syscalls that are deprecated and should be avoided.
    Includes information about replacement syscalls when available.
    @End Implementation
    
    Let registry be initialize_registry()
    Let result be Internals.create_internal_array(16)
    
    Note: Find deprecated syscalls
    Let iter be Internals.internal_map_iterator(registry)
    While Internals.internal_map_has_next(iter):
        Let kv be Internals.internal_map_next(iter)
        Let metadata be read_metadata(kv.value)
        If metadata.is_deprecated:
            Internals.internal_array_add(result, string_to_int_ptr(kv.key))
        End If
    End While
    Return result
End Process

Note: =====================================================================
Note: SYSCALL CATEGORIES
Note: =====================================================================

Process called "get_categories" returns Internals.InternalArray:
    Note: Get all syscall categories
    
    @Implementation
    Returns a list of all syscall categories with their descriptions
    and associated syscalls.
    @End Implementation
    
    Let categories be Internals.create_internal_array(7)
    
    Note: File I/O category
    Let file_io be SyscallCategory
    Set file_io.name to "file_io"
    Set file_io.description to "File and I/O operations"
    Set file_io.syscall_names to get_syscalls_by_category("file_io")
    Internals.internal_array_add(categories, allocate_category(file_io))
    
    Note: Process category
    Let process be SyscallCategory
    Set process.name to "process"
    Set process.description to "Process creation and management"
    Set process.syscall_names to get_syscalls_by_category("process")
    Internals.internal_array_add(categories, allocate_category(process))
    
    Note: Memory category
    Let memory be SyscallCategory
    Set memory.name to "memory"
    Set memory.description to "Memory allocation and protection"
    Set memory.syscall_names to get_syscalls_by_category("memory")
    Internals.internal_array_add(categories, allocate_category(memory))
    
    Note: Network category
    Let network be SyscallCategory
    Set network.name to "network"
    Set network.description to "Network socket operations"
    Set network.syscall_names to get_syscalls_by_category("network")
    Internals.internal_array_add(categories, allocate_category(network))
    
    Note: Time category
    Let time be SyscallCategory
    Set time.name to "time"
    Set time.description to "Time and clock operations"
    Set time.syscall_names to get_syscalls_by_category("time")
    Internals.internal_array_add(categories, allocate_category(time))
    
    Note: Signal category
    Let signal be SyscallCategory
    Set signal.name to "signal"
    Set signal.description to "Signal handling operations"
    Set signal.syscall_names to get_syscalls_by_category("signal")
    Internals.internal_array_add(categories, allocate_category(signal))
    
    Note: Directory category
    Let directory be SyscallCategory
    Set directory.name to "directory"
    Set directory.description to "Directory and filesystem operations"
    Set directory.syscall_names to get_syscalls_by_category("directory")
    Internals.internal_array_add(categories, allocate_category(directory))
    
    External Process called "allocate_category" that takes cat as SyscallCategory returns Integer
        Note: Allocate and store category, return pointer
    
    Return categories
End Process