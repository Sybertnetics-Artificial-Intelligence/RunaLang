Note:
compiler/services/ide_integration/debugger_interface.runa
Debugger Interface and Debug Session Management

This module provides comprehensive debugging functionality including:
- Debug session lifecycle management
- Breakpoint management and validation
- Step execution control (step over, step into, step out)
- Variable inspection and modification
- Call stack management and navigation
- Watch expressions and conditional breakpoints
- Exception handling and breakpoint triggers
- Memory inspection and heap analysis
- Thread management for concurrent debugging
- Remote debugging capabilities
- Debug console and REPL integration
- Performance profiling integration
- AOTT-aware debugging with optimization insights
:End Note

Import "compiler/frontend/diagnostics/errors" as Errors

Note: =====================================================================
Note: DEBUGGER INTERFACE DATA STRUCTURES
Note: =====================================================================

Type called "DebuggerInterface":
    interface_id as String
    interface_name as String
    supported_protocols as List[String]
    session_manager as DebugSessionManager
    breakpoint_manager as BreakpointManager
    execution_controller as ExecutionController
    variable_inspector as VariableInspector
    call_stack_manager as CallStackManager
    thread_manager as ThreadManager
    console_interface as DebugConsole
    is_active as Boolean

Type called "DebugSession":
    session_id as String
    session_type as String
    target_program as String
    program_arguments as List[String]
    environment_variables as Dictionary[String, String]
    working_directory as String
    debug_configuration as DebugConfiguration
    execution_state as ExecutionState
    active_threads as List[Thread]
    breakpoints as List[Breakpoint]
    watch_expressions as List[WatchExpression]
    console_output as List[ConsoleMessage]
    session_start_time as String

Type called "DebugConfiguration":
    configuration_name as String
    program_path as String
    launch_type as String
    debug_symbols as Boolean
    optimization_level as String
    source_maps as List[String]
    custom_settings as Dictionary[String, String]
    pre_launch_tasks as List[String]
    post_debug_tasks as List[String]

Type called "ExecutionState":
    state as String
    current_thread as String
    current_frame as StackFrame
    execution_point as SourceLocation
    pause_reason as String
    exception_info as ExceptionInfo
    performance_counters as Dictionary[String, Integer]

Type called "Breakpoint":
    breakpoint_id as String
    breakpoint_type as String
    location as SourceLocation
    condition as String
    hit_condition as String
    log_message as String
    is_enabled as Boolean
    hit_count as Integer
    is_verified as Boolean
    verification_message as String

Type called "WatchExpression":
    expression_id as String
    expression as String
    result as VariableValue
    is_expanded as Boolean
    evaluation_error as String
    context as EvaluationContext

Type called "VariableInspector":
    current_scope as VariableScope
    local_variables as List[Variable]
    global_variables as List[Variable]
    closure_variables as List[Variable]
    heap_objects as List[HeapObject]
    memory_viewer as MemoryViewer

Type called "Variable":
    name as String
    value as VariableValue
    type as String
    scope as String
    is_editable as Boolean
    memory_reference as String
    indexed_variables as Integer
    named_variables as Integer
    children as List[Variable]

Type called "VariableValue":
    value as String
    type as String
    presentation_hint as String
    memory_reference as String
    variable_reference as Integer
    indexed_variables as Integer
    named_variables as Integer

Type called "CallStackManager":
    stack_frames as List[StackFrame]
    current_frame_index as Integer
    total_frame_count as Integer
    can_restart as Boolean

Type called "Thread":
    thread_id as String
    thread_name as String
    thread_state as String
    stack_frames as List[StackFrame]
    is_main_thread as Boolean
    can_terminate as Boolean

Type called "DebugConsole":
    console_history as List[ConsoleMessage]
    repl_session as REPLSession
    command_processor as CommandProcessor
    output_formatter as OutputFormatter

Type called "ConsoleMessage":
    message_type as String
    content as String
    timestamp as String
    source as String
    category as String

Type called "ExceptionInfo":
    exception_type as String
    exception_message as String
    stack_trace as StackTrace
    break_mode as String
    details as Dictionary[String, String]

Note: =====================================================================
Note: DEBUGGER INTERFACE MANAGEMENT
Note: =====================================================================

Process called "create_debugger_interface" that takes interface_config as Dictionary[String, String] returns DebuggerInterface:
    Note: Create debugger interface with specified configuration
    Note: TODO: Implement debugger interface creation
    Throw Errors.NotImplemented with "Debugger interface creation not yet implemented"

Process called "initialize_debug_adapter" that takes adapter_type as String, adapter_config as Dictionary[String, String] returns Boolean:
    Note: Initialize debug adapter protocol connection
    Note: TODO: Implement debug adapter initialization
    Throw Errors.NotImplemented with "Debug adapter initialization not yet implemented"

Process called "register_debug_provider" that takes provider as DebugProvider returns Boolean:
    Note: Register debug provider with debugger interface
    Note: TODO: Implement debug provider registration
    Throw Errors.NotImplemented with "Debug provider registration not yet implemented"

Process called "get_debug_capabilities" that takes debugger as DebuggerInterface returns DebugCapabilities:
    Note: Get debugging capabilities of interface
    Note: TODO: Implement debug capabilities retrieval
    Throw Errors.NotImplemented with "Debug capabilities retrieval not yet implemented"

Note: =====================================================================
Note: DEBUG SESSION LIFECYCLE MANAGEMENT
Note: =====================================================================

Process called "launch_debug_session" that takes debug_config as DebugConfiguration returns DebugSession:
    Note: Launch new debug session with program
    Note: TODO: Implement debug session launch
    Throw Errors.NotImplemented with "Debug session launch not yet implemented"

Process called "attach_debug_session" that takes process_id as String, attach_config as Dictionary[String, String] returns DebugSession:
    Note: Attach debugger to running process
    Note: TODO: Implement debug session attachment
    Throw Errors.NotImplemented with "Debug session attachment not yet implemented"

Process called "terminate_debug_session" that takes session_id as String returns Boolean:
    Note: Terminate active debug session
    Note: TODO: Implement debug session termination
    Throw Errors.NotImplemented with "Debug session termination not yet implemented"

Process called "restart_debug_session" that takes session_id as String returns DebugSession:
    Note: Restart debug session with same configuration
    Note: TODO: Implement debug session restart
    Throw Errors.NotImplemented with "Debug session restart not yet implemented"

Process called "disconnect_debugger" that takes session_id as String, terminate_program as Boolean returns Boolean:
    Note: Disconnect debugger from target program
    Note: TODO: Implement debugger disconnection
    Throw Errors.NotImplemented with "Debugger disconnection not yet implemented"

Process called "get_active_sessions" that returns List[DebugSession]:
    Note: Get list of all active debug sessions
    Note: TODO: Implement active sessions retrieval
    Throw Errors.NotImplemented with "Active sessions retrieval not yet implemented"

Note: =====================================================================
Note: BREAKPOINT MANAGEMENT
Note: =====================================================================

Process called "set_breakpoint" that takes location as SourceLocation, condition as String returns Breakpoint:
    Note: Set breakpoint at specified location
    Note: TODO: Implement breakpoint setting
    Throw Errors.NotImplemented with "Breakpoint setting not yet implemented"

Process called "remove_breakpoint" that takes breakpoint_id as String returns Boolean:
    Note: Remove breakpoint by ID
    Note: TODO: Implement breakpoint removal
    Throw Errors.NotImplemented with "Breakpoint removal not yet implemented"

Process called "toggle_breakpoint" that takes breakpoint_id as String returns Boolean:
    Note: Toggle breakpoint enabled/disabled state
    Note: TODO: Implement breakpoint toggling
    Throw Errors.NotImplemented with "Breakpoint toggling not yet implemented"

Process called "set_conditional_breakpoint" that takes location as SourceLocation, condition as String, hit_condition as String returns Breakpoint:
    Note: Set conditional breakpoint with expression
    Note: TODO: Implement conditional breakpoint setting
    Throw Errors.NotImplemented with "Conditional breakpoint setting not yet implemented"

Process called "set_logpoint" that takes location as SourceLocation, log_message as String returns Breakpoint:
    Note: Set logpoint that outputs message without stopping
    Note: TODO: Implement logpoint setting
    Throw Errors.NotImplemented with "Logpoint setting not yet implemented"

Process called "validate_breakpoint" that takes breakpoint as Breakpoint returns BreakpointValidation:
    Note: Validate breakpoint location and condition
    Note: TODO: Implement breakpoint validation
    Throw Errors.NotImplemented with "Breakpoint validation not yet implemented"

Process called "get_all_breakpoints" that takes session_id as String returns List[Breakpoint]:
    Note: Get all breakpoints for session
    Note: TODO: Implement breakpoint list retrieval
    Throw Errors.NotImplemented with "Breakpoint list retrieval not yet implemented"

Note: =====================================================================
Note: EXECUTION CONTROL
Note: =====================================================================

Process called "continue_execution" that takes session_id as String, thread_id as String returns Boolean:
    Note: Continue program execution
    Note: TODO: Implement execution continuation
    Throw Errors.NotImplemented with "Execution continuation not yet implemented"

Process called "step_over" that takes session_id as String, thread_id as String returns Boolean:
    Note: Step over current line (execute but don't enter functions)
    Note: TODO: Implement step over
    Throw Errors.NotImplemented with "Step over not yet implemented"

Process called "step_into" that takes session_id as String, thread_id as String returns Boolean:
    Note: Step into function calls
    Note: TODO: Implement step into
    Throw Errors.NotImplemented with "Step into not yet implemented"

Process called "step_out" that takes session_id as String, thread_id as String returns Boolean:
    Note: Step out of current function
    Note: TODO: Implement step out
    Throw Errors.NotImplemented with "Step out not yet implemented"

Process called "pause_execution" that takes session_id as String returns Boolean:
    Note: Pause program execution
    Note: TODO: Implement execution pausing
    Throw Errors.NotImplemented with "Execution pausing not yet implemented"

Process called "run_to_cursor" that takes session_id as String, location as SourceLocation returns Boolean:
    Note: Run program until cursor position
    Note: TODO: Implement run to cursor
    Throw Errors.NotImplemented with "Run to cursor not yet implemented"

Process called "set_next_statement" that takes session_id as String, location as SourceLocation returns Boolean:
    Note: Set next statement to execute
    Note: TODO: Implement next statement setting
    Throw Errors.NotImplemented with "Next statement setting not yet implemented"

Note: =====================================================================
Note: VARIABLE INSPECTION AND MODIFICATION
Note: =====================================================================

Process called "get_local_variables" that takes session_id as String, frame_id as String returns List[Variable]:
    Note: Get local variables for stack frame
    Note: TODO: Implement local variables retrieval
    Throw Errors.NotImplemented with "Local variables retrieval not yet implemented"

Process called "get_global_variables" that takes session_id as String returns List[Variable]:
    Note: Get global variables for session
    Note: TODO: Implement global variables retrieval
    Throw Errors.NotImplemented with "Global variables retrieval not yet implemented"

Process called "evaluate_expression" that takes session_id as String, expression as String, context as EvaluationContext returns VariableValue:
    Note: Evaluate expression in debug context
    Note: TODO: Implement expression evaluation
    Throw Errors.NotImplemented with "Expression evaluation not yet implemented"

Process called "modify_variable" that takes session_id as String, variable_reference as String, new_value as String returns Boolean:
    Note: Modify variable value during debugging
    Note: TODO: Implement variable modification
    Throw Errors.NotImplemented with "Variable modification not yet implemented"

Process called "expand_variable" that takes session_id as String, variable_reference as String returns List[Variable]:
    Note: Expand complex variable to show children
    Note: TODO: Implement variable expansion
    Throw Errors.NotImplemented with "Variable expansion not yet implemented"

Process called "inspect_object" that takes session_id as String, object_reference as String returns ObjectInspection:
    Note: Inspect object properties and methods
    Note: TODO: Implement object inspection
    Throw Errors.NotImplemented with "Object inspection not yet implemented"

Note: =====================================================================
Note: CALL STACK MANAGEMENT
Note: =====================================================================

Process called "get_call_stack" that takes session_id as String, thread_id as String returns List[StackFrame]:
    Note: Get call stack for thread
    Note: TODO: Implement call stack retrieval
    Throw Errors.NotImplemented with "Call stack retrieval not yet implemented"

Process called "switch_stack_frame" that takes session_id as String, frame_id as String returns Boolean:
    Note: Switch to different stack frame
    Note: TODO: Implement stack frame switching
    Throw Errors.NotImplemented with "Stack frame switching not yet implemented"

Process called "get_frame_source" that takes session_id as String, frame_id as String returns Source:
    Note: Get source information for stack frame
    Note: TODO: Implement frame source retrieval
    Throw Errors.NotImplemented with "Frame source retrieval not yet implemented"

Process called "restart_frame" that takes session_id as String, frame_id as String returns Boolean:
    Note: Restart execution from specific frame
    Note: TODO: Implement frame restart
    Throw Errors.NotImplemented with "Frame restart not yet implemented"

Note: =====================================================================
Note: WATCH EXPRESSIONS
Note: =====================================================================

Process called "add_watch_expression" that takes session_id as String, expression as String returns WatchExpression:
    Note: Add expression to watch list
    Note: TODO: Implement watch expression addition
    Throw Errors.NotImplemented with "Watch expression addition not yet implemented"

Process called "remove_watch_expression" that takes session_id as String, expression_id as String returns Boolean:
    Note: Remove expression from watch list
    Note: TODO: Implement watch expression removal
    Throw Errors.NotImplemented with "Watch expression removal not yet implemented"

Process called "update_watch_expressions" that takes session_id as String returns List[WatchExpression]:
    Note: Update all watch expressions with current values
    Note: TODO: Implement watch expressions update
    Throw Errors.NotImplemented with "Watch expressions update not yet implemented"

Process called "evaluate_watch_expression" that takes session_id as String, expression_id as String returns VariableValue:
    Note: Evaluate specific watch expression
    Note: TODO: Implement watch expression evaluation
    Throw Errors.NotImplemented with "Watch expression evaluation not yet implemented"

Note: =====================================================================
Note: THREAD MANAGEMENT
Note: =====================================================================

Process called "get_threads" that takes session_id as String returns List[Thread]:
    Note: Get all threads in debug session
    Note: TODO: Implement threads retrieval
    Throw Errors.NotImplemented with "Threads retrieval not yet implemented"

Process called "switch_thread" that takes session_id as String, thread_id as String returns Boolean:
    Note: Switch debugging context to different thread
    Note: TODO: Implement thread switching
    Throw Errors.NotImplemented with "Thread switching not yet implemented"

Process called "pause_thread" that takes session_id as String, thread_id as String returns Boolean:
    Note: Pause specific thread execution
    Note: TODO: Implement thread pausing
    Throw Errors.NotImplemented with "Thread pausing not yet implemented"

Process called "resume_thread" that takes session_id as String, thread_id as String returns Boolean:
    Note: Resume specific thread execution
    Note: TODO: Implement thread resuming
    Throw Errors.NotImplemented with "Thread resuming not yet implemented"

Process called "terminate_thread" that takes session_id as String, thread_id as String returns Boolean:
    Note: Terminate specific thread
    Note: TODO: Implement thread termination
    Throw Errors.NotImplemented with "Thread termination not yet implemented"

Note: =====================================================================
Note: EXCEPTION HANDLING
Note: =====================================================================

Process called "configure_exception_handling" that takes session_id as String, exception_config as ExceptionConfiguration returns Boolean:
    Note: Configure how exceptions are handled during debugging
    Note: TODO: Implement exception handling configuration
    Throw Errors.NotImplemented with "Exception handling configuration not yet implemented"

Process called "set_exception_breakpoints" that takes session_id as String, exception_filters as List[String] returns List[Breakpoint]:
    Note: Set breakpoints for specific exception types
    Note: TODO: Implement exception breakpoint setting
    Throw Errors.NotImplemented with "Exception breakpoint setting not yet implemented"

Process called "handle_exception" that takes session_id as String, exception_info as ExceptionInfo returns ExceptionResponse:
    Note: Handle exception during program execution
    Note: TODO: Implement exception handling
    Throw Errors.NotImplemented with "Exception handling not yet implemented"

Process called "get_exception_details" that takes session_id as String, exception_id as String returns ExceptionDetails:
    Note: Get detailed information about exception
    Note: TODO: Implement exception details retrieval
    Throw Errors.NotImplemented with "Exception details retrieval not yet implemented"

Note: =====================================================================
Note: MEMORY INSPECTION
Note: =====================================================================

Process called "read_memory" that takes session_id as String, memory_reference as String, count as Integer returns MemoryData:
    Note: Read memory at specified address
    Note: TODO: Implement memory reading
    Throw Errors.NotImplemented with "Memory reading not yet implemented"

Process called "write_memory" that takes session_id as String, memory_reference as String, data as String returns Boolean:
    Note: Write data to memory at specified address
    Note: TODO: Implement memory writing
    Throw Errors.NotImplemented with "Memory writing not yet implemented"

Process called "inspect_heap" that takes session_id as String returns HeapInspection:
    Note: Inspect heap memory and objects
    Note: TODO: Implement heap inspection
    Throw Errors.NotImplemented with "Heap inspection not yet implemented"

Process called "track_memory_allocations" that takes session_id as String, enable as Boolean returns Boolean:
    Note: Enable/disable memory allocation tracking
    Note: TODO: Implement memory allocation tracking
    Throw Errors.NotImplemented with "Memory allocation tracking not yet implemented"

Process called "get_memory_usage" that takes session_id as String returns MemoryUsage:
    Note: Get current memory usage statistics
    Note: TODO: Implement memory usage retrieval
    Throw Errors.NotImplemented with "Memory usage retrieval not yet implemented"

Note: =====================================================================
Note: DEBUG CONSOLE AND REPL
Note: =====================================================================

Process called "initialize_debug_console" that takes session_id as String returns DebugConsole:
    Note: Initialize debug console for session
    Note: TODO: Implement debug console initialization
    Throw Errors.NotImplemented with "Debug console initialization not yet implemented"

Process called "execute_console_command" that takes session_id as String, command as String returns ConsoleResponse:
    Note: Execute command in debug console
    Note: TODO: Implement console command execution
    Throw Errors.NotImplemented with "Console command execution not yet implemented"

Process called "evaluate_repl_expression" that takes session_id as String, expression as String returns REPLResult:
    Note: Evaluate expression in REPL context
    Note: TODO: Implement REPL expression evaluation
    Throw Errors.NotImplemented with "REPL expression evaluation not yet implemented"

Process called "get_console_history" that takes session_id as String returns List[ConsoleMessage]:
    Note: Get debug console command history
    Note: TODO: Implement console history retrieval
    Throw Errors.NotImplemented with "Console history retrieval not yet implemented"

Process called "clear_console_output" that takes session_id as String returns Boolean:
    Note: Clear debug console output
    Note: TODO: Implement console output clearing
    Throw Errors.NotImplemented with "Console output clearing not yet implemented"

Note: =====================================================================
Note: REMOTE DEBUGGING
Note: =====================================================================

Process called "setup_remote_debugging" that takes remote_config as RemoteDebugConfiguration returns RemoteDebugSession:
    Note: Setup remote debugging connection
    Note: TODO: Implement remote debugging setup
    Throw Errors.NotImplemented with "Remote debugging setup not yet implemented"

Process called "connect_to_remote_target" that takes host as String, port as Integer, credentials as Dictionary[String, String] returns Boolean:
    Note: Connect to remote debugging target
    Note: TODO: Implement remote target connection
    Throw Errors.NotImplemented with "Remote target connection not yet implemented"

Process called "configure_port_forwarding" that takes local_port as Integer, remote_port as Integer returns Boolean:
    Note: Configure port forwarding for remote debugging
    Note: TODO: Implement port forwarding configuration
    Throw Errors.NotImplemented with "Port forwarding configuration not yet implemented"

Process called "sync_source_files" that takes session_id as String, source_mappings as Dictionary[String, String] returns Boolean:
    Note: Synchronize source files for remote debugging
    Note: TODO: Implement source file synchronization
    Throw Errors.NotImplemented with "Source file synchronization not yet implemented"

Note: =====================================================================
Note: PERFORMANCE PROFILING INTEGRATION
Note: =====================================================================

Process called "start_profiling" that takes session_id as String, profiling_options as ProfilingOptions returns Boolean:
    Note: Start performance profiling during debugging
    Note: TODO: Implement profiling startup
    Throw Errors.NotImplemented with "Profiling startup not yet implemented"

Process called "stop_profiling" that takes session_id as String returns ProfilingResults:
    Note: Stop profiling and get results
    Note: TODO: Implement profiling stopping
    Throw Errors.NotImplemented with "Profiling stopping not yet implemented"

Process called "get_performance_counters" that takes session_id as String returns Dictionary[String, Integer]:
    Note: Get performance counters during debugging
    Note: TODO: Implement performance counters retrieval
    Throw Errors.NotImplemented with "Performance counters retrieval not yet implemented"

Process called "profile_function_calls" that takes session_id as String, function_filter as String returns CallProfile:
    Note: Profile function call performance
    Note: TODO: Implement function call profiling
    Throw Errors.NotImplemented with "Function call profiling not yet implemented"

Note: =====================================================================
Note: AOTT-AWARE DEBUGGING
Note: =====================================================================

Process called "show_aott_optimization_info" that takes session_id as String, location as SourceLocation returns AOTTOptimizationInfo:
    Note: Show AOTT optimization information at location
    Note: TODO: Implement AOTT optimization info display
    Throw Errors.NotImplemented with "AOTT optimization info display not yet implemented"

Process called "debug_tier_transitions" that takes session_id as String, enable as Boolean returns Boolean:
    Note: Enable debugging of AOTT tier transitions
    Note: TODO: Implement tier transition debugging
    Throw Errors.NotImplemented with "Tier transition debugging not yet implemented"

Process called "inspect_optimized_code" that takes session_id as String, function_name as String returns OptimizedCodeInspection:
    Note: Inspect AOTT optimized code representation
    Note: TODO: Implement optimized code inspection
    Throw Errors.NotImplemented with "Optimized code inspection not yet implemented"

Process called "show_deoptimization_points" that takes session_id as String returns List[DeoptimizationPoint]:
    Note: Show locations where deoptimization can occur
    Note: TODO: Implement deoptimization points display
    Throw Errors.NotImplemented with "Deoptimization points display not yet implemented"

Process called "trace_speculation_failures" that takes session_id as String, enable as Boolean returns Boolean:
    Note: Enable tracing of AOTT speculation failures
    Note: TODO: Implement speculation failure tracing
    Throw Errors.NotImplemented with "Speculation failure tracing not yet implemented"

Note: =====================================================================
Note: DEBUG CONFIGURATION MANAGEMENT
Note: =====================================================================

Process called "save_debug_configuration" that takes config as DebugConfiguration, config_name as String returns Boolean:
    Note: Save debug configuration for reuse
    Note: TODO: Implement debug configuration saving
    Throw Errors.NotImplemented with "Debug configuration saving not yet implemented"

Process called "load_debug_configuration" that takes config_name as String returns DebugConfiguration:
    Note: Load saved debug configuration
    Note: TODO: Implement debug configuration loading
    Throw Errors.NotImplemented with "Debug configuration loading not yet implemented"

Process called "get_available_configurations" that returns List[String]:
    Note: Get list of available debug configurations
    Note: TODO: Implement available configurations retrieval
    Throw Errors.NotImplemented with "Available configurations retrieval not yet implemented"

Process called "validate_debug_configuration" that takes config as DebugConfiguration returns ConfigurationValidation:
    Note: Validate debug configuration settings
    Note: TODO: Implement debug configuration validation
    Throw Errors.NotImplemented with "Debug configuration validation not yet implemented"

Note: =====================================================================
Note: DEBUG ADAPTER PROTOCOL SUPPORT
Note: =====================================================================

Process called "handle_dap_request" that takes request as DAPRequest returns DAPResponse:
    Note: Handle Debug Adapter Protocol request
    Note: TODO: Implement DAP request handling
    Throw Errors.NotImplemented with "DAP request handling not yet implemented"

Process called "send_dap_event" that takes event as DAPEvent, session_id as String returns Boolean:
    Note: Send Debug Adapter Protocol event
    Note: TODO: Implement DAP event sending
    Throw Errors.NotImplemented with "DAP event sending not yet implemented"

Process called "initialize_dap_session" that takes initialization_args as DAPInitializeArguments returns DAPCapabilities:
    Note: Initialize DAP session with capabilities
    Note: TODO: Implement DAP session initialization
    Throw Errors.NotImplemented with "DAP session initialization not yet implemented"

Process called "handle_launch_request" that takes launch_args as DAPLaunchArguments returns Boolean:
    Note: Handle DAP launch request
    Note: TODO: Implement DAP launch request handling
    Throw Errors.NotImplemented with "DAP launch request handling not yet implemented"

Process called "handle_attach_request" that takes attach_args as DAPAttachArguments returns Boolean:
    Note: Handle DAP attach request
    Note: TODO: Implement DAP attach request handling
    Throw Errors.NotImplemented with "DAP attach request handling not yet implemented"