Note:
compiler/frontend/diagnostics/errors.runa
Compiler-Internal Error Types and Handling

This module provides error types for the compiler's internal use.
It is self-contained with no dependencies on the standard library.

@Reasoning
    The compiler needs its own error handling to remain independent from
    the standard library. This ensures compiler stability even if the
    stdlib evolves or changes. Uses direct syscalls for I/O and process
    termination to maintain complete independence.
@End Reasoning

@Implementation
    - Common error types for compiler operations
    - Error creation and handling utilities
    - Integration with diagnostic engine
    - Direct syscall implementations for I/O and process termination
    - No external dependencies
@End Implementation
:End Note

Import "../primitives/assembly/syscall" as Syscall
Import "../primitives/core/string_primitive" as StringPrimitive

Note: =====================================================================
Note: COMPILER ERROR TYPES
Note: =====================================================================

Type called "CompilerError":
    error_type as String
    message as String
    code as Integer
    location as Optional[SourceLocation]
End Type

Type called "SourceLocation":
    file as String
    line as Integer
    column as Integer
    offset as Integer
End Type

Type called "ErrorCategory" is:
    | LexicalError
    | ParseError
    | SemanticError
    | TypeError
    | NameError
    | ImportError
    | ValidationError
    | InternalError
    | NotImplementedError
End Type

Note: =====================================================================
Note: ERROR CREATION FUNCTIONS
Note: =====================================================================

Process called "create_error" that takes error_type as String, message as String returns CompilerError:
    Note: Create a compiler error with type and message
    
    Let error be CompilerError()
    Set error.error_type to error_type
    Set error.message to message
    Set error.code to 1  Note: Default error code
    Set error.location to Optional[SourceLocation].None()
    
    Return error
End Process

Process called "create_error_with_location" that takes error_type as String, message as String, location as SourceLocation returns CompilerError:
    Note: Create error with source location
    
    Let error be CompilerError()
    Set error.error_type to error_type
    Set error.message to message
    Set error.code to 1
    Set error.location to Optional[SourceLocation].Some(location)
    
    Return error
End Process

Process called "create_lexical_error" that takes message as String returns CompilerError:
    Note: Create lexical analysis error
    Return create_error("LexicalError", message)
End Process

Process called "create_parse_error" that takes message as String returns CompilerError:
    Note: Create parsing error
    Return create_error("ParseError", message)
End Process

Process called "create_semantic_error" that takes message as String returns CompilerError:
    Note: Create semantic analysis error
    Return create_error("SemanticError", message)
End Process

Process called "create_type_error" that takes message as String returns CompilerError:
    Note: Create type checking error
    Return create_error("TypeError", message)
End Process

Process called "create_name_error" that takes message as String returns CompilerError:
    Note: Create name resolution error
    Return create_error("NameError", message)
End Process

Process called "create_import_error" that takes message as String returns CompilerError:
    Note: Create import/module error
    Return create_error("ImportError", message)
End Process

Process called "create_validation_error" that takes message as String returns CompilerError:
    Note: Create validation error
    Return create_error("ValidationError", message)
End Process

Process called "create_internal_error" that takes message as String returns CompilerError:
    Note: Create internal compiler error
    Return create_error("InternalError", message)
End Process

Process called "create_not_implemented_error" that takes feature as String returns CompilerError:
    Note: Create not implemented error
    Let message be feature joined with " is not yet implemented"
    Return create_error("NotImplementedError", message)
End Process

Process called "create_invalid_format_error" that takes message as String returns CompilerError:
    Note: Create invalid format error
    Return create_error("InvalidFormatError", message)
End Process

Process called "create_out_of_bounds_error" that takes message as String returns CompilerError:
    Note: Create out of bounds error
    Return create_error("OutOfBoundsError", message)
End Process

Note: Error types as pseudo-constants for Throw compatibility
Process called "InvalidFormat" returns CompilerError:
    Return create_invalid_format_error("Invalid format")
End Process

Process called "OutOfBounds" returns CompilerError:
    Return create_out_of_bounds_error("Out of bounds")
End Process

Process called "NotImplemented" returns CompilerError:
    Return create_not_implemented_error("Not implemented")
End Process

Note: =====================================================================
Note: ERROR HANDLING UTILITIES
Note: =====================================================================

Process called "format_error" that takes error as CompilerError returns String:
    Note: Format error for display
    
    Let result be "Error: " joined with error.error_type
    Set result to result joined with ": " joined with error.message
    
    Match error.location:
        When Some(loc):
            Set result to result joined with " at " joined with loc.file
            Set result to result joined with ":" joined with integer_to_string(loc.line)
            Set result to result joined with ":" joined with integer_to_string(loc.column)
        When None():
            Note: No location information
    End Match
    
    Return result
End Process

Process called "integer_to_string" that takes value as Integer returns String:
    Note: Convert integer to string representation
    
    If value is equal to 0:
        Return "0"
    End If
    
    Let result be ""
    Let n be value
    Let is_negative be false
    
    If n is less than 0:
        Set is_negative to true
        Set n to 0 minus n
    End If
    
    Note: Build string in reverse
    While n is greater than 0:
        Let digit be n modulo 10
        Let char be digit_to_char(digit)
        Set result to char joined with result
        Set n to n divided by 10
    End While
    
    If is_negative:
        Set result to "-" joined with result
    End If
    
    Return result
End Process

Process called "digit_to_char" that takes digit as Integer returns String:
    Note: Convert single digit to character
    
    If digit is equal to 0: Return "0"
    Otherwise digit is equal to 1: Return "1"
    Otherwise digit is equal to 2: Return "2"
    Otherwise digit is equal to 3: Return "3"
    Otherwise digit is equal to 4: Return "4"
    Otherwise digit is equal to 5: Return "5"
    Otherwise digit is equal to 6: Return "6"
    Otherwise digit is equal to 7: Return "7"
    Otherwise digit is equal to 8: Return "8"
    Otherwise digit is equal to 9: Return "9"
    Otherwise: Return "?"
    End If
End Process

Note: =====================================================================
Note: PANIC AND ASSERTION UTILITIES
Note: =====================================================================

Process called "compiler_panic" that takes message as String returns Nothing:
    Note: Panic with internal compiler error
    Note: This should terminate compilation
    
    Let error be create_internal_error(message)
    Let formatted be format_error(error)
    
    Note: Output error and terminate
    print_error(formatted)
    exit_compiler(1)
End Process

Process called "assert_not_null" that takes value as Any, message as String returns Nothing:
    Note: Assert value is not null
    
    If value is equal to null:
        compiler_panic(message)
    End If
End Process

Process called "assert_true" that takes condition as Boolean, message as String returns Nothing:
    Note: Assert condition is true
    
    If not condition:
        compiler_panic(message)
    End If
End Process

Note: =====================================================================
Note: STRING MANIPULATION UTILITIES
Note: =====================================================================

Process called "string_to_cstring" that takes str as String, buffer_ptr as Integer returns Integer:
    @Implementation
    Converts Runa string to C-style null-terminated string in provided buffer.
    Returns the length of the converted string.
    @End Implementation
    
    StringPrimitive.copy_to_memory(buffer_ptr, str)
    Return StringPrimitive.length(str)
End Process

Process called "get_string_pointer" that takes str as String returns Integer:
    @Implementation
    Returns pointer to the string's character data for syscall use.
    Allocates temporary buffer for C-string conversion.
    @End Implementation
    
    Let str_length be StringPrimitive.length(str)
    Let buffer_size be str_length + 1  Note: Add space for null terminator
    
    Note: Allocate temporary buffer using malloc
    Let buffer_ptr be Integer
    Assembly "
        mov rdi, %[size]     ; buffer size
        call malloc          ; allocate memory
        mov %[ptr], rax      ; store pointer
    " with inputs [buffer_size] outputs [buffer_ptr]
    
    Note: Convert string to C-string
    StringPrimitive.copy_to_memory(buffer_ptr, str)
    
    Return buffer_ptr
End Process

Note: =====================================================================
Note: INTERNAL I/O AND PROCESS MANAGEMENT
Note: =====================================================================

Process called "print_error" that takes message as String returns Nothing:
    @Implementation
    Prints error message to stderr using direct syscall.
    Uses file descriptor 2 (stderr) for error output.
    @End Implementation
    
    Let stderr_fd be 2  Note: Standard error file descriptor
    Let msg_ptr be get_string_pointer(message)
    Let msg_length be StringPrimitive.length(message)
    
    Note: Write message to stderr using direct syscall
    Let write_result be Syscall.make_syscall_3(1, stderr_fd, msg_ptr, msg_length)  Note: sys_write
    
    Note: Write newline to stderr
    Let newline be "\n"
    Let newline_ptr be get_string_pointer(newline)
    Let newline_result be Syscall.make_syscall_3(1, stderr_fd, newline_ptr, 1)  Note: sys_write
End Process

Process called "exit_compiler" that takes code as Integer returns Nothing:
    @Implementation
    Terminates the compiler process using direct syscall.
    Uses exit_group to ensure all threads are terminated.
    @End Implementation
    
    Note: Terminate the entire process group using direct syscall
    Let exit_result be Syscall.make_syscall_1(231, code)  Note: sys_exit_group
    
    Note: This point should never be reached
End Process