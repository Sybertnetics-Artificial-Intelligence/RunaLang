Note:
compiler/frontend/primitives/operators/comparison.runa
Comparison Operator Compiler Integration Layer

This module maps comparison operator tokens from the parser to the appropriate
functions in comparison_core primitives. It handles all comparison operations
for primitive types with proper type resolution and optimization.

Key responsibilities:
- Map comparison operators (==, !=, <, >, <=, >=) to comparison_core primitive functions
- Handle type promotion and coercion for mixed-type comparisons
- Support IEEE 754 floating-point comparison semantics
- Provide null-safe and three-way comparison operations
- Generate optimized comparison code for primitive types
- Support both symbolic and natural language comparison operators
:End Note

Import module "compiler/frontend/primitives/core/comparison_core" as "ComparisonCore"

Note: Using comparison_core primitives - Pure Runa dispatch layer

Note: Equality Operations - dispatching to comparison_core

Process called "equal" that takes left as Any, right as Any returns Boolean:
    Let result be ComparisonCore.eq(left, right)
    Return result
End Process

Process called "not_equal" that takes left as Any, right as Any returns Boolean:
    Let result be ComparisonCore.ne(left, right)
    Return result
End Process

Process called "strict_equal" that takes left as Any, right as Any returns Boolean:
    Note: Use identity comparison for strict equality
    Let result be ComparisonCore.identity(left, right)
    Return result
End Process

Process called "strict_not_equal" that takes left as Any, right as Any returns Boolean:
    Note: Use identity comparison for strict inequality
    Let result be ComparisonCore.not_identity(left, right)
    Return result
End Process

Note: Relational Operations - dispatching to comparison_core

Process called "less_than" that takes left as Any, right as Any returns Boolean:
    Let result be ComparisonCore.lt(left, right)
    Return result
End Process

Process called "less_equal" that takes left as Any, right as Any returns Boolean:
    Let result be ComparisonCore.le(left, right)
    Return result
End Process

Process called "greater_than" that takes left as Any, right as Any returns Boolean:
    Let result be ComparisonCore.gt(left, right)
    Return result
End Process

Process called "greater_equal" that takes left as Any, right as Any returns Boolean:
    Let result be ComparisonCore.ge(left, right)
    Return result
End Process

Note: Three-Way Comparison - dispatching to comparison_core

Process called "compare" that takes left as Any, right as Any returns Integer32:
    Let result be ComparisonCore.cmp(left, right)
    Return result
End Process

Process called "compare_partial" that takes left as Any, right as Any returns Integer32:
    Note: Use standard three-way comparison since partial_cmp not in core
    Let result be ComparisonCore.cmp(left, right)
    Return result
End Process

Note: Floating-Point Specific Comparisons - dispatching to comparison_core

Process called "float_equal" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_eq(left, right)
    Return result
End Process

Process called "float_not_equal" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_ne(left, right)
    Return result
End Process

Process called "float_less_than" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_lt(left, right)
    Return result
End Process

Process called "float_less_equal" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_le(left, right)
    Return result
End Process

Process called "float_greater_than" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_gt(left, right)
    Return result
End Process

Process called "float_greater_equal" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_ge(left, right)
    Return result
End Process

Process called "float_unordered" that takes left as Float, right as Float returns Boolean:
    Let result be ComparisonCore.fcmp_unordered(left, right)
    Return result
End Process

Note: Range and Bound Checking - dispatching to comparison_core

Process called "in_range" that takes value as Any, min_val as Any, max_val as Any returns Boolean:
    Let result be ComparisonCore.in_range(value, min_val, max_val)
    Return result
End Process

Process called "in_range_inclusive" that takes value as Any, min_val as Any, max_val as Any returns Boolean:
    Let result be ComparisonCore.in_range(value, min_val, max_val)
    Return result
End Process

Process called "in_range_exclusive" that takes value as Any, min_val as Any, max_val as Any returns Boolean:
    Let result be ComparisonCore.in_range_exclusive(value, min_val, max_val)
    Return result
End Process

Process called "clamp_to_range" that takes value as Any, min_val as Any, max_val as Any returns Any:
    Note: Implement clamp using comparison core comparisons
    If ComparisonCore.lt(value, min_val):
        Return min_val
    End If
    If ComparisonCore.gt(value, max_val):
        Return max_val
    End If
    Return value
End Process

Note: Min/Max Operations - dispatching to comparison_core

Process called "min_value" that takes left as Any, right as Any returns Any:
    Let result be ComparisonCore.select_lt(left, right, left, right)
    Return result
End Process

Process called "max_value" that takes left as Any, right as Any returns Any:
    Let result be ComparisonCore.select_gt(left, right, left, right)
    Return result
End Process

Process called "min_by" that takes left as Any, right as Any, key_func as Any returns Any:
    Note: Implement using standard comparison since min_by not in core
    Let left_key be key_func(left)
    Let right_key be key_func(right)
    Let result be ComparisonCore.select_lt(left_key, right_key, left, right)
    Return result
End Process

Process called "max_by" that takes left as Any, right as Any, key_func as Any returns Any:
    Note: Implement using standard comparison since max_by not in core
    Let left_key be key_func(left)
    Let right_key be key_func(right)
    Let result be ComparisonCore.select_gt(left_key, right_key, left, right)
    Return result
End Process

Note: Null-Safe Comparisons - dispatching to comparison_core

Process called "null_safe_equal" that takes left as Any, right as Any returns Boolean:
    Note: Implement null-safe equality checking
    If left is null:
        If right is null:
            Return true
        End If
        Return false
    End If
    If right is null:
        Return false
    End If
    Let result be ComparisonCore.eq(left, right)
    Return result
End Process

Process called "null_safe_not_equal" that takes left as Any, right as Any returns Boolean:
    Note: Implement null-safe inequality checking
    Let equal_result be null_safe_equal(left, right)
    Return not equal_result
End Process

Process called "null_safe_compare" that takes left as Any, right as Any returns Integer32:
    Note: Implement null-safe three-way comparison
    If left is null:
        If right is null:
            Return 0
        End If
        Return -1
    End If
    If right is null:
        Return 1
    End If
    Let result be ComparisonCore.cmp(left, right)
    Return result
End Process

Note: Approximate Comparisons - dispatching to comparison_core

Process called "approximately_equal" that takes left as Float, right as Float, epsilon as Float returns Boolean:
    Note: Implement approximate equality using absolute difference
    Let diff be left - right
    If ComparisonCore.is_negative(diff):
        Let diff be -diff
    End If
    Let result be ComparisonCore.fcmp_le(diff, epsilon)
    Return result
End Process

Process called "relatively_equal" that takes left as Float, right as Float, tolerance as Float returns Boolean:
    Note: Implement relative equality checking
    If ComparisonCore.fcmp_eq(left, right):
        Return true
    End If
    Let diff be left - right
    If ComparisonCore.is_negative(diff):
        Let diff be -diff
    End If
    Let max_val be max_value(left, right)
    If ComparisonCore.is_negative(max_val):
        Let max_val be -max_val
    End If
    Let relative_diff be diff / max_val
    Let result be ComparisonCore.fcmp_le(relative_diff, tolerance)
    Return result
End Process

Note: Comparison Helper Functions for Compiler Integration

Process called "get_comparison_operator_precedence" that takes operator as String returns Integer32:
    Match operator:
        When "==":
            Return 6
        When "!=":
            Return 6
        When "<":
            Return 7
        When "<=":
            Return 7
        When ">":
            Return 7
        When ">=":
            Return 7
        When "<=>":
            Return 6
    End Match
    Return 0
End Process

Process called "is_comparison_operator" that takes operator as String returns Boolean:
    Match operator:
        When "==":
            Return true
        When "!=":
            Return true
        When "<":
            Return true
        When "<=":
            Return true
        When ">":
            Return true
        When ">=":
            Return true
        When "<=>":
            Return true
        When "===":
            Return true
        When "!==":
            Return true
        When "is":
            Return true
        When "is not":
            Return true
    End Match
    Return false
End Process

Process called "is_equality_operator" that takes operator as String returns Boolean:
    Match operator:
        When "==":
            Return true
        When "!=":
            Return true
        When "===":
            Return true
        When "!==":
            Return true
        When "is":
            Return true
        When "is not":
            Return true
    End Match
    Return false
End Process

Process called "is_relational_operator" that takes operator as String returns Boolean:
    Match operator:
        When "<":
            Return true
        When "<=":
            Return true
        When ">":
            Return true
        When ">=":
            Return true
    End Match
    Return false
End Process

Process called "invert_comparison_operator" that takes operator as String returns String:
    Match operator:
        When "==":
            Return "!="
        When "!=":
            Return "=="
        When "<":
            Return ">="
        When "<=":
            Return ">"
        When ">":
            Return "<="
        When ">=":
            Return "<"
    End Match
    Return operator
End Process

Process called "swap_comparison_operator" that takes operator as String returns String:
    Match operator:
        When "<":
            Return ">"
        When "<=":
            Return ">="
        When ">":
            Return "<"
        When ">=":
            Return "<="
    End Match
    Return operator
End Process

Note: Type Compatibility and Promotion

Process called "can_compare_types" that takes left_type as String, right_type as String returns Boolean:
    If left_type is right_type:
        Return true
    End If
    Let left_numeric be is_numeric_type(left_type)
    Let right_numeric be is_numeric_type(right_type)
    If left_numeric:
        If right_numeric:
            Return true
        End If
    End If
    Return false
End Process

Process called "is_numeric_type" that takes type_name as String returns Boolean:
    Match type_name:
        When "Integer8":
            Return true
        When "Integer16":
            Return true
        When "Integer32":
            Return true
        When "Integer64":
            Return true
        When "Unsigned8":
            Return true
        When "Unsigned16":
            Return true
        When "Unsigned32":
            Return true
        When "Unsigned64":
            Return true
        When "Float32":
            Return true
        When "Float64":
            Return true
    End Match
    Return false
End Process

Process called "promote_comparison_types" that takes left_type as String, right_type as String returns String:
    If left_type is "Float64":
        Return "Float64"
    End If
    If right_type is "Float64":
        Return "Float64"
    End If
    If left_type is "Float32":
        Return "Float32"
    End If
    If right_type is "Float32":
        Return "Float32"
    End If
    If left_type is "Integer64":
        Return "Integer64"
    End If
    If right_type is "Integer64":
        Return "Integer64"
    End If
    If left_type is "Integer32":
        Return "Integer32"
    End If
    If right_type is "Integer32":
        Return "Integer32"
    End If
    Return left_type
End Process