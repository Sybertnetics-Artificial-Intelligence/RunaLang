Note:
assembly/register_map.runa - Zero-Dependency Register Name Mapping

This module provides fundamental register name mapping operations for x86-64 architecture.
These primitives have ZERO dependencies and compile to efficient register identification.

@Reasoning:
- Provides low-level register name mapping for compiler code generation
- All operations use direct lookup tables for true self-hosting capabilities
- No external dependencies - we generate the mappings directly
- Essential for implementing register allocation, assembly generation, and debugging
@End Reasoning

@Implementation:
- Direct register ID to name mapping tables
- Support for all x86-64 register variants and sizes
- Efficient lookup operations using switch statements
- Zero-cost abstraction through compile-time resolution
@End Implementation

@Performance_Hints:
- Register name lookups use direct indexing
- All mappings resolved at compile time when possible
- Minimal overhead for register identification
- Optimized for common register access patterns
@End Performance_Hints
:End Note

Note: =====================================================================
Note: 64-BIT GENERAL PURPOSE REGISTERS
Note: =====================================================================

Process called "get_register64_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("rax")
        When 1:
            Return create_string_constant("rcx")
        When 2:
            Return create_string_constant("rdx")
        When 3:
            Return create_string_constant("rbx")
        When 4:
            Return create_string_constant("rsp")
        When 5:
            Return create_string_constant("rbp")
        When 6:
            Return create_string_constant("rsi")
        When 7:
            Return create_string_constant("rdi")
        When 8:
            Return create_string_constant("r8")
        When 9:
            Return create_string_constant("r9")
        When 10:
            Return create_string_constant("r10")
        When 11:
            Return create_string_constant("r11")
        When 12:
            Return create_string_constant("r12")
        When 13:
            Return create_string_constant("r13")
        When 14:
            Return create_string_constant("r14")
        When 15:
            Return create_string_constant("r15")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_register32_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("eax")
        When 1:
            Return create_string_constant("ecx")
        When 2:
            Return create_string_constant("edx")
        When 3:
            Return create_string_constant("ebx")
        When 4:
            Return create_string_constant("esp")
        When 5:
            Return create_string_constant("ebp")
        When 6:
            Return create_string_constant("esi")
        When 7:
            Return create_string_constant("edi")
        When 8:
            Return create_string_constant("r8d")
        When 9:
            Return create_string_constant("r9d")
        When 10:
            Return create_string_constant("r10d")
        When 11:
            Return create_string_constant("r11d")
        When 12:
            Return create_string_constant("r12d")
        When 13:
            Return create_string_constant("r13d")
        When 14:
            Return create_string_constant("r14d")
        When 15:
            Return create_string_constant("r15d")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_register16_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("ax")
        When 1:
            Return create_string_constant("cx")
        When 2:
            Return create_string_constant("dx")
        When 3:
            Return create_string_constant("bx")
        When 4:
            Return create_string_constant("sp")
        When 5:
            Return create_string_constant("bp")
        When 6:
            Return create_string_constant("si")
        When 7:
            Return create_string_constant("di")
        When 8:
            Return create_string_constant("r8w")
        When 9:
            Return create_string_constant("r9w")
        When 10:
            Return create_string_constant("r10w")
        When 11:
            Return create_string_constant("r11w")
        When 12:
            Return create_string_constant("r12w")
        When 13:
            Return create_string_constant("r13w")
        When 14:
            Return create_string_constant("r14w")
        When 15:
            Return create_string_constant("r15w")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_register8_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("al")
        When 1:
            Return create_string_constant("cl")
        When 2:
            Return create_string_constant("dl")
        When 3:
            Return create_string_constant("bl")
        When 4:
            Return create_string_constant("spl")
        When 5:
            Return create_string_constant("bpl")
        When 6:
            Return create_string_constant("sil")
        When 7:
            Return create_string_constant("dil")
        When 8:
            Return create_string_constant("r8b")
        When 9:
            Return create_string_constant("r9b")
        When 10:
            Return create_string_constant("r10b")
        When 11:
            Return create_string_constant("r11b")
        When 12:
            Return create_string_constant("r12b")
        When 13:
            Return create_string_constant("r13b")
        When 14:
            Return create_string_constant("r14b")
        When 15:
            Return create_string_constant("r15b")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_register8h_name" that takes register_id as Integer returns Pointer:
    Note: High 8-bit registers (legacy)
    Match register_id:
        When 0:
            Return create_string_constant("ah")
        When 1:
            Return create_string_constant("ch")
        When 2:
            Return create_string_constant("dh")
        When 3:
            Return create_string_constant("bh")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Note: =====================================================================
Note: FLOATING POINT REGISTERS
Note: =====================================================================

Process called "get_xmm_register_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("xmm0")
        When 1:
            Return create_string_constant("xmm1")
        When 2:
            Return create_string_constant("xmm2")
        When 3:
            Return create_string_constant("xmm3")
        When 4:
            Return create_string_constant("xmm4")
        When 5:
            Return create_string_constant("xmm5")
        When 6:
            Return create_string_constant("xmm6")
        When 7:
            Return create_string_constant("xmm7")
        When 8:
            Return create_string_constant("xmm8")
        When 9:
            Return create_string_constant("xmm9")
        When 10:
            Return create_string_constant("xmm10")
        When 11:
            Return create_string_constant("xmm11")
        When 12:
            Return create_string_constant("xmm12")
        When 13:
            Return create_string_constant("xmm13")
        When 14:
            Return create_string_constant("xmm14")
        When 15:
            Return create_string_constant("xmm15")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_ymm_register_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("ymm0")
        When 1:
            Return create_string_constant("ymm1")
        When 2:
            Return create_string_constant("ymm2")
        When 3:
            Return create_string_constant("ymm3")
        When 4:
            Return create_string_constant("ymm4")
        When 5:
            Return create_string_constant("ymm5")
        When 6:
            Return create_string_constant("ymm6")
        When 7:
            Return create_string_constant("ymm7")
        When 8:
            Return create_string_constant("ymm8")
        When 9:
            Return create_string_constant("ymm9")
        When 10:
            Return create_string_constant("ymm10")
        When 11:
            Return create_string_constant("ymm11")
        When 12:
            Return create_string_constant("ymm12")
        When 13:
            Return create_string_constant("ymm13")
        When 14:
            Return create_string_constant("ymm14")
        When 15:
            Return create_string_constant("ymm15")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_zmm_register_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("zmm0")
        When 1:
            Return create_string_constant("zmm1")
        When 2:
            Return create_string_constant("zmm2")
        When 3:
            Return create_string_constant("zmm3")
        When 4:
            Return create_string_constant("zmm4")
        When 5:
            Return create_string_constant("zmm5")
        When 6:
            Return create_string_constant("zmm6")
        When 7:
            Return create_string_constant("zmm7")
        When 8:
            Return create_string_constant("zmm8")
        When 9:
            Return create_string_constant("zmm9")
        When 10:
            Return create_string_constant("zmm10")
        When 11:
            Return create_string_constant("zmm11")
        When 12:
            Return create_string_constant("zmm12")
        When 13:
            Return create_string_constant("zmm13")
        When 14:
            Return create_string_constant("zmm14")
        When 15:
            Return create_string_constant("zmm15")
        When 16:
            Return create_string_constant("zmm16")
        When 17:
            Return create_string_constant("zmm17")
        When 18:
            Return create_string_constant("zmm18")
        When 19:
            Return create_string_constant("zmm19")
        When 20:
            Return create_string_constant("zmm20")
        When 21:
            Return create_string_constant("zmm21")
        When 22:
            Return create_string_constant("zmm22")
        When 23:
            Return create_string_constant("zmm23")
        When 24:
            Return create_string_constant("zmm24")
        When 25:
            Return create_string_constant("zmm25")
        When 26:
            Return create_string_constant("zmm26")
        When 27:
            Return create_string_constant("zmm27")
        When 28:
            Return create_string_constant("zmm28")
        When 29:
            Return create_string_constant("zmm29")
        When 30:
            Return create_string_constant("zmm30")
        When 31:
            Return create_string_constant("zmm31")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Note: =====================================================================
Note: SEGMENT REGISTERS
Note: =====================================================================

Process called "get_segment_register_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("es")
        When 1:
            Return create_string_constant("cs")
        When 2:
            Return create_string_constant("ss")
        When 3:
            Return create_string_constant("ds")
        When 4:
            Return create_string_constant("fs")
        When 5:
            Return create_string_constant("gs")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Note: =====================================================================
Note: CONTROL REGISTERS
Note: =====================================================================

Process called "get_control_register_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("cr0")
        When 1:
            Return create_string_constant("cr1")
        When 2:
            Return create_string_constant("cr2")
        When 3:
            Return create_string_constant("cr3")
        When 4:
            Return create_string_constant("cr4")
        When 8:
            Return create_string_constant("cr8")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Process called "get_debug_register_name" that takes register_id as Integer returns Pointer:
    Match register_id:
        When 0:
            Return create_string_constant("dr0")
        When 1:
            Return create_string_constant("dr1")
        When 2:
            Return create_string_constant("dr2")
        When 3:
            Return create_string_constant("dr3")
        When 4:
            Return create_string_constant("dr4")
        When 5:
            Return create_string_constant("dr5")
        When 6:
            Return create_string_constant("dr6")
        When 7:
            Return create_string_constant("dr7")
        Otherwise:
            Return create_string_constant("invalid")
    End Match
End Process

Note: =====================================================================
Note: REVERSE LOOKUP OPERATIONS
Note: =====================================================================

Process called "find_register_id_by_name" that takes register_name as Pointer returns Integer:
    Note: Find register ID by name string
    Let i be 0
    While i < 16:
        Let reg64_name be get_register64_name(i)
        If string_equals(register_name, reg64_name):
            Return i
        End If
        
        Let reg32_name be get_register32_name(i)
        If string_equals(register_name, reg32_name):
            Return i
        End If
        
        Let reg16_name be get_register16_name(i)
        If string_equals(register_name, reg16_name):
            Return i
        End If
        
        Let reg8_name be get_register8_name(i)
        If string_equals(register_name, reg8_name):
            Return i
        End If
        
        Let i be add_integers(i, 1)
    End While
    
    Return -1
End Process

Process called "find_xmm_register_id_by_name" that takes register_name as Pointer returns Integer:
    Let i be 0
    While i < 16:
        Let xmm_name be get_xmm_register_name(i)
        If string_equals(register_name, xmm_name):
            Return i
        End If
        Let i be add_integers(i, 1)
    End While
    Return -1
End Process

Process called "get_register_size_from_name" that takes register_name as Pointer returns Integer:
    Note: Determine register size from name
    Let name_length be string_length(register_name)
    
    If name_length is 2:
        Note: Could be 16-bit register (ax, cx, etc.)
        Let last_char be get_string_char_at(register_name, 1)
        If last_char is 120:
            Note: Ends with 'x' - likely 16-bit
            Return 2
        End If
        Return 1
    End If
    
    If name_length is 3:
        Let first_char be get_string_char_at(register_name, 0)
        If first_char is 101:
            Note: Starts with 'e' - likely 32-bit
            Return 4
        End If
        If first_char is 114:
            Note: Starts with 'r' - could be 64-bit or extended
            Return 8
        End If
        Return 1
    End If
    
    If name_length is 4:
        Let prefix be get_string_prefix(register_name, 3)
        If string_equals(prefix, "xmm"):
            Return 16
        End If
        If string_equals(prefix, "ymm"):
            Return 32
        End If
        If string_equals(prefix, "zmm"):
            Return 64
        End If
        Return 8
    End If
    
    Return 8
End Process

Note: =====================================================================
Note: REGISTER CLASSIFICATION
Note: =====================================================================

Process called "is_general_purpose_register" that takes register_id as Integer returns Boolean:
    If register_id >= 0:
        If register_id <= 15:
            Return true
        End If
    End If
    Return false
End Process

Process called "is_floating_point_register" that takes register_id as Integer returns Boolean:
    If register_id >= 0:
        If register_id <= 31:
            Return true
        End If
    End If
    Return false
End Process

Process called "is_callee_saved_register" that takes register_id as Integer returns Boolean:
    Note: System V ABI callee-saved registers
    Match register_id:
        When 3:
            Return true
        When 5:
            Return true
        When 12:
            Return true
        When 13:
            Return true
        When 14:
            Return true
        When 15:
            Return true
        Otherwise:
            Return false
    End Match
End Process

Process called "is_caller_saved_register" that takes register_id as Integer returns Boolean:
    Note: System V ABI caller-saved registers
    Match register_id:
        When 0:
            Return true
        When 1:
            Return true
        When 2:
            Return true
        When 6:
            Return true
        When 7:
            Return true
        When 8:
            Return true
        When 9:
            Return true
        When 10:
            Return true
        When 11:
            Return true
        Otherwise:
            Return false
    End Match
End Process

Process called "is_argument_register" that takes register_id as Integer returns Boolean:
    Note: System V ABI argument registers
    Match register_id:
        When 7:
            Return true
        When 6:
            Return true
        When 2:
            Return true
        When 1:
            Return true
        When 8:
            Return true
        When 9:
            Return true
        Otherwise:
            Return false
    End Match
End Process

Process called "is_return_value_register" that takes register_id as Integer returns Boolean:
    Note: System V ABI return value registers
    Match register_id:
        When 0:
            Return true
        When 2:
            Return true
        Otherwise:
            Return false
    End Match
End Process

Note: =====================================================================
Note: REGISTER ENCODING UTILITIES
Note: =====================================================================

Process called "encode_register_for_modrm" that takes register_id as Integer returns Integer:
    Note: Get the 3-bit encoding for ModR/M byte
    Return bitwise_and(register_id, 7)
End Process

Process called "needs_rex_extension" that takes register_id as Integer returns Boolean:
    Note: Check if register needs REX extension bit
    If register_id >= 8:
        Return true
    End If
    Return false
End Process

Process called "get_rex_extension_bit" that takes register_id as Integer returns Integer:
    Note: Get the REX extension bit for this register
    If register_id >= 8:
        Return 1
    End If
    Return 0
End Process

Process called "encode_register_pair" that takes reg1 as Integer, reg2 as Integer returns Integer:
    Note: Encode two registers into a single byte
    Let encoded_reg1 be encode_register_for_modrm(reg1)
    Let encoded_reg2 be encode_register_for_modrm(reg2)
    Let combined be shift_left_integer(encoded_reg1, 3)
    Return bitwise_or(combined, encoded_reg2)
End Process

Note: =====================================================================
Note: REGISTER ALLOCATION HELPERS
Note: =====================================================================

Process called "get_next_available_register" that takes used_mask as Integer returns Integer:
    Let register_id be 0
    While register_id < 16:
        Let register_bit be shift_left_integer(1, register_id)
        Let is_used be bitwise_and(used_mask, register_bit)
        If is_used is 0:
            Return register_id
        End If
        Let register_id be add_integers(register_id, 1)
    End While
    Return -1
End Process

Process called "mark_register_used" that takes used_mask_ptr as Pointer, register_id as Integer:
    Let current_mask be load_integer_from_pointer(used_mask_ptr)
    Let register_bit be shift_left_integer(1, register_id)
    Let new_mask be bitwise_or(current_mask, register_bit)
    store_integer_to_pointer(used_mask_ptr, new_mask)
End Process

Process called "mark_register_free" that takes used_mask_ptr as Pointer, register_id as Integer:
    Let current_mask be load_integer_from_pointer(used_mask_ptr)
    Let register_bit be shift_left_integer(1, register_id)
    Let inverted_bit be bitwise_not(register_bit)
    Let new_mask be bitwise_and(current_mask, inverted_bit)
    store_integer_to_pointer(used_mask_ptr, new_mask)
End Process

Process called "count_available_registers" that takes used_mask as Integer returns Integer:
    Let available_count be 0
    Let register_id be 0
    While register_id < 16:
        Let register_bit be shift_left_integer(1, register_id)
        Let is_used be bitwise_and(used_mask, register_bit)
        If is_used is 0:
            Let available_count be add_integers(available_count, 1)
        End If
        Let register_id be add_integers(register_id, 1)
    End While
    Return available_count
End Process

Note: =====================================================================
Note: REGISTER CONSTRAINTS
Note: =====================================================================

Process called "satisfies_constraint" that takes register_id as Integer, constraint_type as Integer returns Boolean:
    Match constraint_type:
        When 1:
            Note: Any general purpose register
            Return is_general_purpose_register(register_id)
        When 2:
            Note: RAX specifically
            Return integers_equal(register_id, 0)
        When 3:
            Note: RCX specifically
            Return integers_equal(register_id, 1)
        When 4:
            Note: RDX specifically
            Return integers_equal(register_id, 2)
        When 5:
            Note: Callee-saved register
            Return is_callee_saved_register(register_id)
        When 6:
            Note: Caller-saved register
            Return is_caller_saved_register(register_id)
        Otherwise:
            Return false
    End Match
End Process

Process called "get_preferred_register_for_constraint" that takes constraint_type as Integer returns Integer:
    Match constraint_type:
        When 2:
            Return 0
        When 3:
            Return 1
        When 4:
            Return 2
        When 5:
            Note: Prefer RBX for callee-saved
            Return 3
        When 6:
            Note: Prefer R10 for caller-saved
            Return 10
        Otherwise:
            Return 0
    End Match
End Process

Note: Helper functions using existing primitives

Process called "add_integers" that takes left as Integer, right as Integer returns Integer:
    Inline Assembly:
        "mov %0, %1"                   Note: Load left operand
        "add %0, %2"                   Note: Add right operand to result
        : "=r"(result)
        : "r"(left), "r"(right)
        : "memory"
    End Assembly
    Return result
End Process

Process called "shift_left_integer" that takes value as Integer, shift_count as Integer returns Integer:
    Inline Assembly:
        "mov %0, %1"                   Note: Load value to shift
        "mov %2, %3"                   Note: Load shift count
        "shl %0, cl"                   Note: Shift left by CL
        : "=r"(result)
        : "r"(value), "c"(rcx), "r"(shift_count)
        : "memory"
    End Assembly
    Return result
End Process

Process called "bitwise_and" that takes left as Integer, right as Integer returns Integer:
    Inline Assembly:
        "mov %0, %1"                   Note: Load left operand
        "and %0, %2"                   Note: AND with right operand
        : "=r"(result)
        : "r"(left), "r"(right)
        : "memory"
    End Assembly
    Return result
End Process

Process called "bitwise_or" that takes left as Integer, right as Integer returns Integer:
    Inline Assembly:
        "mov %0, %1"                   Note: Load left operand
        "or %0, %2"                    Note: OR with right operand
        : "=r"(result)
        : "r"(left), "r"(right)
        : "memory"
    End Assembly
    Return result
End Process

Process called "bitwise_not" that takes value as Integer returns Integer:
    Inline Assembly:
        "mov %0, %1"                   Note: Load value
        "not %0"                       Note: Bitwise NOT operation
        : "=r"(result)
        : "r"(value)
        : "memory"
    End Assembly
    Return result
End Process

Process called "integers_equal" that takes left as Integer, right as Integer returns Boolean:
    Inline Assembly:
        "cmp %1, %2"                   Note: Compare left and right
        "sete %0"                      Note: Set result to 1 if equal
        : "=r"(result)
        : "r"(left), "r"(right)
        : "memory"
    End Assembly
    Return result
End Process

Process called "load_integer_from_pointer" that takes ptr as Pointer returns Integer:
    Inline Assembly:
        "mov %0, [%1]"                 Note: Load integer from pointer
        : "=r"(result)
        : "r"(ptr)
        : "memory"
    End Assembly
    Return result
End Process

Process called "store_integer_to_pointer" that takes ptr as Pointer, value as Integer:
    Inline Assembly:
        "mov [%0], %1"                 Note: Store integer to pointer location
        : 
        : "r"(ptr), "r"(value)
        : "memory"
    End Assembly
End Process

Process called "create_string_constant" that takes text as String returns Pointer:
    Inline Assembly:
        "mov %0, %1"                   Note: Load string constant address
        : "=r"(result)
        : "r"(text)
        : "memory"
    End Assembly
    Return result
End Process

Process called "string_equals" that takes str1 as Pointer, str2 as Pointer returns Boolean:
    Note: Placeholder for string comparison
    Inline Assembly:
        "mov %0, %1"                   Note: Return false placeholder
        : "=r"(result)
        : "i"(0)
        : "memory"
    End Assembly
    Return result
End Process

Process called "string_length" that takes str as Pointer returns Integer:
    Inline Assembly:
        "mov %1, %2"                   Note: Load string pointer
        "xor %0, %0"                   Note: Clear result counter
        ".loop_len:"                    Note: Start of loop
        "lodsb"                        Note: Load byte and increment SI
        "test al, al"                  Note: Check for null terminator
        "jz .done_len"                 Note: Jump if end of string
        "inc %0"                       Note: Increment counter
        "jmp .loop_len"                Note: Continue loop
        ".done_len:"                    Note: End of loop
        : "=r"(result)
        : "S"(rsi), "r"(str)
        : "al", "memory"
    End Assembly
    Return result
End Process

Process called "get_string_char_at" that takes str as Pointer, index as Integer returns Integer:
    Inline Assembly:
        "mov %1, %2"                   Note: Load string pointer
        "add %1, %3"                   Note: Add index offset
        "mov al, byte ptr [%1]"        Note: Load character byte
        "movzx %0, al"                 Note: Zero-extend to full register
        : "=r"(result)
        : "r"(rsi), "r"(str), "r"(index)
        : "al", "memory"
    End Assembly
    Return result
End Process

Process called "get_string_prefix" that takes str as Pointer, length as Integer returns Pointer:
    Note: Placeholder for string prefix extraction
    Inline Assembly:
        "mov %0, %1"                   Note: Return string pointer placeholder
        : "=r"(result)
        : "r"(str)
        : "memory"
    End Assembly
    Return result
End Process