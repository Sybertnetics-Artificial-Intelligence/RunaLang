Note:
compiler/frontend/primitives/types/conversion.runa
Type Conversion Primitives

This module provides fundamental type conversion operations for all Runa primitive types.

Key features and capabilities:
- String conversion from all primitive types
- Numeric type conversions (integer, float, decimal)
- Boolean conversions and parsing
- Safe conversion with error handling
- Format-preserving conversions
- Locale-aware number formatting
- Performance-optimized for common conversions
- Zero-allocation conversions where possible
- Integration with compiler type system
- Error reporting for invalid conversions
- Memory-efficient string building
- Thread-safe conversion operations
:End Note

Note: Using only core primitives - no stdlib imports

Note: Integer to Integer Conversions

Process called "convert_i8_to_i16" that takes value as Integer8 returns Integer16:
    Let result be value
    Return result
End Process

Process called "convert_i8_to_i32" that takes value as Integer8 returns Integer32:
    Let result be value
    Return result
End Process

Process called "convert_i8_to_i64" that takes value as Integer8 returns Integer64:
    Let result be value
    Return result
End Process

Process called "convert_i16_to_i8" that takes value as Integer16 returns Integer8:
    Let result be value
    Return result
End Process

Process called "convert_i16_to_i32" that takes value as Integer16 returns Integer32:
    Let result be value
    Return result
End Process

Process called "convert_i16_to_i64" that takes value as Integer16 returns Integer64:
    Let result be value
    Return result
End Process

Process called "convert_i32_to_i8" that takes value as Integer32 returns Integer8:
    Let result be value
    Return result
End Process

Process called "convert_i32_to_i16" that takes value as Integer32 returns Integer16:
    Let result be value
    Return result
End Process

Process called "convert_i32_to_i64" that takes value as Integer32 returns Integer64:
    Let result be value
    Return result
End Process

Process called "convert_i64_to_i8" that takes value as Integer64 returns Integer8:
    Let result be value
    Return result
End Process

Process called "convert_i64_to_i16" that takes value as Integer64 returns Integer16:
    Let result be value
    Return result
End Process

Process called "convert_i64_to_i32" that takes value as Integer64 returns Integer32:
    Let result be value
    Return result
End Process

Note: Unsigned to Unsigned Conversions

Process called "convert_u8_to_u16" that takes value as Unsigned8 returns Unsigned16:
    Let result be value
    Return result
End Process

Process called "convert_u8_to_u32" that takes value as Unsigned8 returns Unsigned32:
    Let result be value
    Return result
End Process

Process called "convert_u8_to_u64" that takes value as Unsigned8 returns Unsigned64:
    Let result be value
    Return result
End Process

Process called "convert_u16_to_u8" that takes value as Unsigned16 returns Unsigned8:
    Let result be value
    Return result
End Process

Process called "convert_u16_to_u32" that takes value as Unsigned16 returns Unsigned32:
    Let result be value
    Return result
End Process

Process called "convert_u16_to_u64" that takes value as Unsigned16 returns Unsigned64:
    Let result be value
    Return result
End Process

Process called "convert_u32_to_u8" that takes value as Unsigned32 returns Unsigned8:
    Let result be value
    Return result
End Process

Process called "convert_u32_to_u16" that takes value as Unsigned32 returns Unsigned16:
    Let result be value
    Return result
End Process

Process called "convert_u32_to_u64" that takes value as Unsigned32 returns Unsigned64:
    Let result be value
    Return result
End Process

Process called "convert_u64_to_u8" that takes value as Unsigned64 returns Unsigned8:
    Let result be value
    Return result
End Process

Process called "convert_u64_to_u16" that takes value as Unsigned64 returns Unsigned16:
    Let result be value
    Return result
End Process

Process called "convert_u64_to_u32" that takes value as Unsigned64 returns Unsigned32:
    Let result be value
    Return result
End Process

Note: Signed to Unsigned Conversions

Process called "convert_i8_to_u8" that takes value as Integer8 returns Unsigned8:
    Let result be value
    Return result
End Process

Process called "convert_i16_to_u16" that takes value as Integer16 returns Unsigned16:
    Let result be value
    Return result
End Process

Process called "convert_i32_to_u32" that takes value as Integer32 returns Unsigned32:
    Let result be value
    Return result
End Process

Process called "convert_i64_to_u64" that takes value as Integer64 returns Unsigned64:
    Let result be value
    Return result
End Process

Note: Unsigned to Signed Conversions

Process called "convert_u8_to_i8" that takes value as Unsigned8 returns Integer8:
    Let result be value
    Return result
End Process

Process called "convert_u16_to_i16" that takes value as Unsigned16 returns Integer16:
    Let result be value
    Return result
End Process

Process called "convert_u32_to_i32" that takes value as Unsigned32 returns Integer32:
    Let result be value
    Return result
End Process

Process called "convert_u64_to_i64" that takes value as Unsigned64 returns Integer64:
    Let result be value
    Return result
End Process

Note: Integer to Float Conversions

Process called "convert_i8_to_f32" that takes value as Integer8 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_i8_to_f64" that takes value as Integer8 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_i16_to_f32" that takes value as Integer16 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_i16_to_f64" that takes value as Integer16 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_i32_to_f32" that takes value as Integer32 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_i32_to_f64" that takes value as Integer32 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_i64_to_f32" that takes value as Integer64 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_i64_to_f64" that takes value as Integer64 returns Float64:
    Let result be value
    Return result
End Process

Note: Unsigned to Float Conversions

Process called "convert_u8_to_f32" that takes value as Unsigned8 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_u8_to_f64" that takes value as Unsigned8 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_u16_to_f32" that takes value as Unsigned16 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_u16_to_f64" that takes value as Unsigned16 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_u32_to_f32" that takes value as Unsigned32 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_u32_to_f64" that takes value as Unsigned32 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_u64_to_f32" that takes value as Unsigned64 returns Float32:
    Let result be value
    Return result
End Process

Process called "convert_u64_to_f64" that takes value as Unsigned64 returns Float64:
    Let result be value
    Return result
End Process

Note: Float to Integer Conversions - truncating decimal part

Process called "convert_f32_to_i8" that takes value as Float32 returns Integer8:
    Let result be truncate_f32_to_i64(value)
    Return convert_i64_to_i8(result)
End Process

Process called "convert_f32_to_i16" that takes value as Float32 returns Integer16:
    Let result be truncate_f32_to_i64(value)
    Return convert_i64_to_i16(result)
End Process

Process called "convert_f32_to_i32" that takes value as Float32 returns Integer32:
    Let result be truncate_f32_to_i64(value)
    Return convert_i64_to_i32(result)
End Process

Process called "convert_f32_to_i64" that takes value as Float32 returns Integer64:
    Let result be truncate_f32_to_i64(value)
    Return result
End Process

Process called "convert_f64_to_i8" that takes value as Float64 returns Integer8:
    Let result be truncate_f64_to_i64(value)
    Return convert_i64_to_i8(result)
End Process

Process called "convert_f64_to_i16" that takes value as Float64 returns Integer16:
    Let result be truncate_f64_to_i64(value)
    Return convert_i64_to_i16(result)
End Process

Process called "convert_f64_to_i32" that takes value as Float64 returns Integer32:
    Let result be truncate_f64_to_i64(value)
    Return convert_i64_to_i32(result)
End Process

Process called "convert_f64_to_i64" that takes value as Float64 returns Integer64:
    Let result be truncate_f64_to_i64(value)
    Return result
End Process

Note: Float to Unsigned Conversions

Process called "convert_f32_to_u8" that takes value as Float32 returns Unsigned8:
    Let signed_result be convert_f32_to_i64(value)
    Return convert_i64_to_u8(signed_result)
End Process

Process called "convert_f32_to_u16" that takes value as Float32 returns Unsigned16:
    Let signed_result be convert_f32_to_i64(value)
    Return convert_i64_to_u16(signed_result)
End Process

Process called "convert_f32_to_u32" that takes value as Float32 returns Unsigned32:
    Let signed_result be convert_f32_to_i64(value)
    Return convert_i64_to_u32(signed_result)
End Process

Process called "convert_f32_to_u64" that takes value as Float32 returns Unsigned64:
    Let signed_result be convert_f32_to_i64(value)
    Return convert_i64_to_u64(signed_result)
End Process

Process called "convert_f64_to_u8" that takes value as Float64 returns Unsigned8:
    Let signed_result be convert_f64_to_i64(value)
    Return convert_i64_to_u8(signed_result)
End Process

Process called "convert_f64_to_u16" that takes value as Float64 returns Unsigned16:
    Let signed_result be convert_f64_to_i64(value)
    Return convert_i64_to_u16(signed_result)
End Process

Process called "convert_f64_to_u32" that takes value as Float64 returns Unsigned32:
    Let signed_result be convert_f64_to_i64(value)
    Return convert_i64_to_u32(signed_result)
End Process

Process called "convert_f64_to_u64" that takes value as Float64 returns Unsigned64:
    Let signed_result be convert_f64_to_i64(value)
    Return convert_i64_to_u64(signed_result)
End Process

Note: Float to Float Conversions

Process called "convert_f32_to_f64" that takes value as Float32 returns Float64:
    Let result be value
    Return result
End Process

Process called "convert_f64_to_f32" that takes value as Float64 returns Float32:
    Let result be value
    Return result
End Process

Note: Boolean Conversions

Process called "convert_bool_to_i8" that takes value as Boolean returns Integer8:
    If value:
        Return 1
    End If
    Return 0
End Process

Process called "convert_bool_to_i16" that takes value as Boolean returns Integer16:
    If value:
        Return 1
    End If
    Return 0
End Process

Process called "convert_bool_to_i32" that takes value as Boolean returns Integer32:
    If value:
        Return 1
    End If
    Return 0
End Process

Process called "convert_bool_to_i64" that takes value as Boolean returns Integer64:
    If value:
        Return 1
    End If
    Return 0
End Process

Process called "convert_i8_to_bool" that takes value as Integer8 returns Boolean:
    If value is 0:
        Return false
    End If
    Return true
End Process

Process called "convert_i16_to_bool" that takes value as Integer16 returns Boolean:
    If value is 0:
        Return false
    End If
    Return true
End Process

Process called "convert_i32_to_bool" that takes value as Integer32 returns Boolean:
    If value is 0:
        Return false
    End If
    Return true
End Process

Process called "convert_i64_to_bool" that takes value as Integer64 returns Boolean:
    If value is 0:
        Return false
    End If
    Return true
End Process

Note: Pointer Conversions

Process called "convert_pointer_to_u64" that takes ptr as Pointer returns Unsigned64:
    Let result be 0
    Inline Assembly:
        "mov %0, %1\n"              Note: Move pointer to integer register
        : "=r"(result)
        : "r"(ptr)
        :
    End Assembly
    Return result
End Process

Process called "convert_u64_to_pointer" that takes value as Unsigned64 returns Pointer:
    Let result be 0
    Inline Assembly:
        "mov %0, %1\n"              Note: Move integer to pointer register
        : "=r"(result)
        : "r"(value)
        :
    End Assembly
    Return result
End Process

Note: Low-level truncation helpers using Assembly for precise floating point truncation

Process called "truncate_f32_to_i64" that takes value as Float32 returns Integer64:
    Let result be 0
    Inline Assembly:
        "cvttss2si %0, %1\n"        Note: Convert float to integer with truncation
        : "=r"(result)
        : "x"(value)
        :
    End Assembly
    Return result
End Process

Process called "truncate_f64_to_i64" that takes value as Float64 returns Integer64:
    Let result be 0
    Inline Assembly:
        "cvttsd2si %0, %1\n"        Note: Convert double to integer with truncation
        : "=r"(result)
        : "x"(value)
        :
    End Assembly
    Return result
End Process
