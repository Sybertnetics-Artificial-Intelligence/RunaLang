Note:
control_flow/return.runa - Zero-Dependency Function Return Primitives

This module provides fundamental function return operations using direct CPU instructions.
These primitives have ZERO dependencies and compile to efficient return instructions.

@Reasoning:
- Provides low-level function return and stack cleanup for compiler code generation
- All operations use inline assembly for true self-hosting capabilities
- No external dependencies - we generate the machine code directly
- Essential for implementing function returns, stack cleanup, and calling convention compliance

@Implementation:
- Inline Assembly statements using return instructions and stack operations
- Direct stack pointer manipulation for cleanup
- Support for various calling conventions and return types
- Zero-cost abstraction through compile-time optimization

@Performance_Hints:
- Each return maps to optimized return instruction sequence
- Stack cleanup optimized for calling convention
- Return value handling follows ABI specifications
- Minimal overhead for function exit
:End Note

Note: =====================================================================
Note: BASIC FUNCTION RETURNS
Note: =====================================================================

Process called "return_void":
    Inline Assembly:
        "ret\n"                     Note: Return with no value
        :
        :
        :
    End Assembly
End Process

Process called "return_near":
    Inline Assembly:
        "ret\n"                     Note: Near return
        :
        :
        :
    End Assembly
End Process

Process called "return_far":
    Inline Assembly:
        "retf\n"                    Note: Far return
        :
        :
        :
    End Assembly
End Process

Process called "return_with_cleanup" that takes bytes_to_clean as Integer:
    Inline Assembly:
        "ret %0\n"                  Note: Return and clean stack
        :
        : "i"(bytes_to_clean)
        :
    End Assembly
End Process

Process called "return_far_with_cleanup" that takes bytes_to_clean as Integer:
    Inline Assembly:
        "retf %0\n"                 Note: Far return and clean stack
        :
        : "i"(bytes_to_clean)
        :
    End Assembly
End Process

Note: =====================================================================
Note: RETURN VALUE HANDLING
Note: =====================================================================

Process called "return_integer" that takes value as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_integer32" that takes value as Integer32:
    Inline Assembly:
        "mov eax, %0\n"             Note: Load 32-bit return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_integer16" that takes value as Integer16:
    Inline Assembly:
        "mov ax, %0\n"              Note: Load 16-bit return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_integer8" that takes value as Integer8:
    Inline Assembly:
        "mov al, %0\n"              Note: Load 8-bit return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_pointer" that takes ptr as Pointer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load pointer return value
        "ret\n"                     Note: Return
        :
        : "r"(ptr)
        :
    End Assembly
End Process

Process called "return_float" that takes value as Float:
    Inline Assembly:
        "movsd xmm0, %0\n"          Note: Load float return value
        "ret\n"                     Note: Return
        :
        : "x"(value)
        :
    End Assembly
End Process

Process called "return_float32" that takes value as Float32:
    Inline Assembly:
        "movss xmm0, %0\n"          Note: Load float32 return value
        "ret\n"                     Note: Return
        :
        : "x"(value)
        :
    End Assembly
End Process

Process called "return_boolean" that takes value as Boolean:
    Inline Assembly:
        "movzx rax, %0\n"           Note: Load boolean return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Note: =====================================================================
Note: CALLING CONVENTION RETURNS
Note: =====================================================================

Process called "return_cdecl" that takes value as Integer:
    Inline Assembly:
        "mov eax, %0\n"             Note: Load cdecl return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_stdcall" that takes value as Integer, stack_bytes as Integer:
    Inline Assembly:
        "mov eax, %0\n"             Note: Load stdcall return value
        "ret %1\n"                  Note: Return and clean stack
        :
        : "r"(value), "i"(stack_bytes)
        :
    End Assembly
End Process

Process called "return_fastcall" that takes value as Integer:
    Inline Assembly:
        "mov eax, %0\n"             Note: Load fastcall return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_system_v" that takes value as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load System V return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "return_microsoft_x64" that takes value as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load MS x64 return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        :
    End Assembly
End Process

Note: =====================================================================
Note: STACK CLEANUP RETURNS
Note: =====================================================================

Process called "return_with_stack_cleanup" that takes return_value as Integer, stack_bytes as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "add rsp, %1\n"             Note: Clean up stack
        "ret\n"                     Note: Return
        :
        : "r"(return_value), "r"(stack_bytes)
        : "rsp"
    End Assembly
End Process

Process called "return_with_frame_cleanup" that takes return_value as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "mov rsp, rbp\n"            Note: Restore stack pointer
        "pop rbp\n"                 Note: Restore base pointer
        "ret\n"                     Note: Return
        :
        : "r"(return_value)
        : "rsp", "rbp"
    End Assembly
End Process

Process called "return_restore_stack" that takes return_value as Integer, saved_sp as Pointer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "mov rsp, %1\n"             Note: Restore saved stack pointer
        "ret\n"                     Note: Return
        :
        : "r"(return_value), "r"(saved_sp)
        : "rsp"
    End Assembly
End Process

Process called "return_unwind_stack" that takes return_value as Integer, target_sp as Pointer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "mov rsp, %1\n"             Note: Unwind to target stack
        "ret\n"                     Note: Return
        :
        : "r"(return_value), "r"(target_sp)
        : "rsp"
    End Assembly
End Process

Note: =====================================================================
Note: EXCEPTION RETURNS
Note: =====================================================================

Process called "return_from_exception" that takes exception_code as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load exception code
        "iret\n"                    Note: Interrupt return
        :
        : "r"(exception_code)
        :
    End Assembly
End Process

Process called "return_from_interrupt":
    Inline Assembly:
        "iret\n"                    Note: Return from interrupt
        :
        :
        :
    End Assembly
End Process

Process called "return_from_syscall" that takes result as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load syscall result
        "sysret\n"                  Note: System return
        :
        : "r"(result)
        :
    End Assembly
End Process

Process called "return_with_exception" that takes exception_ptr as Pointer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load exception pointer
        "ret\n"                     Note: Return with exception
        :
        : "r"(exception_ptr)
        :
    End Assembly
End Process

Note: =====================================================================
Note: COROUTINE/GENERATOR RETURNS
Note: =====================================================================

Process called "yield_return" that takes value as Integer, continuation_ptr as Pointer:
    Inline Assembly:
        "mov [%1], rsp\n"           Note: Save stack pointer
        "mov rax, %0\n"             Note: Load yield value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(continuation_ptr)
        : "rax", "memory"
    End Assembly
End Process

Process called "generator_return" that takes value as Integer, state as Integer:
    Inline Assembly:
        "mov rdx, %1\n"             Note: Load generator state
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(state)
        :
    End Assembly
End Process

Process called "coroutine_yield" that takes value as Integer, context_ptr as Pointer:
    Inline Assembly:
        "mov [%1], rsp\n"           Note: Save stack pointer
        "mov [%1 + 8], rbp\n"       Note: Save base pointer
        "mov rax, %0\n"             Note: Load yield value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(context_ptr)
        : "rax", "memory"
    End Assembly
End Process

Process called "async_return" that takes future_ptr as Pointer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load future pointer
        "ret\n"                     Note: Return
        :
        : "r"(future_ptr)
        :
    End Assembly
End Process

Note: =====================================================================
Note: TAIL RETURN OPTIMIZATION
Note: =====================================================================

Process called "tail_return" that takes value as Integer:
    Note: Optimized return for tail call position
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Tail return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "sibling_return" that takes value as Integer:
    Note: Return from sibling call
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Sibling return
        :
        : "r"(value)
        :
    End Assembly
End Process

Process called "leaf_return" that takes value as Integer:
    Note: Return from leaf function (no calls)
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Leaf return
        :
        : "r"(value)
        :
    End Assembly
End Process

Note: =====================================================================
Note: MULTI-VALUE RETURNS
Note: =====================================================================

Process called "return_two_values" that takes value1 as Integer, value2 as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: First return value
        "mov rdx, %1\n"             Note: Second return value
        "ret\n"                     Note: Return
        :
        : "r"(value1), "r"(value2)
        :
    End Assembly
End Process

Process called "return_three_values" that takes value1 as Integer, value2 as Integer, value3 as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: First return value
        "mov rdx, %1\n"             Note: Second return value
        "mov rcx, %2\n"             Note: Third return value
        "ret\n"                     Note: Return
        :
        : "r"(value1), "r"(value2), "r"(value3)
        :
    End Assembly
End Process

Process called "return_struct_in_registers" that takes low_part as Integer, high_part as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Struct low part
        "mov rdx, %1\n"             Note: Struct high part
        "ret\n"                     Note: Return
        :
        : "r"(low_part), "r"(high_part)
        :
    End Assembly
End Process

Process called "return_large_struct" that takes struct_ptr as Pointer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Return struct pointer
        "ret\n"                     Note: Return
        :
        : "r"(struct_ptr)
        :
    End Assembly
End Process

Note: =====================================================================
Note: ERROR RETURNS
Note: =====================================================================

Process called "return_error" that takes error_code as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load error code
        "stc\n"                     Note: Set carry flag (error)
        "ret\n"                     Note: Return
        :
        : "r"(error_code)
        : "flags"
    End Assembly
End Process

Process called "return_success" that takes value as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load success value
        "clc\n"                     Note: Clear carry flag (success)
        "ret\n"                     Note: Return
        :
        : "r"(value)
        : "flags"
    End Assembly
End Process

Process called "return_null_on_error" that takes error_occurred as Boolean:
    Inline Assembly:
        "test %0, %0\n"             Note: Test error flag
        "jz 1f\n"                   Note: Jump if no error
        "xor rax, rax\n"            Note: Return null on error
        "ret\n"                     Note: Return
        "1:\n"                      Note: No error path
        "mov rax, 1\n"              Note: Return success value
        "ret\n"                     Note: Return
        :
        : "r"(error_occurred)
        : "rax", "flags"
    End Assembly
End Process

Process called "return_errno" that takes value as Integer, errno_value as Integer:
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "mov [errno], %1\n"         Note: Set errno
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(errno_value)
        : "memory"
    End Assembly
End Process

Note: =====================================================================
Note: DEBUGGING RETURNS
Note: =====================================================================

Process called "return_with_trace" that takes value as Integer, trace_ptr as Pointer:
    Inline Assembly:
        "push %0\n"                 Note: Save return value
        "call %1\n"                 Note: Call trace function
        "pop rax\n"                 Note: Restore return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(trace_ptr)
        : "rax", "rsp", "memory"
    End Assembly
End Process

Process called "return_with_profiling" that takes value as Integer, profile_exit as Pointer:
    Inline Assembly:
        "push %0\n"                 Note: Save return value
        "call %1\n"                 Note: Call profiler exit
        "pop rax\n"                 Note: Restore return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(profile_exit)
        : "rax", "rsp", "memory"
    End Assembly
End Process

Process called "return_with_debug_info" that takes value as Integer, debug_ptr as Pointer:
    Inline Assembly:
        "push %0\n"                 Note: Save return value
        "call %1\n"                 Note: Call debug function
        "pop rax\n"                 Note: Restore return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(debug_ptr)
        : "rax", "rsp", "memory"
    End Assembly
End Process

Note: =====================================================================
Note: SECURITY RETURNS
Note: =====================================================================

Process called "return_secure" that takes value as Integer:
    Note: Clear sensitive registers before return
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "xor rdx, rdx\n"            Note: Clear rdx
        "xor rcx, rcx\n"            Note: Clear rcx
        "xor r8, r8\n"              Note: Clear r8
        "xor r9, r9\n"              Note: Clear r9
        "ret\n"                     Note: Return
        :
        : "r"(value)
        : "rax", "rdx", "rcx", "r8", "r9"
    End Assembly
End Process

Process called "return_clear_stack" that takes value as Integer, stack_size as Integer:
    Note: Clear stack before return
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "mov rdi, rsp\n"            Note: Point to stack
        "mov rcx, %1\n"             Note: Stack size to clear
        "xor rbx, rbx\n"            Note: Zero for clearing
        "rep stosb\n"               Note: Clear stack bytes
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(stack_size)
        : "rax", "rdi", "rcx", "rbx", "memory", "flags"
    End Assembly
End Process

Process called "return_validate_stack" that takes value as Integer, expected_sp as Pointer:
    Inline Assembly:
        "cmp rsp, %1\n"             Note: Check stack pointer
        "jne stack_corruption\n"    Note: Jump if corrupted
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        "stack_corruption:\n"       Note: Corruption handler
        "int3\n"                    Note: Breakpoint trap
        :
        : "r"(value), "r"(expected_sp)
        : "rax", "flags"
    End Assembly
End Process

Note: =====================================================================
Note: OPTIMIZED RETURNS
Note: =====================================================================

Process called "return_hot_path" that takes value as Integer:
    Note: Return from frequently executed path
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        : "rax"
    End Assembly
End Process

Process called "return_cold_path" that takes value as Integer:
    Note: Return from infrequently executed path
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        : "rax"
    End Assembly
End Process

Process called "return_likely" that takes value as Integer:
    Note: Return that's likely to be taken
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        : "rax"
    End Assembly
End Process

Process called "return_unlikely" that takes value as Integer:
    Note: Return that's unlikely to be taken
    Inline Assembly:
        "mov rax, %0\n"             Note: Load return value
        "ret\n"                     Note: Return
        :
        : "r"(value)
        : "rax"
    End Assembly
End Process

Note: =====================================================================
Note: CLEANUP RETURNS
Note: =====================================================================

Process called "return_with_destructor" that takes value as Integer, destructor_ptr as Pointer, object_ptr as Pointer:
    Inline Assembly:
        "push %0\n"                 Note: Save return value
        "mov rdi, %2\n"             Note: Load object pointer
        "call %1\n"                 Note: Call destructor
        "pop rax\n"                 Note: Restore return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(destructor_ptr), "r"(object_ptr)
        : "rax", "rdi", "rsp", "memory"
    End Assembly
End Process

Process called "return_with_finally" that takes value as Integer, finally_ptr as Pointer:
    Inline Assembly:
        "push %0\n"                 Note: Save return value
        "call %1\n"                 Note: Call finally block
        "pop rax\n"                 Note: Restore return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(finally_ptr)
        : "rax", "rsp", "memory"
    End Assembly
End Process

Process called "return_with_resource_cleanup" that takes value as Integer, cleanup_ptr as Pointer:
    Inline Assembly:
        "push %0\n"                 Note: Save return value
        "call %1\n"                 Note: Call cleanup function
        "pop rax\n"                 Note: Restore return value
        "ret\n"                     Note: Return
        :
        : "r"(value), "r"(cleanup_ptr)
        : "rax", "rsp", "memory"
    End Assembly
End Process