{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Runa",
  "scopeName": "source.runa",
  "fileTypes": ["runa"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#mathematical-symbols" },
    { "include": "#runa-declarations" },
    { "include": "#built-in-types" },
    { "include": "#keywords" },
    { "include": "#natural-operators" },
    { "include": "#function-definitions" },
    { "include": "#variable-declarations" },
    { "include": "#type-annotations" },
    { "include": "#control-structures" },
    { "include": "#built-in-functions" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.note.single.runa",
          "match": "(?i)(^\\s*)(note:)\\s+(.+)$",
          "captures": {
            "1": { "name": "punctuation.whitespace.comment.leading.runa" },
            "2": { "name": "punctuation.definition.comment.runa" },
            "3": { "name": "comment.line.note.content.runa" }
          }
        },
        {
          "name": "comment.inline.note.single.runa",
          "match": "(?i)\\s+(note:)\\s+(.+)$",
          "captures": {
            "1": { "name": "punctuation.definition.comment.runa" },
            "2": { "name": "comment.inline.note.content.runa" }
          }
        },
        {
          "name": "comment.block.note.runa",
          "begin": "(?i)(^\\s*)(note:)\\s*$",
          "end": "(?i)(:end\\s+note)",
          "beginCaptures": {
            "1": { "name": "punctuation.whitespace.comment.leading.runa" },
            "2": { "name": "punctuation.definition.comment.begin.runa" }
          },
          "endCaptures": {
            "1": { "name": "punctuation.definition.comment.end.runa" }
          },
          "contentName": "comment.block.note.content.runa"
        }
      ]
    },
    "runa-declarations": {
      "patterns": [
        {
          "name": "meta.type.declaration.runa",
          "match": "(?i)\\b(Type)\\s+(called)\\s+(\"[^\"]+\")\\s*:",
          "captures": {
            "1": { "name": "keyword.declaration.type.runa" },
            "2": { "name": "keyword.declaration.called.runa" },
            "3": { "name": "entity.name.type.runa" }
          }
        },
        {
          "name": "meta.process.declaration.runa",
          "match": "(?i)\\b(Process)\\s+(called)\\s+(\"[^\"]+\")\\s+(that)\\s+(takes)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.process.runa" },
            "2": { "name": "keyword.declaration.called.runa" },
            "3": { "name": "entity.name.function.runa" },
            "4": { "name": "keyword.declaration.that.runa" },
            "5": { "name": "keyword.declaration.takes.runa" }
          }
        },
        {
          "name": "meta.enum.declaration.runa",
          "match": "(?i)\\b(Type)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s+(is)\\s*:",
          "captures": {
            "1": { "name": "keyword.declaration.type.runa" },
            "2": { "name": "entity.name.type.runa" },
            "3": { "name": "keyword.declaration.is.runa" }
          }
        },
        {
          "name": "meta.variable.declaration.runa",
          "match": "(?i)\\b(Let)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s+(be)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.let.runa" },
            "2": { "name": "variable.name.runa" },
            "3": { "name": "keyword.declaration.be.runa" }
          }
        },
        {
          "name": "keyword.declaration.runa",
          "match": "(?i)\\b(returns|that|takes|called|is|be|and|with|success|failure|as)\\b"
        }
      ]
    },
    "built-in-types": {
      "patterns": [
        {
          "name": "support.type.primitive.runa",
          "match": "(?i)\\b(String|Integer|Float|Boolean)\\b"
        },
        {
          "name": "support.type.collection.runa", 
          "match": "(?i)\\b(List|Dictionary|Set|Array)\\b"
        },
        {
          "name": "support.type.generic.runa",
          "match": "(?i)\\b(List|Dictionary|Set|Array)\\s*\\[([^\\]]+)\\]",
          "captures": {
            "1": { "name": "support.type.collection.runa" },
            "2": { "name": "support.type.generic.parameter.runa" }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.formatted.runa",
          "begin": "f\"",
          "end": "\"",
          "patterns": [
            { "include": "#string-escapes" },
            {
              "name": "meta.embedded.expression.runa",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                { "include": "$self" }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.formatted.runa",
          "begin": "f'",
          "end": "'",
          "patterns": [
            { "include": "#string-escapes" },
            {
              "name": "meta.embedded.expression.runa",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                { "include": "$self" }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.double.raw.runa",
          "begin": "r\"",
          "end": "\"",
          "patterns": []
        },
        {
          "name": "string.quoted.single.raw.runa",
          "begin": "r'",
          "end": "'",
          "patterns": []
        },
        {
          "name": "string.quoted.double.runa",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "include": "#string-escapes" }
          ]
        },
        {
          "name": "string.quoted.single.runa",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "include": "#string-escapes" }
          ]
        }
      ]
    },
    "string-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.runa",
          "match": "\\\\[ntrfv\"'\\\\]"
        },
        {
          "name": "constant.character.escape.unicode.runa",
          "match": "\\\\u\\{[0-9a-fA-F]+\\}"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.runa",
          "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*\\b"
        },
        {
          "name": "constant.numeric.hex.runa",
          "match": "\\b0x[0-9a-fA-F][0-9a-fA-F_]*\\b"
        },
        {
          "name": "constant.numeric.binary.runa",
          "match": "\\b0b[01][01_]*\\b"
        },
        {
          "name": "constant.numeric.octal.runa",
          "match": "\\b0o[0-7][0-7_]*\\b"
        },
        {
          "name": "constant.numeric.decimal.runa",
          "match": "\\b\\d[\\d_]*\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.runa",
          "match": "(?i)\\b(If|Otherwise|Unless|When|Match|For|While|Loop|Break|Continue|Return|Yield)\\b"
        },
        {
          "name": "keyword.declaration.runa",
          "match": "(?i)\\b(Let|Define|Set|Process|Type|Import|Export|From|As|To|By|In|Of|be|and|with|success|failure|called|that|takes|returns|is)\\b"
        },
        {
          "name": "keyword.control.exception.runa",
          "match": "(?i)\\b(Try|Catch|Finally|Throw|Assert)\\b"
        },
        {
          "name": "keyword.control.concurrency.runa",
          "match": "(?i)\\b(Async|Await|Send|Receive|Spawn)\\b"
        },
        {
          "name": "keyword.modifier.runa",
          "match": "(?i)\\b(Static|Public|Private|External|Protocol)\\b"
        },
        {
          "name": "keyword.other.runa",
          "match": "(?i)\\b(Display|Delete|New|With|And|Or|Not|Is|Be)\\b"
        },
        {
          "name": "constant.language.boolean.runa",
          "match": "(?i)\\b(true|false|True|False)\\b"
        },
        {
          "name": "constant.language.null.runa",
          "match": "(?i)\\b(null|none|nil|None|Null|Nil)\\b"
        }
      ]
    },
    "natural-operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.natural.runa",
          "match": "(?i)\\b(plus|minus|multiplied by|divided by|modulo|to the power of)\\b"
        },
        {
          "name": "keyword.operator.comparison.natural.runa",
          "match": "(?i)\\b(equals|is equal to|does not equal|is not equal to|is greater than|is less than|is greater than or equal to|is less than or equal to)\\b"
        },
        {
          "name": "keyword.operator.logical.natural.runa",
          "match": "(?i)\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.membership.natural.runa",
          "match": "(?i)\\b(contains|is in|is of type)\\b"
        },
        {
          "name": "keyword.operator.string.natural.runa",
          "match": "(?i)\\b(followed by|joined with)\\b"
        }
      ]
    },
    "mathematical-symbols": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.symbol.math.runa",
          "match": "[+\\-*/]"
        },
        {
          "name": "keyword.operator.comparison.symbol.math.runa", 
          "match": "[<>=!]+"
        },
        {
          "name": "keyword.operator.modulo.symbol.math.runa",
          "match": "%"
        }
      ]
    },
    "function-definitions": {
      "patterns": [
        {
          "name": "meta.function.definition.runa",
          "begin": "\\b(Async\\s+)?(Process)\\s+(called)\\s+",
          "end": ":",
          "beginCaptures": {
            "1": { "name": "keyword.control.concurrency.runa" },
            "2": { "name": "keyword.declaration.function.runa" },
            "3": { "name": "keyword.declaration.function.runa" }
          },
          "patterns": [
            {
              "name": "string.quoted.double.function-name.runa",
              "match": "\"[^\"]*\""
            },
            {
              "name": "string.quoted.single.function-name.runa", 
              "match": "'[^']*'"
            },
            {
              "name": "keyword.declaration.parameter.runa",
              "match": "(?i)\\b(that\\s+takes|returns)\\b"
            },
            {
              "name": "keyword.declaration.parameter.runa",
              "match": "(?i)\\b(as|and|defaults\\s+to)\\b"
            },
            { "include": "#type-annotations" },
            { "include": "#identifiers" }
          ]
        }
      ]
    },
    "variable-declarations": {
      "patterns": [
        {
          "name": "meta.variable.declaration.runa",
          "begin": "\\b(Let)\\s+",
          "end": "\\s+(be)\\s+",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.variable.runa" }
          },
          "endCaptures": {
            "1": { "name": "keyword.declaration.variable.runa" }
          },
          "patterns": [
            { "include": "#identifiers" },
            { "include": "#type-annotations" }
          ]
        },
        {
          "name": "meta.variable.definition.runa",
          "begin": "\\b(Define)\\s+",
          "end": "\\s+(as)\\s+",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.definition.runa" }
          },
          "endCaptures": {
            "1": { "name": "keyword.declaration.definition.runa" }
          },
          "patterns": [
            {
              "name": "keyword.modifier.constant.runa",
              "match": "\\bconstant\\b"
            },
            { "include": "#identifiers" },
            { "include": "#type-annotations" }
          ]
        },
        {
          "name": "meta.variable.assignment.runa",
          "begin": "\\b(Set)\\s+",
          "end": "\\s+(to)\\s+",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.assignment.runa" }
          },
          "endCaptures": {
            "1": { "name": "keyword.declaration.assignment.runa" }
          },
          "patterns": [
            { "include": "#identifiers" }
          ]
        }
      ]
    },
    "type-annotations": {
      "patterns": [
        {
          "name": "storage.type.primitive.runa",
          "match": "(?i)\\b(Integer|Float|String|Boolean|List|Dictionary|Function|Any|Void)\\b"
        },
        {
          "name": "storage.type.advanced.runa",
          "match": "(?i)\\b(Optional|Union|Intersection)\\b"
        },
        {
          "name": "storage.type.collection.runa",
          "match": "(?i)\\b(List\\[|Dictionary\\[)\\b"
        }
      ]
    },
    "control-structures": {
      "patterns": [
        {
          "name": "meta.control.if.runa",
          "match": "(?i)\\b(If)\\s+.*:",
          "captures": {
            "1": { "name": "keyword.control.if.runa" }
          }
        },
        {
          "name": "meta.control.for.runa",
          "begin": "\\b(For)\\s+(each)\\s+",
          "end": "\\s+(in)\\s+",
          "beginCaptures": {
            "1": { "name": "keyword.control.for.runa" },
            "2": { "name": "keyword.control.for.runa" }
          },
          "endCaptures": {
            "1": { "name": "keyword.control.for.runa" }
          },
          "patterns": [
            { "include": "#identifiers" }
          ]
        },
        {
          "name": "meta.control.while.runa",
          "match": "(?i)\\b(While)\\s+.*:",
          "captures": {
            "1": { "name": "keyword.control.while.runa" }
          }
        }
      ]
    },
    "built-in-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.runa",
          "match": "(?i)\\b(Display|Assert|Delete|Input|Print|Length|Type|Convert|Parse|Format|Range|Enumerate|Zip|Map|Filter|Reduce|Sort|Reverse|Split|Join|Replace|Contains|Starts_with|Ends_with|Uppercase|Lowercase|Trim)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.readwrite.runa",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.multiword.runa",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?:\\s+[a-zA-Z_][a-zA-Z0-9_]*)+\\b"
        }
      ]
    }
  }
}
