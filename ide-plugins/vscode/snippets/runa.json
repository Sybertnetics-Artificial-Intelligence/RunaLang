{
  "Note: Single-line comment": {
    "prefix": "note",
    "body": ["Note: ${1:Comment description}"],
    "description": "Add a single-line comment"
  },
  "Note: Block comment": {
    "prefix": "noteblock",
    "body": [
      "Note:",
      "${1:Comment block content}",
      ":End Note"
    ],
    "description": "Add a block comment"
  },
  "Let variable be": {
    "prefix": "let",
    "body": ["Let ${1:variable_name} be ${2:value}"],
    "description": "Declare a variable with Let...be"
  },
  "Define constant": {
    "prefix": "define",
    "body": ["Define ${1:constant_name} as ${2:value}"],
    "description": "Define a constant"
  },
  "Set variable to": {
    "prefix": "set",
    "body": ["Set ${1:variable_name} to ${2:new_value}"],
    "description": "Assign a new value to a variable"
  },
  "Process called": {
    "prefix": "process",
    "body": [
      "Process called \"${1:function_name}\"${2: that takes ${3:parameter} as ${4:Type}}${5: returns ${6:ReturnType}}:",
      "    ${7:Note: Function implementation}",
      "    Return ${8:result}"
    ],
    "description": "Define a process (function)"
  },
  "Async Process": {
    "prefix": "async",
    "body": [
      "Async Process called \"${1:function_name}\"${2: that takes ${3:parameter} as ${4:Type}}${5: returns ${6:ReturnType}}:",
      "    ${7:Note: Async function implementation}",
      "    Return ${8:result}"
    ],
    "description": "Define an async process"
  },
  "If statement": {
    "prefix": "if",
    "body": [
      "If ${1:condition}:",
      "    ${2:Note: Code block}"
    ],
    "description": "Create an if statement"
  },
  "If-Otherwise statement": {
    "prefix": "ifelse",
    "body": [
      "If ${1:condition}:",
      "    ${2:Note: If block}",
      "Otherwise:",
      "    ${3:Note: Otherwise block}"
    ],
    "description": "Create an if-otherwise statement"
  },
  "Unless statement": {
    "prefix": "unless",
    "body": [
      "Unless ${1:condition}:",
      "    ${2:Note: Code block}"
    ],
    "description": "Create an unless statement"
  },
  "For each loop": {
    "prefix": "for",
    "body": [
      "For each ${1:item} in ${2:collection}:",
      "    ${3:Note: Loop body}"
    ],
    "description": "Create a for each loop"
  },
  "For range loop": {
    "prefix": "forrange",
    "body": [
      "For ${1:i} from ${2:start} to ${3:end}:",
      "    ${4:Note: Loop body}"
    ],
    "description": "Create a for range loop"
  },
  "While loop": {
    "prefix": "while",
    "body": [
      "While ${1:condition}:",
      "    ${2:Note: Loop body}"
    ],
    "description": "Create a while loop"
  },
  "Match statement": {
    "prefix": "match",
    "body": [
      "Match ${1:expression}:",
      "    When ${2:pattern}:",
      "        ${3:Note: Case body}",
      "    When ${4:pattern}:",
      "        ${5:Note: Case body}",
      "    Otherwise:",
      "        ${6:Note: Default case}"
    ],
    "description": "Create a match statement"
  },
  "Try-Catch": {
    "prefix": "try",
    "body": [
      "Try:",
      "    ${1:Note: Try block}",
      "Catch ${2:exception}:",
      "    ${3:Note: Catch block}",
      "Finally:",
      "    ${4:Note: Finally block}"
    ],
    "description": "Create a try-catch-finally block"
  },
  "Display output": {
    "prefix": "display",
    "body": ["Display ${1:message}"],
    "description": "Display output to console"
  },
  "Import module": {
    "prefix": "import",
    "body": ["Import ${1:module_name}"],
    "description": "Import a module"
  },
  "Import from module": {
    "prefix": "from",
    "body": ["From ${1:module_name} Import ${2:items}"],
    "description": "Import specific items from a module"
  },
  "Export declaration": {
    "prefix": "export",
    "body": ["Export ${1:item}"],
    "description": "Export an item from current module"
  },
  "Type definition": {
    "prefix": "type",
    "body": [
      "Type ${1:TypeName} is Dictionary with:",
      "    ${2:field_name} as ${3:Type}",
      "    ${4:other_field} as ${5:Type}"
    ],
    "description": "Define a custom type"
  },
  "List containing": {
    "prefix": "list",
    "body": ["list containing ${1:item1}, ${2:item2}"],
    "description": "Create a list"
  },
  "Dictionary with": {
    "prefix": "dict",
    "body": [
      "dictionary with:",
      "    ${1:key1} as ${2:value1}",
      "    ${3:key2} as ${4:value2}"
    ],
    "description": "Create a dictionary"
  },
  "Function call with parameters": {
    "prefix": "call",
    "body": ["${1:Function_Name} with ${2:parameter} as ${3:value}"],
    "description": "Call a function with parameters"
  },
  "Assert statement": {
    "prefix": "assert",
    "body": ["Assert ${1:condition}"],
    "description": "Add an assertion"
  },
  "Return statement": {
    "prefix": "return",
    "body": ["Return ${1:value}"],
    "description": "Return a value from a function"
  },
  "Break statement": {
    "prefix": "break",
    "body": ["Break"],
    "description": "Break out of a loop"
  },
  "Continue statement": {
    "prefix": "continue",
    "body": ["Continue"],
    "description": "Continue to next iteration"
  },
  "Arithmetic operations": {
    "prefix": "math",
    "body": [
      "Let ${1:result} be ${2:a} ${3|plus,minus,multiplied by,divided by,modulo|} ${4:b}"
    ],
    "description": "Arithmetic operation using natural language"
  },
  "Comparison": {
    "prefix": "compare",
    "body": [
      "If ${1:a} ${2|equals,is greater than,is less than,is greater than or equal to,is less than or equal to,does not equal|} ${3:b}:"
    ],
    "description": "Comparison using natural language"
  },
  "String concatenation": {
    "prefix": "concat",
    "body": ["${1:string1} followed by ${2:string2}"],
    "description": "Concatenate strings"
  },
  "Optional type": {
    "prefix": "optional",
    "body": ["Optional[${1:Type}]"],
    "description": "Optional type annotation"
  },
  "List type": {
    "prefix": "listtype",
    "body": ["List[${1:Type}]"],
    "description": "List type annotation"
  },
  "Dictionary type": {
    "prefix": "dicttype",
    "body": ["Dictionary[${1:KeyType}, ${2:ValueType}]"],
    "description": "Dictionary type annotation"
  }
}
