Note:
tests/runatime/integration/system_interface/test_error_mapper.runa
Comprehensive Tests for Error Mapping System

This module validates the platform-specific error code mapping system,
ensuring correct translation between OS error codes, POSIX errno values,
Windows NTSTATUS/HRESULT codes, and Runa's unified error representation.

Key test areas:
- POSIX errno mapping
- Windows error code translation
- Platform-specific error handling
- Error message generation
- Error category classification
- Cross-platform consistency
- Error recovery suggestions
- Localization support
:End Note

Import "runatime/integration/system_interface/error_mapper" as ErrorMapper
Import "runatime/integration/system_interface/platform_detector" as PlatformDetector
Import "compiler/frontend/primitives/types/compiler_internals" as Internals
Import "compiler/frontend/primitives/core/string_primitive" as StringPrim
Import "testing/test_framework" as Test

@Reasoning
Error handling must be consistent across platforms while preserving platform-specific
details when needed. These tests ensure error codes are correctly mapped, messages
are informative, and error recovery is possible across all supported systems.
@End Reasoning

Note: =====================================================================
Note: POSIX ERROR MAPPING TESTS
Note: =====================================================================

Process called "test_posix_errno_mapping" returns Nothing:
    @TestCases
    - Test standard POSIX error codes
    - Verify errno to Runa mapping
    - Check error message generation
    - Validate error categories
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Test common POSIX errors
    Test.assert_equals(mapper.map_posix_errno(1), ErrorMapper.EPERM)
    Test.assert_equals(mapper.map_posix_errno(2), ErrorMapper.ENOENT)
    Test.assert_equals(mapper.map_posix_errno(3), ErrorMapper.ESRCH)
    Test.assert_equals(mapper.map_posix_errno(4), ErrorMapper.EINTR)
    Test.assert_equals(mapper.map_posix_errno(5), ErrorMapper.EIO)
    Test.assert_equals(mapper.map_posix_errno(9), ErrorMapper.EBADF)
    Test.assert_equals(mapper.map_posix_errno(11), ErrorMapper.EAGAIN)
    Test.assert_equals(mapper.map_posix_errno(12), ErrorMapper.ENOMEM)
    Test.assert_equals(mapper.map_posix_errno(13), ErrorMapper.EACCES)
    Test.assert_equals(mapper.map_posix_errno(14), ErrorMapper.EFAULT)
    Test.assert_equals(mapper.map_posix_errno(22), ErrorMapper.EINVAL)
    
    Note: Test error messages
    Let eperm_msg be mapper.get_error_message(ErrorMapper.EPERM)
    Test.assert_contains(eperm_msg, "Operation not permitted")
    
    Let enoent_msg be mapper.get_error_message(ErrorMapper.ENOENT)
    Test.assert_contains(enoent_msg, "No such file or directory")
    
    Let enomem_msg be mapper.get_error_message(ErrorMapper.ENOMEM)
    Test.assert_contains(enomem_msg, "Out of memory")
End Process

Process called "test_error_categories" returns Nothing:
    @TestCases
    - Test error category classification
    - Verify category-based handling
    - Check severity levels
    - Validate recovery strategies
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Test file system errors
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ENOENT), "filesystem")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.EACCES), "permission")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ENOSPC), "resource")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.EIO), "io")
    
    Note: Test network errors
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ECONNREFUSED), "network")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ETIMEDOUT), "network")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ENETUNREACH), "network")
    
    Note: Test process errors
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ESRCH), "process")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ECHILD), "process")
    
    Note: Test memory errors
    Test.assert_equals(mapper.get_error_category(ErrorMapper.ENOMEM), "memory")
    Test.assert_equals(mapper.get_error_category(ErrorMapper.EFAULT), "memory")
    
    Note: Test severity levels
    Test.assert_equals(mapper.get_error_severity(ErrorMapper.EINTR), "recoverable")
    Test.assert_equals(mapper.get_error_severity(ErrorMapper.EAGAIN), "recoverable")
    Test.assert_equals(mapper.get_error_severity(ErrorMapper.ENOMEM), "critical")
    Test.assert_equals(mapper.get_error_severity(ErrorMapper.EFAULT), "fatal")
End Process

Note: =====================================================================
Note: WINDOWS ERROR MAPPING TESTS
Note: =====================================================================

Process called "test_windows_error_mapping" returns Nothing:
    @TestCases
    - Test Windows error code mapping
    - Verify NTSTATUS translation
    - Check HRESULT conversion
    - Validate Win32 error codes
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    If PlatformDetector.detect_operating_system() equals "Windows":
        Note: Test Win32 error codes
        Test.assert_equals(
            mapper.map_win32_error(2),  Note: ERROR_FILE_NOT_FOUND
            ErrorMapper.ENOENT
        )
        
        Test.assert_equals(
            mapper.map_win32_error(5),  Note: ERROR_ACCESS_DENIED
            ErrorMapper.EACCES
        )
        
        Test.assert_equals(
            mapper.map_win32_error(8),  Note: ERROR_NOT_ENOUGH_MEMORY
            ErrorMapper.ENOMEM
        )
        
        Note: Test NTSTATUS codes
        Test.assert_equals(
            mapper.map_ntstatus(0xC0000005),  Note: STATUS_ACCESS_VIOLATION
            ErrorMapper.EFAULT
        )
        
        Test.assert_equals(
            mapper.map_ntstatus(0xC000000F),  Note: STATUS_NO_SUCH_FILE
            ErrorMapper.ENOENT
        )
        
        Test.assert_equals(
            mapper.map_ntstatus(0xC0000017),  Note: STATUS_NO_MEMORY
            ErrorMapper.ENOMEM
        )
        
        Note: Test HRESULT codes
        Test.assert_equals(
            mapper.map_hresult(0x80070002),  Note: E_FILE_NOT_FOUND
            ErrorMapper.ENOENT
        )
        
        Test.assert_equals(
            mapper.map_hresult(0x80070005),  Note: E_ACCESSDENIED
            ErrorMapper.EACCES
        )
        
        Test.assert_equals(
            mapper.map_hresult(0x8007000E),  Note: E_OUTOFMEMORY
            ErrorMapper.ENOMEM
        )
    End If
End Process

Process called "test_windows_to_posix_translation" returns Nothing:
    @TestCases
    - Test comprehensive Windows to POSIX mapping
    - Verify edge case handling
    - Check unmapped error defaults
    - Validate bidirectional mapping
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    If PlatformDetector.detect_operating_system() equals "Windows":
        Note: Test file operation errors
        Let file_errors be [
            2,   Note: ERROR_FILE_NOT_FOUND
            3,   Note: ERROR_PATH_NOT_FOUND
            5,   Note: ERROR_ACCESS_DENIED
            32,  Note: ERROR_SHARING_VIOLATION
            80,  Note: ERROR_FILE_EXISTS
            183  Note: ERROR_ALREADY_EXISTS
        ]
        
        For Each win_error in file_errors:
            Let posix_error be mapper.map_win32_error(win_error)
            Test.assert_not_equals(posix_error, ErrorMapper.UNKNOWN_ERROR)
            
            Note: Should map to appropriate POSIX equivalent
            If win_error equals 2 Or win_error equals 3:
                Test.assert_equals(posix_error, ErrorMapper.ENOENT)
            End If
            
            If win_error equals 5:
                Test.assert_equals(posix_error, ErrorMapper.EACCES)
            End If
            
            If win_error equals 80 Or win_error equals 183:
                Test.assert_equals(posix_error, ErrorMapper.EEXIST)
            End If
        End For
        
        Note: Test process errors
        Test.assert_equals(
            mapper.map_win32_error(87),  Note: ERROR_INVALID_PARAMETER
            ErrorMapper.EINVAL
        )
        
        Test.assert_equals(
            mapper.map_win32_error(6),  Note: ERROR_INVALID_HANDLE
            ErrorMapper.EBADF
        )
    End If
End Process

Note: =====================================================================
Note: CROSS-PLATFORM CONSISTENCY TESTS
Note: =====================================================================

Process called "test_cross_platform_consistency" returns Nothing:
    @TestCases
    - Test unified error representation
    - Verify consistent error messages
    - Check platform-agnostic handling
    - Validate error code stability
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Common errors should have consistent representation
    Let common_errors be [
        ErrorMapper.ENOENT,
        ErrorMapper.EACCES,
        ErrorMapper.ENOMEM,
        ErrorMapper.EINVAL,
        ErrorMapper.EIO,
        ErrorMapper.EBADF
    ]
    
    For Each error_code in common_errors:
        Note: Error should have non-empty message
        Let message be mapper.get_error_message(error_code)
        Test.assert_not_empty(message)
        
        Note: Error should have valid category
        Let category be mapper.get_error_category(error_code)
        Test.assert_not_empty(category)
        
        Note: Error should have severity level
        Let severity be mapper.get_error_severity(error_code)
        Test.assert_not_empty(severity)
        
        Note: Error should be reversible
        Let platform_specific be mapper.to_platform_error(error_code)
        Let back_to_runa be mapper.from_platform_error(platform_specific)
        Test.assert_equals(back_to_runa, error_code)
    End For
End Process

Process called "test_error_recovery_suggestions" returns Nothing:
    @TestCases
    - Test recovery suggestion generation
    - Verify actionable recommendations
    - Check context-aware suggestions
    - Validate suggestion relevance
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Test file not found recovery
    Let enoent_recovery be mapper.get_recovery_suggestions(ErrorMapper.ENOENT)
    Test.assert_contains_any(enoent_recovery, [
        "Check if the file exists",
        "Verify the path is correct",
        "Create the file if needed"
    ])
    
    Note: Test permission denied recovery
    Let eacces_recovery be mapper.get_recovery_suggestions(ErrorMapper.EACCES)
    Test.assert_contains_any(eacces_recovery, [
        "Check file permissions",
        "Run with appropriate privileges",
        "Verify ownership"
    ])
    
    Note: Test out of memory recovery
    Let enomem_recovery be mapper.get_recovery_suggestions(ErrorMapper.ENOMEM)
    Test.assert_contains_any(enomem_recovery, [
        "Free up memory",
        "Increase system limits",
        "Use smaller buffers"
    ])
    
    Note: Test network errors
    Let econnrefused_recovery be mapper.get_recovery_suggestions(ErrorMapper.ECONNREFUSED)
    Test.assert_contains_any(econnrefused_recovery, [
        "Check if service is running",
        "Verify network connectivity",
        "Check firewall settings"
    ])
End Process

Note: =====================================================================
Note: ERROR MESSAGE LOCALIZATION TESTS
Note: =====================================================================

Process called "test_error_localization" returns Nothing:
    @TestCases
    - Test localized error messages
    - Verify language detection
    - Check fallback to English
    - Validate message formatting
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Test default (English) messages
    mapper.set_locale("en_US")
    Let en_msg be mapper.get_error_message(ErrorMapper.ENOENT)
    Test.assert_contains(en_msg, "No such file or directory")
    
    Note: Test localized messages if available
    If mapper.is_locale_supported("es_ES"):
        mapper.set_locale("es_ES")
        Let es_msg be mapper.get_error_message(ErrorMapper.ENOENT)
        Test.assert_not_equals(es_msg, en_msg)
        Test.assert_not_empty(es_msg)
    End If
    
    If mapper.is_locale_supported("fr_FR"):
        mapper.set_locale("fr_FR")
        Let fr_msg be mapper.get_error_message(ErrorMapper.ENOENT)
        Test.assert_not_equals(fr_msg, en_msg)
        Test.assert_not_empty(fr_msg)
    End If
    
    Note: Test fallback for unsupported locale
    mapper.set_locale("xx_XX")  Note: Invalid locale
    Let fallback_msg be mapper.get_error_message(ErrorMapper.ENOENT)
    Test.assert_equals(fallback_msg, en_msg)  Note: Should fallback to English
End Process

Note: =====================================================================
Note: ERROR CONTEXT TESTS
Note: =====================================================================

Process called "test_error_context_enrichment" returns Nothing:
    @TestCases
    - Test error context addition
    - Verify stack trace inclusion
    - Check system state capture
    - Validate debugging information
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Create error with context
    Let error be mapper.create_error_with_context(
        ErrorMapper.ENOENT,
        "/path/to/missing/file",
        "open",
        123  Note: Line number
    )
    
    Test.assert_equals(error.code, ErrorMapper.ENOENT)
    Test.assert_equals(error.context.path, "/path/to/missing/file")
    Test.assert_equals(error.context.operation, "open")
    Test.assert_equals(error.context.line, 123)
    
    Note: Test error formatting with context
    Let formatted be mapper.format_error_with_context(error)
    Test.assert_contains(formatted, "No such file or directory")
    Test.assert_contains(formatted, "/path/to/missing/file")
    Test.assert_contains(formatted, "open")
    Test.assert_contains(formatted, "line 123")
    
    Note: Test stack trace capture
    Let error_with_stack be mapper.create_error_with_stack(ErrorMapper.EFAULT)
    Test.assert_not_empty(error_with_stack.stack_trace)
    Test.assert_greater_than(
        Internals.internal_array_length(error_with_stack.stack_frames),
        0
    )
End Process

Note: =====================================================================
Note: ERROR CHAINING TESTS
Note: =====================================================================

Process called "test_error_chaining" returns Nothing:
    @TestCases
    - Test error cause chaining
    - Verify nested error handling
    - Check error unwrapping
    - Validate chain traversal
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Create chain of errors
    Let root_error be mapper.create_error(ErrorMapper.EIO)
    Let mid_error be mapper.create_error_with_cause(
        ErrorMapper.ENOENT,
        root_error
    )
    Let top_error be mapper.create_error_with_cause(
        ErrorMapper.EACCES,
        mid_error
    )
    
    Note: Verify chain structure
    Test.assert_equals(top_error.code, ErrorMapper.EACCES)
    Test.assert_not_null(top_error.cause)
    Test.assert_equals(top_error.cause.code, ErrorMapper.ENOENT)
    Test.assert_not_null(top_error.cause.cause)
    Test.assert_equals(top_error.cause.cause.code, ErrorMapper.EIO)
    
    Note: Test root cause extraction
    Let root_cause be mapper.get_root_cause(top_error)
    Test.assert_equals(root_cause.code, ErrorMapper.EIO)
    
    Note: Test chain traversal
    Let chain be mapper.get_error_chain(top_error)
    Test.assert_equals(Internals.internal_array_length(chain), 3)
    
    Note: Test formatted chain
    Let chain_msg be mapper.format_error_chain(top_error)
    Test.assert_contains(chain_msg, "Permission denied")
    Test.assert_contains(chain_msg, "No such file")
    Test.assert_contains(chain_msg, "I/O error")
End Process

Note: =====================================================================
Note: PERFORMANCE TESTS
Note: =====================================================================

Process called "test_error_mapping_performance" returns Nothing:
    @TestCases
    - Measure mapping speed
    - Verify lookup efficiency
    - Check cache effectiveness
    - Validate memory usage
    @End TestCases
    
    Let mapper be ErrorMapper.create_error_mapper()
    
    Note: Measure error mapping performance
    Let start_time be get_time_ns()
    
    For i from 0 to 9999:
        Let errno be (i mod 134) + 1  Note: Cycle through errno values
        Let runa_error be mapper.map_posix_errno(errno)
        Let message be mapper.get_error_message(runa_error)
        Let category be mapper.get_error_category(runa_error)
    End For
    
    Let elapsed be get_time_ns() - start_time
    Let per_operation be elapsed / 10000
    
    Note: Should be very fast (< 1 microsecond per operation)
    Test.assert_less_than(per_operation, 1000)  Note: < 1000ns
    
    Note: Test cache hit rate
    Let cache_stats be mapper.get_cache_statistics()
    Test.assert_greater_than(cache_stats.hit_rate, 0.9)  Note: > 90% hit rate
End Process

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "get_time_ns" returns Integer:
    Return Internals.get_system_time_nanoseconds()
End Process

Note: =====================================================================
Note: TEST RUNNER
Note: =====================================================================

Process called "run_all_error_mapper_tests" returns Nothing:
    @TestCases
    Complete test coverage for error mapping:
    - POSIX errno mapping
    - Error categorization
    - Windows error translation
    - Cross-platform consistency
    - Recovery suggestions
    - Error localization
    - Context enrichment
    - Error chaining
    - Performance benchmarks
    @End TestCases
    
    Print("Testing Error Mapper...")
    Print("=======================")
    
    Print("Testing POSIX error mapping...")
    test_posix_errno_mapping()
    test_error_categories()
    
    Print("Testing Windows error mapping...")
    test_windows_error_mapping()
    test_windows_to_posix_translation()
    
    Print("Testing cross-platform consistency...")
    test_cross_platform_consistency()
    test_error_recovery_suggestions()
    
    Print("Testing error localization...")
    test_error_localization()
    
    Print("Testing error context...")
    test_error_context_enrichment()
    test_error_chaining()
    
    Print("Testing performance...")
    test_error_mapping_performance()
    
    Print("All error mapper tests passed!")
End Process

@Performance_Hints
These tests should be optimized for:
- Fast error code lookups
- Efficient message generation
- Minimal memory allocation
- Cache-friendly data structures
@End Performance_Hints

@Security_Scope
The error mapper tests operate with:
- Read-only error code tables
- No actual error generation
- Safe string handling
- No privileged operations
@End Security_Scope