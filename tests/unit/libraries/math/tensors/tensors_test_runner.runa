Note: Test runner for the math library tensors module
Note: 
Note: This module coordinates and executes all tests for tensor mathematics operations
Note: including tensor algebra, calculus, and geometry applications.
Note: 
Note: It provides a unified interface to run all tensor tests and generates
Note: comprehensive reports with detailed statistics and performance metrics.
Note:
Note: Usage:
Note:   runa tensors_test_runner.runa           # Run all tests
Note:   runa tensors_test_runner.runa algebra   # Run specific module tests
Note:
Note: Author: Generated comprehensive test runner
Note: Version: 1.0.0

Use from "algebra_test" take run_algebra_tests
Use from "calculus_test" take run_calculus_tests
Use from "geometry_test" take run_geometry_tests
Use from "stdlib.system.time" take current_time_microseconds
Use from "stdlib.system.args" take get_args

Note: Test module configuration
Type called "TestModuleInfo":
    name as String
    runner as Process that returns [Integer, Integer]
    description as String

Type called "TestResults":
    module_name as String
    passed as Integer
    total as Integer
    duration_microseconds as Integer
    success_rate as Real

Note: Available test modules
Process called "get_test_modules" that returns [TestModuleInfo]:
    Return [
        TestModuleInfo{
            name: "algebra",
            runner: run_algebra_tests,
            description: "Tensor algebra operations (addition, products, contractions, symmetry)"
        },
        TestModuleInfo{
            name: "calculus",
            runner: run_calculus_tests,
            description: "Tensor calculus (Einstein notation, covariant derivatives, curvature)"
        },
        TestModuleInfo{
            name: "geometry",
            runner: run_geometry_tests,
            description: "Tensor geometry (spacetime, relativity, black holes, cosmology)"
        }
    ]

Note: Test execution and reporting functions

Process called "run_single_module" that takes module_info as TestModuleInfo returns TestResults:
    Print("Running " + module_info.name + " tests...")
    Print("Description: " + module_info.description)
    Print("-" * 80)
    
    Let start_time be current_time_microseconds()
    Let [passed, total] be module_info.runner()
    Let end_time be current_time_microseconds()
    Let duration be end_time - start_time
    
    Let success_rate be if total > 0 then (Real(passed) / Real(total)) * 100.0 otherwise 0.0
    
    Print("")
    Print("Module Results:")
    Print("  Tests passed: " + String(passed) + "/" + String(total))
    Print("  Success rate: " + String(success_rate) + "%")
    Print("  Duration: " + String(Real(duration) / 1000.0) + " ms")
    Print("")
    
    Return TestResults{
        module_name: module_info.name,
        passed: passed,
        total: total, 
        duration_microseconds: duration,
        success_rate: success_rate
    }

Process called "print_summary_report" that takes results as [TestResults] returns Nothing:
    Print("=" * 80)
    Print("TENSOR MATHEMATICS TEST SUITE - COMPREHENSIVE SUMMARY")
    Print("=" * 80)
    
    Let total_passed be 0
    Let total_tests be 0
    Let total_duration be 0
    
    Note: Calculate totals
    For each result in results:
        total_passed = total_passed + result.passed
        total_tests = total_tests + result.total
        total_duration = total_duration + result.duration_microseconds
    
    Let overall_success_rate be if total_tests > 0 then (Real(total_passed) / Real(total_tests)) * 100.0 otherwise 0.0
    
    Print("\nOVERALL STATISTICS:")
    Print("  Total test modules: " + String(Length(results)))
    Print("  Total tests executed: " + String(total_tests))
    Print("  Total tests passed: " + String(total_passed))
    Print("  Total tests failed: " + String(total_tests - total_passed))
    Print("  Overall success rate: " + String(overall_success_rate) + "%")
    Print("  Total execution time: " + String(Real(total_duration) / 1000000.0) + " seconds")
    Print("  Average time per test: " + String(Real(total_duration) / Real(total_tests) / 1000.0) + " ms")
    
    Print("\nMODULE BREAKDOWN:")
    Print("  Module           Tests    Passed   Failed   Rate     Time(ms)")
    Print("  " + "-" * 70)
    
    For each result in results:
        Let failed be result.total - result.passed
        Let time_ms be Real(result.duration_microseconds) / 1000.0
        Let padded_name be result.module_name + (" " * (15 - Length(result.module_name)))
        Let tests_str be String(result.total) + (" " * (8 - Length(String(result.total))))
        Let passed_str be String(result.passed) + (" " * (8 - Length(String(result.passed))))
        Let failed_str be String(failed) + (" " * (8 - Length(String(failed))))
        Let rate_str be String(result.success_rate)[0:5] + "%" + (" " * (8 - Length(String(result.success_rate)[0:5] + "%")))
        Let time_str be String(time_ms)[0:8]
        
        Print("  " + padded_name + tests_str + passed_str + failed_str + rate_str + time_str)
    
    Print("\nPERFORMANCE ANALYSIS:")
    Let fastest_module be ""
    Let slowest_module be ""
    Let min_time be Real(total_duration)
    Let max_time be 0.0
    
    For each result in results:
        Let avg_time_per_test be Real(result.duration_microseconds) / Real(result.total)
        If avg_time_per_test < min_time:
            min_time = avg_time_per_test
            fastest_module = result.module_name
        If avg_time_per_test > max_time:
            max_time = avg_time_per_test
            slowest_module = result.module_name
    
    Print("  Fastest module (avg per test): " + fastest_module + " (" + String(min_time / 1000.0) + " ms)")
    Print("  Slowest module (avg per test): " + slowest_module + " (" + String(max_time / 1000.0) + " ms)")
    
    Print("\nTEST COVERAGE ASSESSMENT:")
    Print("  Tensor Algebra: Comprehensive coverage of multilinear algebra operations")
    Print("    ‚Ä¢ Basic operations: addition, scalar multiplication, tensor products")
    Print("    ‚Ä¢ Advanced operations: contractions, symmetrization, wedge products")
    Print("    ‚Ä¢ Index manipulations: raising/lowering, permutations, Einstein notation")
    Print("    ‚Ä¢ Multilinear maps: universal properties and categorical structures")
    Print("")
    Print("  Tensor Calculus: Complete differential geometric tensor operations")
    Print("    ‚Ä¢ Einstein summation: automatic index contraction and notation")
    Print("    ‚Ä¢ Tensor transformations: covariant/contravariant behavior")
    Print("    ‚Ä¢ Metric tensors: Riemannian and pseudo-Riemannian geometries")
    Print("    ‚Ä¢ Covariant derivatives: parallel transport and connection theory")
    Print("    ‚Ä¢ Curvature tensors: Riemann, Ricci, and geometric invariants")
    Print("")
    Print("  Tensor Geometry: Advanced spacetime and gravitational physics")
    Print("    ‚Ä¢ Spacetime manifolds: Minkowski, Schwarzschild, FLRW models")
    Print("    ‚Ä¢ Einstein equations: field equations and stress-energy relations")
    Print("    ‚Ä¢ Black hole physics: horizons, thermodynamics, causal structure")
    Print("    ‚Ä¢ Cosmological models: Friedmann equations and universe evolution")
    Print("    ‚Ä¢ Geodesics and worldlines: particle trajectories and light propagation")
    
    Print("\nMATHEMATICAL SIGNIFICANCE:")
    Print("  ‚Ä¢ Multilinear Algebra: Foundation for advanced mathematical physics")
    Print("  ‚Ä¢ Differential Geometry: Geometric analysis on curved manifolds") 
    Print("  ‚Ä¢ General Relativity: Einstein's theory of gravitation and spacetime")
    Print("  ‚Ä¢ Quantum Field Theory: Tensor structures in field equations")
    Print("  ‚Ä¢ Continuum Mechanics: Stress and strain tensor analysis")
    Print("  ‚Ä¢ Computer Graphics: Geometric transformations and rendering")
    
    If overall_success_rate >= 100.0:
        Print("\nüéâ PERFECT SCORE! All tensor mathematics tests PASSED!")
        Print("   The tensor mathematics library is fully validated.")
        Print("   ‚úì Multilinear algebra operations verified")
        Print("   ‚úì Differential geometric structures confirmed")
        Print("   ‚úì General relativity calculations validated")
        Print("   ‚úì Performance optimizations benchmarked")
    Otherwise if overall_success_rate >= 95.0:
        Print("\n‚úÖ EXCELLENT! Nearly all tests passed (" + String(overall_success_rate) + "%)")
        Print("   The tensor mathematics library is in excellent condition.")
        Print("   Minor issues may need attention in specific edge cases.")
    Otherwise if overall_success_rate >= 90.0:
        Print("\n‚ö†Ô∏è  GOOD: Most tests passed (" + String(overall_success_rate) + "%)")
        Print("   Some issues may need attention in:")
        For each result in results:
            If result.success_rate < 95.0:
                Print("   - " + result.module_name + " module (" + String(result.success_rate) + "%)")
    Otherwise:
        Print("\n‚ùå ATTENTION NEEDED: Success rate is " + String(overall_success_rate) + "%")
        Print("   Significant issues found that require investigation:")
        For each result in results:
            If result.success_rate < 90.0:
                Print("   - " + result.module_name + " module has " + String(result.total - result.passed) + " failing tests")
    
    Print("\n" + "=" * 80)

Process called "print_usage" that returns Nothing:
    Print("Tensor Mathematics Test Runner")
    Print("Usage:")
    Print("  runa tensors_test_runner.runa              # Run all test modules")
    Print("  runa tensors_test_runner.runa <module>     # Run specific module")
    Print("")
    Print("Available modules:")
    Let modules be get_test_modules()
    For each module in modules:
        Print("  " + module.name + " - " + module.description)
    Print("")
    Print("Mathematical Coverage:")
    Print("  ‚Ä¢ algebra   - Multilinear algebra and tensor operations")
    Print("  ‚Ä¢ calculus  - Differential geometry and tensor calculus")  
    Print("  ‚Ä¢ geometry  - Spacetime geometry and general relativity")
    Print("")

Process called "find_module_by_name" that takes name as String returns TestModuleInfo:
    Let modules be get_test_modules()
    For each module in modules:
        If module.name == name:
            Return module
    
    Note: Return empty module if not found
    Return TestModuleInfo{
        name: "",
        runner: run_algebra_tests,  Note: Placeholder, won't be used
        description: ""
    }

Process called "run_all_tests" that returns Nothing:
    Print("üßÆ RUNA TENSOR MATHEMATICS - COMPREHENSIVE TEST SUITE")
    Print("=" * 80)
    Print("Testing tensor algebra, calculus, and geometry operations")
    Print("Modules: algebra, calculus, geometry")
    Print("Coverage: Multilinear algebra, differential geometry, general relativity")
    Print("=" * 80)
    Print("")
    
    Let modules be get_test_modules()
    Let results be []TestResults
    
    Let overall_start_time be current_time_microseconds()
    
    For each module in modules:
        Let result be run_single_module(module)
        results = results + [result]
        Print("‚úì Completed " + module.name + " tests")
        Print("")
    
    Let overall_end_time be current_time_microseconds()
    Let total_suite_time be overall_end_time - overall_start_time
    
    print_summary_report(results)
    
    Print("\nSUITE EXECUTION COMPLETED")
    Print("Total suite execution time: " + String(Real(total_suite_time) / 1000000.0) + " seconds")
    Print("Test suite finished at: " + String(overall_end_time))
    Print("")
    Print("TENSOR MATHEMATICS VALIDATION COMPLETE")
    Print("The Runa tensor mathematics library has been comprehensively tested")
    Print("across all major areas of multilinear algebra and differential geometry.")

Process called "run_specific_module" that takes module_name as String returns Nothing:
    Let module be find_module_by_name(module_name)
    
    If module.name == "":
        Print("‚ùå Error: Module '" + module_name + "' not found.")
        Print("")
        print_usage()
        Return
    
    Print("üßÆ RUNA TENSOR MATHEMATICS - SINGLE MODULE TEST")
    Print("=" * 60)
    Print("Module: " + module.name)
    Print("Focus: " + module.description)
    Print("=" * 60)
    Print("")
    
    Let start_time be current_time_microseconds()
    Let result be run_single_module(module)
    Let end_time be current_time_microseconds()
    
    Print("=" * 60)
    Print("SINGLE MODULE TEST COMPLETED")
    Print("=" * 60)
    Print("Module: " + result.module_name)
    Print("Tests passed: " + String(result.passed) + "/" + String(result.total))
    Print("Success rate: " + String(result.success_rate) + "%")
    Print("Execution time: " + String(Real(result.duration_microseconds) / 1000000.0) + " seconds")
    
    Print("\nModule-Specific Analysis:")
    If result.module_name == "algebra":
        Print("  Tensor algebra operations validated:")
        Print("  ‚Ä¢ Basic operations (addition, scalar multiplication)")
        Print("  ‚Ä¢ Tensor products and contractions")
        Print("  ‚Ä¢ Symmetry operations and wedge products")
        Print("  ‚Ä¢ Index manipulations and multilinear maps")
    Otherwise if result.module_name == "calculus":
        Print("  Tensor calculus operations validated:")
        Print("  ‚Ä¢ Einstein summation convention")
        Print("  ‚Ä¢ Tensor transformations and metrics")
        Print("  ‚Ä¢ Christoffel symbols and covariant derivatives")
        Print("  ‚Ä¢ Riemann curvature and differential geometry")
    Otherwise if result.module_name == "geometry":
        Print("  Tensor geometry operations validated:")
        Print("  ‚Ä¢ Spacetime construction and Einstein equations")
        Print("  ‚Ä¢ Black hole solutions and cosmological models")
        Print("  ‚Ä¢ Geodesics and causal structure")
        Print("  ‚Ä¢ General relativity applications")
    
    If result.success_rate >= 100.0:
        Print("\nüéâ All tests PASSED! Module is fully validated.")
    Otherwise if result.success_rate >= 95.0:
        Print("\n‚úÖ Nearly all tests passed! Module is in excellent condition.")
    Otherwise if result.success_rate >= 90.0:
        Print("\n‚ö†Ô∏è  Most tests passed. Some edge cases may need attention.")
    Otherwise:
        Print("\n‚ùå Multiple test failures detected. Investigation recommended.")
        Print("    Review test output above for specific failure details.")
    
    Print("=" * 60)

Process called "main" that returns Nothing:
    Let args be get_args()
    
    If Length(args) == 0:
        Note: No arguments - run all tests
        run_all_tests()
    Otherwise if Length(args) == 1:
        Let module_name be args[0]
        If module_name == "help" or module_name == "--help" or module_name == "-h":
            print_usage()
        Otherwise:
            run_specific_module(module_name)
    Otherwise:
        Print("‚ùå Error: Too many arguments.")
        Print("")
        print_usage()

Note: Entry point
main()