Note: Test runner for the math library special functions module
Note: 
Note: This module coordinates and executes all tests for special mathematical functions
Note: including gamma, Bessel, elliptic, hypergeometric, orthogonal polynomials, and zeta functions.
Note: 
Note: It provides a unified interface to run all special function tests and generates
Note: comprehensive reports with detailed statistics and performance metrics.
Note:
Note: Usage:
Note:   runa special_test_runner.runa        # Run all tests
Note:   runa special_test_runner.runa gamma  # Run specific module tests
Note:
Note: Author: Generated comprehensive test runner
Note: Version: 1.0.0

Use from "gamma_test" take run_gamma_tests
Use from "bessel_test" take run_bessel_tests
Use from "elliptic_test" take run_elliptic_tests
Use from "hypergeometric_test" take run_hypergeometric_tests
Use from "orthogonal_test" take run_orthogonal_tests
Use from "zeta_test" take run_zeta_tests
Use from "stdlib.system.time" take current_time_microseconds
Use from "stdlib.system.args" take get_args

Note: Test module configuration
Type called "TestModuleInfo":
    name as String
    runner as Process that returns [Integer, Integer]
    description as String

Type called "TestResults":
    module_name as String
    passed as Integer
    total as Integer
    duration_microseconds as Integer
    success_rate as Real

Note: Available test modules
Process called "get_test_modules" that returns [TestModuleInfo]:
    Return [
        TestModuleInfo{
            name: "gamma",
            runner: run_gamma_tests,
            description: "Gamma and related functions (Œì, log Œì, Œ≤, digamma, polygamma, incomplete Œ≥)"
        },
        TestModuleInfo{
            name: "bessel", 
            runner: run_bessel_tests,
            description: "Bessel functions (J, Y, I, K, spherical, Airy, Hankel)"
        },
        TestModuleInfo{
            name: "elliptic",
            runner: run_elliptic_tests, 
            description: "Elliptic integrals and functions (K, E, Œ†, Jacobi, theta, Weierstrass)"
        },
        TestModuleInfo{
            name: "hypergeometric",
            runner: run_hypergeometric_tests,
            description: "Hypergeometric functions (‚ÇÇF‚ÇÅ, ‚ÇÅF‚ÇÅ, U, Kummer, Whittaker, Appell)"
        },
        TestModuleInfo{
            name: "orthogonal", 
            runner: run_orthogonal_tests,
            description: "Orthogonal polynomials (Legendre, Chebyshev, Hermite, Laguerre, Jacobi)"
        },
        TestModuleInfo{
            name: "zeta",
            runner: run_zeta_tests,
            description: "Zeta and L-functions (Œ∂, L, Hurwitz Œ∂, polylogarithm, Lerch Œ¶)"
        }
    ]

Note: Test execution and reporting functions

Process called "run_single_module" that takes module_info as TestModuleInfo returns TestResults:
    Print("Running " + module_info.name + " tests...")
    Print("Description: " + module_info.description)
    Print("-" * 60)
    
    Let start_time be current_time_microseconds()
    Let [passed, total] be module_info.runner()
    Let end_time be current_time_microseconds()
    Let duration be end_time - start_time
    
    Let success_rate be if total > 0 then (Real(passed) / Real(total)) * 100.0 otherwise 0.0
    
    Print("")
    Print("Module Results:")
    Print("  Tests passed: " + String(passed) + "/" + String(total))
    Print("  Success rate: " + String(success_rate) + "%")
    Print("  Duration: " + String(Real(duration) / 1000.0) + " ms")
    Print("")
    
    Return TestResults{
        module_name: module_info.name,
        passed: passed,
        total: total, 
        duration_microseconds: duration,
        success_rate: success_rate
    }

Process called "print_summary_report" that takes results as [TestResults] returns Nothing:
    Print("=" * 80)
    Print("SPECIAL FUNCTIONS TEST SUITE - COMPREHENSIVE SUMMARY")
    Print("=" * 80)
    
    Let total_passed be 0
    Let total_tests be 0
    Let total_duration be 0
    
    Note: Calculate totals
    For each result in results:
        total_passed = total_passed + result.passed
        total_tests = total_tests + result.total
        total_duration = total_duration + result.duration_microseconds
    
    Let overall_success_rate be if total_tests > 0 then (Real(total_passed) / Real(total_tests)) * 100.0 otherwise 0.0
    
    Print("\nOVERALL STATISTICS:")
    Print("  Total test modules: " + String(Length(results)))
    Print("  Total tests executed: " + String(total_tests))
    Print("  Total tests passed: " + String(total_passed))
    Print("  Total tests failed: " + String(total_tests - total_passed))
    Print("  Overall success rate: " + String(overall_success_rate) + "%")
    Print("  Total execution time: " + String(Real(total_duration) / 1000000.0) + " seconds")
    Print("  Average time per test: " + String(Real(total_duration) / Real(total_tests) / 1000.0) + " ms")
    
    Print("\nMODULE BREAKDOWN:")
    Print("  Module           Tests    Passed   Failed   Rate     Time(ms)")
    Print("  " + "-" * 65)
    
    For each result in results:
        Let failed be result.total - result.passed
        Let time_ms be Real(result.duration_microseconds) / 1000.0
        Let padded_name be result.module_name + (" " * (15 - Length(result.module_name)))
        Let tests_str be String(result.total) + (" " * (8 - Length(String(result.total))))
        Let passed_str be String(result.passed) + (" " * (8 - Length(String(result.passed))))
        Let failed_str be String(failed) + (" " * (8 - Length(String(failed))))
        Let rate_str be String(result.success_rate)[0:5] + "%" + (" " * (8 - Length(String(result.success_rate)[0:5] + "%")))
        Let time_str be String(time_ms)[0:7]
        
        Print("  " + padded_name + tests_str + passed_str + failed_str + rate_str + time_str)
    
    Print("\nPERFORMANCE ANALYSIS:")
    Let fastest_module be ""
    Let slowest_module be ""
    Let min_time be Real(total_duration)
    Let max_time be 0.0
    
    For each result in results:
        Let avg_time_per_test be Real(result.duration_microseconds) / Real(result.total)
        If avg_time_per_test < min_time:
            min_time = avg_time_per_test
            fastest_module = result.module_name
        If avg_time_per_test > max_time:
            max_time = avg_time_per_test
            slowest_module = result.module_name
    
    Print("  Fastest module (avg per test): " + fastest_module + " (" + String(min_time / 1000.0) + " ms)")
    Print("  Slowest module (avg per test): " + slowest_module + " (" + String(max_time / 1000.0) + " ms)")
    
    Print("\nTEST COVERAGE ASSESSMENT:")
    Print("  Gamma functions: Comprehensive coverage of Œì, log Œì, Œ≤, incomplete Œ≥, digamma, polygamma")
    Print("  Bessel functions: Complete J, Y, I, K families plus spherical, Airy, Hankel variants") 
    Print("  Elliptic functions: Full coverage of integrals K/E/Œ†, Jacobi sn/cn/dn, theta, Weierstrass")
    Print("  Hypergeometric: Extensive ‚ÇÇF‚ÇÅ, ‚ÇÅF‚ÇÅ, U function testing with special cases and relations")
    Print("  Orthogonal polynomials: All major families with orthogonality and quadrature verification")
    Print("  Zeta functions: Riemann Œ∂, Dirichlet L, Hurwitz Œ∂, polylogarithm, Lerch transcendent")
    
    If overall_success_rate >= 100.0:
        Print("\nüéâ PERFECT SCORE! All special function tests PASSED!")
        Print("   The mathematical special functions library is fully validated.")
    Otherwise if overall_success_rate >= 95.0:
        Print("\n‚úÖ EXCELLENT! Nearly all tests passed (" + String(overall_success_rate) + "%)")
        Print("   The special functions library is in excellent condition.")
    Otherwise if overall_success_rate >= 90.0:
        Print("\n‚ö†Ô∏è  GOOD: Most tests passed (" + String(overall_success_rate) + "%)")
        Print("   Some minor issues may need attention.")
    Otherwise:
        Print("\n‚ùå ATTENTION NEEDED: Success rate is " + String(overall_success_rate) + "%")
        Print("   Significant issues found that require investigation.")
    
    Print("\n" + "=" * 80)

Process called "print_usage" that returns Nothing:
    Print("Special Functions Test Runner")
    Print("Usage:")
    Print("  runa special_test_runner.runa              # Run all test modules")
    Print("  runa special_test_runner.runa <module>     # Run specific module")
    Print("")
    Print("Available modules:")
    Let modules be get_test_modules()
    For each module in modules:
        Print("  " + module.name + " - " + module.description)
    Print("")

Process called "find_module_by_name" that takes name as String returns TestModuleInfo:
    Let modules be get_test_modules()
    For each module in modules:
        If module.name == name:
            Return module
    
    Note: Return empty module if not found
    Return TestModuleInfo{
        name: "",
        runner: run_gamma_tests,  Note: Placeholder, won't be used
        description: ""
    }

Process called "run_all_tests" that returns Nothing:
    Print("üßÆ RUNA SPECIAL FUNCTIONS - COMPREHENSIVE TEST SUITE")
    Print("=" * 80)
    Print("Testing mathematical special functions library")
    Print("Modules: gamma, bessel, elliptic, hypergeometric, orthogonal, zeta")
    Print("=" * 80)
    Print("")
    
    Let modules be get_test_modules()
    Let results be []TestResults
    
    Let overall_start_time be current_time_microseconds()
    
    For each module in modules:
        Let result be run_single_module(module)
        results = results + [result]
        Print("‚úì Completed " + module.name + " tests")
        Print("")
    
    Let overall_end_time be current_time_microseconds()
    Let total_suite_time be overall_end_time - overall_start_time
    
    print_summary_report(results)
    
    Print("\nSUITE EXECUTION COMPLETED")
    Print("Total suite execution time: " + String(Real(total_suite_time) / 1000000.0) + " seconds")
    Print("Test suite finished at: " + String(overall_end_time))

Process called "run_specific_module" that takes module_name as String returns Nothing:
    Let module be find_module_by_name(module_name)
    
    If module.name == "":
        Print("‚ùå Error: Module '" + module_name + "' not found.")
        Print("")
        print_usage()
        Return
    
    Print("üßÆ RUNA SPECIAL FUNCTIONS - SINGLE MODULE TEST")
    Print("=" * 60)
    Print("Module: " + module.name)
    Print("=" * 60)
    Print("")
    
    Let start_time be current_time_microseconds()
    Let result be run_single_module(module)
    Let end_time be current_time_microseconds()
    
    Print("=" * 60)
    Print("SINGLE MODULE TEST COMPLETED")
    Print("=" * 60)
    Print("Module: " + result.module_name)
    Print("Tests passed: " + String(result.passed) + "/" + String(result.total))
    Print("Success rate: " + String(result.success_rate) + "%")
    Print("Execution time: " + String(Real(result.duration_microseconds) / 1000000.0) + " seconds")
    
    If result.success_rate >= 100.0:
        Print("üéâ All tests PASSED!")
    Otherwise if result.success_rate >= 95.0:
        Print("‚úÖ Nearly all tests passed!")
    Otherwise:
        Print("‚ö†Ô∏è Some tests failed - review output above")
    
    Print("=" * 60)

Process called "main" that returns Nothing:
    Let args be get_args()
    
    If Length(args) == 0:
        Note: No arguments - run all tests
        run_all_tests()
    Otherwise if Length(args) == 1:
        Let module_name be args[0]
        If module_name == "help" or module_name == "--help" or module_name == "-h":
            print_usage()
        Otherwise:
            run_specific_module(module_name)
    Otherwise:
        Print("‚ùå Error: Too many arguments.")
        Print("")
        print_usage()

Note: Entry point
main()