Note: Comprehensive unit tests for the math/symbols/greek_letters module
Note: Tests complete Greek alphabet, mathematical usage, variant forms, mathematical constants, Unicode support, and transliteration

Import "dev/test" as UnitTest
Import "stdlib/math/symbols/greek_letters" as GreekLetters
Import "collections" as Collections

Note: Test helper functions for Greek letters testing

Process called "create_greek_letter_test" returns Dictionary[String, Any]:
    Return Collections.create_dictionary([
        ("name", "alpha"),
        ("lowercase", "α"),
        ("uppercase", "Α"),
        ("unicode_lower", "U+03B1"),
        ("unicode_upper", "U+0391"),
        ("pronunciation", "AL-fuh"),
        ("mathematical_usage", Collections.create_list(["angles", "coefficients"])),
        ("expected_valid", true)
    ])

Process called "create_mathematical_constant_test" returns Dictionary[String, Any]:
    Return Collections.create_dictionary([
        ("symbol", "π"),
        ("name", "pi"),
        ("value", 3.141592653589793),
        ("unicode", "U+03C0"),
        ("definition", "ratio of circumference to diameter"),
        ("expected_valid", true)
    ])

Process called "assert_greek_letter_properties" that takes letter as Dictionary[String, Any], expected as Dictionary[String, Any], message as String:
    UnitTest.assert_equals(Collections.get_from_dictionary(letter, "name"), Collections.get_from_dictionary(expected, "name"), message + " - Name should match")
    UnitTest.assert_equals(Collections.get_from_dictionary(letter, "lowercase"), Collections.get_from_dictionary(expected, "lowercase"), message + " - Lowercase should match")
    UnitTest.assert_equals(Collections.get_from_dictionary(letter, "uppercase"), Collections.get_from_dictionary(expected, "uppercase"), message + " - Uppercase should match")
    UnitTest.assert_true(Collections.has_key(letter, "pronunciation"), message + " - Should have pronunciation")

Process called "assert_mathematical_constant" that takes constant as Dictionary[String, Any], expected as Dictionary[String, Any], message as String:
    UnitTest.assert_equals(Collections.get_from_dictionary(constant, "symbol"), Collections.get_from_dictionary(expected, "symbol"), message + " - Symbol should match")
    UnitTest.assert_equals(Collections.get_from_dictionary(constant, "name"), Collections.get_from_dictionary(expected, "name"), message + " - Name should match")
    UnitTest.assert_true(Collections.has_key(constant, "value"), message + " - Should have numerical value")

Note: Complete Greek Alphabet Tests

Process called "test_get_complete_greek_alphabet":
    Let alphabet be GreekLetters.get_complete_greek_alphabet()
    
    UnitTest.assert_equals(Collections.size(alphabet), 24, "Should have 24 Greek letters")
    UnitTest.assert_true(Collections.has_key(alphabet, "alpha"), "Should contain alpha")
    UnitTest.assert_true(Collections.has_key(alphabet, "omega"), "Should contain omega")

Process called "test_alpha_symbols":
    Let alpha be GreekLetters.alpha_symbols()
    Let expected be create_greek_letter_test()
    
    assert_greek_letter_properties(alpha, expected, "Alpha symbols")
    UnitTest.assert_equals(alpha.position, 1, "Alpha should be first letter")

Process called "test_beta_symbols":
    Let beta be GreekLetters.beta_symbols()
    
    UnitTest.assert_equals(beta.name, "beta", "Name should be beta")
    UnitTest.assert_equals(beta.lowercase, "β", "Lowercase should be β")
    UnitTest.assert_equals(beta.uppercase, "Β", "Uppercase should be Β")
    UnitTest.assert_equals(beta.position, 2, "Beta should be second letter")

Process called "test_gamma_symbols":
    Let gamma be GreekLetters.gamma_symbols()
    
    UnitTest.assert_equals(gamma.name, "gamma", "Name should be gamma")
    UnitTest.assert_equals(gamma.lowercase, "γ", "Lowercase should be γ")
    UnitTest.assert_equals(gamma.uppercase, "Γ", "Uppercase should be Γ")
    UnitTest.assert_true(Collections.contains(gamma.mathematical_usage, "gamma_function"), "Should be used for gamma function")

Process called "test_delta_symbols":
    Let delta be GreekLetters.delta_symbols()
    
    UnitTest.assert_equals(delta.name, "delta", "Name should be delta")
    UnitTest.assert_equals(delta.lowercase, "δ", "Lowercase should be δ")
    UnitTest.assert_equals(delta.uppercase, "Δ", "Uppercase should be Δ")
    UnitTest.assert_true(Collections.contains(delta.mathematical_usage, "change"), "Should represent change")

Process called "test_epsilon_symbols":
    Let epsilon be GreekLetters.epsilon_symbols()
    
    UnitTest.assert_equals(epsilon.name, "epsilon", "Name should be epsilon")
    UnitTest.assert_equals(epsilon.lowercase, "ε", "Lowercase should be ε")
    UnitTest.assert_equals(epsilon.uppercase, "Ε", "Uppercase should be Ε")
    UnitTest.assert_true(Collections.contains(epsilon.mathematical_usage, "small_quantity"), "Should represent small quantities")

Process called "test_pi_symbols":
    Let pi be GreekLetters.pi_symbols()
    
    UnitTest.assert_equals(pi.name, "pi", "Name should be pi")
    UnitTest.assert_equals(pi.lowercase, "π", "Lowercase should be π")
    UnitTest.assert_equals(pi.uppercase, "Π", "Uppercase should be Π")
    UnitTest.assert_true(Collections.contains(pi.mathematical_usage, "circle_ratio"), "Should be used for circle ratio")

Process called "test_sigma_symbols":
    Let sigma be GreekLetters.sigma_symbols()
    
    UnitTest.assert_equals(sigma.name, "sigma", "Name should be sigma")
    UnitTest.assert_equals(sigma.lowercase, "σ", "Lowercase should be σ")
    UnitTest.assert_equals(sigma.uppercase, "Σ", "Uppercase should be Σ")
    UnitTest.assert_true(Collections.contains(sigma.mathematical_usage, "summation"), "Should be used for summation")

Process called "test_omega_symbols":
    Let omega be GreekLetters.omega_symbols()
    
    UnitTest.assert_equals(omega.name, "omega", "Name should be omega")
    UnitTest.assert_equals(omega.lowercase, "ω", "Lowercase should be ω")
    UnitTest.assert_equals(omega.uppercase, "Ω", "Uppercase should be Ω")
    UnitTest.assert_equals(omega.position, 24, "Omega should be last letter")

Note: Mathematical Usage Tests

Process called "test_get_letters_by_usage":
    Let usage be "angles"
    Let letters be GreekLetters.get_letters_by_usage(usage)
    
    UnitTest.assert_true(Collections.size(letters) > 0, "Should find letters used for angles")
    UnitTest.assert_true(Collections.contains_key(letters, "alpha"), "Alpha should be used for angles")
    UnitTest.assert_true(Collections.contains_key(letters, "theta"), "Theta should be used for angles")

Process called "test_get_physics_constants":
    Let constants be GreekLetters.get_physics_constants()
    
    UnitTest.assert_true(Collections.size(constants) > 0, "Should have physics constants")
    UnitTest.assert_true(Collections.has_key(constants, "μ"), "Should contain mu (permeability)")
    UnitTest.assert_true(Collections.has_key(constants, "ε"), "Should contain epsilon (permittivity)")

Process called "test_get_statistical_symbols":
    Let symbols be GreekLetters.get_statistical_symbols()
    
    UnitTest.assert_true(Collections.size(symbols) > 0, "Should have statistical symbols")
    UnitTest.assert_true(Collections.has_key(symbols, "μ"), "Should contain mu (mean)")
    UnitTest.assert_true(Collections.has_key(symbols, "σ"), "Should contain sigma (standard deviation)")

Process called "test_get_geometry_symbols":
    Let symbols be GreekLetters.get_geometry_symbols()
    
    UnitTest.assert_true(Collections.size(symbols) > 0, "Should have geometry symbols")
    UnitTest.assert_true(Collections.has_key(symbols, "π"), "Should contain pi")
    UnitTest.assert_true(Collections.has_key(symbols, "θ"), "Should contain theta")

Note: Variant Forms Tests

Process called "test_get_letter_variants":
    Let letter be "alpha"
    Let variants be GreekLetters.get_letter_variants(letter)
    
    UnitTest.assert_true(Collections.has_key(variants, "normal"), "Should have normal variant")
    UnitTest.assert_true(Collections.has_key(variants, "bold"), "Should have bold variant")
    UnitTest.assert_true(Collections.has_key(variants, "italic"), "Should have italic variant")

Process called "test_bold_greek_letters":
    Let bold_letters be GreekLetters.bold_greek_letters()
    
    UnitTest.assert_true(Collections.size(bold_letters) >= 24, "Should have bold variants for all letters")
    UnitTest.assert_true(Collections.has_key(bold_letters, "𝛂"), "Should contain bold alpha")
    UnitTest.assert_true(Collections.has_key(bold_letters, "𝛀"), "Should contain bold omega")

Process called "test_italic_greek_letters":
    Let italic_letters be GreekLetters.italic_greek_letters()
    
    UnitTest.assert_true(Collections.size(italic_letters) >= 24, "Should have italic variants for all letters")
    UnitTest.assert_true(Collections.has_key(italic_letters, "𝛼"), "Should contain italic alpha")
    UnitTest.assert_true(Collections.has_key(italic_letters, "𝜔"), "Should contain italic omega")

Process called "test_bold_italic_greek_letters":
    Let bold_italic_letters be GreekLetters.bold_italic_greek_letters()
    
    UnitTest.assert_true(Collections.size(bold_italic_letters) >= 24, "Should have bold italic variants")
    UnitTest.assert_true(Collections.has_key(bold_italic_letters, "𝜶"), "Should contain bold italic alpha")

Process called "test_script_greek_letters":
    Let script_letters be GreekLetters.script_greek_letters()
    
    UnitTest.assert_true(Collections.size(script_letters) > 0, "Should have script variants")
    UnitTest.assert_true(Collections.has_key(script_letters, "mathematical_script"), "Should be categorized as mathematical script")

Note: Mathematical Constants Tests

Process called "test_get_mathematical_constants":
    Let constants be GreekLetters.get_mathematical_constants()
    
    UnitTest.assert_true(Collections.size(constants) >= 5, "Should have at least 5 mathematical constants")
    UnitTest.assert_true(Collections.has_key(constants, "π"), "Should contain pi")
    UnitTest.assert_true(Collections.has_key(constants, "φ"), "Should contain phi (golden ratio)")

Process called "test_pi_constant":
    Let pi be GreekLetters.pi_constant()
    Let expected be create_mathematical_constant_test()
    
    assert_mathematical_constant(pi, expected, "Pi constant")
    UnitTest.assert_true(pi.value > 3.14, "Pi should be approximately 3.14159")
    UnitTest.assert_true(pi.value < 3.15, "Pi should be less than 3.15")

Process called "test_phi_constant":
    Let phi be GreekLetters.phi_constant()
    
    UnitTest.assert_equals(phi.symbol, "φ", "Symbol should be φ")
    UnitTest.assert_equals(phi.name, "golden_ratio", "Name should be golden_ratio")
    UnitTest.assert_true(phi.value > 1.61, "Golden ratio should be approximately 1.618")
    UnitTest.assert_true(phi.value < 1.62, "Golden ratio should be less than 1.62")

Process called "test_tau_constant":
    Let tau be GreekLetters.tau_constant()
    
    UnitTest.assert_equals(tau.symbol, "τ", "Symbol should be τ")
    UnitTest.assert_equals(tau.name, "tau", "Name should be tau")
    UnitTest.assert_true(tau.value > 6.28, "Tau should be approximately 6.283")

Process called "test_euler_constant":
    Let e be GreekLetters.euler_constant()
    
    UnitTest.assert_equals(e.symbol, "e", "Symbol should be e")
    UnitTest.assert_equals(e.name, "euler_number", "Name should be euler_number")
    UnitTest.assert_true(e.value > 2.71, "e should be approximately 2.718")
    UnitTest.assert_true(e.value < 2.72, "e should be less than 2.72")

Process called "test_gamma_constant":
    Let gamma be GreekLetters.euler_mascheroni_constant()
    
    UnitTest.assert_equals(gamma.symbol, "γ", "Symbol should be γ")
    UnitTest.assert_equals(gamma.name, "euler_mascheroni", "Name should be euler_mascheroni")
    UnitTest.assert_true(gamma.value > 0.57, "Euler-Mascheroni constant should be approximately 0.577")

Note: Unicode Support Tests

Process called "test_get_unicode_codepoints":
    Let letter be "alpha"
    Let codepoints be GreekLetters.get_unicode_codepoints(letter)
    
    UnitTest.assert_equals(codepoints.lowercase, "U+03B1", "Lowercase alpha should be U+03B1")
    UnitTest.assert_equals(codepoints.uppercase, "U+0391", "Uppercase alpha should be U+0391")

Process called "test_normalize_greek_text":
    Let text be "αβγ"
    Let normalized be GreekLetters.normalize_greek_text(text)
    
    UnitTest.assert_true(normalized.normalization_applied, "Normalization should be applied")
    UnitTest.assert_equals(normalized.normalization_form, "NFC", "Should use NFC normalization")

Process called "test_validate_unicode_sequence":
    Let sequence be Collections.create_list(["U+03B1", "U+03B2", "U+03B3"])
    Let validation be GreekLetters.validate_unicode_sequence(sequence)
    
    UnitTest.assert_true(validation.sequence_valid, "Valid Unicode sequence should pass")
    UnitTest.assert_equals(Collections.size(validation.errors), 0, "Should have no validation errors")

Process called "test_convert_to_unicode":
    Let letter_name be "beta"
    Let case_type be "lowercase"
    Let unicode be GreekLetters.convert_to_unicode(letter_name, case_type)
    
    UnitTest.assert_equals(unicode.codepoint, "U+03B2", "Should return correct Unicode codepoint")
    UnitTest.assert_equals(unicode.character, "β", "Should return correct character")

Note: Transliteration Tests

Process called "test_get_pronunciation":
    Let letter be "chi"
    Let pronunciation be GreekLetters.get_pronunciation(letter)
    
    UnitTest.assert_true(Collections.has_key(pronunciation, "ipa"), "Should have IPA pronunciation")
    UnitTest.assert_true(Collections.has_key(pronunciation, "english"), "Should have English pronunciation guide")

Process called "test_transliterate_to_latin":
    Let greek_text be "αβγδε"
    Let latin be GreekLetters.transliterate_to_latin(greek_text)
    
    UnitTest.assert_equals(latin.transliterated, "abgde", "Should transliterate correctly")
    UnitTest.assert_equals(latin.system, "ISO_843", "Should use standard transliteration system")

Process called "test_romanize_greek":
    Let greek_word be "μαθηματικά"
    Let romanized be GreekLetters.romanize_greek(greek_word)
    
    UnitTest.assert_true(Collections.has_key(romanized, "romanized_form"), "Should have romanized form")
    UnitTest.assert_true(romanized.romanization_successful, "Romanization should succeed")

Process called "test_get_latin_equivalents":
    Let letter be "phi"
    Let equivalents be GreekLetters.get_latin_equivalents(letter)
    
    UnitTest.assert_true(Collections.contains(equivalents, "ph"), "Should contain 'ph' equivalent")
    UnitTest.assert_true(Collections.has_key(equivalents, "modern"), "Should have modern equivalent")

Note: Letter Classification Tests

Process called "test_classify_letter_usage":
    Let letter be "lambda"
    Let classification be GreekLetters.classify_letter_usage(letter)
    
    UnitTest.assert_true(Collections.contains(classification.usage_categories, "wavelength"), "Should be used for wavelength")
    UnitTest.assert_true(Collections.contains(classification.usage_categories, "eigenvalue"), "Should be used for eigenvalues")

Process called "test_is_vowel":
    Let alpha_vowel be GreekLetters.is_vowel("alpha")
    Let beta_consonant be GreekLetters.is_vowel("beta")
    
    UnitTest.assert_true(alpha_vowel, "Alpha should be classified as vowel")
    UnitTest.assert_false(beta_consonant, "Beta should not be classified as vowel")

Process called "test_get_vowels":
    Let vowels be GreekLetters.get_vowels()
    
    UnitTest.assert_true(Collections.contains(vowels, "alpha"), "Should contain alpha")
    UnitTest.assert_true(Collections.contains(vowels, "epsilon"), "Should contain epsilon")
    UnitTest.assert_true(Collections.contains(vowels, "eta"), "Should contain eta")
    UnitTest.assert_true(Collections.contains(vowels, "iota"), "Should contain iota")
    UnitTest.assert_true(Collections.contains(vowels, "omicron"), "Should contain omicron")
    UnitTest.assert_true(Collections.contains(vowels, "upsilon"), "Should contain upsilon")
    UnitTest.assert_true(Collections.contains(vowels, "omega"), "Should contain omega")

Process called "test_get_consonants":
    Let consonants be GreekLetters.get_consonants()
    
    UnitTest.assert_true(Collections.size(consonants) = 17, "Should have 17 consonants")
    UnitTest.assert_true(Collections.contains(consonants, "beta"), "Should contain beta")
    UnitTest.assert_true(Collections.contains(consonants, "gamma"), "Should contain gamma")

Note: Historical and Cultural Tests

Process called "test_get_letter_history":
    Let letter be "delta"
    Let history be GreekLetters.get_letter_history(letter)
    
    UnitTest.assert_true(Collections.has_key(history, "origin"), "Should have origin information")
    UnitTest.assert_true(Collections.has_key(history, "evolution"), "Should have evolution history")

Process called "test_get_mythological_references":
    Let letter = "omega"
    Let mythology be GreekLetters.get_mythological_references(letter)
    
    UnitTest.assert_true(Collections.has_key(mythology, "references"), "Should have mythological references")
    UnitTest.assert_true(Collections.size(mythology.references) > 0, "Should have at least one reference")

Process called "test_get_cultural_significance":
    Let letter be "alpha"
    Let significance be GreekLetters.get_cultural_significance(letter)
    
    UnitTest.assert_true(Collections.has_key(significance, "meaning"), "Should have cultural meaning")
    UnitTest.assert_true(Collections.has_key(significance, "modern_usage"), "Should have modern usage")

Note: Search and Utility Tests

Process called "test_search_by_name":
    Let search_term be "the"
    Let results be GreekLetters.search_by_name(search_term)
    
    UnitTest.assert_true(Collections.contains_key(results, "theta"), "Should find theta")

Process called "test_search_by_symbol":
    Let symbol be "π"
    Let result be GreekLetters.search_by_symbol(symbol)
    
    UnitTest.assert_equals(result.name, "pi", "Should find pi by symbol")
    UnitTest.assert_equals(result.symbol, symbol, "Should return matching symbol")

Process called "test_get_similar_letters":
    Let letter be "rho"
    Let similar be GreekLetters.get_similar_letters(letter)
    
    UnitTest.assert_true(Collections.size(similar) > 0, "Should find similar letters")
    UnitTest.assert_true(Collections.has_key(similar, "visual_similarity"), "Should have visual similarity")

Process called "test_validate_greek_letter":
    Let valid_letter be Collections.create_dictionary([
        ("name", "alpha"),
        ("lowercase", "α"),
        ("uppercase", "Α")
    ])
    Let validation = GreekLetters.validate_greek_letter(valid_letter)
    
    UnitTest.assert_true(validation.is_valid, "Valid Greek letter should pass validation")
    UnitTest.assert_equals(Collections.size(validation.errors), 0, "Should have no validation errors")

Note: Test suite coordination

Process called "run_all_greek_letters_tests":
    UnitTest.start_test_suite("Math Symbols Greek Letters Module Tests")
    
    Note: Complete alphabet tests
    UnitTest.run_test("Get Complete Greek Alphabet", test_get_complete_greek_alphabet)
    UnitTest.run_test("Alpha Symbols", test_alpha_symbols)
    UnitTest.run_test("Beta Symbols", test_beta_symbols)
    UnitTest.run_test("Gamma Symbols", test_gamma_symbols)
    UnitTest.run_test("Delta Symbols", test_delta_symbols)
    UnitTest.run_test("Epsilon Symbols", test_epsilon_symbols)
    UnitTest.run_test("Pi Symbols", test_pi_symbols)
    UnitTest.run_test("Sigma Symbols", test_sigma_symbols)
    UnitTest.run_test("Omega Symbols", test_omega_symbols)
    
    Note: Mathematical usage tests
    UnitTest.run_test("Get Letters by Usage", test_get_letters_by_usage)
    UnitTest.run_test("Get Physics Constants", test_get_physics_constants)
    UnitTest.run_test("Get Statistical Symbols", test_get_statistical_symbols)
    UnitTest.run_test("Get Geometry Symbols", test_get_geometry_symbols)
    
    Note: Variant forms tests
    UnitTest.run_test("Get Letter Variants", test_get_letter_variants)
    UnitTest.run_test("Bold Greek Letters", test_bold_greek_letters)
    UnitTest.run_test("Italic Greek Letters", test_italic_greek_letters)
    UnitTest.run_test("Bold Italic Greek Letters", test_bold_italic_greek_letters)
    UnitTest.run_test("Script Greek Letters", test_script_greek_letters)
    
    Note: Mathematical constants tests
    UnitTest.run_test("Get Mathematical Constants", test_get_mathematical_constants)
    UnitTest.run_test("Pi Constant", test_pi_constant)
    UnitTest.run_test("Phi Constant", test_phi_constant)
    UnitTest.run_test("Tau Constant", test_tau_constant)
    UnitTest.run_test("Euler Constant", test_euler_constant)
    UnitTest.run_test("Gamma Constant", test_gamma_constant)
    
    Note: Unicode support tests
    UnitTest.run_test("Get Unicode Codepoints", test_get_unicode_codepoints)
    UnitTest.run_test("Normalize Greek Text", test_normalize_greek_text)
    UnitTest.run_test("Validate Unicode Sequence", test_validate_unicode_sequence)
    UnitTest.run_test("Convert to Unicode", test_convert_to_unicode)
    
    Note: Transliteration tests
    UnitTest.run_test("Get Pronunciation", test_get_pronunciation)
    UnitTest.run_test("Transliterate to Latin", test_transliterate_to_latin)
    UnitTest.run_test("Romanize Greek", test_romanize_greek)
    UnitTest.run_test("Get Latin Equivalents", test_get_latin_equivalents)
    
    Note: Letter classification tests
    UnitTest.run_test("Classify Letter Usage", test_classify_letter_usage)
    UnitTest.run_test("Is Vowel", test_is_vowel)
    UnitTest.run_test("Get Vowels", test_get_vowels)
    UnitTest.run_test("Get Consonants", test_get_consonants)
    
    Note: Historical and cultural tests
    UnitTest.run_test("Get Letter History", test_get_letter_history)
    UnitTest.run_test("Get Mythological References", test_get_mythological_references)
    UnitTest.run_test("Get Cultural Significance", test_get_cultural_significance)
    
    Note: Search and utility tests
    UnitTest.run_test("Search by Name", test_search_by_name)
    UnitTest.run_test("Search by Symbol", test_search_by_symbol)
    UnitTest.run_test("Get Similar Letters", test_get_similar_letters)
    UnitTest.run_test("Validate Greek Letter", test_validate_greek_letter)
    
    Let results be UnitTest.end_test_suite()
    Return results

Process called "get_greek_letters_test_count" returns Integer:
    Return 42

Process called "get_greek_letters_test_categories" returns List[String]:
    Return Collections.create_list([
        "Complete Alphabet",
        "Mathematical Usage",
        "Variant Forms",
        "Mathematical Constants",
        "Unicode Support",
        "Transliteration",
        "Letter Classification",
        "Historical and Cultural",
        "Search and Utilities"
    ])