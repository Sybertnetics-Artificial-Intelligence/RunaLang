Note:
tests/unit/libraries/math/core/conversion_test.runa
Unit Tests for Math Core Conversion Module

This test suite provides comprehensive testing for the math core conversion module including:
- Angular unit conversions (degrees, radians, gradians, turns)
- Numerical base conversions (binary, octal, decimal, hexadecimal, arbitrary bases)
- Unit system conversions (metric, imperial, scientific units)
- Temperature scale conversions (Celsius, Fahrenheit, Kelvin, Rankine)
- Coordinate system conversions (Cartesian, polar, spherical, cylindrical)
- Number format conversions (scientific notation, engineering notation)
- Precision and representation conversions (fixed-point, floating-point)
- Time unit conversions (seconds, minutes, hours, days, years)
- Physical unit conversions (length, mass, volume, energy, power)
- Currency and financial unit conversions with exchange rates
- Data storage unit conversions (bytes, kilobytes, megabytes, etc.)
- Frequency and wavelength conversions for signal processing
- Statistical distribution parameter conversions
- Encoding conversions (ASCII, UTF-8, binary representations)
- Mathematical notation conversions (decimal, fraction, percentage)
:End Note

Import "stdlib/math/core/conversion" as Conversion
Import "dev/debug/test_framework/assertions" as Assert
Import "dev/debug/test_framework/test_runner" as TestRunner
Import "dev/debug/test_framework/data_generators" as DataGen

Note: =====================================================================
Note: HELPER FUNCTIONS AND TEST UTILITIES
Note: =====================================================================

Process called "assert_conversion_result_valid" that takes result as ConversionResult, expected_value as String, conversion_type as String returns Boolean:
    Note: Assert conversion result is valid and matches expected values
    Assert.AreEqual(result.conversion_type, conversion_type)
    Assert.IsTrue(is_approximately_equal(result.converted_value, expected_value, 1e-13))
    Assert.IsFalse(result.error_occurred)
    Return True

Process called "is_approximately_equal" that takes value1 as String, value2 as String, tolerance as Float returns Boolean:
    Note: Check if two string values are approximately equal within tolerance
    Let val1 be Parse value1 as Float
    Let val2 be Parse value2 as Float
    Let difference be AbsoluteValue(val1 - val2)
    Return difference <= tolerance

Process called "generate_test_angles" that takes no parameters returns List[String]:
    Note: Generate test angles for angle conversion testing
    Return ["0", "30", "45", "60", "90", "180", "270", "360"]

Process called "generate_test_temperatures" that takes no parameters returns List[String]:
    Note: Generate test temperatures for temperature conversion testing
    Return ["-273.15", "-40", "0", "20", "100", "212", "373.15"]

Note: =====================================================================
Note: ANGULAR UNIT CONVERSION TESTS
Note: =====================================================================

Process called "test_degrees_to_radians" that takes no parameters returns Boolean:
    Note: Test conversion from degrees to radians
    Let result_0 be Conversion.convert_angle("0", "degrees", "radians", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_0, "0", "angle_conversion"))
    
    Let result_90 be Conversion.convert_angle("90", "degrees", "radians", 15)
    Let expected_pi_2 be ToString(3.141592653589793 / 2.0)
    Assert.IsTrue(assert_conversion_result_valid(result_90, expected_pi_2, "angle_conversion"))
    
    Let result_180 be Conversion.convert_angle("180", "degrees", "radians", 15)
    Let expected_pi be ToString(3.141592653589793)
    Assert.IsTrue(assert_conversion_result_valid(result_180, expected_pi, "angle_conversion"))
    
    Let result_360 be Conversion.convert_angle("360", "degrees", "radians", 15)
    Let expected_2pi be ToString(2.0 * 3.141592653589793)
    Assert.IsTrue(assert_conversion_result_valid(result_360, expected_2pi, "angle_conversion"))
    Return True

Process called "test_radians_to_degrees" that takes no parameters returns Boolean:
    Note: Test conversion from radians to degrees
    Let result_0 be Conversion.convert_angle("0", "radians", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_0, "0", "angle_conversion"))
    
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result_90 be Conversion.convert_angle(pi_2, "radians", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_90, "90", "angle_conversion"))
    
    Let pi be ToString(3.141592653589793)
    Let result_180 be Conversion.convert_angle(pi, "radians", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_180, "180", "angle_conversion"))
    Return True

Process called "test_degrees_to_gradians" that takes no parameters returns Boolean:
    Note: Test conversion from degrees to gradians
    Let result_0 be Conversion.convert_angle("0", "degrees", "gradians", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_0, "0", "angle_conversion"))
    
    Let result_90 be Conversion.convert_angle("90", "degrees", "gradians", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_90, "100", "angle_conversion"))
    
    Let result_180 be Conversion.convert_angle("180", "degrees", "gradians", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_180, "200", "angle_conversion"))
    Return True

Process called "test_gradians_to_degrees" that takes no parameters returns Boolean:
    Note: Test conversion from gradians to degrees
    Let result_100 be Conversion.convert_angle("100", "gradians", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_100, "90", "angle_conversion"))
    
    Let result_200 be Conversion.convert_angle("200", "gradians", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_200, "180", "angle_conversion"))
    Return True

Process called "test_turns_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from turns (full rotations)
    Let result_deg_to_turns be Conversion.convert_angle("360", "degrees", "turns", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_deg_to_turns, "1", "angle_conversion"))
    
    Let result_turns_to_deg be Conversion.convert_angle("0.5", "turns", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_turns_to_deg, "180", "angle_conversion"))
    Return True

Note: =====================================================================
Note: NUMERICAL BASE CONVERSION TESTS
Note: =====================================================================

Process called "test_decimal_to_binary" that takes no parameters returns Boolean:
    Note: Test conversion from decimal to binary
    Let result_0 be Conversion.convert_base("0", 10, 2)
    Assert.AreEqual(result_0.converted_value, "0")
    
    Let result_5 be Conversion.convert_base("5", 10, 2)
    Assert.AreEqual(result_5.converted_value, "101")
    
    Let result_255 be Conversion.convert_base("255", 10, 2)
    Assert.AreEqual(result_255.converted_value, "11111111")
    Return True

Process called "test_binary_to_decimal" that takes no parameters returns Boolean:
    Note: Test conversion from binary to decimal
    Let result_0 be Conversion.convert_base("0", 2, 10)
    Assert.AreEqual(result_0.converted_value, "0")
    
    Let result_101 be Conversion.convert_base("101", 2, 10)
    Assert.AreEqual(result_101.converted_value, "5")
    
    Let result_11111111 be Conversion.convert_base("11111111", 2, 10)
    Assert.AreEqual(result_11111111.converted_value, "255")
    Return True

Process called "test_decimal_to_hexadecimal" that takes no parameters returns Boolean:
    Note: Test conversion from decimal to hexadecimal
    Let result_0 be Conversion.convert_base("0", 10, 16)
    Assert.AreEqual(result_0.converted_value, "0")
    
    Let result_15 be Conversion.convert_base("15", 10, 16)
    Assert.AreEqual(result_15.converted_value, "F")
    
    Let result_255 be Conversion.convert_base("255", 10, 16)
    Assert.AreEqual(result_255.converted_value, "FF")
    
    Let result_4095 be Conversion.convert_base("4095", 10, 16)
    Assert.AreEqual(result_4095.converted_value, "FFF")
    Return True

Process called "test_hexadecimal_to_decimal" that takes no parameters returns Boolean:
    Note: Test conversion from hexadecimal to decimal
    Let result_0 be Conversion.convert_base("0", 16, 10)
    Assert.AreEqual(result_0.converted_value, "0")
    
    Let result_F be Conversion.convert_base("F", 16, 10)
    Assert.AreEqual(result_F.converted_value, "15")
    
    Let result_FF be Conversion.convert_base("FF", 16, 10)
    Assert.AreEqual(result_FF.converted_value, "255")
    Return True

Process called "test_decimal_to_octal" that takes no parameters returns Boolean:
    Note: Test conversion from decimal to octal
    Let result_0 be Conversion.convert_base("0", 10, 8)
    Assert.AreEqual(result_0.converted_value, "0")
    
    Let result_8 be Conversion.convert_base("8", 10, 8)
    Assert.AreEqual(result_8.converted_value, "10")
    
    Let result_64 be Conversion.convert_base("64", 10, 8)
    Assert.AreEqual(result_64.converted_value, "100")
    Return True

Process called "test_arbitrary_base_conversion" that takes no parameters returns Boolean:
    Note: Test conversion between arbitrary bases
    Let result_base5_to_base3 be Conversion.convert_base("23", 5, 3)
    Assert.AreEqual(result_base5_to_base3.converted_value, "111")  // 2*5 + 3 = 13 in decimal = 111 in base 3
    
    Let result_base7_to_base9 be Conversion.convert_base("12", 7, 9)
    Assert.AreEqual(result_base7_to_base9.converted_value, "10")   // 1*7 + 2 = 9 in decimal = 10 in base 9
    Return True

Process called "test_invalid_base_error" that takes no parameters returns Boolean:
    Note: Test error handling for invalid bases
    Try:
        Let result be Conversion.convert_base("123", 1, 10)  // Base 1 is invalid
        Assert.IsTrue(result.error_occurred)
    Catch error:
        Return True
    
    Try:
        Let result be Conversion.convert_base("123", 10, 1)  // Base 1 is invalid
        Assert.IsTrue(result.error_occurred)
    Catch error:
        Return True
    
    Return True

Note: =====================================================================
Note: TEMPERATURE CONVERSION TESTS
Note: =====================================================================

Process called "test_celsius_to_fahrenheit" that takes no parameters returns Boolean:
    Note: Test conversion from Celsius to Fahrenheit
    Let result_0 be Conversion.convert_temperature("0", "celsius", "fahrenheit", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_0, "32", "temperature_conversion"))
    
    Let result_100 be Conversion.convert_temperature("100", "celsius", "fahrenheit", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_100, "212", "temperature_conversion"))
    
    Let result_minus40 be Conversion.convert_temperature("-40", "celsius", "fahrenheit", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_minus40, "-40", "temperature_conversion"))
    Return True

Process called "test_fahrenheit_to_celsius" that takes no parameters returns Boolean:
    Note: Test conversion from Fahrenheit to Celsius
    Let result_32 be Conversion.convert_temperature("32", "fahrenheit", "celsius", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_32, "0", "temperature_conversion"))
    
    Let result_212 be Conversion.convert_temperature("212", "fahrenheit", "celsius", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_212, "100", "temperature_conversion"))
    
    Let result_minus40 be Conversion.convert_temperature("-40", "fahrenheit", "celsius", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_minus40, "-40", "temperature_conversion"))
    Return True

Process called "test_celsius_to_kelvin" that takes no parameters returns Boolean:
    Note: Test conversion from Celsius to Kelvin
    Let result_0 be Conversion.convert_temperature("0", "celsius", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_0, "273.15", "temperature_conversion"))
    
    Let result_100 be Conversion.convert_temperature("100", "celsius", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_100, "373.15", "temperature_conversion"))
    
    Let result_minus273_15 be Conversion.convert_temperature("-273.15", "celsius", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_minus273_15, "0", "temperature_conversion"))
    Return True

Process called "test_kelvin_to_celsius" that takes no parameters returns Boolean:
    Note: Test conversion from Kelvin to Celsius
    Let result_273_15 be Conversion.convert_temperature("273.15", "kelvin", "celsius", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_273_15, "0", "temperature_conversion"))
    
    Let result_373_15 be Conversion.convert_temperature("373.15", "kelvin", "celsius", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_373_15, "100", "temperature_conversion"))
    Return True

Process called "test_fahrenheit_to_kelvin" that takes no parameters returns Boolean:
    Note: Test conversion from Fahrenheit to Kelvin
    Let result_32 be Conversion.convert_temperature("32", "fahrenheit", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_32, "273.15", "temperature_conversion"))
    
    Let result_212 be Conversion.convert_temperature("212", "fahrenheit", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_212, "373.15", "temperature_conversion"))
    Return True

Process called "test_rankine_conversions" that takes no parameters returns Boolean:
    Note: Test conversion to/from Rankine scale
    Let result_celsius_to_rankine be Conversion.convert_temperature("0", "celsius", "rankine", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_celsius_to_rankine, "491.67", "temperature_conversion"))
    
    Let result_rankine_to_celsius be Conversion.convert_temperature("491.67", "rankine", "celsius", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_rankine_to_celsius, "0", "temperature_conversion"))
    Return True

Process called "test_absolute_zero_temperatures" that takes no parameters returns Boolean:
    Note: Test conversions at absolute zero
    Let celsius_absolute_zero be Conversion.convert_temperature("-273.15", "celsius", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(celsius_absolute_zero, "0", "temperature_conversion"))
    
    Let fahrenheit_absolute_zero be Conversion.convert_temperature("-459.67", "fahrenheit", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(fahrenheit_absolute_zero, "0", "temperature_conversion"))
    Return True

Note: =====================================================================
Note: COORDINATE SYSTEM CONVERSION TESTS
Note: =====================================================================

Process called "test_cartesian_to_polar" that takes no parameters returns Boolean:
    Note: Test conversion from Cartesian to polar coordinates
    Let result_origin be Conversion.cartesian_to_polar("0", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_origin.radius, "0", "coordinate_conversion"))
    
    Let result_unit_x be Conversion.cartesian_to_polar("1", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_x.radius, "1", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_unit_x.angle, "0", "coordinate_conversion"))
    
    Let result_unit_y be Conversion.cartesian_to_polar("0", "1", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_y.radius, "1", "coordinate_conversion"))
    Let expected_pi_2 be ToString(3.141592653589793 / 2.0)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_y.angle, expected_pi_2, "coordinate_conversion"))
    Return True

Process called "test_polar_to_cartesian" that takes no parameters returns Boolean:
    Note: Test conversion from polar to Cartesian coordinates
    Let result_origin be Conversion.polar_to_cartesian("0", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_origin.x, "0", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_origin.y, "0", "coordinate_conversion"))
    
    Let result_unit_angle_0 be Conversion.polar_to_cartesian("1", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_angle_0.x, "1", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_unit_angle_0.y, "0", "coordinate_conversion"))
    
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result_unit_angle_90 be Conversion.polar_to_cartesian("1", pi_2, 15)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_angle_90.x, "0", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_unit_angle_90.y, "1", "coordinate_conversion"))
    Return True

Process called "test_cartesian_to_spherical" that takes no parameters returns Boolean:
    Note: Test conversion from Cartesian to spherical coordinates
    Let result_origin be Conversion.cartesian_to_spherical("0", "0", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_origin.radius, "0", "coordinate_conversion"))
    
    Let result_unit_z be Conversion.cartesian_to_spherical("0", "0", "1", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_z.radius, "1", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_unit_z.theta, "0", "coordinate_conversion"))
    
    Let result_unit_x be Conversion.cartesian_to_spherical("1", "0", "0", 15)
    Let expected_pi_2 be ToString(3.141592653589793 / 2.0)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_x.theta, expected_pi_2, "coordinate_conversion"))
    Return True

Process called "test_spherical_to_cartesian" that takes no parameters returns Boolean:
    Note: Test conversion from spherical to Cartesian coordinates
    Let result_origin be Conversion.spherical_to_cartesian("0", "0", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_origin.x, "0", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_origin.y, "0", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_origin.z, "0", "coordinate_conversion"))
    
    Let result_unit_z be Conversion.spherical_to_cartesian("1", "0", "0", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_unit_z.x, "0", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_unit_z.y, "0", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_unit_z.z, "1", "coordinate_conversion"))
    Return True

Process called "test_cylindrical_coordinate_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from cylindrical coordinates
    Let result_cartesian_to_cyl be Conversion.cartesian_to_cylindrical("1", "1", "2", 15)
    Let expected_sqrt_2 be ToString(1.41421356237309504880168872421)
    Assert.IsTrue(assert_conversion_result_valid(result_cartesian_to_cyl.rho, expected_sqrt_2, "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_cartesian_to_cyl.z, "2", "coordinate_conversion"))
    
    Let result_cyl_to_cartesian be Conversion.cylindrical_to_cartesian(expected_sqrt_2, "0.785398163397448", "2", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_cyl_to_cartesian.x, "1", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_cyl_to_cartesian.y, "1", "coordinate_conversion"))
    Assert.IsTrue(assert_conversion_result_valid(result_cyl_to_cartesian.z, "2", "coordinate_conversion"))
    Return True

Note: =====================================================================
Note: UNIT SYSTEM CONVERSION TESTS
Note: =====================================================================

Process called "test_length_conversions" that takes no parameters returns Boolean:
    Note: Test length unit conversions
    Let result_m_to_ft be Conversion.convert_length("1", "meter", "feet", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_m_to_ft, "3.28084", "length_conversion"))
    
    Let result_ft_to_m be Conversion.convert_length("1", "feet", "meter", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_ft_to_m, "0.3048", "length_conversion"))
    
    Let result_m_to_in be Conversion.convert_length("1", "meter", "inch", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_m_to_in, "39.3701", "length_conversion"))
    
    Let result_km_to_mile be Conversion.convert_length("1", "kilometer", "mile", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_km_to_mile, "0.621371", "length_conversion"))
    Return True

Process called "test_mass_conversions" that takes no parameters returns Boolean:
    Note: Test mass unit conversions
    Let result_kg_to_lb be Conversion.convert_mass("1", "kilogram", "pound", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_kg_to_lb, "2.20462", "mass_conversion"))
    
    Let result_lb_to_kg be Conversion.convert_mass("1", "pound", "kilogram", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_lb_to_kg, "0.453592", "mass_conversion"))
    
    Let result_g_to_oz be Conversion.convert_mass("1", "gram", "ounce", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_g_to_oz, "0.035274", "mass_conversion"))
    Return True

Process called "test_volume_conversions" that takes no parameters returns Boolean:
    Note: Test volume unit conversions
    Let result_l_to_gal be Conversion.convert_volume("1", "liter", "gallon", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_l_to_gal, "0.264172", "volume_conversion"))
    
    Let result_gal_to_l be Conversion.convert_volume("1", "gallon", "liter", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_gal_to_l, "3.78541", "volume_conversion"))
    
    Let result_m3_to_ft3 be Conversion.convert_volume("1", "cubic_meter", "cubic_feet", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_m3_to_ft3, "35.3147", "volume_conversion"))
    Return True

Process called "test_energy_conversions" that takes no parameters returns Boolean:
    Note: Test energy unit conversions
    Let result_j_to_cal be Conversion.convert_energy("1", "joule", "calorie", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_j_to_cal, "0.239006", "energy_conversion"))
    
    Let result_kwh_to_j be Conversion.convert_energy("1", "kilowatt_hour", "joule", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_kwh_to_j, "3600000", "energy_conversion"))
    
    Let result_btu_to_j be Conversion.convert_energy("1", "btu", "joule", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_btu_to_j, "1055.06", "energy_conversion"))
    Return True

Process called "test_power_conversions" that takes no parameters returns Boolean:
    Note: Test power unit conversions
    Let result_w_to_hp be Conversion.convert_power("1", "watt", "horsepower", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_w_to_hp, "0.00134102", "power_conversion"))
    
    Let result_hp_to_w be Conversion.convert_power("1", "horsepower", "watt", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_hp_to_w, "745.7", "power_conversion"))
    
    Let result_kw_to_hp be Conversion.convert_power("1", "kilowatt", "horsepower", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_kw_to_hp, "1.34102", "power_conversion"))
    Return True

Note: =====================================================================
Note: TIME UNIT CONVERSION TESTS
Note: =====================================================================

Process called "test_time_basic_conversions" that takes no parameters returns Boolean:
    Note: Test basic time unit conversions
    Let result_min_to_sec be Conversion.convert_time("1", "minute", "second", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_min_to_sec, "60", "time_conversion"))
    
    Let result_hr_to_min be Conversion.convert_time("1", "hour", "minute", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_hr_to_min, "60", "time_conversion"))
    
    Let result_day_to_hr be Conversion.convert_time("1", "day", "hour", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_day_to_hr, "24", "time_conversion"))
    
    Let result_week_to_day be Conversion.convert_time("1", "week", "day", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_week_to_day, "7", "time_conversion"))
    Return True

Process called "test_time_compound_conversions" that takes no parameters returns Boolean:
    Note: Test compound time unit conversions
    Let result_day_to_sec be Conversion.convert_time("1", "day", "second", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_day_to_sec, "86400", "time_conversion"))
    
    Let result_year_to_day be Conversion.convert_time("1", "year", "day", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_year_to_day, "365.25", "time_conversion"))
    
    Let result_century_to_year be Conversion.convert_time("1", "century", "year", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_century_to_year, "100", "time_conversion"))
    Return True

Process called "test_fractional_time_conversions" that takes no parameters returns Boolean:
    Note: Test fractional time conversions
    Let result_half_min be Conversion.convert_time("0.5", "minute", "second", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_half_min, "30", "time_conversion"))
    
    Let result_quarter_hr be Conversion.convert_time("0.25", "hour", "minute", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_quarter_hr, "15", "time_conversion"))
    Return True

Note: =====================================================================
Note: DATA STORAGE UNIT CONVERSION TESTS
Note: =====================================================================

Process called "test_binary_storage_conversions" that takes no parameters returns Boolean:
    Note: Test binary data storage unit conversions (powers of 2)
    Let result_kb_to_b be Conversion.convert_data_storage("1", "kilobyte_binary", "byte", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_kb_to_b, "1024", "data_storage_conversion"))
    
    Let result_mb_to_kb be Conversion.convert_data_storage("1", "megabyte_binary", "kilobyte_binary", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_mb_to_kb, "1024", "data_storage_conversion"))
    
    Let result_gb_to_mb be Conversion.convert_data_storage("1", "gigabyte_binary", "megabyte_binary", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_gb_to_mb, "1024", "data_storage_conversion"))
    
    Let result_tb_to_gb be Conversion.convert_data_storage("1", "terabyte_binary", "gigabyte_binary", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_tb_to_gb, "1024", "data_storage_conversion"))
    Return True

Process called "test_decimal_storage_conversions" that takes no parameters returns Boolean:
    Note: Test decimal data storage unit conversions (powers of 10)
    Let result_kb_to_b be Conversion.convert_data_storage("1", "kilobyte_decimal", "byte", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_kb_to_b, "1000", "data_storage_conversion"))
    
    Let result_mb_to_kb be Conversion.convert_data_storage("1", "megabyte_decimal", "kilobyte_decimal", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_mb_to_kb, "1000", "data_storage_conversion"))
    
    Let result_gb_to_mb be Conversion.convert_data_storage("1", "gigabyte_decimal", "megabyte_decimal", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_gb_to_mb, "1000", "data_storage_conversion"))
    Return True

Process called "test_bit_to_byte_conversions" that takes no parameters returns Boolean:
    Note: Test bit to byte conversions
    Let result_byte_to_bit be Conversion.convert_data_storage("1", "byte", "bit", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_byte_to_bit, "8", "data_storage_conversion"))
    
    Let result_bit_to_byte be Conversion.convert_data_storage("8", "bit", "byte", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_bit_to_byte, "1", "data_storage_conversion"))
    Return True

Note: =====================================================================
Note: NUMBER FORMAT CONVERSION TESTS
Note: =====================================================================

Process called "test_scientific_notation_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from scientific notation
    Let result_to_scientific be Conversion.to_scientific_notation("1234.567", 3, 15)
    Assert.AreEqual(result_to_scientific.scientific_value, "1.235e+3")
    
    Let result_from_scientific be Conversion.from_scientific_notation("1.235e+3", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_from_scientific, "1235", "notation_conversion"))
    
    Let result_small_scientific be Conversion.to_scientific_notation("0.001234", 3, 15)
    Assert.AreEqual(result_small_scientific.scientific_value, "1.234e-3")
    Return True

Process called "test_engineering_notation_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from engineering notation
    Let result_to_engineering be Conversion.to_engineering_notation("1234567", 3, 15)
    Assert.AreEqual(result_to_engineering.engineering_value, "1.235e+6")
    
    Let result_small_engineering be Conversion.to_engineering_notation("0.001234", 3, 15)
    Assert.AreEqual(result_small_engineering.engineering_value, "1.234e-3")
    Return True

Process called "test_percentage_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from percentage
    Let result_to_percentage be Conversion.to_percentage("0.25", 1, 15)
    Assert.AreEqual(result_to_percentage.percentage_value, "25.0%")
    
    Let result_from_percentage be Conversion.from_percentage("25%", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_from_percentage, "0.25", "percentage_conversion"))
    
    Let result_over_100 be Conversion.to_percentage("1.5", 1, 15)
    Assert.AreEqual(result_over_100.percentage_value, "150.0%")
    Return True

Process called "test_fraction_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from fractions
    Let result_to_fraction be Conversion.to_fraction("0.5", 15)
    Assert.AreEqual(result_to_fraction.numerator, "1")
    Assert.AreEqual(result_to_fraction.denominator, "2")
    
    Let result_from_fraction be Conversion.from_fraction("3", "4", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_from_fraction, "0.75", "fraction_conversion"))
    
    Let result_complex_fraction be Conversion.to_fraction("0.333333333333333", 15)
    Assert.AreEqual(result_complex_fraction.numerator, "1")
    Assert.AreEqual(result_complex_fraction.denominator, "3")
    Return True

Note: =====================================================================
Note: FREQUENCY AND WAVELENGTH CONVERSION TESTS
Note: =====================================================================

Process called "test_frequency_wavelength_conversion" that takes no parameters returns Boolean:
    Note: Test frequency to wavelength conversion
    Let result_f_to_wl be Conversion.frequency_to_wavelength("1e9", "hertz", "meter", 15)  // 1 GHz
    Assert.IsTrue(assert_conversion_result_valid(result_f_to_wl, "0.299792458", "frequency_conversion"))
    
    Let result_wl_to_f be Conversion.wavelength_to_frequency("0.299792458", "meter", "hertz", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_wl_to_f, "1000000000", "frequency_conversion"))
    Return True

Process called "test_frequency_unit_conversions" that takes no parameters returns Boolean:
    Note: Test frequency unit conversions
    Let result_hz_to_khz be Conversion.convert_frequency("1000", "hertz", "kilohertz", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_hz_to_khz, "1", "frequency_conversion"))
    
    Let result_mhz_to_hz be Conversion.convert_frequency("1", "megahertz", "hertz", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_mhz_to_hz, "1000000", "frequency_conversion"))
    
    Let result_ghz_to_mhz be Conversion.convert_frequency("1", "gigahertz", "megahertz", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_ghz_to_mhz, "1000", "frequency_conversion"))
    Return True

Note: =====================================================================
Note: ERROR HANDLING AND EDGE CASES TESTS
Note: =====================================================================

Process called "test_unsupported_unit_error" that takes no parameters returns Boolean:
    Note: Test error handling for unsupported units
    Try:
        Let result be Conversion.convert_length("1", "invalid_unit", "meter", 15)
        Assert.IsTrue(result.unsupported_unit_error OR result.error_occurred)
    Catch error:
        Return True
    
    Try:
        Let result be Conversion.convert_temperature("100", "celsius", "invalid_unit", 15)
        Assert.IsTrue(result.unsupported_unit_error OR result.error_occurred)
    Catch error:
        Return True
    
    Return True

Process called "test_invalid_input_handling" that takes no parameters returns Boolean:
    Note: Test handling of invalid numeric inputs
    Try:
        Let result be Conversion.convert_angle("not_a_number", "degrees", "radians", 15)
        Assert.IsTrue(result.error_occurred)
    Catch error:
        Return True
    
    Try:
        Let result be Conversion.convert_base("XYZ", 10, 16)
        Assert.IsTrue(result.error_occurred)
    Catch error:
        Return True
    
    Return True

Process called "test_precision_edge_cases" that takes no parameters returns Boolean:
    Note: Test precision handling in conversions
    Let result_high_precision be Conversion.convert_angle("1", "degrees", "radians", 50)
    Assert.IsTrue(Length(result_high_precision.converted_value) >= 30)
    
    Let result_low_precision be Conversion.convert_angle("1", "degrees", "radians", 5)
    Assert.IsTrue(Length(result_low_precision.converted_value) <= 10)
    Return True

Process called "test_very_large_numbers" that takes no parameters returns Boolean:
    Note: Test conversions with very large numbers
    Let result_large_temp be Conversion.convert_temperature("1000000", "celsius", "kelvin", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_large_temp, "1000273.15", "temperature_conversion"))
    
    Let result_large_angle be Conversion.convert_angle("3600", "degrees", "radians", 15)
    Let expected_20pi be ToString(20.0 * 3.141592653589793)
    Assert.IsTrue(assert_conversion_result_valid(result_large_angle, expected_20pi, "angle_conversion"))
    Return True

Process called "test_very_small_numbers" that takes no parameters returns Boolean:
    Note: Test conversions with very small numbers
    Let result_small_length be Conversion.convert_length("1e-9", "meter", "nanometer", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_small_length, "1", "length_conversion"))
    
    Let result_small_angle be Conversion.convert_angle("1e-6", "radians", "degrees", 15)
    Assert.IsTrue(assert_conversion_result_valid(result_small_angle, "0.0000572958", "angle_conversion"))
    Return True

Note: =====================================================================
Note: TEST RUNNER FUNCTIONS
Note: =====================================================================

Process called "run_all_tests" that takes no parameters returns Boolean:
    Note: Run all conversion module tests
    Let tests_passed be 0
    Let tests_failed be 0
    
    Note: Angular unit conversion tests
    Let angular_tests be [
        "test_degrees_to_radians",
        "test_radians_to_degrees",
        "test_degrees_to_gradians",
        "test_gradians_to_degrees",
        "test_turns_conversion"
    ]
    
    Note: Numerical base conversion tests
    Let base_conversion_tests be [
        "test_decimal_to_binary",
        "test_binary_to_decimal",
        "test_decimal_to_hexadecimal",
        "test_hexadecimal_to_decimal",
        "test_decimal_to_octal",
        "test_arbitrary_base_conversion",
        "test_invalid_base_error"
    ]
    
    Note: Temperature conversion tests
    Let temperature_tests be [
        "test_celsius_to_fahrenheit",
        "test_fahrenheit_to_celsius",
        "test_celsius_to_kelvin",
        "test_kelvin_to_celsius",
        "test_fahrenheit_to_kelvin",
        "test_rankine_conversions",
        "test_absolute_zero_temperatures"
    ]
    
    Note: Coordinate system conversion tests
    Let coordinate_tests be [
        "test_cartesian_to_polar",
        "test_polar_to_cartesian",
        "test_cartesian_to_spherical",
        "test_spherical_to_cartesian",
        "test_cylindrical_coordinate_conversion"
    ]
    
    Note: Unit system conversion tests
    Let unit_system_tests be [
        "test_length_conversions",
        "test_mass_conversions",
        "test_volume_conversions",
        "test_energy_conversions",
        "test_power_conversions"
    ]
    
    Note: Time unit conversion tests
    Let time_tests be [
        "test_time_basic_conversions",
        "test_time_compound_conversions",
        "test_fractional_time_conversions"
    ]
    
    Note: Data storage conversion tests
    Let data_storage_tests be [
        "test_binary_storage_conversions",
        "test_decimal_storage_conversions",
        "test_bit_to_byte_conversions"
    ]
    
    Note: Number format conversion tests
    Let format_tests be [
        "test_scientific_notation_conversion",
        "test_engineering_notation_conversion",
        "test_percentage_conversion",
        "test_fraction_conversion"
    ]
    
    Note: Frequency and wavelength tests
    Let frequency_tests be [
        "test_frequency_wavelength_conversion",
        "test_frequency_unit_conversions"
    ]
    
    Note: Error handling tests
    Let error_tests be [
        "test_unsupported_unit_error",
        "test_invalid_input_handling",
        "test_precision_edge_cases",
        "test_very_large_numbers",
        "test_very_small_numbers"
    ]
    
    Let all_test_groups be [angular_tests, base_conversion_tests, temperature_tests, coordinate_tests,
                           unit_system_tests, time_tests, data_storage_tests, format_tests, frequency_tests, error_tests]
    
    Let group_names be ["Angular Units", "Base Conversions", "Temperature", "Coordinate Systems",
                       "Unit Systems", "Time Units", "Data Storage", "Number Formats", "Frequency & Wavelength", "Error Handling"]
    
    For group_index from 0 to Length(all_test_groups) - 1:
        Let test_group be all_test_groups[group_index]
        Let group_name be group_names[group_index]
        Print "Testing " + group_name + "..."
        
        For test_name in test_group:
            Try:
                Let test_result be Call test_name()
                If test_result:
                    Set tests_passed to tests_passed + 1
                    Print "  ✓ " + test_name
                Else:
                    Set tests_failed to tests_failed + 1  
                    Print "  ✗ " + test_name + " (returned false)"
            Catch error:
                Set tests_failed to tests_failed + 1
                Print "  ✗ " + test_name + " (error: " + error.message + ")"
    
    Let total_tests be tests_passed + tests_failed
    Print ""
    Print "Conversion Module Test Results:"
    Print "==============================="
    Print "Tests passed: " + ToString(tests_passed)
    Print "Tests failed: " + ToString(tests_failed)
    Print "Total tests: " + ToString(total_tests)
    Print "Success rate: " + ToString((tests_passed * 100) / total_tests) + "%"
    
    Return tests_failed = 0