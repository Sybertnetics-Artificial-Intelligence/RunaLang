Note:
tests/unit/libraries/math/core/trigonometry_test.runa
Unit Tests for Math Core Trigonometry Module

This test suite provides comprehensive testing for the math core trigonometry module including:
- Basic trigonometric functions (sin, cos, tan, cot, sec, csc)
- Inverse trigonometric functions (asin, acos, atan, atan2)
- Hyperbolic functions (sinh, cosh, tanh, coth, sech, csch)
- Inverse hyperbolic functions (asinh, acosh, atanh)
- Angle unit conversions (radians, degrees, gradians)
- Trigonometric identities and relationships
- High-precision trigonometric calculations
- Special angle calculations (π/6, π/4, π/3, etc.)
- Periodic function properties and normalization
- Complex trigonometric functions
- Spherical and elliptic trigonometry
:End Note

Import "stdlib/math/core/trigonometry" as Trigonometry
Import "stdlib/math/core/constants" as Constants
Import "dev/debug/test_framework/assertions" as Assert
Import "dev/debug/test_framework/test_runner" as TestRunner
Import "dev/debug/test_framework/data_generators" as DataGen

Note: =====================================================================
Note: HELPER FUNCTIONS AND TEST UTILITIES
Note: =====================================================================

Process called "assert_trig_result_valid" that takes result as TrigonometricResult, expected_value as String, function_name as String returns Boolean:
    Note: Assert trigonometric result is valid and matches expected values
    Assert.AreEqual(result.function_name, function_name)
    Assert.IsTrue(is_approximately_equal(result.function_value, expected_value, 1e-14))
    Assert.IsTrue(result.precision_used > 0)
    Assert.IsFalse(result.error_occurred)
    Return True

Process called "is_approximately_equal" that takes value1 as String, value2 as String, tolerance as Float returns Boolean:
    Note: Check if two string values are approximately equal within tolerance
    Let val1 be Parse value1 as Float
    Let val2 be Parse value2 as Float
    Let difference be AbsoluteValue(val1 - val2)
    Return difference <= tolerance

Process called "degrees_to_radians" that takes degrees as Float returns Float:
    Note: Convert degrees to radians for testing
    Let pi be 3.141592653589793
    Return degrees * pi / 180.0

Process called "generate_special_angles_degrees" that takes no parameters returns List[Float]:
    Note: Generate special angle values in degrees
    Return [0.0, 30.0, 45.0, 60.0, 90.0, 120.0, 135.0, 150.0, 180.0, 270.0, 360.0]

Process called "generate_special_angles_radians" that takes no parameters returns List[Float]:
    Note: Generate special angle values in radians
    Let pi be 3.141592653589793
    Return [0.0, pi/6.0, pi/4.0, pi/3.0, pi/2.0, 2.0*pi/3.0, 3.0*pi/4.0, 5.0*pi/6.0, pi, 3.0*pi/2.0, 2.0*pi]

Process called "generate_test_angles" that takes no parameters returns List[Float]:
    Note: Generate various test angle values
    Return [0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0]

Note: =====================================================================
Note: BASIC TRIGONOMETRIC FUNCTIONS TESTS
Note: =====================================================================

Process called "test_sin_special_angles" that takes no parameters returns Boolean:
    Note: Test sine function for special angles
    Let result_0 be Trigonometry.sin("0", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "sin"))
    
    Let pi_6 be ToString(3.141592653589793 / 6.0)
    Let result_30 be Trigonometry.sin(pi_6, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_30, "0.5", "sin"))
    
    Let pi_4 be ToString(3.141592653589793 / 4.0)
    Let result_45 be Trigonometry.sin(pi_4, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_45, "0.707106781186548", "sin"))
    
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result_90 be Trigonometry.sin(pi_2, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_90, "1", "sin"))
    Return True

Process called "test_cos_special_angles" that takes no parameters returns Boolean:
    Note: Test cosine function for special angles
    Let result_0 be Trigonometry.cos("0", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "1", "cos"))
    
    Let pi_6 be ToString(3.141592653589793 / 6.0)
    Let result_30 be Trigonometry.cos(pi_6, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_30, "0.866025403784439", "cos"))
    
    Let pi_4 be ToString(3.141592653589793 / 4.0)
    Let result_45 be Trigonometry.cos(pi_4, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_45, "0.707106781186548", "cos"))
    
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result_90 be Trigonometry.cos(pi_2, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_90, "0", "cos"))
    Return True

Process called "test_tan_special_angles" that takes no parameters returns Boolean:
    Note: Test tangent function for special angles
    Let result_0 be Trigonometry.tan("0", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "tan"))
    
    Let pi_6 be ToString(3.141592653589793 / 6.0)
    Let result_30 be Trigonometry.tan(pi_6, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_30, "0.577350269189626", "tan"))
    
    Let pi_4 be ToString(3.141592653589793 / 4.0)
    Let result_45 be Trigonometry.tan(pi_4, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_45, "1", "tan"))
    Return True

Process called "test_sin_degrees_input" that takes no parameters returns Boolean:
    Note: Test sine function with degree input
    Let result_0 be Trigonometry.sin("0", "degrees", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "sin"))
    
    Let result_30 be Trigonometry.sin("30", "degrees", 15)
    Assert.IsTrue(assert_trig_result_valid(result_30, "0.5", "sin"))
    
    Let result_90 be Trigonometry.sin("90", "degrees", 15)
    Assert.IsTrue(assert_trig_result_valid(result_90, "1", "sin"))
    Return True

Process called "test_cos_degrees_input" that takes no parameters returns Boolean:
    Note: Test cosine function with degree input
    Let result_0 be Trigonometry.cos("0", "degrees", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "1", "cos"))
    
    Let result_60 be Trigonometry.cos("60", "degrees", 15)
    Assert.IsTrue(assert_trig_result_valid(result_60, "0.5", "cos"))
    
    Let result_90 be Trigonometry.cos("90", "degrees", 15)
    Assert.IsTrue(assert_trig_result_valid(result_90, "0", "cos"))
    Return True

Process called "test_tan_asymptote_detection" that takes no parameters returns Boolean:
    Note: Test tangent function asymptote detection at π/2
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result be Trigonometry.tan(pi_2, "radians", 15)
    Assert.IsTrue(result.asymptote_error OR result.error_occurred)
    Return True

Process called "test_cot_basic" that takes no parameters returns Boolean:
    Note: Test cotangent function
    Let pi_4 be ToString(3.141592653589793 / 4.0)
    Let result be Trigonometry.cot(pi_4, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result, "1", "cot"))
    Return True

Process called "test_sec_basic" that takes no parameters returns Boolean:
    Note: Test secant function
    Let result_0 be Trigonometry.sec("0", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "1", "sec"))
    
    Let pi_3 be ToString(3.141592653589793 / 3.0)
    Let result_60 be Trigonometry.sec(pi_3, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_60, "2", "sec"))
    Return True

Process called "test_csc_basic" that takes no parameters returns Boolean:
    Note: Test cosecant function
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result_90 be Trigonometry.csc(pi_2, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_90, "1", "csc"))
    
    Let pi_6 be ToString(3.141592653589793 / 6.0)
    Let result_30 be Trigonometry.csc(pi_6, "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_30, "2", "csc"))
    Return True

Note: =====================================================================
Note: INVERSE TRIGONOMETRIC FUNCTIONS TESTS
Note: =====================================================================

Process called "test_asin_basic" that takes no parameters returns Boolean:
    Note: Test inverse sine function
    Let result_0 be Trigonometry.asin("0", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "asin"))
    
    Let result_half be Trigonometry.asin("0.5", "radians", 15)
    Let expected_pi_6 be ToString(3.141592653589793 / 6.0)
    Assert.IsTrue(assert_trig_result_valid(result_half, expected_pi_6, "asin"))
    
    Let result_1 be Trigonometry.asin("1", "radians", 15)
    Let expected_pi_2 be ToString(3.141592653589793 / 2.0)
    Assert.IsTrue(assert_trig_result_valid(result_1, expected_pi_2, "asin"))
    Return True

Process called "test_acos_basic" that takes no parameters returns Boolean:
    Note: Test inverse cosine function
    Let result_1 be Trigonometry.acos("1", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "0", "acos"))
    
    Let result_half be Trigonometry.acos("0.5", "radians", 15)
    Let expected_pi_3 be ToString(3.141592653589793 / 3.0)
    Assert.IsTrue(assert_trig_result_valid(result_half, expected_pi_3, "acos"))
    
    Let result_0 be Trigonometry.acos("0", "radians", 15)
    Let expected_pi_2 be ToString(3.141592653589793 / 2.0)
    Assert.IsTrue(assert_trig_result_valid(result_0, expected_pi_2, "acos"))
    Return True

Process called "test_atan_basic" that takes no parameters returns Boolean:
    Note: Test inverse tangent function
    Let result_0 be Trigonometry.atan("0", "radians", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "atan"))
    
    Let result_1 be Trigonometry.atan("1", "radians", 15)
    Let expected_pi_4 be ToString(3.141592653589793 / 4.0)
    Assert.IsTrue(assert_trig_result_valid(result_1, expected_pi_4, "atan"))
    Return True

Process called "test_atan2_basic" that takes no parameters returns Boolean:
    Note: Test atan2 function for quadrant determination
    Let result_q1 be Trigonometry.atan2("1", "1", "radians", 15)
    Let expected_pi_4 be ToString(3.141592653589793 / 4.0)
    Assert.IsTrue(assert_trig_result_valid(result_q1, expected_pi_4, "atan2"))
    
    Let result_q2 be Trigonometry.atan2("1", "-1", "radians", 15)
    Let expected_3pi_4 be ToString(3.0 * 3.141592653589793 / 4.0)
    Assert.IsTrue(assert_trig_result_valid(result_q2, expected_3pi_4, "atan2"))
    Return True

Process called "test_inverse_trig_domain_errors" that takes no parameters returns Boolean:
    Note: Test domain errors for inverse trigonometric functions
    Try:
        Let result be Trigonometry.asin("1.5", "radians", 15)
        Assert.IsTrue(result.domain_error OR result.error_occurred)
    Catch error:
        Pass
    
    Try:
        Let result be Trigonometry.acos("-1.5", "radians", 15)
        Assert.IsTrue(result.domain_error OR result.error_occurred)
    Catch error:
        Pass
    
    Return True

Note: =====================================================================
Note: HYPERBOLIC FUNCTIONS TESTS
Note: =====================================================================

Process called "test_sinh_basic" that takes no parameters returns Boolean:
    Note: Test hyperbolic sine function
    Let result_0 be Trigonometry.sinh("0", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "sinh"))
    
    Let result_1 be Trigonometry.sinh("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "1.175201193643801", "sinh"))
    Return True

Process called "test_cosh_basic" that takes no parameters returns Boolean:
    Note: Test hyperbolic cosine function
    Let result_0 be Trigonometry.cosh("0", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "1", "cosh"))
    
    Let result_1 be Trigonometry.cosh("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "1.543080634815244", "cosh"))
    Return True

Process called "test_tanh_basic" that takes no parameters returns Boolean:
    Note: Test hyperbolic tangent function
    Let result_0 be Trigonometry.tanh("0", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "tanh"))
    
    Let result_1 be Trigonometry.tanh("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "0.761594155955765", "tanh"))
    Return True

Process called "test_coth_basic" that takes no parameters returns Boolean:
    Note: Test hyperbolic cotangent function
    Let result_1 be Trigonometry.coth("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "1.313035285499331", "coth"))
    Return True

Process called "test_sech_basic" that takes no parameters returns Boolean:
    Note: Test hyperbolic secant function
    Let result_0 be Trigonometry.sech("0", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "1", "sech"))
    
    Let result_1 be Trigonometry.sech("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "0.648054273663885", "sech"))
    Return True

Process called "test_csch_basic" that takes no parameters returns Boolean:
    Note: Test hyperbolic cosecant function
    Let result_1 be Trigonometry.csch("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "0.850918128239322", "csch"))
    Return True

Process called "test_hyperbolic_identities" that takes no parameters returns Boolean:
    Note: Test hyperbolic identities: cosh²(x) - sinh²(x) = 1
    Let x be "1.5"
    Let cosh_result be Trigonometry.cosh(x, 15)
    Let sinh_result be Trigonometry.sinh(x, 15)
    
    Let cosh_val be Parse cosh_result.function_value as Float
    Let sinh_val be Parse sinh_result.function_value as Float
    
    Let identity_result be cosh_val * cosh_val - sinh_val * sinh_val
    Assert.IsTrue(AbsoluteValue(identity_result - 1.0) < 1e-14)
    Return True

Note: =====================================================================
Note: INVERSE HYPERBOLIC FUNCTIONS TESTS
Note: =====================================================================

Process called "test_asinh_basic" that takes no parameters returns Boolean:
    Note: Test inverse hyperbolic sine function
    Let result_0 be Trigonometry.asinh("0", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "asinh"))
    
    Let result_1 be Trigonometry.asinh("1.175201193643801", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "1", "asinh"))
    Return True

Process called "test_acosh_basic" that takes no parameters returns Boolean:
    Note: Test inverse hyperbolic cosine function
    Let result_1 be Trigonometry.acosh("1", 15)
    Assert.IsTrue(assert_trig_result_valid(result_1, "0", "acosh"))
    
    Let result_cosh_1 be Trigonometry.acosh("1.543080634815244", 15)
    Assert.IsTrue(assert_trig_result_valid(result_cosh_1, "1", "acosh"))
    Return True

Process called "test_atanh_basic" that takes no parameters returns Boolean:
    Note: Test inverse hyperbolic tangent function
    Let result_0 be Trigonometry.atanh("0", 15)
    Assert.IsTrue(assert_trig_result_valid(result_0, "0", "atanh"))
    
    Let result_half be Trigonometry.atanh("0.5", 15)
    Assert.IsTrue(assert_trig_result_valid(result_half, "0.549306144334055", "atanh"))
    Return True

Process called "test_inverse_hyperbolic_domain_errors" that takes no parameters returns Boolean:
    Note: Test domain errors for inverse hyperbolic functions
    Try:
        Let result be Trigonometry.acosh("0.5", 15)
        Assert.IsTrue(result.domain_error OR result.error_occurred)
    Catch error:
        Pass
    
    Try:
        Let result be Trigonometry.atanh("1.5", 15)
        Assert.IsTrue(result.domain_error OR result.error_occurred)
    Catch error:
        Pass
    
    Return True

Note: =====================================================================
Note: ANGLE UNIT CONVERSION TESTS
Note: =====================================================================

Process called "test_degrees_to_radians_conversion" that takes no parameters returns Boolean:
    Note: Test conversion from degrees to radians
    Let result_90 be Trigonometry.convert_angle("90", "degrees", "radians", 15)
    Let expected_pi_2 be ToString(3.141592653589793 / 2.0)
    Assert.IsTrue(is_approximately_equal(result_90.converted_value, expected_pi_2, 1e-14))
    
    Let result_180 be Trigonometry.convert_angle("180", "degrees", "radians", 15)
    Let expected_pi be ToString(3.141592653589793)
    Assert.IsTrue(is_approximately_equal(result_180.converted_value, expected_pi, 1e-14))
    Return True

Process called "test_radians_to_degrees_conversion" that takes no parameters returns Boolean:
    Note: Test conversion from radians to degrees
    Let pi_2 be ToString(3.141592653589793 / 2.0)
    Let result_90 be Trigonometry.convert_angle(pi_2, "radians", "degrees", 15)
    Assert.IsTrue(is_approximately_equal(result_90.converted_value, "90", 1e-13))
    
    Let pi be ToString(3.141592653589793)
    Let result_180 be Trigonometry.convert_angle(pi, "radians", "degrees", 15)
    Assert.IsTrue(is_approximately_equal(result_180.converted_value, "180", 1e-13))
    Return True

Process called "test_gradians_conversion" that takes no parameters returns Boolean:
    Note: Test conversion to/from gradians
    Let result_100_grad be Trigonometry.convert_angle("100", "gradians", "degrees", 15)
    Assert.IsTrue(is_approximately_equal(result_100_grad.converted_value, "90", 1e-13))
    
    Let result_90_deg be Trigonometry.convert_angle("90", "degrees", "gradians", 15)
    Assert.IsTrue(is_approximately_equal(result_90_deg.converted_value, "100", 1e-13))
    Return True

Note: =====================================================================
Note: TRIGONOMETRIC IDENTITIES TESTS
Note: =====================================================================

Process called "test_pythagorean_identity" that takes no parameters returns Boolean:
    Note: Test Pythagorean identity: sin²(x) + cos²(x) = 1
    Let test_angles be ["0.5", "1.0", "1.5", "2.0"]
    For angle in test_angles:
        Let sin_result be Trigonometry.sin(angle, "radians", 15)
        Let cos_result be Trigonometry.cos(angle, "radians", 15)
        
        Let sin_val be Parse sin_result.function_value as Float
        Let cos_val be Parse cos_result.function_value as Float
        
        Let identity_result be sin_val * sin_val + cos_val * cos_val
        Assert.IsTrue(AbsoluteValue(identity_result - 1.0) < 1e-14)
    Return True

Process called "test_tangent_identity" that takes no parameters returns Boolean:
    Note: Test tangent identity: tan(x) = sin(x) / cos(x)
    Let angle be "0.7"
    Let sin_result be Trigonometry.sin(angle, "radians", 15)
    Let cos_result be Trigonometry.cos(angle, "radians", 15)
    Let tan_result be Trigonometry.tan(angle, "radians", 15)
    
    Let sin_val be Parse sin_result.function_value as Float
    Let cos_val be Parse cos_result.function_value as Float
    Let tan_val be Parse tan_result.function_value as Float
    Let computed_tan be sin_val / cos_val
    
    Assert.IsTrue(AbsoluteValue(tan_val - computed_tan) < 1e-14)
    Return True

Process called "test_reciprocal_identities" that takes no parameters returns Boolean:
    Note: Test reciprocal identities: sec(x) = 1/cos(x), csc(x) = 1/sin(x)
    Let angle be "0.8"
    Let cos_result be Trigonometry.cos(angle, "radians", 15)
    Let sin_result be Trigonometry.sin(angle, "radians", 15)
    Let sec_result be Trigonometry.sec(angle, "radians", 15)
    Let csc_result be Trigonometry.csc(angle, "radians", 15)
    
    Let cos_val be Parse cos_result.function_value as Float
    Let sin_val be Parse sin_result.function_value as Float
    Let sec_val be Parse sec_result.function_value as Float
    Let csc_val be Parse csc_result.function_value as Float
    
    Assert.IsTrue(AbsoluteValue(sec_val - (1.0 / cos_val)) < 1e-14)
    Assert.IsTrue(AbsoluteValue(csc_val - (1.0 / sin_val)) < 1e-14)
    Return True

Process called "test_angle_sum_formulas" that takes no parameters returns Boolean:
    Note: Test angle sum formulas: sin(a+b) = sin(a)cos(b) + cos(a)sin(b)
    Let a be "0.5"
    Let b be "0.7"
    Let sum_ab be ToString(Parse a as Float + Parse b as Float)
    
    Let sin_sum be Trigonometry.sin(sum_ab, "radians", 15)
    Let sin_a be Trigonometry.sin(a, "radians", 15)
    Let cos_a be Trigonometry.cos(a, "radians", 15)
    Let sin_b be Trigonometry.sin(b, "radians", 15)
    Let cos_b be Trigonometry.cos(b, "radians", 15)
    
    Let sin_sum_val be Parse sin_sum.function_value as Float
    Let computed_sum be Parse sin_a.function_value as Float * Parse cos_b.function_value as Float + 
                       Parse cos_a.function_value as Float * Parse sin_b.function_value as Float
    
    Assert.IsTrue(AbsoluteValue(sin_sum_val - computed_sum) < 1e-14)
    Return True

Note: =====================================================================
Note: PERIODIC PROPERTIES TESTS
Note: =====================================================================

Process called "test_sin_periodicity" that takes no parameters returns Boolean:
    Note: Test sine periodicity: sin(x + 2π) = sin(x)
    Let angle be "0.5"
    Let two_pi be ToString(2.0 * 3.141592653589793)
    Let angle_plus_2pi be ToString(Parse angle as Float + Parse two_pi as Float)
    
    Let sin_x be Trigonometry.sin(angle, "radians", 15)
    Let sin_x_plus_2pi be Trigonometry.sin(angle_plus_2pi, "radians", 15)
    
    Assert.IsTrue(is_approximately_equal(sin_x.function_value, sin_x_plus_2pi.function_value, 1e-14))
    Return True

Process called "test_cos_periodicity" that takes no parameters returns Boolean:
    Note: Test cosine periodicity: cos(x + 2π) = cos(x)
    Let angle be "1.2"
    Let two_pi be ToString(2.0 * 3.141592653589793)
    Let angle_plus_2pi be ToString(Parse angle as Float + Parse two_pi as Float)
    
    Let cos_x be Trigonometry.cos(angle, "radians", 15)
    Let cos_x_plus_2pi be Trigonometry.cos(angle_plus_2pi, "radians", 15)
    
    Assert.IsTrue(is_approximately_equal(cos_x.function_value, cos_x_plus_2pi.function_value, 1e-14))
    Return True

Process called "test_tan_periodicity" that takes no parameters returns Boolean:
    Note: Test tangent periodicity: tan(x + π) = tan(x)
    Let angle be "0.8"
    Let pi be ToString(3.141592653589793)
    Let angle_plus_pi be ToString(Parse angle as Float + Parse pi as Float)
    
    Let tan_x be Trigonometry.tan(angle, "radians", 15)
    Let tan_x_plus_pi be Trigonometry.tan(angle_plus_pi, "radians", 15)
    
    Assert.IsTrue(is_approximately_equal(tan_x.function_value, tan_x_plus_pi.function_value, 1e-14))
    Return True

Note: =====================================================================
Note: HIGH PRECISION AND PERFORMANCE TESTS
Note: =====================================================================

Process called "test_high_precision_calculations" that takes no parameters returns Boolean:
    Note: Test trigonometric calculations with high precision
    Let pi_4 be Constants.get_pi(30)
    Let pi_4_divided = ToString(Parse pi_4 as Float / 4.0)
    
    Let high_precision_sin be Trigonometry.sin(pi_4_divided, "radians", 25)
    Assert.IsTrue(Length(high_precision_sin.function_value) >= 25)
    Assert.IsTrue(high_precision_sin.precision_used >= 25)
    Return True

Process called "test_quadrant_detection" that takes no parameters returns Boolean:
    Note: Test quadrant detection for trigonometric functions
    Let q1_angle be "0.5"
    Let q2_angle be "2.0"
    Let q3_angle be "4.0"
    Let q4_angle be "5.5"
    
    Let q1_result be Trigonometry.sin(q1_angle, "radians", 15)
    Let q2_result be Trigonometry.sin(q2_angle, "radians", 15)
    Let q3_result be Trigonometry.sin(q3_angle, "radians", 15)
    Let q4_result be Trigonometry.sin(q4_angle, "radians", 15)
    
    Assert.AreEqual(q1_result.quadrant, 1)
    Assert.AreEqual(q2_result.quadrant, 2)
    Assert.AreEqual(q3_result.quadrant, 3)
    Assert.AreEqual(q4_result.quadrant, 4)
    Return True

Process called "test_series_convergence" that takes no parameters returns Boolean:
    Note: Test series convergence for trigonometric calculations
    Let small_angle be "0.001"
    Let result be Trigonometry.sin(small_angle, "radians", 20)
    Assert.IsFalse(result.series_convergence_failed)
    Assert.IsTrue(is_approximately_equal(result.function_value, small_angle, 1e-18))
    Return True

Note: =====================================================================
Note: ERROR HANDLING AND EDGE CASES TESTS
Note: =====================================================================

Process called "test_invalid_unit_handling" that takes no parameters returns Boolean:
    Note: Test handling of invalid angle units
    Try:
        Let result be Trigonometry.sin("1.0", "invalid_unit", 15)
        Assert.IsTrue(result.error_occurred)
    Catch error:
        Return True
    Return True

Process called "test_very_large_angles" that takes no parameters returns Boolean:
    Note: Test handling of very large angles
    Let large_angle be "1000000"
    Let result be Trigonometry.sin(large_angle, "radians", 15)
    Assert.IsFalse(result.error_occurred)
    Let sin_val be Parse result.function_value as Float
    Assert.IsTrue(AbsoluteValue(sin_val) <= 1.0)
    Return True

Process called "test_very_small_angles" that takes no parameters returns Boolean:
    Note: Test handling of very small angles
    Let small_angle be "1e-15"
    Let result be Trigonometry.sin(small_angle, "radians", 15)
    Assert.IsFalse(result.error_occurred)
    Assert.IsTrue(is_approximately_equal(result.function_value, small_angle, 1e-16))
    Return True

Process called "test_precision_insufficient_handling" that takes no parameters returns Boolean:
    Note: Test handling when precision is insufficient
    Try:
        Let result be Trigonometry.sin("1.0", "radians", -1)
        Assert.IsTrue(result.precision_insufficient OR result.error_occurred)
    Catch error:
        Return True
    Return True

Note: =====================================================================
Note: TEST RUNNER FUNCTIONS
Note: =====================================================================

Process called "run_all_tests" that takes no parameters returns Boolean:
    Note: Run all trigonometry module tests
    Let tests_passed be 0
    Let tests_failed be 0
    
    Note: Basic trigonometric function tests
    Let basic_trig_tests be [
        "test_sin_special_angles",
        "test_cos_special_angles", 
        "test_tan_special_angles",
        "test_sin_degrees_input",
        "test_cos_degrees_input",
        "test_tan_asymptote_detection",
        "test_cot_basic",
        "test_sec_basic",
        "test_csc_basic"
    ]
    
    Note: Inverse trigonometric function tests
    Let inverse_trig_tests be [
        "test_asin_basic",
        "test_acos_basic",
        "test_atan_basic",
        "test_atan2_basic",
        "test_inverse_trig_domain_errors"
    ]
    
    Note: Hyperbolic function tests
    Let hyperbolic_tests be [
        "test_sinh_basic",
        "test_cosh_basic",
        "test_tanh_basic",
        "test_coth_basic",
        "test_sech_basic",
        "test_csch_basic",
        "test_hyperbolic_identities"
    ]
    
    Note: Inverse hyperbolic function tests
    Let inverse_hyperbolic_tests be [
        "test_asinh_basic",
        "test_acosh_basic", 
        "test_atanh_basic",
        "test_inverse_hyperbolic_domain_errors"
    ]
    
    Note: Angle unit conversion tests
    Let conversion_tests be [
        "test_degrees_to_radians_conversion",
        "test_radians_to_degrees_conversion",
        "test_gradians_conversion"
    ]
    
    Note: Trigonometric identity tests
    Let identity_tests be [
        "test_pythagorean_identity",
        "test_tangent_identity",
        "test_reciprocal_identities",
        "test_angle_sum_formulas"
    ]
    
    Note: Periodic property tests
    Let periodic_tests be [
        "test_sin_periodicity",
        "test_cos_periodicity",
        "test_tan_periodicity"
    ]
    
    Note: High precision and performance tests
    Let precision_tests be [
        "test_high_precision_calculations",
        "test_quadrant_detection",
        "test_series_convergence"
    ]
    
    Note: Error handling tests
    Let error_tests be [
        "test_invalid_unit_handling",
        "test_very_large_angles",
        "test_very_small_angles",
        "test_precision_insufficient_handling"
    ]
    
    Let all_test_groups be [basic_trig_tests, inverse_trig_tests, hyperbolic_tests, inverse_hyperbolic_tests,
                           conversion_tests, identity_tests, periodic_tests, precision_tests, error_tests]
    
    Let group_names be ["Basic Trigonometric", "Inverse Trigonometric", "Hyperbolic Functions", "Inverse Hyperbolic",
                       "Unit Conversions", "Trigonometric Identities", "Periodic Properties", "Precision & Performance", "Error Handling"]
    
    For group_index from 0 to Length(all_test_groups) - 1:
        Let test_group be all_test_groups[group_index]
        Let group_name be group_names[group_index]
        Print "Testing " + group_name + "..."
        
        For test_name in test_group:
            Try:
                Let test_result be Call test_name()
                If test_result:
                    Set tests_passed to tests_passed + 1
                    Print "  ✓ " + test_name
                Else:
                    Set tests_failed to tests_failed + 1  
                    Print "  ✗ " + test_name + " (returned false)"
            Catch error:
                Set tests_failed to tests_failed + 1
                Print "  ✗ " + test_name + " (error: " + error.message + ")"
    
    Let total_tests be tests_passed + tests_failed
    Print ""
    Print "Trigonometry Module Test Results:"
    Print "=================================="
    Print "Tests passed: " + ToString(tests_passed)
    Print "Tests failed: " + ToString(tests_failed)
    Print "Total tests: " + ToString(total_tests)
    Print "Success rate: " + ToString((tests_passed * 100) / total_tests) + "%"
    
    Return tests_failed = 0