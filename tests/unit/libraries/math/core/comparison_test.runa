Note:
tests/unit/libraries/math/core/comparison_test.runa
Unit Tests for Math Core Comparison Module

This test suite provides comprehensive testing for the math core comparison module including:
- Basic comparison operations (min, max, equal, less than, greater than)
- Multi-value comparison operations (minimum/maximum of arrays)
- Ordering and ranking operations with custom comparators
- Numerical tolerance-based comparisons for floating point values
- Sign detection and classification operations
- Floor, ceiling, and rounding operations with multiple modes
- Clamping and range constraint operations
- Statistical order operations (median, percentiles, quantiles)
- Lexicographic and custom ordering comparisons
- Interval and range comparison operations
- Fuzzy comparison operations with uncertainty bounds
- Comparison result aggregation and statistics
- Performance-optimized bulk comparison operations
- Stability-aware comparison for numerical algorithms
- Multi-criteria decision analysis comparisons
:End Note

Import "stdlib/math/core/comparison" as Comparison
Import "dev/debug/test_framework/assertions" as Assert
Import "dev/debug/test_framework/test_runner" as TestRunner
Import "dev/debug/test_framework/data_generators" as DataGen

Note: =====================================================================
Note: HELPER FUNCTIONS AND TEST UTILITIES
Note: =====================================================================

Process called "assert_comparison_result_valid" that takes result as ComparisonResult, expected_result as Boolean, comparison_type as String returns Boolean:
    Note: Assert comparison result is valid and matches expected values
    Assert.AreEqual(result.comparison_type, comparison_type)
    Assert.AreEqual(result.result, expected_result)
    Assert.IsFalse(result.error_occurred)
    Return True

Process called "generate_test_numbers" that takes no parameters returns List[String]:
    Note: Generate various test numbers for comparison operations
    Return ["0", "1", "-1", "2.5", "-3.7", "10", "100", "0.001", "-0.001", "1234.5678", "42", "-42"]

Process called "generate_sorted_numbers" that takes no parameters returns List[String]:
    Note: Generate a sorted list of numbers for ordering tests
    Return ["-100", "-10", "-1", "0", "0.5", "1", "2.5", "10", "42", "100"]

Process called "generate_unsorted_numbers" that takes no parameters returns List[String]:
    Note: Generate an unsorted list of numbers for sorting tests
    Return ["42", "-10", "100", "0", "2.5", "-1", "10", "0.5", "-100", "1"]

Process called "is_approximately_equal" that takes value1 as String, value2 as String, tolerance as Float returns Boolean:
    Note: Check if two string values are approximately equal within tolerance
    Let val1 be Parse value1 as Float
    Let val2 be Parse value2 as Float
    Let difference be AbsoluteValue(val1 - val2)
    Return difference <= tolerance

Note: =====================================================================
Note: BASIC COMPARISON OPERATIONS TESTS
Note: =====================================================================

Process called "test_min_two_values" that takes no parameters returns Boolean:
    Note: Test minimum of two values
    Let result1 be Comparison.min("5.0", "3.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "min"))
    Assert.AreEqual(result1.minimum_value, "3.0")
    
    Let result2 be Comparison.min("-5.0", "3.0", 10)
    Assert.AreEqual(result2.minimum_value, "-5.0")
    
    Let result3 be Comparison.min("5.0", "5.0", 10)
    Assert.AreEqual(result3.minimum_value, "5.0")
    Return True

Process called "test_max_two_values" that takes no parameters returns Boolean:
    Note: Test maximum of two values
    Let result1 be Comparison.max("5.0", "3.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "max"))
    Assert.AreEqual(result1.maximum_value, "5.0")
    
    Let result2 be Comparison.max("-5.0", "3.0", 10)
    Assert.AreEqual(result2.maximum_value, "3.0")
    
    Let result3 be Comparison.max("5.0", "5.0", 10)
    Assert.AreEqual(result3.maximum_value, "5.0")
    Return True

Process called "test_equal_comparison" that takes no parameters returns Boolean:
    Note: Test equality comparison
    Let result1 be Comparison.equal("5.0", "5.0", 1e-15, 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "equal"))
    
    Let result2 be Comparison.equal("5.0", "3.0", 1e-15, 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "equal"))
    
    Let result3 be Comparison.equal("5.0", "5.0000000000001", 1e-12, 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, True, "equal"))
    Return True

Process called "test_less_than_comparison" that takes no parameters returns Boolean:
    Note: Test less than comparison
    Let result1 be Comparison.less_than("3.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "less_than"))
    
    Let result2 be Comparison.less_than("5.0", "3.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "less_than"))
    
    Let result3 be Comparison.less_than("5.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "less_than"))
    Return True

Process called "test_greater_than_comparison" that takes no parameters returns Boolean:
    Note: Test greater than comparison
    Let result1 be Comparison.greater_than("5.0", "3.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "greater_than"))
    
    Let result2 be Comparison.greater_than("3.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "greater_than"))
    
    Let result3 be Comparison.greater_than("5.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "greater_than"))
    Return True

Process called "test_less_than_or_equal" that takes no parameters returns Boolean:
    Note: Test less than or equal comparison
    Let result1 be Comparison.less_than_or_equal("3.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "less_than_or_equal"))
    
    Let result2 be Comparison.less_than_or_equal("5.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, True, "less_than_or_equal"))
    
    Let result3 be Comparison.less_than_or_equal("5.0", "3.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "less_than_or_equal"))
    Return True

Process called "test_greater_than_or_equal" that takes no parameters returns Boolean:
    Note: Test greater than or equal comparison
    Let result1 be Comparison.greater_than_or_equal("5.0", "3.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "greater_than_or_equal"))
    
    Let result2 be Comparison.greater_than_or_equal("5.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, True, "greater_than_or_equal"))
    
    Let result3 be Comparison.greater_than_or_equal("3.0", "5.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "greater_than_or_equal"))
    Return True

Note: =====================================================================
Note: MULTI-VALUE COMPARISON TESTS
Note: =====================================================================

Process called "test_min_array" that takes no parameters returns Boolean:
    Note: Test minimum of array of values
    Let test_values be ["10", "3", "7", "1", "9", "2"]
    Let result be Comparison.min_array(test_values)
    Assert.AreEqual(result.minimum_value, "1")
    Assert.AreEqual(result.minimum_index, 3)
    Return True

Process called "test_max_array" that takes no parameters returns Boolean:
    Note: Test maximum of array of values
    Let test_values be ["10", "3", "7", "15", "9", "2"]
    Let result be Comparison.max_array(test_values)
    Assert.AreEqual(result.maximum_value, "15")
    Assert.AreEqual(result.maximum_index, 3)
    Return True

Process called "test_min_max_array" that takes no parameters returns Boolean:
    Note: Test simultaneous min and max of array
    Let test_values be ["10", "3", "7", "1", "15", "2"]
    Let result be Comparison.min_max_array(test_values)
    Assert.AreEqual(result.minimum_value, "1")
    Assert.AreEqual(result.maximum_value, "15")
    Assert.AreEqual(result.range, "14")
    Return True

Process called "test_nth_smallest" that takes no parameters returns Boolean:
    Note: Test finding nth smallest value
    Let test_values be ["10", "3", "7", "1", "9", "2", "15"]
    Let result_1st be Comparison.nth_smallest(test_values, 1)
    Assert.AreEqual(result_1st.selected_value, "1")
    
    Let result_3rd be Comparison.nth_smallest(test_values, 3)
    Assert.AreEqual(result_3rd.selected_value, "3")
    Return True

Process called "test_nth_largest" that takes no parameters returns Boolean:
    Note: Test finding nth largest value
    Let test_values be ["10", "3", "7", "1", "9", "2", "15"]
    Let result_1st be Comparison.nth_largest(test_values, 1)
    Assert.AreEqual(result_1st.selected_value, "15")
    
    Let result_3rd be Comparison.nth_largest(test_values, 3)
    Assert.AreEqual(result_3rd.selected_value, "9")
    Return True

Process called "test_empty_array_error" that takes no parameters returns Boolean:
    Note: Test error handling for empty arrays
    Let empty_values be Empty List[String]
    Try:
        Let result be Comparison.min_array(empty_values)
        Assert.IsTrue(result.empty_array_error OR result.error_occurred)
    Catch error:
        Return True
    Return True

Note: =====================================================================
Note: ORDERING AND RANKING TESTS
Note: =====================================================================

Process called "test_sort_ascending" that takes no parameters returns Boolean:
    Note: Test ascending sort
    Let unsorted_values be generate_unsorted_numbers()
    Let result be Comparison.sort_ascending(unsorted_values)
    
    For index from 0 to Length(result.sorted_values) - 2:
        Let current be Parse result.sorted_values[index] as Float
        Let next be Parse result.sorted_values[index + 1] as Float
        Assert.IsTrue(current <= next)
    Return True

Process called "test_sort_descending" that takes no parameters returns Boolean:
    Note: Test descending sort
    Let unsorted_values be generate_unsorted_numbers()
    Let result be Comparison.sort_descending(unsorted_values)
    
    For index from 0 to Length(result.sorted_values) - 2:
        Let current be Parse result.sorted_values[index] as Float
        Let next be Parse result.sorted_values[index + 1] as Float
        Assert.IsTrue(current >= next)
    Return True

Process called "test_rank_values" that takes no parameters returns Boolean:
    Note: Test ranking of values
    Let test_values be ["10", "3", "7", "1", "9"]
    Let result be Comparison.rank_values(test_values, "ascending")
    
    Assert.AreEqual(result.ranks[0], 4)  // 10 is 4th smallest
    Assert.AreEqual(result.ranks[1], 2)  // 3 is 2nd smallest  
    Assert.AreEqual(result.ranks[2], 3)  // 7 is 3rd smallest
    Assert.AreEqual(result.ranks[3], 1)  // 1 is 1st smallest
    Assert.AreEqual(result.ranks[4], 5)  // 9 is 5th smallest
    Return True

Process called "test_sort_stability" that takes no parameters returns Boolean:
    Note: Test sort stability for equal values
    Let values_with_duplicates be ["5", "3", "5", "1", "3"]
    Let result be Comparison.stable_sort_ascending(values_with_duplicates)
    
    Assert.AreEqual(result.sorted_values[0], "1")
    Assert.AreEqual(result.sorted_values[1], "3")
    Assert.AreEqual(result.sorted_values[2], "3")
    Assert.AreEqual(result.sorted_values[3], "5")
    Assert.AreEqual(result.sorted_values[4], "5")
    
    Assert.AreEqual(result.original_indices[0], 3)  // Original index of first "1"
    Assert.AreEqual(result.original_indices[1], 1)  // Original index of first "3"
    Assert.AreEqual(result.original_indices[2], 4)  // Original index of second "3"
    Return True

Note: =====================================================================
Note: TOLERANCE-BASED COMPARISON TESTS
Note: =====================================================================

Process called "test_fuzzy_equal" that takes no parameters returns Boolean:
    Note: Test fuzzy equality comparison
    Let result1 be Comparison.fuzzy_equal("1.0000001", "1.0", 1e-6, 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "fuzzy_equal"))
    
    Let result2 be Comparison.fuzzy_equal("1.001", "1.0", 1e-6, 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "fuzzy_equal"))
    Return True

Process called "test_relative_comparison" that takes no parameters returns Boolean:
    Note: Test relative tolerance comparison
    Let result1 be Comparison.relative_equal("1000.1", "1000.0", 1e-3, 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "relative_equal"))
    
    Let result2 be Comparison.relative_equal("1.1", "1.0", 1e-3, 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "relative_equal"))
    Return True

Process called "test_ulp_comparison" that takes no parameters returns Boolean:
    Note: Test ULP (Unit in Last Place) comparison
    Let result be Comparison.ulp_equal("1.0", "1.0000000000000002", 2, 16)
    Assert.IsTrue(assert_comparison_result_valid(result, True, "ulp_equal"))
    Return True

Process called "test_interval_comparison" that takes no parameters returns Boolean:
    Note: Test interval-based comparison
    Let result1 be Comparison.within_interval("5.0", "3.0", "7.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "within_interval"))
    
    Let result2 be Comparison.within_interval("2.0", "3.0", "7.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "within_interval"))
    
    Let result3 be Comparison.within_interval("8.0", "3.0", "7.0", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "within_interval"))
    Return True

Note: =====================================================================
Note: SIGN DETECTION AND CLASSIFICATION TESTS
Note: =====================================================================

Process called "test_sign_classification" that takes no parameters returns Boolean:
    Note: Test sign classification of numbers
    Let positive_result be Comparison.classify_sign("42.5")
    Assert.AreEqual(positive_result.sign_class, "positive")
    Assert.AreEqual(positive_result.sign_value, 1)
    
    Let negative_result be Comparison.classify_sign("-42.5")
    Assert.AreEqual(negative_result.sign_class, "negative") 
    Assert.AreEqual(negative_result.sign_value, -1)
    
    Let zero_result be Comparison.classify_sign("0")
    Assert.AreEqual(zero_result.sign_class, "zero")
    Assert.AreEqual(zero_result.sign_value, 0)
    Return True

Process called "test_same_sign_check" that takes no parameters returns Boolean:
    Note: Test checking if numbers have same sign
    Let result1 be Comparison.same_sign("5.0", "3.2", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "same_sign"))
    
    Let result2 be Comparison.same_sign("-5.0", "-3.2", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, True, "same_sign"))
    
    Let result3 be Comparison.same_sign("5.0", "-3.2", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "same_sign"))
    Return True

Process called "test_opposite_sign_check" that takes no parameters returns Boolean:
    Note: Test checking if numbers have opposite signs
    Let result1 be Comparison.opposite_signs("5.0", "-3.2", 10)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "opposite_signs"))
    
    Let result2 be Comparison.opposite_signs("5.0", "3.2", 10)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "opposite_signs"))
    
    Let result3 be Comparison.opposite_signs("-5.0", "-3.2", 10)
    Assert.IsTrue(assert_comparison_result_valid(result3, False, "opposite_signs"))
    Return True

Note: =====================================================================
Note: ROUNDING OPERATIONS TESTS
Note: =====================================================================

Process called "test_floor_operation" that takes no parameters returns Boolean:
    Note: Test floor operation
    Let result1 be Comparison.floor("5.7")
    Assert.AreEqual(result1.rounded_value, "5")
    
    Let result2 be Comparison.floor("-5.7")
    Assert.AreEqual(result2.rounded_value, "-6")
    
    Let result3 be Comparison.floor("5.0")
    Assert.AreEqual(result3.rounded_value, "5")
    Return True

Process called "test_ceiling_operation" that takes no parameters returns Boolean:
    Note: Test ceiling operation
    Let result1 be Comparison.ceiling("5.3")
    Assert.AreEqual(result1.rounded_value, "6")
    
    Let result2 be Comparison.ceiling("-5.3")
    Assert.AreEqual(result2.rounded_value, "-5")
    
    Let result3 be Comparison.ceiling("5.0")
    Assert.AreEqual(result3.rounded_value, "5")
    Return True

Process called "test_round_to_nearest" that takes no parameters returns Boolean:
    Note: Test round to nearest integer
    Let result1 be Comparison.round_to_nearest("5.4")
    Assert.AreEqual(result1.rounded_value, "5")
    
    Let result2 be Comparison.round_to_nearest("5.6")
    Assert.AreEqual(result2.rounded_value, "6")
    
    Let result3 be Comparison.round_to_nearest("5.5")
    Assert.AreEqual(result3.rounded_value, "6")  // Round half up
    Return True

Process called "test_round_to_even" that takes no parameters returns Boolean:
    Note: Test banker's rounding (round to even)
    Let result1 be Comparison.round_to_even("2.5")
    Assert.AreEqual(result1.rounded_value, "2")  // Round to even
    
    Let result2 be Comparison.round_to_even("3.5")
    Assert.AreEqual(result2.rounded_value, "4")  // Round to even
    
    Let result3 be Comparison.round_to_even("2.3")
    Assert.AreEqual(result3.rounded_value, "2")  // Normal rounding
    Return True

Process called "test_round_to_decimal_places" that takes no parameters returns Boolean:
    Note: Test rounding to specified decimal places
    Let result1 be Comparison.round_to_places("3.14159", 2)
    Assert.AreEqual(result1.rounded_value, "3.14")
    
    Let result2 be Comparison.round_to_places("3.14159", 4)
    Assert.AreEqual(result2.rounded_value, "3.1416")
    Return True

Note: =====================================================================
Note: CLAMPING AND RANGE CONSTRAINT TESTS
Note: =====================================================================

Process called "test_clamp_basic" that takes no parameters returns Boolean:
    Note: Test basic clamping operation
    Let result1 be Comparison.clamp("5.0", "2.0", "8.0")
    Assert.AreEqual(result1.clamped_value, "5.0")  // Within range
    
    Let result2 be Comparison.clamp("1.0", "2.0", "8.0")
    Assert.AreEqual(result2.clamped_value, "2.0")  // Below minimum
    
    Let result3 be Comparison.clamp("10.0", "2.0", "8.0")
    Assert.AreEqual(result3.clamped_value, "8.0")  // Above maximum
    Return True

Process called "test_clamp_invalid_range" that takes no parameters returns Boolean:
    Note: Test clamping with invalid range
    Try:
        Let result be Comparison.clamp("5.0", "8.0", "2.0")  // min > max
        Assert.IsTrue(result.invalid_range_error OR result.error_occurred)
    Catch error:
        Return True
    Return True

Process called "test_normalize_to_range" that takes no parameters returns Boolean:
    Note: Test normalizing value to different range
    Let result1 be Comparison.normalize_to_range("5.0", "0.0", "10.0", "0.0", "1.0")
    Assert.IsTrue(is_approximately_equal(result1.normalized_value, "0.5", 1e-14))
    
    Let result2 be Comparison.normalize_to_range("2.0", "0.0", "10.0", "100.0", "200.0")
    Assert.IsTrue(is_approximately_equal(result2.normalized_value, "120.0", 1e-13))
    Return True

Process called "test_wrap_to_range" that takes no parameters returns Boolean:
    Note: Test wrapping value to range (circular constraint)
    Let result1 be Comparison.wrap_to_range("15.0", "0.0", "10.0")
    Assert.IsTrue(is_approximately_equal(result1.wrapped_value, "5.0", 1e-14))
    
    Let result2 be Comparison.wrap_to_range("-2.0", "0.0", "10.0")
    Assert.IsTrue(is_approximately_equal(result2.wrapped_value, "8.0", 1e-14))
    Return True

Note: =====================================================================
Note: STATISTICAL ORDER OPERATIONS TESTS
Note: =====================================================================

Process called "test_median_odd_count" that takes no parameters returns Boolean:
    Note: Test median calculation for odd number of values
    Let test_values be ["1", "3", "2", "5", "4"]
    Let result be Comparison.median(test_values)
    Assert.AreEqual(result.median_value, "3")
    Return True

Process called "test_median_even_count" that takes no parameters returns Boolean:
    Note: Test median calculation for even number of values
    Let test_values be ["1", "4", "2", "3"]
    Let result be Comparison.median(test_values)
    Assert.IsTrue(is_approximately_equal(result.median_value, "2.5", 1e-14))
    Return True

Process called "test_percentile_calculation" that takes no parameters returns Boolean:
    Note: Test percentile calculation
    Let test_values be ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
    Let result_25 be Comparison.percentile(test_values, 25)
    Assert.IsTrue(is_approximately_equal(result_25.percentile_value, "3.25", 1e-13))
    
    Let result_75 be Comparison.percentile(test_values, 75)
    Assert.IsTrue(is_approximately_equal(result_75.percentile_value, "7.75", 1e-13))
    Return True

Process called "test_quartiles" that takes no parameters returns Boolean:
    Note: Test quartile calculations
    Let test_values be ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
    Let result be Comparison.quartiles(test_values)
    
    Assert.IsTrue(is_approximately_equal(result.q1, "3.25", 1e-13))
    Assert.IsTrue(is_approximately_equal(result.q2, "5.5", 1e-13))  // median
    Assert.IsTrue(is_approximately_equal(result.q3, "7.75", 1e-13))
    Assert.IsTrue(is_approximately_equal(result.iqr, "4.5", 1e-13))   // Q3 - Q1
    Return True

Process called "test_quantiles" that takes no parameters returns Boolean:
    Note: Test arbitrary quantile calculation
    Let test_values be ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
    Let result be Comparison.quantile(test_values, 0.9)
    Assert.IsTrue(is_approximately_equal(result.quantile_value, "9.1", 1e-13))
    Return True

Note: =====================================================================
Note: PERFORMANCE AND BULK OPERATIONS TESTS
Note: =====================================================================

Process called "test_bulk_comparison_performance" that takes no parameters returns Boolean:
    Note: Test performance of bulk comparison operations
    Let large_dataset be DataGen.generate_numeric_sequence(1000)
    Let start_time be GetCurrentTime()
    Let result be Comparison.min_max_array(large_dataset)
    Let end_time be GetCurrentTime()
    Let computation_time be end_time - start_time
    
    Assert.IsTrue(computation_time < 1000)  // Should complete in under 1 second
    Assert.IsNotEmpty(result.minimum_value)
    Assert.IsNotEmpty(result.maximum_value)
    Return True

Process called "test_parallel_sorting" that takes no parameters returns Boolean:
    Note: Test parallel sorting for large datasets
    Let large_dataset be DataGen.generate_random_numbers(5000)
    Let result be Comparison.parallel_sort_ascending(large_dataset)
    
    For index from 0 to Length(result.sorted_values) - 2:
        Let current be Parse result.sorted_values[index] as Float
        Let next be Parse result.sorted_values[index + 1] as Float
        Assert.IsTrue(current <= next)
    Return True

Process called "test_streaming_comparison" that takes no parameters returns Boolean:
    Note: Test streaming min/max for memory efficiency
    Let streaming_comparator be Comparison.create_streaming_comparator()
    Let test_values be ["5", "2", "8", "1", "9", "3"]
    
    For value in test_values:
        Call Comparison.update_streaming_comparator(streaming_comparator, value)
    
    Let result be Comparison.get_streaming_result(streaming_comparator)
    Assert.AreEqual(result.minimum_value, "1")
    Assert.AreEqual(result.maximum_value, "9")
    Return True

Note: =====================================================================
Note: ERROR HANDLING AND EDGE CASES TESTS
Note: =====================================================================

Process called "test_invalid_input_handling" that takes no parameters returns Boolean:
    Note: Test handling of invalid inputs
    Try:
        Let result be Comparison.min("not_a_number", "5.0", 10)
        Assert.IsTrue(result.error_occurred)
    Catch error:
        Return True
    Return True

Process called "test_precision_edge_cases" that takes no parameters returns Boolean:
    Note: Test precision-related edge cases
    Let result1 be Comparison.equal("0.1", "0.10000000000000001", 1e-16, 18)
    Assert.IsTrue(assert_comparison_result_valid(result1, True, "equal"))
    
    Let result2 be Comparison.equal("1e-100", "1.1e-100", 1e-101, 102)
    Assert.IsTrue(assert_comparison_result_valid(result2, False, "equal"))
    Return True

Process called "test_infinity_handling" that takes no parameters returns Boolean:
    Note: Test handling of infinity values
    Let result1 be Comparison.min("Infinity", "5.0", 10)
    Assert.AreEqual(result1.minimum_value, "5.0")
    
    Let result2 be Comparison.max("-Infinity", "5.0", 10)
    Assert.AreEqual(result2.maximum_value, "5.0")
    Return True

Process called "test_nan_handling" that takes no parameters returns Boolean:
    Note: Test handling of NaN values
    Try:
        Let result be Comparison.min("NaN", "5.0", 10)
        Assert.IsTrue(result.error_occurred OR result.invalid_range_error)
    Catch error:
        Return True
    Return True

Note: =====================================================================
Note: TEST RUNNER FUNCTIONS
Note: =====================================================================

Process called "run_all_tests" that takes no parameters returns Boolean:
    Note: Run all comparison module tests
    Let tests_passed be 0
    Let tests_failed be 0
    
    Note: Basic comparison operation tests
    Let basic_comparison_tests be [
        "test_min_two_values",
        "test_max_two_values",
        "test_equal_comparison",
        "test_less_than_comparison", 
        "test_greater_than_comparison",
        "test_less_than_or_equal",
        "test_greater_than_or_equal"
    ]
    
    Note: Multi-value comparison tests
    Let multi_value_tests be [
        "test_min_array",
        "test_max_array",
        "test_min_max_array",
        "test_nth_smallest",
        "test_nth_largest",
        "test_empty_array_error"
    ]
    
    Note: Ordering and ranking tests
    Let ordering_tests be [
        "test_sort_ascending",
        "test_sort_descending",
        "test_rank_values",
        "test_sort_stability"
    ]
    
    Note: Tolerance-based comparison tests
    Let tolerance_tests be [
        "test_fuzzy_equal",
        "test_relative_comparison",
        "test_ulp_comparison",
        "test_interval_comparison"
    ]
    
    Note: Sign detection tests
    Let sign_tests be [
        "test_sign_classification",
        "test_same_sign_check",
        "test_opposite_sign_check"
    ]
    
    Note: Rounding operation tests
    Let rounding_tests be [
        "test_floor_operation",
        "test_ceiling_operation",
        "test_round_to_nearest",
        "test_round_to_even",
        "test_round_to_decimal_places"
    ]
    
    Note: Clamping and range tests
    Let clamping_tests be [
        "test_clamp_basic",
        "test_clamp_invalid_range",
        "test_normalize_to_range",
        "test_wrap_to_range"
    ]
    
    Note: Statistical order tests
    Let statistical_tests be [
        "test_median_odd_count",
        "test_median_even_count",
        "test_percentile_calculation",
        "test_quartiles",
        "test_quantiles"
    ]
    
    Note: Performance and bulk operation tests
    Let performance_tests be [
        "test_bulk_comparison_performance",
        "test_parallel_sorting",
        "test_streaming_comparison"
    ]
    
    Note: Error handling tests
    Let error_tests be [
        "test_invalid_input_handling",
        "test_precision_edge_cases",
        "test_infinity_handling",
        "test_nan_handling"
    ]
    
    Let all_test_groups be [basic_comparison_tests, multi_value_tests, ordering_tests, tolerance_tests,
                           sign_tests, rounding_tests, clamping_tests, statistical_tests, performance_tests, error_tests]
    
    Let group_names be ["Basic Comparisons", "Multi-Value Operations", "Ordering & Ranking", "Tolerance-Based",
                       "Sign Detection", "Rounding Operations", "Clamping & Range", "Statistical Order", "Performance & Bulk", "Error Handling"]
    
    For group_index from 0 to Length(all_test_groups) - 1:
        Let test_group be all_test_groups[group_index]
        Let group_name be group_names[group_index]
        Print "Testing " + group_name + "..."
        
        For test_name in test_group:
            Try:
                Let test_result be Call test_name()
                If test_result:
                    Set tests_passed to tests_passed + 1
                    Print "  ✓ " + test_name
                Else:
                    Set tests_failed to tests_failed + 1  
                    Print "  ✗ " + test_name + " (returned false)"
            Catch error:
                Set tests_failed to tests_failed + 1
                Print "  ✗ " + test_name + " (error: " + error.message + ")"
    
    Let total_tests be tests_passed + tests_failed
    Print ""
    Print "Comparison Module Test Results:"
    Print "==============================="
    Print "Tests passed: " + ToString(tests_passed)
    Print "Tests failed: " + ToString(tests_failed)
    Print "Total tests: " + ToString(total_tests)
    Print "Success rate: " + ToString((tests_passed * 100) / total_tests) + "%"
    
    Return tests_failed = 0