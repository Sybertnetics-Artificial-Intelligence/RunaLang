Note:
tests/unit/libraries/math/engine/linalg/linalg_test_runner.runa
Comprehensive Test Runner for Linear Algebra Engine Module

This test runner coordinates all linear algebra engine tests across 6 major modules:
- Core Linear Algebra Operations (41 tests)
- Matrix Decompositions (34 tests) 
- Computational Geometry (37 tests)
- Linear System Solvers (45 tests)
- Sparse Matrix Operations (47 tests)
- Tensor Operations (73 tests)

Total: 277 comprehensive tests covering all linear algebra functionality
:End Note

Import "dev/test" as UnitTest
Import "tests/unit/libraries/math/engine/linalg/core_test" as CoreTest
Import "tests/unit/libraries/math/engine/linalg/decomposition_test" as DecompositionTest
Import "tests/unit/libraries/math/engine/linalg/geometry_test" as GeometryTest
Import "tests/unit/libraries/math/engine/linalg/solvers_test" as SolversTest
Import "tests/unit/libraries/math/engine/linalg/sparse_test" as SparseTest
Import "tests/unit/libraries/math/engine/linalg/tensor_test" as TensorTest
Import "collections" as Collections
Import "datetime" as DateTime

Note: =====================================================================
Note: TEST SUITE COORDINATION
Note: =====================================================================

Process called "run_all_linalg_engine_tests":
    Note: Run comprehensive test suite for all linear algebra engine modules
    Let start_time be DateTime.get_current_timestamp()
    
    UnitTest.start_test_suite("Linear Algebra Engine Comprehensive Test Suite")
    UnitTest.log_info("Starting comprehensive linear algebra engine testing...")
    UnitTest.log_info("Total modules: 6, Total tests: 277")
    
    Note: Module 1: Core Linear Algebra Operations
    UnitTest.start_test_group("Core Linear Algebra Operations (41 tests)")
    Let core_start_time be DateTime.get_current_timestamp()
    CoreTest.run_all_core_tests()
    Let core_end_time be DateTime.get_current_timestamp()
    Let core_duration be DateTime.calculate_duration(core_start_time, core_end_time)
    UnitTest.log_info("Core tests completed in " ++ core_duration.to_string() ++ " seconds")
    
    Note: Module 2: Matrix Decomposition Operations
    UnitTest.start_test_group("Matrix Decomposition Operations (34 tests)")
    Let decomp_start_time be DateTime.get_current_timestamp()
    DecompositionTest.run_all_decomposition_tests()
    Let decomp_end_time be DateTime.get_current_timestamp()
    Let decomp_duration be DateTime.calculate_duration(decomp_start_time, decomp_end_time)
    UnitTest.log_info("Decomposition tests completed in " ++ decomp_duration.to_string() ++ " seconds")
    
    Note: Module 3: Computational Geometry Operations
    UnitTest.start_test_group("Computational Geometry Operations (37 tests)")
    Let geom_start_time be DateTime.get_current_timestamp()
    GeometryTest.run_all_geometry_tests()
    Let geom_end_time be DateTime.get_current_timestamp()
    Let geom_duration be DateTime.calculate_duration(geom_start_time, geom_end_time)
    UnitTest.log_info("Geometry tests completed in " ++ geom_duration.to_string() ++ " seconds")
    
    Note: Module 4: Linear System Solvers
    UnitTest.start_test_group("Linear System Solvers (45 tests)")
    Let solvers_start_time be DateTime.get_current_timestamp()
    SolversTest.run_all_solvers_tests()
    Let solvers_end_time be DateTime.get_current_timestamp()
    Let solvers_duration be DateTime.calculate_duration(solvers_start_time, solvers_end_time)
    UnitTest.log_info("Solvers tests completed in " ++ solvers_duration.to_string() ++ " seconds")
    
    Note: Module 5: Sparse Matrix Operations
    UnitTest.start_test_group("Sparse Matrix Operations (47 tests)")
    Let sparse_start_time be DateTime.get_current_timestamp()
    SparseTest.run_all_sparse_tests()
    Let sparse_end_time be DateTime.get_current_timestamp()
    Let sparse_duration be DateTime.calculate_duration(sparse_start_time, sparse_end_time)
    UnitTest.log_info("Sparse tests completed in " ++ sparse_duration.to_string() ++ " seconds")
    
    Note: Module 6: Tensor Operations
    UnitTest.start_test_group("Tensor Operations (73 tests)")
    Let tensor_start_time be DateTime.get_current_timestamp()
    TensorTest.run_all_tensor_tests()
    Let tensor_end_time be DateTime.get_current_timestamp()
    Let tensor_duration be DateTime.calculate_duration(tensor_start_time, tensor_end_time)
    UnitTest.log_info("Tensor tests completed in " ++ tensor_duration.to_string() ++ " seconds")
    
    Let end_time be DateTime.get_current_timestamp()
    Let total_duration be DateTime.calculate_duration(start_time, end_time)
    
    UnitTest.log_info("=== LINEAR ALGEBRA ENGINE TEST SUMMARY ===")
    UnitTest.log_info("Core Operations: " ++ core_duration.to_string() ++ "s")
    UnitTest.log_info("Decompositions: " ++ decomp_duration.to_string() ++ "s")
    UnitTest.log_info("Geometry: " ++ geom_duration.to_string() ++ "s")
    UnitTest.log_info("Solvers: " ++ solvers_duration.to_string() ++ "s")
    UnitTest.log_info("Sparse: " ++ sparse_duration.to_string() ++ "s")
    UnitTest.log_info("Tensors: " ++ tensor_duration.to_string() ++ "s")
    UnitTest.log_info("Total Duration: " ++ total_duration.to_string() ++ " seconds")
    
    UnitTest.end_test_suite("Linear Algebra Engine Tests completed - 277 total tests in " ++ total_duration.to_string() ++ " seconds")

Process called "run_quick_linalg_engine_tests":
    Note: Run essential linear algebra engine tests for continuous integration
    Let start_time be DateTime.get_current_timestamp()
    
    UnitTest.start_test_suite("Quick Linear Algebra Engine Tests")
    UnitTest.log_info("Running essential tests from all 6 modules for CI/CD pipeline")
    
    Note: Core essential tests (5 tests)
    UnitTest.start_test_group("Core Essentials")
    CoreTest.run_quick_core_tests()
    
    Note: Decomposition essential tests (4 tests)
    UnitTest.start_test_group("Decomposition Essentials")
    DecompositionTest.run_quick_decomposition_tests()
    
    Note: Geometry essential tests (4 tests)
    UnitTest.start_test_group("Geometry Essentials")
    GeometryTest.run_quick_geometry_tests()
    
    Note: Solvers essential tests (8 tests)
    UnitTest.start_test_group("Solvers Essentials")
    SolversTest.run_quick_solvers_tests()
    
    Note: Sparse essential tests (6 tests)
    UnitTest.start_test_group("Sparse Essentials")
    SparseTest.run_quick_sparse_tests()
    
    Note: Tensor essential tests (8 tests)
    UnitTest.start_test_group("Tensor Essentials")
    TensorTest.run_quick_tensor_tests()
    
    Let end_time be DateTime.get_current_timestamp()
    Let duration be DateTime.calculate_duration(start_time, end_time)
    
    UnitTest.end_test_suite("Quick Linear Algebra Engine Tests completed - 35 essential tests in " ++ duration.to_string() ++ " seconds")

Process called "run_performance_linalg_engine_tests":
    Note: Run performance-focused tests for scalability validation
    Let start_time be DateTime.get_current_timestamp()
    
    UnitTest.start_test_suite("Performance Linear Algebra Engine Tests")
    UnitTest.log_info("Running performance and scalability tests")
    
    Note: Performance-critical operations
    UnitTest.start_test_group("Matrix Operations Performance")
    CoreTest.run_performance_core_tests()
    
    UnitTest.start_test_group("Large Matrix Decompositions")
    DecompositionTest.run_performance_decomposition_tests()
    
    UnitTest.start_test_group("Large-Scale Geometry")
    GeometryTest.run_performance_geometry_tests()
    
    UnitTest.start_test_group("High-Performance Solvers")
    SolversTest.run_performance_solvers_tests()
    
    UnitTest.start_test_group("Large Sparse Operations")
    SparseTest.run_performance_sparse_tests()
    
    UnitTest.start_test_group("High-Dimensional Tensors")
    TensorTest.run_performance_tensor_tests()
    
    Let end_time be DateTime.get_current_timestamp()
    Let duration be DateTime.calculate_duration(start_time, end_time)
    
    UnitTest.end_test_suite("Performance Linear Algebra Engine Tests completed in " ++ duration.to_string() ++ " seconds")

Process called "run_linalg_tests_by_category":
    Note: Run tests organized by mathematical category
    Let categories be List[String]
    Let categories be categories.append("basic_operations")
    Let categories be categories.append("factorizations")
    Let categories be categories.append("eigenvalue_problems")
    Let categories be categories.append("linear_systems")
    Let categories be categories.append("sparse_computations")
    Let categories be categories.append("tensor_algebra")
    
    UnitTest.start_test_suite("Linear Algebra Tests by Mathematical Category")
    
    For category in categories:
        UnitTest.start_test_group("Category: " ++ category)
        
        If category == "basic_operations":
            UnitTest.log_info("Running basic linear algebra operations")
            CoreTest.run_matrix_creation_tests()
            CoreTest.run_vector_operations_tests()
            CoreTest.run_matrix_operations_tests()
            
        Otherwise If category == "factorizations":
            UnitTest.log_info("Running matrix factorization algorithms")
            DecompositionTest.run_lu_decomposition_tests()
            DecompositionTest.run_qr_decomposition_tests()
            DecompositionTest.run_svd_tests()
            DecompositionTest.run_cholesky_tests()
            
        Otherwise If category == "eigenvalue_problems":
            UnitTest.log_info("Running eigenvalue and eigenvector computations")
            DecompositionTest.run_eigenvalue_tests()
            SparseTest.run_eigenvalue_tests()
            
        Otherwise If category == "linear_systems":
            UnitTest.log_info("Running linear system solvers")
            SolversTest.run_direct_solver_tests()
            SolversTest.run_iterative_solver_tests()
            SolversTest.run_least_squares_tests()
            
        Otherwise If category == "sparse_computations":
            UnitTest.log_info("Running sparse matrix computations")
            SparseTest.run_matrix_creation_tests()
            SparseTest.run_basic_operations_tests()
            SparseTest.run_solver_tests()
            
        Otherwise If category == "tensor_algebra":
            UnitTest.log_info("Running tensor algebra operations")
            TensorTest.run_tensor_creation_tests()
            TensorTest.run_basic_operations_tests()
            TensorTest.run_decomposition_tests()
    
    UnitTest.end_test_suite("Linear Algebra Tests by Category completed")

Process called "run_linalg_specific_module_tests" that takes module_name as String:
    Note: Run tests for a specific linear algebra module
    UnitTest.start_test_suite("Linear Algebra Module: " ++ module_name)
    
    If module_name == "core":
        UnitTest.log_info("Running core linear algebra tests")
        CoreTest.run_all_core_tests()
        
    Otherwise If module_name == "decomposition":
        UnitTest.log_info("Running matrix decomposition tests")
        DecompositionTest.run_all_decomposition_tests()
        
    Otherwise If module_name == "geometry":
        UnitTest.log_info("Running computational geometry tests")
        GeometryTest.run_all_geometry_tests()
        
    Otherwise If module_name == "solvers":
        UnitTest.log_info("Running linear system solver tests")
        SolversTest.run_all_solvers_tests()
        
    Otherwise If module_name == "sparse":
        UnitTest.log_info("Running sparse matrix tests")
        SparseTest.run_all_sparse_tests()
        
    Otherwise If module_name == "tensor":
        UnitTest.log_info("Running tensor operation tests")
        TensorTest.run_all_tensor_tests()
        
    Otherwise:
        UnitTest.log_error("Unknown module: " ++ module_name)
        UnitTest.log_error("Available modules: core, decomposition, geometry, solvers, sparse, tensor")
    
    UnitTest.end_test_suite("Module " ++ module_name ++ " tests completed")

Note: =====================================================================
Note: CI/CD INTEGRATION FUNCTIONS
Note: =====================================================================

Process called "run_ci_linalg_tests":
    Note: Optimized test runner for continuous integration pipelines
    Let start_time be DateTime.get_current_timestamp()
    
    UnitTest.start_test_suite("CI Linear Algebra Engine Tests")
    UnitTest.log_info("Running CI-optimized linear algebra tests")
    
    Note: Stage 1: Smoke tests (30 seconds max)
    UnitTest.start_test_group("Smoke Tests")
    UnitTest.run_test("CoreTest.test_create_matrix")
    UnitTest.run_test("DecompositionTest.test_lu_decomposition")
    UnitTest.run_test("GeometryTest.test_compute_convex_hull_2d")
    UnitTest.run_test("SolversTest.test_solve_lu")
    UnitTest.run_test("SparseTest.test_create_sparse_matrix")
    UnitTest.run_test("TensorTest.test_create_tensor")
    
    Note: Stage 2: Core functionality (60 seconds max)
    UnitTest.start_test_group("Core Functionality")
    run_quick_linalg_engine_tests()
    
    Note: Stage 3: Integration tests (90 seconds max)
    UnitTest.start_test_group("Integration Tests")
    UnitTest.run_test("CoreTest.test_solve_linear_system")
    UnitTest.run_test("DecompositionTest.test_singular_value_decomposition")
    UnitTest.run_test("SolversTest.test_conjugate_gradient")
    UnitTest.run_test("SparseTest.test_sparse_matrix_multiply")
    UnitTest.run_test("TensorTest.test_cp_decomposition")
    
    Let end_time be DateTime.get_current_timestamp()
    Let duration be DateTime.calculate_duration(start_time, end_time)
    
    UnitTest.log_info("CI tests completed in " ++ duration.to_string() ++ " seconds")
    UnitTest.end_test_suite("CI Linear Algebra Engine Tests")

Process called "run_nightly_linalg_tests":
    Note: Extended test suite for nightly builds with comprehensive coverage
    Let start_time be DateTime.get_current_timestamp()
    
    UnitTest.start_test_suite("Nightly Linear Algebra Engine Tests")
    UnitTest.log_info("Running comprehensive nightly testing suite")
    
    Note: Full test suite
    run_all_linalg_engine_tests()
    
    Note: Performance benchmarks
    UnitTest.start_test_group("Performance Benchmarks")
    run_performance_linalg_engine_tests()
    
    Note: Stress tests
    UnitTest.start_test_group("Stress Tests")
    UnitTest.log_info("Running stress tests with large datasets")
    
    Note: Edge case testing
    UnitTest.start_test_group("Edge Cases")
    UnitTest.log_info("Testing boundary conditions and edge cases")
    
    Let end_time be DateTime.get_current_timestamp()
    Let duration be DateTime.calculate_duration(start_time, end_time)
    
    UnitTest.log_info("Nightly tests completed in " ++ duration.to_string() ++ " seconds")
    UnitTest.end_test_suite("Nightly Linear Algebra Engine Tests")

Note: =====================================================================
Note: TEST STATISTICS AND REPORTING
Note: =====================================================================

Process called "get_linalg_test_statistics" returns Dictionary[String, Integer]:
    Note: Return comprehensive test count statistics
    Let stats be Dictionary[String, Integer]
    
    Let stats be stats.set("core_tests", CoreTest.get_core_test_count())
    Let stats be stats.set("decomposition_tests", DecompositionTest.get_decomposition_test_count())
    Let stats be stats.set("geometry_tests", GeometryTest.get_geometry_test_count())
    Let stats be stats.set("solvers_tests", SolversTest.get_solvers_test_count())
    Let stats be stats.set("sparse_tests", SparseTest.get_sparse_test_count())
    Let stats be stats.set("tensor_tests", TensorTest.get_tensor_test_count())
    
    Let total_tests be 0
    Let total_tests be total_tests + CoreTest.get_core_test_count()
    Let total_tests be total_tests + DecompositionTest.get_decomposition_test_count()
    Let total_tests be total_tests + GeometryTest.get_geometry_test_count()
    Let total_tests be total_tests + SolversTest.get_solvers_test_count()
    Let total_tests be total_tests + SparseTest.get_sparse_test_count()
    Let total_tests be total_tests + TensorTest.get_tensor_test_count()
    
    Let stats be stats.set("total_tests", total_tests)
    Let stats be stats.set("total_modules", 6)
    
    Return stats

Process called "generate_linalg_test_report":
    Note: Generate comprehensive test report with statistics
    Let stats be get_linalg_test_statistics()
    
    UnitTest.log_info("=== LINEAR ALGEBRA ENGINE TEST REPORT ===")
    UnitTest.log_info("Module Coverage:")
    UnitTest.log_info("  Core Operations: " ++ Collections.get_from_dictionary(stats, "core_tests").to_string() ++ " tests")
    UnitTest.log_info("  Matrix Decompositions: " ++ Collections.get_from_dictionary(stats, "decomposition_tests").to_string() ++ " tests")
    UnitTest.log_info("  Computational Geometry: " ++ Collections.get_from_dictionary(stats, "geometry_tests").to_string() ++ " tests")
    UnitTest.log_info("  Linear System Solvers: " ++ Collections.get_from_dictionary(stats, "solvers_tests").to_string() ++ " tests")
    UnitTest.log_info("  Sparse Matrix Operations: " ++ Collections.get_from_dictionary(stats, "sparse_tests").to_string() ++ " tests")
    UnitTest.log_info("  Tensor Operations: " ++ Collections.get_from_dictionary(stats, "tensor_tests").to_string() ++ " tests")
    UnitTest.log_info("")
    UnitTest.log_info("Summary:")
    UnitTest.log_info("  Total Modules: " ++ Collections.get_from_dictionary(stats, "total_modules").to_string())
    UnitTest.log_info("  Total Tests: " ++ Collections.get_from_dictionary(stats, "total_tests").to_string())
    UnitTest.log_info("")
    UnitTest.log_info("Test Categories:")
    UnitTest.log_info("  - Matrix creation and manipulation")
    UnitTest.log_info("  - Vector operations and norms")
    UnitTest.log_info("  - Matrix factorizations (LU, QR, SVD, Cholesky, Schur)")
    UnitTest.log_info("  - Eigenvalue and singular value computations")
    UnitTest.log_info("  - Computational geometry algorithms")
    UnitTest.log_info("  - Direct and iterative linear system solvers")
    UnitTest.log_info("  - Sparse matrix formats and operations")
    UnitTest.log_info("  - Tensor algebra and decompositions")
    UnitTest.log_info("  - Performance optimization and parallelization")
    UnitTest.log_info("========================================")

Note: =====================================================================
Note: UTILITY FUNCTIONS
Note: =====================================================================

Process called "validate_linalg_test_environment":
    Note: Validate test environment and dependencies
    UnitTest.log_info("Validating linear algebra test environment...")
    
    Note: Check module imports
    UnitTest.log_info("Checking module imports...")
    UnitTest.assert_not_null(CoreTest, "Core test module should be available")
    UnitTest.assert_not_null(DecompositionTest, "Decomposition test module should be available")
    UnitTest.assert_not_null(GeometryTest, "Geometry test module should be available")
    UnitTest.assert_not_null(SolversTest, "Solvers test module should be available")
    UnitTest.assert_not_null(SparseTest, "Sparse test module should be available")
    UnitTest.assert_not_null(TensorTest, "Tensor test module should be available")
    
    Note: Check test counts
    Let stats be get_linalg_test_statistics()
    Let total_tests be Collections.get_from_dictionary(stats, "total_tests")
    UnitTest.assert_true(total_tests > 250, "Should have comprehensive test coverage")
    UnitTest.assert_equal(Collections.get_from_dictionary(stats, "total_modules"), 6, "Should cover all 6 modules")
    
    UnitTest.log_info("Environment validation completed successfully")

Process called "benchmark_linalg_test_performance":
    Note: Benchmark test execution performance
    Let start_time be DateTime.get_current_timestamp()
    
    UnitTest.log_info("Benchmarking linear algebra test performance...")
    
    Note: Benchmark each module
    Let core_start be DateTime.get_current_timestamp()
    CoreTest.run_quick_core_tests()
    Let core_end be DateTime.get_current_timestamp()
    Let core_time be DateTime.calculate_duration(core_start, core_end)
    
    Let decomp_start be DateTime.get_current_timestamp()
    DecompositionTest.run_quick_decomposition_tests()
    Let decomp_end be DateTime.get_current_timestamp()
    Let decomp_time be DateTime.calculate_duration(decomp_start, decomp_end)
    
    Let end_time be DateTime.get_current_timestamp()
    Let total_time be DateTime.calculate_duration(start_time, end_time)
    
    UnitTest.log_info("Performance Benchmark Results:")
    UnitTest.log_info("  Core tests: " ++ core_time.to_string() ++ "s")
    UnitTest.log_info("  Decomposition tests: " ++ decomp_time.to_string() ++ "s")
    UnitTest.log_info("  Total benchmark time: " ++ total_time.to_string() ++ "s")

Note: =====================================================================
Note: MAIN EXECUTION FUNCTIONS
Note: =====================================================================

Process called "main":
    Note: Main entry point for linear algebra engine testing
    UnitTest.log_info("Linear Algebra Engine Test Runner")
    UnitTest.log_info("Available test suites:")
    UnitTest.log_info("  - run_all_linalg_engine_tests() - Full comprehensive suite")
    UnitTest.log_info("  - run_quick_linalg_engine_tests() - Essential tests for CI")
    UnitTest.log_info("  - run_ci_linalg_tests() - Optimized for CI/CD")
    UnitTest.log_info("  - run_nightly_linalg_tests() - Extended nightly suite")
    UnitTest.log_info("  - run_linalg_specific_module_tests(module_name) - Single module")
    UnitTest.log_info("")
    
    validate_linalg_test_environment()
    generate_linalg_test_report()

Process called "get_total_linalg_test_count" returns Integer:
    Note: Return total number of linear algebra engine tests
    Let stats be get_linalg_test_statistics()
    Return Collections.get_from_dictionary(stats, "total_tests")