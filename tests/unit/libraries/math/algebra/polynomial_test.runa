Note: Comprehensive unit tests for math/algebra/polynomial.runa module
Note: Tests cover polynomial arithmetic, factorization, root finding, multivariate polynomials, and Gr√∂bner bases

Import "../../../../../../src/stdlib/math/algebra/polynomial" as PolynomialAlgebra
Import "../../../../../../src/stdlib/testing/framework" as Test

Note: Helper functions for creating test polynomials

Process called "create_test_linear_polynomial":
    Note: Creates f(x) = 2x + 3
    Let coefficients be ["3", "2"]
    Return PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")

Process called "create_test_quadratic_polynomial":
    Note: Creates f(x) = x^2 - 5x + 6 = (x-2)(x-3)
    Let coefficients be ["6", "-5", "1"]
    Return PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")

Process called "create_test_cubic_polynomial":
    Note: Creates f(x) = x^3 - 6x^2 + 11x - 6 = (x-1)(x-2)(x-3)
    Let coefficients be ["-6", "11", "-6", "1"]
    Return PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")

Process called "create_test_monic_polynomial":
    Note: Creates monic polynomial f(x) = x^2 + 1
    Let coefficients be ["1", "0", "1"]
    Return PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")

Process called "create_test_constant_polynomial":
    Note: Creates constant polynomial f(x) = 5
    Let coefficients be ["5"]
    Return PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")

Process called "create_test_multivariate_polynomial":
    Note: Creates f(x,y) = x^2 + xy + y^2
    Let monomials be Dictionary[List[Integer], String]
    monomials[[2, 0]] = "1"  Note: x^2 term
    monomials[[1, 1]] = "1"  Note: xy term
    monomials[[0, 2]] = "1"  Note: y^2 term
    
    Let variables be ["x", "y"]
    Return PolynomialAlgebra.create_multivariate_polynomial(monomials, variables, "Real")

Process called "create_test_bivariate_linear":
    Note: Creates f(x,y) = 2x + 3y - 1
    Let monomials be Dictionary[List[Integer], String]
    monomials[[0, 0]] = "-1"  Note: constant term
    monomials[[1, 0]] = "2"   Note: 2x term
    monomials[[0, 1]] = "3"   Note: 3y term
    
    Let variables be ["x", "y"]
    Return PolynomialAlgebra.create_multivariate_polynomial(monomials, variables, "Real")

Process called "create_test_cyclotomic_polynomial":
    Note: Creates 8th cyclotomic polynomial
    Return PolynomialAlgebra.generate_cyclotomic_polynomial(8)

Process called "assert_polynomial_valid" that takes poly as Polynomial, expected_degree as Integer:
    Note: Assert basic polynomial properties
    Test.assert_not_null(poly, "Polynomial should be created successfully")
    Test.assert_equal(poly.degree, expected_degree, "Polynomial should have expected degree")
    Test.assert_not_null(poly.coefficients, "Polynomial should have coefficients")
    Test.assert_equal(poly.coefficients.length, expected_degree + 1, "Should have correct number of coefficients")

Process called "assert_multivariate_polynomial_valid" that takes poly as MultivariatePolynomial, expected_vars as Integer:
    Note: Assert basic multivariate polynomial properties
    Test.assert_not_null(poly, "Multivariate polynomial should be created successfully")
    Test.assert_equal(poly.variables.length, expected_vars, "Should have expected number of variables")
    Test.assert_not_null(poly.monomials, "Should have monomial representation")

Process called "assert_numerical_close" that takes actual as String, expected as String, tolerance as String, message as String:
    Note: Assert numerical values are close within tolerance
    Let actual_num be PolynomialAlgebra.parse_number(actual)
    Let expected_num be PolynomialAlgebra.parse_number(expected)
    Let tolerance_num be PolynomialAlgebra.parse_number(tolerance)
    
    Let difference be PolynomialAlgebra.subtract_numbers(actual_num, expected_num)
    Let abs_diff be PolynomialAlgebra.absolute_value(difference)
    
    Test.assert_true(PolynomialAlgebra.less_than(abs_diff, tolerance_num), message)

Note: Basic Polynomial Operations Tests

Process called "test_create_polynomial":
    Note: Test polynomial creation
    Let poly be create_test_quadratic_polynomial()
    assert_polynomial_valid(poly, 2)

Process called "test_polynomial_addition":
    Note: Test polynomial addition
    Let poly1 be create_test_linear_polynomial()
    Let poly2 be create_test_quadratic_polynomial()
    
    Let sum be PolynomialAlgebra.add_polynomials(poly1, poly2)
    
    assert_polynomial_valid(sum, 2)
    Test.assert_equal(sum.coefficients[0], "9", "Constant term should be 9")
    Test.assert_equal(sum.coefficients[1], "-3", "Linear term should be -3")

Process called "test_polynomial_multiplication":
    Note: Test polynomial multiplication
    Let poly1 be create_test_linear_polynomial()  Note: 2x + 3
    Let poly2 be create_test_linear_polynomial()  Note: 2x + 3
    
    Let product be PolynomialAlgebra.multiply_polynomials(poly1, poly2)
    
    assert_polynomial_valid(product, 2)
    Test.assert_equal(product.coefficients[0], "9", "Constant term should be 9")
    Test.assert_equal(product.coefficients[1], "12", "Linear term should be 12") 
    Test.assert_equal(product.coefficients[2], "4", "Quadratic term should be 4")

Process called "test_polynomial_division":
    Note: Test polynomial division
    Let dividend be create_test_cubic_polynomial()  Note: x^3 - 6x^2 + 11x - 6
    Let divisor be create_test_linear_polynomial()   Note: 2x + 3
    
    Let division_result be PolynomialAlgebra.divide_polynomials(dividend, divisor)
    
    Test.assert_not_null(division_result, "Division result should exist")
    Test.assert_contains_key(division_result, "quotient", "Should have quotient")
    Test.assert_contains_key(division_result, "remainder", "Should have remainder")

Process called "test_polynomial_evaluation":
    Note: Test polynomial evaluation
    Let poly be create_test_quadratic_polynomial()  Note: x^2 - 5x + 6
    Let value be "2"
    
    Let result be PolynomialAlgebra.evaluate_polynomial(poly, value)
    
    Test.assert_equal(result, "0", "f(2) should be 0 since 2 is a root")

Process called "test_polynomial_derivative":
    Note: Test polynomial differentiation
    Let poly be create_test_cubic_polynomial()  Note: x^3 - 6x^2 + 11x - 6
    Let derivative be PolynomialAlgebra.compute_derivative(poly)
    
    assert_polynomial_valid(derivative, 2)
    Test.assert_equal(derivative.coefficients[0], "11", "Constant term should be 11")
    Test.assert_equal(derivative.coefficients[1], "-12", "Linear term should be -12")
    Test.assert_equal(derivative.coefficients[2], "3", "Quadratic term should be 3")

Process called "test_polynomial_integral":
    Note: Test polynomial integration
    Let poly be create_test_quadratic_polynomial()  Note: x^2 - 5x + 6
    Let integral be PolynomialAlgebra.compute_integral(poly)
    
    assert_polynomial_valid(integral, 3)
    Test.assert_equal(integral.coefficients[0], "0", "Constant of integration should be 0")
    Test.assert_equal(integral.coefficients[1], "6", "Linear term should be 6")

Note: Polynomial Factorization Tests

Process called "test_factor_polynomial":
    Note: Test polynomial factorization
    Let poly be create_test_quadratic_polynomial()  Note: x^2 - 5x + 6 = (x-2)(x-3)
    Let factorization be PolynomialAlgebra.factor_polynomial(poly, "Real")
    
    Test.assert_not_null(factorization, "Factorization should exist")
    Test.assert_not_empty(factorization.irreducible_factors, "Should have irreducible factors")
    Test.assert_equal(factorization.irreducible_factors.length, 2, "Should have 2 linear factors")

Process called "test_square_free_factorization":
    Note: Test square-free factorization
    Let coefficients be ["0", "0", "1", "0", "1"]  Note: x^4 + x^2 = x^2(x^2 + 1)
    Let poly be PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")
    
    Let sq_free be PolynomialAlgebra.square_free_factorization(poly)
    
    Test.assert_not_null(sq_free, "Square-free factorization should exist")
    Test.assert_not_empty(sq_free.square_free_factors, "Should have square-free factors")

Process called "test_irreducibility_testing":
    Note: Test irreducibility testing
    Let irreducible_poly be create_test_monic_polynomial()  Note: x^2 + 1 over reals
    Let reducible_poly be create_test_quadratic_polynomial()  Note: x^2 - 5x + 6
    
    Let is_irreducible1 be PolynomialAlgebra.test_irreducibility(irreducible_poly, "Real")
    Let is_irreducible2 be PolynomialAlgebra.test_irreducibility(reducible_poly, "Real")
    
    Test.assert_true(is_irreducible1, "x^2 + 1 should be irreducible over reals")
    Test.assert_false(is_irreducible2, "x^2 - 5x + 6 should be reducible")

Process called "test_factor_over_finite_field":
    Note: Test factorization over finite fields
    Let poly be create_test_quadratic_polynomial()
    Let factorization be PolynomialAlgebra.factor_over_finite_field(poly, 7, 1)
    
    Test.assert_not_null(factorization, "Should factor over F_7")

Process called "test_factor_over_rationals":
    Note: Test factorization over rationals
    Let poly be create_test_quadratic_polynomial()
    Let factorization be PolynomialAlgebra.factor_over_rationals(poly)
    
    Test.assert_not_null(factorization, "Should factor over rationals")
    Test.assert_not_empty(factorization.irreducible_factors, "Should have rational factors")

Note: Root Finding Tests

Process called "test_find_polynomial_roots":
    Note: Test general root finding
    Let poly be create_test_quadratic_polynomial()  Note: (x-2)(x-3)
    Let roots be PolynomialAlgebra.find_polynomial_roots(poly, "Real")
    
    Test.assert_not_empty(roots, "Should find roots")
    Test.assert_equal(roots.length, 2, "Should find 2 roots")
    Test.assert_contains(roots, "2", "Should find root x = 2")
    Test.assert_contains(roots, "3", "Should find root x = 3")

Process called "test_find_rational_roots":
    Note: Test rational root theorem
    Let poly be create_test_cubic_polynomial()  Note: (x-1)(x-2)(x-3)
    Let rational_roots be PolynomialAlgebra.find_rational_roots(poly)
    
    Test.assert_not_empty(rational_roots, "Should find rational roots")
    Test.assert_contains(rational_roots, "1", "Should find root x = 1")
    Test.assert_contains(rational_roots, "2", "Should find root x = 2")
    Test.assert_contains(rational_roots, "3", "Should find root x = 3")

Process called "test_approximate_real_roots":
    Note: Test numerical root approximation
    Let poly be create_test_quadratic_polynomial()
    Let approx_roots be PolynomialAlgebra.approximate_real_roots(poly, 6)
    
    Test.assert_not_empty(approx_roots, "Should find approximate roots")
    
    For root in approx_roots:
        Let evaluation be PolynomialAlgebra.evaluate_polynomial(poly, root)
        assert_numerical_close(evaluation, "0", "1e-6", "Root should evaluate to approximately 0")

Process called "test_find_complex_roots":
    Note: Test complex root finding
    Let poly be create_test_monic_polynomial()  Note: x^2 + 1 has complex roots ¬±i
    Let complex_roots be PolynomialAlgebra.find_complex_roots(poly, 10)
    
    Test.assert_equal(complex_roots.length, 2, "Should find 2 complex roots")

Process called "test_isolate_real_roots":
    Note: Test real root isolation
    Let poly be create_test_cubic_polynomial()
    Let isolated_roots be PolynomialAlgebra.isolate_real_roots(poly)
    
    Test.assert_not_empty(isolated_roots, "Should isolate real roots")
    Test.assert_equal(isolated_roots.length, 3, "Should isolate 3 real roots")

Process called "test_root_multiplicities":
    Note: Test root multiplicity computation
    Let coefficients be ["0", "0", "1"]  Note: x^2 has root 0 with multiplicity 2
    Let poly be PolynomialAlgebra.create_polynomial(coefficients, "x", "Real")
    Let roots be ["0"]
    
    Let multiplicities be PolynomialAlgebra.compute_root_multiplicities(poly, roots)
    
    Test.assert_contains_key(multiplicities, "0", "Should have root 0")
    Test.assert_equal(multiplicities["0"], 2, "Root 0 should have multiplicity 2")

Note: GCD and Advanced Operations Tests

Process called "test_polynomial_gcd":
    Note: Test polynomial GCD computation
    Let poly1 be create_test_cubic_polynomial()  Note: (x-1)(x-2)(x-3)
    Let coefficients2 be ["-2", "3", "-1"]  Note: (x-1)(x-2)
    Let poly2 be PolynomialAlgebra.create_polynomial(coefficients2, "x", "Real")
    
    Let gcd be PolynomialAlgebra.compute_polynomial_gcd(poly1, poly2)
    
    assert_polynomial_valid(gcd, 2)

Process called "test_extended_polynomial_gcd":
    Note: Test extended Euclidean algorithm for polynomials
    Let poly1 be create_test_quadratic_polynomial()
    Let poly2 be create_test_linear_polynomial()
    
    Let extended_gcd be PolynomialAlgebra.extended_polynomial_gcd(poly1, poly2)
    
    Test.assert_contains_key(extended_gcd, "gcd", "Should have GCD")
    Test.assert_contains_key(extended_gcd, "bezout_coeff_1", "Should have Bezout coefficient for first polynomial")
    Test.assert_contains_key(extended_gcd, "bezout_coeff_2", "Should have Bezout coefficient for second polynomial")

Process called "test_polynomial_lcm":
    Note: Test polynomial LCM computation
    Let poly1 be create_test_linear_polynomial()
    Let poly2 be create_test_quadratic_polynomial()
    
    Let lcm be PolynomialAlgebra.compute_polynomial_lcm(poly1, poly2)
    
    Test.assert_greater_equal(lcm.degree, 2, "LCM degree should be at least max of input degrees")

Process called "test_compute_resultant":
    Note: Test resultant computation
    Let poly1 be create_test_quadratic_polynomial()
    Let poly2 be create_test_linear_polynomial()
    
    Let resultant be PolynomialAlgebra.compute_resultant(poly1, poly2)
    
    Test.assert_not_null(resultant, "Resultant should be computed")

Process called "test_compute_discriminant":
    Note: Test discriminant computation
    Let poly be create_test_quadratic_polynomial()  Note: x^2 - 5x + 6
    Let discriminant be PolynomialAlgebra.compute_discriminant(poly)
    
    Test.assert_equal(discriminant, "1", "Discriminant should be 1 (5¬≤ - 4√ó1√ó6 = 1)")

Process called "test_polynomial_remainder_sequence":
    Note: Test polynomial remainder sequence
    Let poly1 be create_test_cubic_polynomial()
    Let poly2 be create_test_quadratic_polynomial()
    
    Let sequence be PolynomialAlgebra.polynomial_remainder_sequence(poly1, poly2)
    
    Test.assert_not_empty(sequence, "Should generate remainder sequence")

Note: Multivariate Polynomial Tests

Process called "test_create_multivariate_polynomial":
    Note: Test multivariate polynomial creation
    Let poly be create_test_multivariate_polynomial()
    assert_multivariate_polynomial_valid(poly, 2)

Process called "test_multivariate_addition":
    Note: Test multivariate polynomial addition
    Let poly1 be create_test_multivariate_polynomial()
    Let poly2 be create_test_bivariate_linear()
    
    Let sum be PolynomialAlgebra.add_multivariate_polynomials(poly1, poly2)
    
    assert_multivariate_polynomial_valid(sum, 2)

Process called "test_multivariate_multiplication":
    Note: Test multivariate polynomial multiplication
    Let poly1 be create_test_multivariate_polynomial()
    Let poly2 be create_test_bivariate_linear()
    
    Let product be PolynomialAlgebra.multiply_multivariate_polynomials(poly1, poly2)
    
    assert_multivariate_polynomial_valid(product, 2)
    Test.assert_greater_equal(product.total_degree, 2, "Product should have higher degree")

Process called "test_groebner_basis":
    Note: Test Gr√∂bner basis computation
    Let poly1 be create_test_multivariate_polynomial()
    Let poly2 be create_test_bivariate_linear()
    Let polynomials be [poly1, poly2]
    
    Let groebner_basis be PolynomialAlgebra.compute_groebner_basis(polynomials, "lex")
    
    Test.assert_not_empty(groebner_basis, "Should compute Gr√∂bner basis")

Process called "test_polynomial_reduction":
    Note: Test polynomial reduction modulo ideal
    Let polynomial be create_test_multivariate_polynomial()
    Let ideal_generators be [create_test_bivariate_linear()]
    
    Let reduced be PolynomialAlgebra.reduce_polynomial_modulo_ideal(polynomial, ideal_generators)
    
    assert_multivariate_polynomial_valid(reduced, 2)

Process called "test_solve_polynomial_system":
    Note: Test polynomial system solving
    Let poly1 be create_test_bivariate_linear()
    
    Note: Create second linear equation: x - y = 0
    Let monomials2 be Dictionary[List[Integer], String]
    monomials2[[1, 0]] = "1"   Note: x term
    monomials2[[0, 1]] = "-1"  Note: -y term
    Let poly2 be PolynomialAlgebra.create_multivariate_polynomial(monomials2, ["x", "y"], "Real")
    
    Let system be [poly1, poly2]
    Let solutions be PolynomialAlgebra.solve_polynomial_system(system)
    
    Test.assert_not_empty(solutions, "Should find solutions to linear system")

Process called "test_compute_polynomial_ideals":
    Note: Test ideal analysis
    Let generators be [create_test_multivariate_polynomial(), create_test_bivariate_linear()]
    Let ideal_properties be PolynomialAlgebra.compute_polynomial_ideals(generators)
    
    Test.assert_not_null(ideal_properties, "Should analyze ideal properties")

Note: Cyclotomic Polynomial Tests

Process called "test_generate_cyclotomic_polynomial":
    Note: Test cyclotomic polynomial generation
    Let cyclo_poly be create_test_cyclotomic_polynomial()
    
    Test.assert_not_null(cyclo_poly, "Cyclotomic polynomial should be generated")
    Test.assert_equal(cyclo_poly.n, 8, "Should be 8th cyclotomic polynomial")

Process called "test_compute_cyclotomic_roots":
    Note: Test cyclotomic root computation
    Let n be 4
    Let roots be PolynomialAlgebra.compute_cyclotomic_roots(n)
    
    Test.assert_equal(roots.length, 2, "4th cyclotomic polynomial should have 2 roots (primitive 4th roots of unity)")

Process called "test_factor_cyclotomic_polynomial":
    Note: Test cyclotomic polynomial factorization over finite fields
    Let n be 6
    Let prime be 5
    Let factors be PolynomialAlgebra.factor_cyclotomic_polynomial(n, prime)
    
    Test.assert_not_empty(factors, "Should factor cyclotomic polynomial over F_5")

Process called "test_cyclotomic_galois_group":
    Note: Test Galois group computation for cyclotomic fields
    Let n be 8
    Let galois_group be PolynomialAlgebra.compute_cyclotomic_galois_group(n)
    
    Test.assert_not_null(galois_group, "Should compute Galois group")
    Test.assert_contains_key(galois_group, "order", "Should have group order")

Note: Main test execution process

Process called "run_polynomial_algebra_tests":
    Note: Execute all polynomial algebra tests
    Test.describe("Polynomial Algebra Module Tests")
    
    Note: Basic Polynomial Operations
    Test.describe("Basic Polynomial Operations")
    test_create_polynomial()
    test_polynomial_addition()
    test_polynomial_multiplication()
    test_polynomial_division()
    test_polynomial_evaluation()
    test_polynomial_derivative()
    test_polynomial_integral()
    
    Note: Polynomial Factorization Tests
    Test.describe("Polynomial Factorization")
    test_factor_polynomial()
    test_square_free_factorization()
    test_irreducibility_testing()
    test_factor_over_finite_field()
    test_factor_over_rationals()
    
    Note: Root Finding Tests
    Test.describe("Root Finding")
    test_find_polynomial_roots()
    test_find_rational_roots()
    test_approximate_real_roots()
    test_find_complex_roots()
    test_isolate_real_roots()
    test_root_multiplicities()
    
    Note: GCD and Advanced Operations
    Test.describe("GCD and Advanced Operations")
    test_polynomial_gcd()
    test_extended_polynomial_gcd()
    test_polynomial_lcm()
    test_compute_resultant()
    test_compute_discriminant()
    test_polynomial_remainder_sequence()
    
    Note: Multivariate Polynomial Tests
    Test.describe("Multivariate Polynomials")
    test_create_multivariate_polynomial()
    test_multivariate_addition()
    test_multivariate_multiplication()
    test_groebner_basis()
    test_polynomial_reduction()
    test_solve_polynomial_system()
    test_compute_polynomial_ideals()
    
    Note: Cyclotomic Polynomial Tests
    Test.describe("Cyclotomic Polynomials")
    test_generate_cyclotomic_polynomial()
    test_compute_cyclotomic_roots()
    test_factor_cyclotomic_polynomial()
    test_cyclotomic_galois_group()
    
    Test.print_summary()

Note: Execute tests when this file is run
run_polynomial_algebra_tests()