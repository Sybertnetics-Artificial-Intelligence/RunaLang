Note:
Localization Round-Trip Tests
Ensure translating en→XX→en yields canonical tokens and basic detection works.
:End Note

Import "../../../../src/dev_tools/syntax_converter/localization/engine" as Loc

Process called "test_roundtrip_core_tokens" returns None:
    Let sample be """
Process called "greet" that takes name:
    Display "Hello, " joined with name
    Return name
"""
    For each lang in list containing "hi","ja","es","zh","ru":
        Let mid be Loc.translate_source(sample, "en", lang)
        Let back be Loc.translate_source(mid, lang, "en")
        Assert back contains "Process called"
        Assert back contains "Display"
        Assert back contains "joined with"
        Assert back contains "Return"

Process called "test_detect_language_basic" returns None:
    Let jp_sample be """
プロセス と呼ばれる "挨拶" 引数 name:
    表示する "こんにちは, " 連結して name
    返す name
"""
    Let detected be Loc.detect_language(jp_sample)
    Assert detected is equal to "ja"
Note:
Localization Round-Trip Tests
Ensure translating en→XX→en yields canonical tokens.
:End Note

Import "../../../src/dev_tools/syntax_converter/localization/engine" as Loc
Import "../../../src/runtime/tests/test_harness" as Harness

Process called "test_roundtrip_core_tokens" returns None:
    Let sample be """
Process called "greet" that takes name:
    Display "Hello, " joined with name
    Return name
"""
    For each lang in list containing "hi","ja","es","zh","ru":
        Let mid be Loc.translate_source(sample, "en", lang)
        Let back be Loc.translate_source(mid, lang, "en")
        Assert back contains "Process called"
        Assert back contains "Display"
        Assert back contains "joined with"
        Assert back contains "Return"

Process called "test_detect_language_basic" returns None:
    Let jp_sample be """
プロセス と呼ばれる "挨拶" 引数 name:
    表示する "こんにちは, " 連結して name
    返す name
"""
    Let detected be Loc.detect_language(jp_sample)
    Assert detected is equal to "ja"
