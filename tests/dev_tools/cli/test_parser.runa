Note: "Unit tests for the Runa CLI Argument Parser."
Note: "This suite validates that the parser correctly handles various command-line inputs."
:End Note

Import "testing" as Assert
Import "dev_tools/cli/parser" as CLIParser

Type "ParserTestCase" with:
    name as String
    input_args as List<String>
    expected_command as String
    expected_flags as Dictionary<String, Value>
    expected_args as List<String>
:End Type

Process "test cli parser"
    Let test_cases be [
        ParserTestCase with:
            name as "Parses a simple command"
            input_args as ["build"]
            expected_command as "build"
            expected_flags as {:}
            expected_args as []
        ,
        ParserTestCase with:
            name as "Parses a command with a flag"
            input_args as ["build", "--release"]
            expected_command as "build"
            expected_flags as {"release": true}
            expected_args as []
        ,
        ParserTestCase with:
            name as "Parses a command with a value flag"
            input_args as ["translate", "--from=en", "--to=ja", "input.runa"]
            expected_command as "translate"
            expected_flags as {"from": "en", "to": "ja"}
            expected_args as ["input.runa"]
        ,
        ParserTestCase with:
            name as "Parses a command with arguments"
            input_args as ["new", "my_project"]
            expected_command as "new"
            expected_flags as {:}
            expected_args as ["my_project"]
        ,
        ParserTestCase with:
            name as "Parses command with mixed flags and arguments"
            input_args as ["run", "--release", "--", "--port=8080"]
            expected_command as "run"
            expected_flags as {"release": true}
            expected_args as ["--port=8080"]
    ]

    For each test_case in test_cases:
        Let parsed_result be CLIParser.parse(test_case.input_args)
        
        Assert.equal(
            expected as test_case.expected_command,
            actual as parsed_result.command,
            message as "Test failed [" joined with test_case.name joined with "]: Command mismatch"
        )
        Assert.deep_equal(
            expected as test_case.expected_flags,
            actual as parsed_result.flags,
            message as "Test failed [" joined with test_case.name joined with "]: Flags mismatch"
        )
        Assert.deep_equal(
            expected as test_case.expected_args,
            actual as parsed_result.args,
            message as "Test failed [" joined with test_case.name joined with "]: Arguments mismatch"
        )

    Console.print("✓ All CLI parser tests passed!")
End Process

Process "test parser error handling"
    Console.print("Running parser error handling tests...")

    Let invalid_args be ["build", "--unknown-flag"]
    Let result be try CLIParser.parse(invalid_args)
    
    Assert.is_error(
        result,
        message as "Parser did not fail on unknown flag as expected."
    )
    
    Console.print("✓ Parser error handling tests passed!")
End Process


Process "main":
    test cli parser
    test parser error handling
End Process
