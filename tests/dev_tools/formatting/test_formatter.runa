Note: "Unit tests for the Runa Formatter."
Note: "This suite validates that the formatter correctly applies all canonicalization rules."
:End Note

Import "testing" as Assert
Import "dev_tools/formatting/formatter" as Formatter

Type "FormatterTestCase" with:
    name as String
    input as String
    expected as String
:End Type

Process "test formatter canonicalization"
    Let test_cases be [
        FormatterTestCase with:
            name as "Canonicalizes string concatenation with +"
            input as "Let result be \"Hello\" + \" World\""
            expected as "Let result be \"Hello\" joined with \" World\""
        ,
        FormatterTestCase with:
            name as "Canonicalizes string concatenation with 'plus'"
            input as "Let result be \"Hello\" plus \" World\""
            expected as "Let result be \"Hello\" joined with \" World\""
        ,
        FormatterTestCase with:
            name as "Canonicalizes legacy 'followed by'"
            input as "Let result be \"Hello\" followed by \" World\""
            expected as "Let result be \"Hello\" joined with \" World\""
        ,
        FormatterTestCase with:
            name as "Canonicalizes legacy 'concatenated with'"
            input as "Let result be \"Hello\" concatenated with \" World\""
            expected as "Let result be \"Hello\" joined with \" World\""
        ,
        FormatterTestCase with:
            name as "Canonicalizes chained string concatenations"
            input as "Let result be \"a\" + \"b\" plus \"c\""
            expected as "Let result be \"a\" joined with \"b\" joined with \"c\""
        ,
        FormatterTestCase with:
            name as "Canonicalizes 'is equal to' to 'equals'"
            input as "If x is equal to 5:"
            expected as "If x equals 5:"
        ,
        FormatterTestCase with:
            name as "Preserves already canonical code"
            input as "Let greeting be \"Hello\" joined with name"
            expected as "Let greeting be \"Hello\" joined with name"
        ,
        FormatterTestCase with:
            name as "Handles multi-line formatting"
            input as """
Process "my func":
    Let x be 1 + 2
    If x is equal to 3:
        Console.print(\"Correct\")
"""
            expected as """
Process "my func":
    Let x be 1 plus 2
    If x equals 3:
        Console.print(\"Correct\")
"""
        ,
        FormatterTestCase with:
            name as "Does not change mathematical '+' within expressions"
            input as "Let result be 10 + 5"
            expected as "Let result be 10 plus 5"
    ]

    For each test_case in test_cases:
        Let formatted_output be Formatter.format(test_case.input)
        Assert.equal(
            expected as test_case.expected,
            actual as formatted_output,
            message as "Test failed: " joined with test_case.name
        )
    
    Console.print("âœ“ All formatter tests passed!")
End Process

Process "main":
    test formatter canonicalization
End Process
