Note: "Unit tests for the Runa Syntax Converter."
Note: "This suite validates the conversion between natural language and technical syntax."
:End Note

Import "testing" as Assert
Import "dev_tools/syntax_converter/developer_mode" as DevMode
Import "dev_tools/syntax_converter/viewer_mode" as ViewerMode

Process "test developer mode conversion"
    Console.print("Running Developer Mode (Natural -> Technical) tests...")
    
    Let natural_code be """
Process "calculate total" with items as List<Number> returns Number:
    Let total be 0
    For each item in items:
        Set total to total plus item
    Return total
"""
    
    Let expected_technical_code be """
fn "calculate_total"(items: List<Number>): Number {
    let total = 0
    for item in items {
        total = total + item
    }
    return total
}
"""

    Let converted_code be DevMode.convert(natural_code)
    Assert.equal(
        expected as expected_technical_code,
        actual as converted_code,
        message as "Developer mode conversion failed."
    )
    
    Console.print("✓ Developer Mode tests passed!")
End Process

Process "test viewer mode conversion"
    Console.print("Running Viewer Mode (Technical -> Natural) tests...")

    Let technical_code be """
fn "greet"(name: String): String {
    return "Hello, " + name
}
"""

    Let expected_natural_code be """
Process "greet" with name as String returns String:
    Return "Hello, " joined with name
"""

    Let converted_code be ViewerMode.convert(technical_code)
    Assert.equal(
        expected as expected_natural_code,
        actual as converted_code,
        message as "Viewer mode conversion failed."
    )

    Console.print("✓ Viewer Mode tests passed!")
End Process

Process "test round trip conversion"
    Console.print("Running round-trip conversion test...")

    Let initial_natural_code be """
Process "add" with a as Number, b as Number returns Number:
    Return a plus b
"""

    // Natural -> Technical
    Let technical_code be DevMode.convert(initial_natural_code)
    
    // Technical -> Natural
    Let final_natural_code be ViewerMode.convert(technical_code)

    // Note: We expect the final output to be the CANONICAL natural form.
    // The viewer mode also applies formatting rules, so "a plus b" is expected.
    Assert.equal(
        expected as initial_natural_code,
        actual as final_natural_code,
        message as "Round-trip conversion failed. Code was not perfectly reversible."
    )

    Console.print("✓ Round-trip conversion test passed!")
End Process

Process "main":
    test developer mode conversion
    test viewer mode conversion
    test round trip conversion
End Process
