Note:
tests/compiler/frontend/lexical/test_keywords.runa
Comprehensive tests for keyword recognition in both syntax modes
:End Note

Import Module "compiler/frontend/lexical/keywords" as Keywords
Import Module "testing/assert" as Assert

@Reasoning
    Keywords are the building blocks of language structure. We need to test
    that all keywords are properly recognized in both developer and Canon modes,
    and that the mode switching works correctly.
@End Reasoning

Note: =====================================================================
Note: CONTROL FLOW KEYWORDS
Note: =====================================================================

Process called "test_control_flow_keywords" returns Nothing:
    Note: Test If/Otherwise/End If
    Assert.is_true(Keywords.is_keyword("If"))
    Assert.is_true(Keywords.is_keyword("Otherwise"))
    Assert.is_true(Keywords.is_keyword("End"))
    
    Note: Test loops
    Assert.is_true(Keywords.is_keyword("For"))
    Assert.is_true(Keywords.is_keyword("While"))
    Assert.is_true(Keywords.is_keyword("Each"))
    Assert.is_true(Keywords.is_keyword("Loop"))
    Assert.is_true(Keywords.is_keyword("Break"))
    Assert.is_true(Keywords.is_keyword("Continue"))
    
    Note: Test Match/When
    Assert.is_true(Keywords.is_keyword("Match"))
    Assert.is_true(Keywords.is_keyword("When"))
    
    Note: Test exception handling
    Assert.is_true(Keywords.is_keyword("Try"))
    Assert.is_true(Keywords.is_keyword("Catch"))
    Assert.is_true(Keywords.is_keyword("Finally"))
    Assert.is_true(Keywords.is_keyword("Throw"))
End Process

Note: =====================================================================
Note: DECLARATION KEYWORDS
Note: =====================================================================

Process called "test_declaration_keywords" returns Nothing:
    Note: Test variable declarations
    Assert.is_true(Keywords.is_keyword("Let"))
    Assert.is_true(Keywords.is_keyword("Set"))
    Assert.is_true(Keywords.is_keyword("Constant"))
    
    Note: Test type declarations
    Assert.is_true(Keywords.is_keyword("Type"))
    Assert.is_true(Keywords.is_keyword("Process"))
    Assert.is_true(Keywords.is_keyword("Function"))
    Assert.is_true(Keywords.is_keyword("Interface"))
    Assert.is_true(Keywords.is_keyword("Trait"))
    Assert.is_true(Keywords.is_keyword("Enum"))
    
    Note: Test modifiers
    Assert.is_true(Keywords.is_keyword("Public"))
    Assert.is_true(Keywords.is_keyword("Private"))
    Assert.is_true(Keywords.is_keyword("Protected"))
    Assert.is_true(Keywords.is_keyword("Static"))
    Assert.is_true(Keywords.is_keyword("Abstract"))
    Assert.is_true(Keywords.is_keyword("Virtual"))
    Assert.is_true(Keywords.is_keyword("Override"))
End Process

Note: =====================================================================
Note: OPERATOR KEYWORDS
Note: =====================================================================

Process called "test_operator_keywords" returns Nothing:
    Note: Test logical operators as keywords
    Assert.is_true(Keywords.is_keyword("And"))
    Assert.is_true(Keywords.is_keyword("Or"))
    Assert.is_true(Keywords.is_keyword("Not"))
    
    Note: Test comparison keywords
    Assert.is_true(Keywords.is_keyword("is"))
    Assert.is_true(Keywords.is_keyword("as"))
    Assert.is_true(Keywords.is_keyword("in"))
    
    Note: Test null keywords
    Assert.is_true(Keywords.is_keyword("null"))
    Assert.is_true(Keywords.is_keyword("nil"))
    Assert.is_true(Keywords.is_keyword("none"))
End Process

Note: =====================================================================
Note: SPECIAL KEYWORDS
Note: =====================================================================

Process called "test_special_keywords" returns Nothing:
    Note: Test import/export
    Assert.is_true(Keywords.is_keyword("Import"))
    Assert.is_true(Keywords.is_keyword("Export"))
    Assert.is_true(Keywords.is_keyword("Module"))
    Assert.is_true(Keywords.is_keyword("from"))
    
    Note: Test return/yield
    Assert.is_true(Keywords.is_keyword("Return"))
    Assert.is_true(Keywords.is_keyword("Yield"))
    
    Note: Test async keywords
    Assert.is_true(Keywords.is_keyword("Async"))
    Assert.is_true(Keywords.is_keyword("Await"))
    
    Note: Test annotation keywords
    Assert.is_true(Keywords.is_keyword("Note"))
    Assert.is_true(Keywords.is_keyword("Annotation"))
End Process

Note: =====================================================================
Note: CANON MODE KEYWORDS
Note: =====================================================================

Process called "test_canon_mode_keywords" returns Nothing:
    Note: Test Canon-specific keywords
    Assert.is_true(Keywords.is_canon_keyword("called"))
    Assert.is_true(Keywords.is_canon_keyword("that"))
    Assert.is_true(Keywords.is_canon_keyword("takes"))
    Assert.is_true(Keywords.is_canon_keyword("returns"))
    Assert.is_true(Keywords.is_canon_keyword("with"))
    Assert.is_true(Keywords.is_canon_keyword("be"))
    Assert.is_true(Keywords.is_canon_keyword("to"))
    Assert.is_true(Keywords.is_canon_keyword("through"))
    Assert.is_true(Keywords.is_canon_keyword("from"))
    Assert.is_true(Keywords.is_canon_keyword("minus"))
    Assert.is_true(Keywords.is_canon_keyword("plus"))
    Assert.is_true(Keywords.is_canon_keyword("times"))
    Assert.is_true(Keywords.is_canon_keyword("divided"))
    Assert.is_true(Keywords.is_canon_keyword("by"))
    
    Note: Test natural language assignment forms
    Assert.is_true(Keywords.is_canon_keyword("gets"))
    Assert.is_true(Keywords.is_canon_keyword("increased"))
    Assert.is_true(Keywords.is_canon_keyword("decreased"))
    Assert.is_true(Keywords.is_canon_keyword("multiplied"))
    
    Note: Test imperative forms
    Assert.is_true(Keywords.is_canon_keyword("Increase"))
    Assert.is_true(Keywords.is_canon_keyword("Decrease"))
    Assert.is_true(Keywords.is_canon_keyword("Multiply"))
    Assert.is_true(Keywords.is_canon_keyword("Divide"))
    Assert.is_true(Keywords.is_canon_keyword("Scale"))
    Assert.is_true(Keywords.is_canon_keyword("down"))
End Process

Note: =====================================================================
Note: KEYWORD CLASSIFICATION
Note: =====================================================================

Process called "test_keyword_classification" returns Nothing:
    Note: Test control flow classification
    Assert.is_true(Keywords.is_control_flow_keyword("If"))
    Assert.is_true(Keywords.is_control_flow_keyword("While"))
    Assert.is_true(Keywords.is_control_flow_keyword("For"))
    Assert.is_false(Keywords.is_control_flow_keyword("Let"))
    
    Note: Test declaration classification
    Assert.is_true(Keywords.is_declaration_keyword("Let"))
    Assert.is_true(Keywords.is_declaration_keyword("Type"))
    Assert.is_true(Keywords.is_declaration_keyword("Process"))
    Assert.is_false(Keywords.is_declaration_keyword("If"))
    
    Note: Test modifier classification
    Assert.is_true(Keywords.is_modifier_keyword("Public"))
    Assert.is_true(Keywords.is_modifier_keyword("Private"))
    Assert.is_true(Keywords.is_modifier_keyword("Static"))
    Assert.is_false(Keywords.is_modifier_keyword("Let"))
End Process

Note: =====================================================================
Note: MODE SWITCHING
Note: =====================================================================

Process called "test_mode_switching" returns Nothing:
    Note: Test that mode affects keyword recognition
    Keywords.set_syntax_mode("developer")
    Assert.is_false(Keywords.is_keyword("called"))
    Assert.is_false(Keywords.is_keyword("that"))
    
    Keywords.set_syntax_mode("canon")
    Assert.is_true(Keywords.is_keyword("called"))
    Assert.is_true(Keywords.is_keyword("that"))
    
    Note: Test that core keywords work in both modes
    Keywords.set_syntax_mode("developer")
    Assert.is_true(Keywords.is_keyword("If"))
    Assert.is_true(Keywords.is_keyword("Let"))
    
    Keywords.set_syntax_mode("canon")
    Assert.is_true(Keywords.is_keyword("If"))
    Assert.is_true(Keywords.is_keyword("Let"))
    
    Note: Reset to default mode
    Keywords.set_syntax_mode("developer")
End Process

Note: =====================================================================
Note: RESERVED WORDS
Note: =====================================================================

Process called "test_reserved_words" returns Nothing:
    Note: Test that certain words are reserved
    Assert.is_true(Keywords.is_reserved("class"))
    Assert.is_true(Keywords.is_reserved("def"))
    Assert.is_true(Keywords.is_reserved("lambda"))
    Assert.is_true(Keywords.is_reserved("var"))
    Assert.is_true(Keywords.is_reserved("const"))
    Assert.is_true(Keywords.is_reserved("function"))
    
    Note: Test that non-reserved words are not marked as reserved
    Assert.is_false(Keywords.is_reserved("myVariable"))
    Assert.is_false(Keywords.is_reserved("processData"))
End Process

Note: =====================================================================
Note: CASE SENSITIVITY
Note: =====================================================================

Process called "test_case_sensitivity" returns Nothing:
    Note: Keywords are case-sensitive in Runa
    Assert.is_true(Keywords.is_keyword("If"))
    Assert.is_false(Keywords.is_keyword("if"))
    Assert.is_false(Keywords.is_keyword("IF"))
    
    Assert.is_true(Keywords.is_keyword("Let"))
    Assert.is_false(Keywords.is_keyword("let"))
    Assert.is_false(Keywords.is_keyword("LET"))
    
    Assert.is_true(Keywords.is_keyword("Process"))
    Assert.is_false(Keywords.is_keyword("process"))
    Assert.is_false(Keywords.is_keyword("PROCESS"))
End Process

Note: =====================================================================
Note: CONTEXTUAL KEYWORDS
Note: =====================================================================

Process called "test_contextual_keywords" returns Nothing:
    Note: Some words are keywords only in specific contexts
    Assert.is_true(Keywords.is_contextual_keyword("End"))
    Assert.is_true(Keywords.is_contextual_keyword("Each"))
    Assert.is_true(Keywords.is_contextual_keyword("Nothing"))
    
    Note: Test context requirements
    Assert.is_true(Keywords.requires_context("End", "If"))
    Assert.is_true(Keywords.requires_context("End", "Process"))
    Assert.is_true(Keywords.requires_context("End", "Type"))
    Assert.is_true(Keywords.requires_context("Each", "For"))
End Process

Note: =====================================================================
Note: TEST RUNNER
Note: =====================================================================

Process called "run_all_keyword_tests" returns Nothing:
    @TestCases
        - Control flow keywords (If, While, For, etc.)
        - Declaration keywords (Let, Type, Process, etc.)
        - Operator keywords (And, Or, Not, etc.)
        - Special keywords (Import, Return, Async, etc.)
        - Canon mode keywords (called, that, takes, etc.)
        - Keyword classification by type
        - Mode switching between developer and Canon
        - Reserved words that cannot be used as identifiers
        - Case sensitivity of keywords
        - Contextual keywords that depend on surrounding context
    @End TestCases
    
    test_control_flow_keywords()
    test_declaration_keywords()
    test_operator_keywords()
    test_special_keywords()
    test_canon_mode_keywords()
    test_keyword_classification()
    test_mode_switching()
    test_reserved_words()
    test_case_sensitivity()
    test_contextual_keywords()
    
    Print("All keyword tests passed!")
End Process