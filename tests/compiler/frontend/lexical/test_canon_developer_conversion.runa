Note:
Test file for Canon/Developer mode conversion
Verifies that keywords stay consistent and only operators change
:End Note

Import "compiler/frontend/lexical/keywords" as Keywords
Import "testing/test_framework" as Test

@Reasoning
    Test that keywords remain consistent between Canon and Developer modes,
    while operators correctly convert between natural language and symbols.
    This validates the triple syntax architecture's conversion mechanisms.
@End Reasoning

Process called "test_keywords_remain_consistent":
    @TestCases
        Verify that keywords stay the same in both Canon and Developer modes:
        - "Process" -> "Process"
        - "Otherwise" -> "Otherwise"
        - "Public" -> "Public"
        - "Private" -> "Private"
    @End TestCases
    
    Note: Test that keywords don't change
    Test.assert_equals(
        Keywords.get_canonical_form("Process", "developer"),
        "Process",
        "Process should remain Process in developer mode"
    )
    
    Test.assert_equals(
        Keywords.get_canonical_form("Process", "canon"),
        "Process",
        "Process should remain Process in canon mode"
    )
    
    Test.assert_equals(
        Keywords.get_canonical_form("Otherwise", "developer"),
        "Otherwise",
        "Otherwise should remain Otherwise in developer mode"
    )
    
    Test.assert_equals(
        Keywords.get_canonical_form("If", "developer"),
        "If",
        "If should remain If in developer mode"
    )
    
    Test.assert_equals(
        Keywords.get_canonical_form("Public", "developer"),
        "Public",
        "Public should remain Public in developer mode"
    )
    
    Test.assert_equals(
        Keywords.get_canonical_form("Private", "developer"),
        "Private",
        "Private should remain Private in developer mode"
    )
End Process

Process called "test_operator_canon_to_developer":
    @TestCases
        Verify that Canon mode operators convert to Developer symbols:
        - "plus" -> "+"
        - "multiplied by" -> "*"
        - "is equal to" -> "=="
    @End TestCases
    
    Note: Test arithmetic operators
    Test.assert_equals(
        Keywords.convert_operator("plus", "developer"),
        "+",
        "plus should convert to + in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("minus", "developer"),
        "-",
        "minus should convert to - in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("multiplied by", "developer"),
        "*",
        "multiplied by should convert to * in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("divided by", "developer"),
        "/",
        "divided by should convert to / in developer mode"
    )
    
    Note: Test comparison operators
    Test.assert_equals(
        Keywords.convert_operator("is equal to", "developer"),
        "==",
        "is equal to should convert to == in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("is not equal to", "developer"),
        "!=",
        "is not equal to should convert to != in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("is greater than", "developer"),
        ">",
        "is greater than should convert to > in developer mode"
    )
    
    Note: Test logical operators
    Test.assert_equals(
        Keywords.convert_operator("and", "developer"),
        "&&",
        "and should convert to && in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("or", "developer"),
        "||",
        "or should convert to || in developer mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("not", "developer"),
        "!",
        "not should convert to ! in developer mode"
    )
End Process

Process called "test_operator_developer_to_canon":
    @TestCases
        Verify that Developer symbols convert back to Canon operators:
        - "+" -> "plus"
        - "*" -> "multiplied by"
        - "==" -> "is equal to"
    @End TestCases
    
    Note: Test arithmetic operators
    Test.assert_equals(
        Keywords.convert_operator("+", "canon"),
        "plus",
        "+ should convert to plus in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("-", "canon"),
        "minus",
        "- should convert to minus in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("*", "canon"),
        "multiplied by",
        "* should convert to multiplied by in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("/", "canon"),
        "divided by",
        "/ should convert to divided by in canon mode"
    )
    
    Note: Test comparison operators
    Test.assert_equals(
        Keywords.convert_operator("==", "canon"),
        "is equal to",
        "== should convert to is equal to in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("!=", "canon"),
        "is not equal to",
        "!= should convert to is not equal to in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator(">", "canon"),
        "is greater than",
        "> should convert to is greater than in canon mode"
    )
    
    Note: Test logical operators
    Test.assert_equals(
        Keywords.convert_operator("&&", "canon"),
        "and",
        "&& should convert to and in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("||", "canon"),
        "or",
        "|| should convert to or in canon mode"
    )
    
    Test.assert_equals(
        Keywords.convert_operator("!", "canon"),
        "not",
        "! should convert to not in canon mode"
    )
End Process

Process called "test_bidirectional_operator_conversion":
    @TestCases
        Verify that converting operators Canon -> Developer -> Canon preserves the original.
        This ensures no data loss in round-trip conversions.
    @End TestCases
    
    Let canon_operators be [
        "plus", "minus", "multiplied by", "divided by",
        "is equal to", "is not equal to", "is greater than",
        "and", "or", "not"
    ]
    
    For Each op in canon_operators:
        Let dev_form be Keywords.convert_operator(op, "developer")
        Let back_to_canon be Keywords.convert_operator(dev_form, "canon")
        
        Test.assert_equals(
            back_to_canon,
            op,
            "Round-trip conversion should preserve: " + op
        )
    End For
End Process

Process called "test_is_operator":
    @TestCases
        Test the is_operator helper function
    @End TestCases
    
    Note: Test Canon operators
    Test.assert_true(
        Keywords.is_operator("plus"),
        "plus should be recognized as operator"
    )
    
    Test.assert_true(
        Keywords.is_operator("multiplied by"),
        "multiplied by should be recognized as operator"
    )
    
    Note: Test Developer operators
    Test.assert_true(
        Keywords.is_operator("+"),
        "+ should be recognized as operator"
    )
    
    Test.assert_true(
        Keywords.is_operator("=="),
        "== should be recognized as operator"
    )
    
    Note: Test non-operators
    Test.assert_false(
        Keywords.is_operator("Process"),
        "Process should not be recognized as operator"
    )
    
    Test.assert_false(
        Keywords.is_operator("unknown"),
        "unknown should not be recognized as operator"
    )
End Process

Process called "run_all_tests":
    @Implementation
        Execute all Canon/Developer conversion tests and report results.
    @End Implementation
    
    Display "Running Canon/Developer Mode Tests..."
    Display "=========================================="
    
    Display "\n1. Keywords Remain Consistent:"
    test_keywords_remain_consistent()
    
    Display "\n2. Operators Canon to Developer:"
    test_operator_canon_to_developer()
    
    Display "\n3. Operators Developer to Canon:"
    test_operator_developer_to_canon()
    
    Display "\n4. Bidirectional Operator Conversion:"
    test_bidirectional_operator_conversion()
    
    Display "\n5. Is Operator Test:"
    test_is_operator()
    
    Display "\n=========================================="
    Display "All Canon/Developer mode tests completed!"
End Process

Note: Entry point for test execution
run_all_tests()