Note:
tests/compiler/frontend/lexical/test_operators.runa
Comprehensive tests for operator recognition and canonical forms
:End Note

Import Module "compiler/frontend/lexical/operators" as Operators
Import Module "testing/assert" as Assert

@Reasoning
    Operators are critical for expression evaluation. We need to test both
    symbol and canonical forms, precedence, associativity, and the new
    natural language assignment operators.
@End Reasoning

Note: =====================================================================
Note: ARITHMETIC OPERATOR TESTS
Note: =====================================================================

Process called "test_arithmetic_operators" returns Nothing:
    Note: Test fundamental arithmetic operators
    Assert.is_true(Operators.is_operator_char('+'))
    Assert.is_true(Operators.is_operator_char('-'))
    Assert.is_true(Operators.is_operator_char('*'))
    Assert.is_true(Operators.is_operator_char('/'))
    Assert.is_true(Operators.is_operator_char('%'))
    
    Note: Test power operator
    Assert.is_true(Operators.is_valid_operator("**"))
    
    Note: Test canonical forms
    Let plus_op be Operators.get_operator_by_symbol("+")
    Assert.equals(plus_op.canonical_form, "plus")
    
    Let minus_op be Operators.get_operator_by_symbol("-")
    Assert.equals(minus_op.canonical_form, "minus")
    
    Let times_op be Operators.get_operator_by_symbol("*")
    Assert.equals(times_op.canonical_form, "multiplied by")
    
    Let divide_op be Operators.get_operator_by_symbol("/")
    Assert.equals(divide_op.canonical_form, "divided by")
    
    Let modulo_op be Operators.get_operator_by_symbol("%")
    Assert.equals(modulo_op.canonical_form, "modulo")
    
    Let power_op be Operators.get_operator_by_symbol("**")
    Assert.equals(power_op.canonical_form, "to the power of")
End Process

Note: =====================================================================
Note: ASSIGNMENT OPERATOR TESTS
Note: =====================================================================

Process called "test_assignment_operators" returns Nothing:
    Note: Test fundamental assignment
    Assert.is_true(Operators.is_valid_operator("="))
    Let assign_op be Operators.get_operator_by_symbol("=")
    Assert.equals(assign_op.canonical_form, "gets")
    
    Note: Test compound assignment operators
    Assert.is_true(Operators.is_valid_operator("+="))
    Let plus_eq be Operators.get_operator_by_symbol("+=")
    Assert.equals(plus_eq.canonical_form, "gets increased by")
    
    Assert.is_true(Operators.is_valid_operator("-="))
    Let minus_eq be Operators.get_operator_by_symbol("-=")
    Assert.equals(minus_eq.canonical_form, "gets decreased by")
    
    Assert.is_true(Operators.is_valid_operator("*="))
    Let times_eq be Operators.get_operator_by_symbol("*=")
    Assert.equals(times_eq.canonical_form, "gets multiplied by")
    
    Assert.is_true(Operators.is_valid_operator("/="))
    Let divide_eq be Operators.get_operator_by_symbol("/=")
    Assert.equals(divide_eq.canonical_form, "gets divided by")
    
    Assert.is_true(Operators.is_valid_operator("%="))
    Let mod_eq be Operators.get_operator_by_symbol("%=")
    Assert.equals(mod_eq.canonical_form, "gets modulo")
End Process

Note: =====================================================================
Note: COMPARISON OPERATOR TESTS
Note: =====================================================================

Process called "test_comparison_operators" returns Nothing:
    Note: Test equality operators
    Assert.is_true(Operators.is_valid_operator("=="))
    Let eq_op be Operators.get_operator_by_symbol("==")
    Assert.equals(eq_op.canonical_form, "is equal to")
    
    Assert.is_true(Operators.is_valid_operator("!="))
    Let neq_op be Operators.get_operator_by_symbol("!=")
    Assert.equals(neq_op.canonical_form, "is not equal to")
    
    Note: Test relational operators
    Assert.is_true(Operators.is_valid_operator("<"))
    Let lt_op be Operators.get_operator_by_symbol("<")
    Assert.equals(lt_op.canonical_form, "is less than")
    
    Assert.is_true(Operators.is_valid_operator(">"))
    Let gt_op be Operators.get_operator_by_symbol(">")
    Assert.equals(gt_op.canonical_form, "is greater than")
    
    Assert.is_true(Operators.is_valid_operator("<="))
    Let lte_op be Operators.get_operator_by_symbol("<=")
    Assert.equals(lte_op.canonical_form, "is less than or equal to")
    
    Assert.is_true(Operators.is_valid_operator(">="))
    Let gte_op be Operators.get_operator_by_symbol(">=")
    Assert.equals(gte_op.canonical_form, "is greater than or equal to")
End Process

Note: =====================================================================
Note: LOGICAL OPERATOR TESTS
Note: =====================================================================

Process called "test_logical_operators" returns Nothing:
    Note: Test logical AND
    Assert.is_true(Operators.is_valid_operator("&&"))
    Let and_op be Operators.get_operator_by_symbol("&&")
    Assert.equals(and_op.canonical_form, "And")
    
    Note: Test logical OR
    Assert.is_true(Operators.is_valid_operator("||"))
    Let or_op be Operators.get_operator_by_symbol("||")
    Assert.equals(or_op.canonical_form, "Or")
    
    Note: Test logical NOT
    Assert.is_true(Operators.is_valid_operator("!"))
    Let not_op be Operators.get_operator_by_symbol("!")
    Assert.equals(not_op.canonical_form, "Not")
End Process

Note: =====================================================================
Note: BITWISE OPERATOR TESTS
Note: =====================================================================

Process called "test_bitwise_operators" returns Nothing:
    Note: Test bitwise AND
    Assert.is_true(Operators.is_valid_operator("&"))
    Let band_op be Operators.get_operator_by_symbol("&")
    Assert.equals(band_op.canonical_form, "bitwise and")
    
    Note: Test bitwise OR
    Assert.is_true(Operators.is_valid_operator("|"))
    Let bor_op be Operators.get_operator_by_symbol("|")
    Assert.equals(bor_op.canonical_form, "bitwise or")
    
    Note: Test bitwise XOR
    Assert.is_true(Operators.is_valid_operator("^"))
    Let xor_op be Operators.get_operator_by_symbol("^")
    Assert.equals(xor_op.canonical_form, "bitwise xor")
    
    Note: Test bitwise NOT
    Assert.is_true(Operators.is_valid_operator("~"))
    Let bnot_op be Operators.get_operator_by_symbol("~")
    Assert.equals(bnot_op.canonical_form, "bitwise not")
    
    Note: Test bit shifts
    Assert.is_true(Operators.is_valid_operator("<<"))
    Let lshift_op be Operators.get_operator_by_symbol("<<")
    Assert.equals(lshift_op.canonical_form, "shifted left by")
    
    Assert.is_true(Operators.is_valid_operator(">>"))
    Let rshift_op be Operators.get_operator_by_symbol(">>")
    Assert.equals(rshift_op.canonical_form, "shifted right by")
End Process

Note: =====================================================================
Note: SPECIAL OPERATOR TESTS
Note: =====================================================================

Process called "test_special_operators" returns Nothing:
    Note: Test member access (both forms)
    Assert.is_true(Operators.is_valid_operator("."))
    Let dot_op be Operators.get_operator_by_symbol(".")
    Assert.equals(dot_op.canonical_form, "of")
    Assert.equals(dot_op.alternate_canonical, "from")
    
    Note: Test scope resolution
    Assert.is_true(Operators.is_valid_operator("::"))
    Let scope_op be Operators.get_operator_by_symbol("::")
    Assert.equals(scope_op.canonical_form, "from")
    
    Note: Test indexing
    Assert.is_true(Operators.is_valid_operator("["))
    Let index_op be Operators.get_operator_by_symbol("[")
    Assert.equals(index_op.canonical_form, "at")
    
    Note: Test range operators
    Assert.is_true(Operators.is_valid_operator(".."))
    Let range_op be Operators.get_operator_by_symbol("..")
    Assert.equals(range_op.canonical_form, "through")
    
    Assert.is_true(Operators.is_valid_operator("..."))
    Let inclusive_range_op be Operators.get_operator_by_symbol("...")
    Assert.equals(inclusive_range_op.canonical_form, "up to and including")
    
    Note: Test ternary operator
    Assert.is_true(Operators.is_valid_operator("?"))
    Let ternary_op be Operators.get_operator_by_symbol("?")
    Assert.equals(ternary_op.canonical_form, "if")
    
    Assert.is_true(Operators.is_valid_operator(":"))
    Let colon_op be Operators.get_operator_by_symbol(":")
    Assert.equals(colon_op.canonical_form, "otherwise")
End Process

Note: =====================================================================
Note: PRECEDENCE AND ASSOCIATIVITY TESTS
Note: =====================================================================

Process called "test_operator_precedence" returns Nothing:
    Note: Test that multiplication has higher precedence than addition
    Let mult_op be Operators.get_operator_by_symbol("*")
    Let add_op be Operators.get_operator_by_symbol("+")
    Assert.is_greater_than(mult_op.precedence, add_op.precedence)
    
    Note: Test that comparison has lower precedence than arithmetic
    Let eq_op be Operators.get_operator_by_symbol("==")
    Assert.is_less_than(eq_op.precedence, add_op.precedence)
    
    Note: Test that assignment has lowest precedence
    Let assign_op be Operators.get_operator_by_symbol("=")
    Assert.equals(assign_op.precedence, 1)
End Process

Process called "test_operator_associativity" returns Nothing:
    Note: Test left associativity for arithmetic
    Let add_op be Operators.get_operator_by_symbol("+")
    Assert.equals(add_op.associativity, "left")
    
    Note: Test right associativity for assignment
    Let assign_op be Operators.get_operator_by_symbol("=")
    Assert.equals(assign_op.associativity, "right")
    
    Note: Test right associativity for power
    Let power_op be Operators.get_operator_by_symbol("**")
    Assert.equals(power_op.associativity, "right")
End Process

Note: =====================================================================
Note: CANONICAL FORM CONVERSION TESTS
Note: =====================================================================

Process called "test_canonical_conversion" returns Nothing:
    Note: Test symbol to canonical conversion
    Assert.equals(Operators.get_canonical_form("+", "canon"), "plus")
    Assert.equals(Operators.get_canonical_form("+", "developer"), "+")
    
    Assert.equals(Operators.get_canonical_form("&&", "canon"), "And")
    Assert.equals(Operators.get_canonical_form("&&", "developer"), "&&")
    
    Note: Test canonical to symbol conversion
    Assert.equals(Operators.get_symbol_from_canonical("plus"), "+")
    Assert.equals(Operators.get_symbol_from_canonical("is equal to"), "==")
    Assert.equals(Operators.get_symbol_from_canonical("gets increased by"), "+=")
End Process

Note: =====================================================================
Note: OPERATOR VALIDATION TESTS
Note: =====================================================================

Process called "test_operator_validation" returns Nothing:
    Note: Test valid operators
    Assert.is_true(Operators.is_valid_operator("+"))
    Assert.is_true(Operators.is_valid_operator("++"))
    Assert.is_true(Operators.is_valid_operator("--"))
    Assert.is_true(Operators.is_valid_operator("->"))
    
    Note: Test invalid operators
    Assert.is_false(Operators.is_valid_operator("+++"))
    Assert.is_false(Operators.is_valid_operator("@"))
    Assert.is_false(Operators.is_valid_operator("#"))
End Process

Note: =====================================================================
Note: TEST RUNNER
Note: =====================================================================

Process called "run_all_operator_tests" returns Nothing:
    @TestCases
        - Arithmetic operators and their canonical forms
        - Assignment operators including natural language forms
        - Comparison operators
        - Logical operators
        - Bitwise operators
        - Special operators (member access, scope, indexing, ranges)
        - Precedence and associativity rules
        - Symbol to canonical conversion
        - Operator validation
    @End TestCases
    
    test_arithmetic_operators()
    test_assignment_operators()
    test_comparison_operators()
    test_logical_operators()
    test_bitwise_operators()
    test_special_operators()
    test_operator_precedence()
    test_operator_associativity()
    test_canonical_conversion()
    test_operator_validation()
    
    Print("All operator tests passed!")
End Process