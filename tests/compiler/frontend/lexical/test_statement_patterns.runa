Note:
tests/compiler/frontend/lexical/test_statement_patterns.runa
Comprehensive tests for statement pattern recognition
:End Note

Import Module "compiler/frontend/lexical/statement_patterns" as StatementPatterns
Import Module "compiler/internal/collections" as Collections
Import Module "testing/assert" as Assert

@Reasoning
    Statement patterns allow natural language-style programming in Runa.
    These patterns include imperative assignments ("Increase x by 5"),
    import statements ("Import Module x as y"), and other multi-word constructs.
@End Reasoning

Note: =====================================================================
Note: IMPERATIVE ASSIGNMENT PATTERN TESTS
Note: =====================================================================

Process called "test_imperative_increase_pattern" returns Nothing:
    Let patterns be StatementPatterns.get_imperative_patterns()
    
    Note: Find the Increase pattern
    Let increase_pattern be find_pattern_by_type(patterns, "IMPERATIVE_INCREASE")
    Assert.is_not_null(increase_pattern)
    Assert.equals(increase_pattern.start_keyword, "Increase")
    Assert.equals(Collections.list_get(increase_pattern.middle_keywords, 0), "by")
    Assert.is_true(increase_pattern.has_identifier)
    Assert.is_true(increase_pattern.has_expression)
    Assert.equals(increase_pattern.canonical_form, "Increase ... by ...")
    
    Note: Test pattern matching
    Let state be StatementPatterns.create_pattern_state()
    StatementPatterns.start_pattern_matching(state, increase_pattern)
    Assert.is_true(state.is_active)
    Assert.equals(state.expecting, "identifier")
    
    Note: Test matching tokens
    Assert.is_true(StatementPatterns.match_pattern(state, "count"))
    Assert.equals(state.expecting, "keyword")
    Assert.is_true(StatementPatterns.match_pattern(state, "by"))
    Assert.equals(state.expecting, "expression")
End Process

Process called "test_imperative_decrease_pattern" returns Nothing:
    Let patterns be StatementPatterns.get_imperative_patterns()
    
    Let decrease_pattern be find_pattern_by_type(patterns, "IMPERATIVE_DECREASE")
    Assert.is_not_null(decrease_pattern)
    Assert.equals(decrease_pattern.start_keyword, "Decrease")
    Assert.equals(Collections.list_get(decrease_pattern.middle_keywords, 0), "by")
    Assert.equals(decrease_pattern.canonical_form, "Decrease ... by ...")
    
    Note: Test pattern recognition
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Decrease"))
    Let matching_patterns be StatementPatterns.get_patterns_starting_with("Decrease")
    Assert.is_greater_than(Collections.list_length(matching_patterns), 0)
End Process

Process called "test_imperative_multiply_divide_patterns" returns Nothing:
    Let patterns be StatementPatterns.get_imperative_patterns()
    
    Note: Test Multiply pattern
    Let multiply_pattern be find_pattern_by_type(patterns, "IMPERATIVE_MULTIPLY")
    Assert.is_not_null(multiply_pattern)
    Assert.equals(multiply_pattern.start_keyword, "Multiply")
    Assert.equals(multiply_pattern.canonical_form, "Multiply ... by ...")
    
    Note: Test Divide pattern  
    Let divide_pattern be find_pattern_by_type(patterns, "IMPERATIVE_DIVIDE")
    Assert.is_not_null(divide_pattern)
    Assert.equals(divide_pattern.start_keyword, "Divide")
    Assert.equals(divide_pattern.canonical_form, "Divide ... by ...")
End Process

Process called "test_scale_patterns" returns Nothing:
    Let patterns be StatementPatterns.get_imperative_patterns()
    
    Note: Test Scale pattern
    Let scale_pattern be find_pattern_by_type(patterns, "IMPERATIVE_SCALE")
    Assert.is_not_null(scale_pattern)
    Assert.equals(scale_pattern.start_keyword, "Scale")
    Assert.equals(Collections.list_get(scale_pattern.middle_keywords, 0), "by")
    
    Note: Test Scale down pattern
    Let scale_down_pattern be find_pattern_by_type(patterns, "IMPERATIVE_SCALE_DOWN")
    Assert.is_not_null(scale_down_pattern)
    Assert.equals(scale_down_pattern.start_keyword, "Scale")
    Assert.equals(Collections.list_length(scale_down_pattern.middle_keywords), 2)
    Assert.equals(Collections.list_get(scale_down_pattern.middle_keywords, 0), "down")
    Assert.equals(Collections.list_get(scale_down_pattern.middle_keywords, 1), "by")
    Assert.equals(scale_down_pattern.canonical_form, "Scale ... down by ...")
End Process

Note: =====================================================================
Note: IMPORT PATTERN TESTS
Note: =====================================================================

Process called "test_import_module_pattern" returns Nothing:
    Let patterns be StatementPatterns.get_import_patterns()
    
    Let import_module_pattern be find_pattern_by_type(patterns, "IMPORT_MODULE")
    Assert.is_not_null(import_module_pattern)
    Assert.equals(import_module_pattern.start_keyword, "Import")
    Assert.equals(Collections.list_length(import_module_pattern.middle_keywords), 2)
    Assert.equals(Collections.list_get(import_module_pattern.middle_keywords, 0), "Module")
    Assert.equals(Collections.list_get(import_module_pattern.middle_keywords, 1), "as")
    Assert.equals(import_module_pattern.canonical_form, "Import Module ... as ...")
    
    Note: Test pattern matching
    Let state be StatementPatterns.create_pattern_state()
    StatementPatterns.start_pattern_matching(state, import_module_pattern)
    Assert.is_true(StatementPatterns.match_pattern(state, "collections/list"))
    Assert.is_true(StatementPatterns.match_pattern(state, "as"))
    Assert.is_true(StatementPatterns.match_pattern(state, "List"))
End Process

Process called "test_import_from_pattern" returns Nothing:
    Let patterns be StatementPatterns.get_import_patterns()
    
    Let import_from_pattern be find_pattern_by_type(patterns, "IMPORT_FROM")
    Assert.is_not_null(import_from_pattern)
    Assert.equals(import_from_pattern.start_keyword, "Import")
    Assert.equals(Collections.list_get(import_from_pattern.middle_keywords, 0), "from")
    Assert.equals(import_from_pattern.canonical_form, "Import ... from ...")
End Process

Note: =====================================================================
Note: PATTERN START DETECTION TESTS
Note: =====================================================================

Process called "test_pattern_start_detection" returns Nothing:
    Note: Test imperative keywords start patterns
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Increase"))
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Decrease"))
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Multiply"))
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Divide"))
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Scale"))
    
    Note: Test import keyword starts patterns
    Assert.is_true(StatementPatterns.is_statement_pattern_start("Import"))
    
    Note: Test non-pattern keywords
    Assert.is_false(StatementPatterns.is_statement_pattern_start("Let"))
    Assert.is_false(StatementPatterns.is_statement_pattern_start("If"))
    Assert.is_false(StatementPatterns.is_statement_pattern_start("While"))
End Process

Note: =====================================================================
Note: PATTERN STATE MANAGEMENT TESTS
Note: =====================================================================

Process called "test_pattern_state_management" returns Nothing:
    Let state be StatementPatterns.create_pattern_state()
    
    Note: Test initial state
    Assert.is_false(state.is_active)
    Assert.equals(state.expecting, "")
    Assert.equals(Collections.list_length(state.tokens_seen), 0)
    
    Note: Test starting pattern matching
    Let patterns be StatementPatterns.get_imperative_patterns()
    Let increase_pattern be find_pattern_by_type(patterns, "IMPERATIVE_INCREASE")
    StatementPatterns.start_pattern_matching(state, increase_pattern)
    
    Assert.is_true(state.is_active)
    Assert.equals(state.expecting, "identifier")
    Assert.equals(state.current_pattern.pattern_type, "IMPERATIVE_INCREASE")
    
    Note: Test ending pattern matching
    StatementPatterns.end_pattern_matching(state)
    Assert.is_false(state.is_active)
    Assert.equals(state.expecting, "")
    Assert.equals(Collections.list_length(state.tokens_seen), 0)
End Process

Note: =====================================================================
Note: PATTERN MATCHING FLOW TESTS
Note: =====================================================================

Process called "test_complete_pattern_matching_flow" returns Nothing:
    Note: Test complete "Increase count by 5" pattern
    Let state be StatementPatterns.create_pattern_state()
    Let patterns be StatementPatterns.get_patterns_starting_with("Increase")
    Let pattern be Collections.list_get(patterns, 0)
    
    StatementPatterns.start_pattern_matching(state, pattern)
    
    Note: Match identifier
    Assert.equals(state.expecting, "identifier")
    Assert.is_true(StatementPatterns.match_pattern(state, "count"))
    
    Note: Match keyword "by"
    Assert.equals(state.expecting, "keyword")
    Assert.is_true(StatementPatterns.match_pattern(state, "by"))
    
    Note: Ready for expression
    Assert.equals(state.expecting, "expression")
    
    Note: Verify tokens seen
    Assert.equals(Collections.list_length(state.tokens_seen), 2)
    Assert.equals(Collections.list_get(state.tokens_seen, 0), "count")
    Assert.equals(Collections.list_get(state.tokens_seen, 1), "by")
End Process

Note: =====================================================================
Note: PATTERN TYPE CLASSIFICATION TESTS
Note: =====================================================================

Process called "test_pattern_type_classification" returns Nothing:
    Note: Test imperative pattern classification
    Assert.is_true(StatementPatterns.is_imperative_pattern("IMPERATIVE_INCREASE"))
    Assert.is_true(StatementPatterns.is_imperative_pattern("IMPERATIVE_DECREASE"))
    Assert.is_true(StatementPatterns.is_imperative_pattern("IMPERATIVE_MULTIPLY"))
    Assert.is_false(StatementPatterns.is_imperative_pattern("IMPORT_MODULE"))
    
    Note: Test import pattern classification
    Assert.is_true(StatementPatterns.is_import_pattern("IMPORT_MODULE"))
    Assert.is_true(StatementPatterns.is_import_pattern("IMPORT_FROM"))
    Assert.is_false(StatementPatterns.is_import_pattern("IMPERATIVE_INCREASE"))
End Process

Note: =====================================================================
Note: PATTERN EXPECTATION UPDATES
Note: =====================================================================

Process called "test_pattern_expectation_updates" returns Nothing:
    Let state be StatementPatterns.create_pattern_state()
    Let patterns be StatementPatterns.get_imperative_patterns()
    Let scale_down_pattern be find_pattern_by_type(patterns, "IMPERATIVE_SCALE_DOWN")
    
    StatementPatterns.start_pattern_matching(state, scale_down_pattern)
    
    Note: Initial expectation
    Assert.equals(state.expecting, "identifier")
    
    Note: After identifier, expect first keyword
    Collections.list_append(state.tokens_seen, "value")
    StatementPatterns.update_pattern_expectation(state)
    Assert.equals(state.expecting, "keyword")
    
    Note: After first keyword "down", expect second keyword
    Collections.list_append(state.tokens_seen, "down")
    StatementPatterns.update_pattern_expectation(state)
    Assert.equals(state.expecting, "keyword")
    
    Note: After second keyword "by", expect expression
    Collections.list_append(state.tokens_seen, "by")
    StatementPatterns.update_pattern_expectation(state)
    Assert.equals(state.expecting, "expression")
End Process

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "find_pattern_by_type" that takes patterns as Collections.List, pattern_type as String returns StatementPattern:
    For i from 0 to Collections.list_length(patterns) minus 1:
        Let pattern be Collections.list_get(patterns, i)
        If pattern.pattern_type equals pattern_type:
            Return pattern
        End If
    End For
    Return StatementPatterns.create_null_pattern()
End Process

Note: =====================================================================
Note: TEST RUNNER
Note: =====================================================================

Process called "run_all_statement_pattern_tests" returns Nothing:
    @TestCases
        - Imperative assignment patterns (Increase, Decrease, Multiply, Divide, Scale)
        - Import patterns (Import Module ... as ..., Import ... from ...)
        - Pattern start detection
        - Pattern state management
        - Complete pattern matching flow
        - Pattern type classification
        - Pattern expectation updates
    @End TestCases
    
    test_imperative_increase_pattern()
    test_imperative_decrease_pattern()
    test_imperative_multiply_divide_patterns()
    test_scale_patterns()
    test_import_module_pattern()
    test_import_from_pattern()
    test_pattern_start_detection()
    test_pattern_state_management()
    test_complete_pattern_matching_flow()
    test_pattern_type_classification()
    test_pattern_expectation_updates()
    
    Print("All statement pattern tests passed!")
End Process