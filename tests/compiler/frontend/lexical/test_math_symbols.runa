Note:
tests/compiler/frontend/lexical/test_math_symbols.runa
Comprehensive tests for mathematical symbol recognition
:End Note

Import Module "compiler/frontend/lexical/math_symbols" as MathSymbols
Import Module "testing/assert" as Assert

@Reasoning
    Runa supports extensive mathematical notation through Unicode symbols.
    These tests ensure all mathematical symbols are properly recognized,
    categorized, and converted between symbol and canonical forms.
@End Reasoning

Note: =====================================================================
Note: FUNDAMENTAL ARITHMETIC SYMBOLS
Note: =====================================================================

Process called "test_fundamental_arithmetic_symbols" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test addition and subtraction
    Assert.is_true(MathSymbols.is_math_symbol(table, "∑"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∑"), "sum")
    Assert.equals(MathSymbols.get_symbol_category(table, "∑"), "summation")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "±"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "±"), "plus_minus")
    Assert.equals(MathSymbols.get_symbol_category(table, "±"), "arithmetic")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∓"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∓"), "minus_plus")
    
    Note: Test multiplication and division
    Assert.is_true(MathSymbols.is_math_symbol(table, "×"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "×"), "times")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "÷"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "÷"), "divided_by")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∏"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∏"), "product")
    Assert.equals(MathSymbols.get_symbol_category(table, "∏"), "product")
End Process

Note: =====================================================================
Note: COMPARISON AND RELATION SYMBOLS
Note: =====================================================================

Process called "test_comparison_symbols" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test inequality symbols
    Assert.is_true(MathSymbols.is_math_symbol(table, "≤"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≤"), "less_than_or_equal")
    Assert.equals(MathSymbols.get_symbol_category(table, "≤"), "comparison")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "≥"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≥"), "greater_than_or_equal")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "≪"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≪"), "much_less_than")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "≫"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≫"), "much_greater_than")
    
    Note: Test equality and equivalence
    Assert.is_true(MathSymbols.is_math_symbol(table, "≠"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≠"), "not_equal")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "≡"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≡"), "identical_to")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "≈"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "≈"), "approximately_equal")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∼"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∼"), "similar_to")
End Process

Note: =====================================================================
Note: SET THEORY SYMBOLS
Note: =====================================================================

Process called "test_set_theory_symbols" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test membership
    Assert.is_true(MathSymbols.is_math_symbol(table, "∈"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∈"), "element_of")
    Assert.equals(MathSymbols.get_symbol_category(table, "∈"), "set_theory")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∉"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∉"), "not_element_of")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∋"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∋"), "contains")
    
    Note: Test set operations
    Assert.is_true(MathSymbols.is_math_symbol(table, "∪"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∪"), "union")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∩"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∩"), "intersection")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "⊆"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⊆"), "subset_of_or_equal")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "⊂"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⊂"), "proper_subset")
    
    Note: Test special sets
    Assert.is_true(MathSymbols.is_math_symbol(table, "∅"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∅"), "empty_set")
End Process

Note: =====================================================================
Note: LOGICAL SYMBOLS
Note: =====================================================================

Process called "test_logical_symbols" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test logical operators
    Assert.is_true(MathSymbols.is_math_symbol(table, "∧"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∧"), "logical_and")
    Assert.equals(MathSymbols.get_symbol_category(table, "∧"), "logic")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∨"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∨"), "logical_or")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "¬"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "¬"), "logical_not")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "⊕"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⊕"), "exclusive_or")
    
    Note: Test quantifiers
    Assert.is_true(MathSymbols.is_math_symbol(table, "∀"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∀"), "for_all")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∃"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∃"), "there_exists")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∄"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∄"), "there_does_not_exist")
    
    Note: Test implications
    Assert.is_true(MathSymbols.is_math_symbol(table, "⇒"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⇒"), "implies")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "⇔"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⇔"), "if_and_only_if")
End Process

Note: =====================================================================
Note: CALCULUS SYMBOLS
Note: =====================================================================

Process called "test_calculus_symbols" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test derivatives
    Assert.is_true(MathSymbols.is_math_symbol(table, "∂"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∂"), "partial_derivative")
    Assert.equals(MathSymbols.get_symbol_category(table, "∂"), "calculus")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∇"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∇"), "nabla")
    
    Note: Test integrals
    Assert.is_true(MathSymbols.is_math_symbol(table, "∫"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∫"), "integral")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∬"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∬"), "double_integral")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∭"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∭"), "triple_integral")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∮"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∮"), "contour_integral")
    
    Note: Test limits
    Assert.is_true(MathSymbols.is_math_symbol(table, "∞"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∞"), "infinity")
End Process

Note: =====================================================================
Note: GREEK LETTERS
Note: =====================================================================

Process called "test_greek_letters" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test lowercase Greek letters
    Assert.is_true(MathSymbols.is_math_symbol(table, "α"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "α"), "alpha")
    Assert.equals(MathSymbols.get_symbol_category(table, "α"), "greek")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "β"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "β"), "beta")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "γ"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "γ"), "gamma")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "δ"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "δ"), "delta")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "π"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "π"), "pi")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "θ"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "θ"), "theta")
    
    Note: Test uppercase Greek letters
    Assert.is_true(MathSymbols.is_math_symbol(table, "Δ"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "Δ"), "Delta")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "Σ"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "Σ"), "Sigma")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "Ω"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "Ω"), "Omega")
End Process

Note: =====================================================================
Note: SPECIAL MATHEMATICAL SYMBOLS
Note: =====================================================================

Process called "test_special_math_symbols" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test roots and powers
    Assert.is_true(MathSymbols.is_math_symbol(table, "√"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "√"), "square_root")
    Assert.equals(MathSymbols.get_symbol_category(table, "√"), "special")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∛"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∛"), "cube_root")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∜"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∜"), "fourth_root")
    
    Note: Test proportionality
    Assert.is_true(MathSymbols.is_math_symbol(table, "∝"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∝"), "proportional_to")
    
    Note: Test special operators
    Assert.is_true(MathSymbols.is_math_symbol(table, "⊗"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⊗"), "tensor_product")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "⊙"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "⊙"), "hadamard_product")
    
    Assert.is_true(MathSymbols.is_math_symbol(table, "∘"))
    Assert.equals(MathSymbols.get_symbol_canonical(table, "∘"), "composition")
End Process

Note: =====================================================================
Note: SYMBOL CONVERSION TESTS
Note: =====================================================================

Process called "test_symbol_conversions" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test symbol to canonical conversion
    Assert.equals(MathSymbols.symbol_to_canonical(table, "∑"), "sum")
    Assert.equals(MathSymbols.symbol_to_canonical(table, "∏"), "product")
    Assert.equals(MathSymbols.symbol_to_canonical(table, "∫"), "integral")
    
    Note: Test canonical to symbol conversion
    Assert.equals(MathSymbols.canonical_to_symbol(table, "sum"), "∑")
    Assert.equals(MathSymbols.canonical_to_symbol(table, "product"), "∏")
    Assert.equals(MathSymbols.canonical_to_symbol(table, "integral"), "∫")
    
    Note: Test bidirectional conversion
    Let test_symbol be "∀"
    Let canonical be MathSymbols.symbol_to_canonical(table, test_symbol)
    Let back_to_symbol be MathSymbols.canonical_to_symbol(table, canonical)
    Assert.equals(test_symbol, back_to_symbol)
End Process

Note: =====================================================================
Note: SYMBOL CATEGORY TESTS
Note: =====================================================================

Process called "test_symbol_categories" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test getting all symbols in a category
    Let logic_symbols be MathSymbols.get_symbols_by_category(table, "logic")
    Assert.contains(logic_symbols, "∧")
    Assert.contains(logic_symbols, "∨")
    Assert.contains(logic_symbols, "¬")
    Assert.contains(logic_symbols, "⇒")
    
    Let set_symbols be MathSymbols.get_symbols_by_category(table, "set_theory")
    Assert.contains(set_symbols, "∈")
    Assert.contains(set_symbols, "∪")
    Assert.contains(set_symbols, "∩")
    
    Let calculus_symbols be MathSymbols.get_symbols_by_category(table, "calculus")
    Assert.contains(calculus_symbols, "∂")
    Assert.contains(calculus_symbols, "∫")
    Assert.contains(calculus_symbols, "∇")
    
    Note: Test category counting
    Assert.is_greater_than(MathSymbols.count_symbols_in_category(table, "greek"), 20)
    Assert.is_greater_than(MathSymbols.count_symbols_in_category(table, "comparison"), 5)
End Process

Note: =====================================================================
Note: SYMBOL VALIDATION TESTS
Note: =====================================================================

Process called "test_symbol_validation" returns Nothing:
    Let table be MathSymbols.create_symbol_table()
    
    Note: Test valid symbols
    Assert.is_true(MathSymbols.is_valid_math_symbol(table, "∑"))
    Assert.is_true(MathSymbols.is_valid_math_symbol(table, "∫"))
    Assert.is_true(MathSymbols.is_valid_math_symbol(table, "α"))
    
    Note: Test invalid symbols
    Assert.is_false(MathSymbols.is_valid_math_symbol(table, "@"))
    Assert.is_false(MathSymbols.is_valid_math_symbol(table, "#"))
    Assert.is_false(MathSymbols.is_valid_math_symbol(table, "$"))
    
    Note: Test multi-character symbols
    Assert.is_true(MathSymbols.is_valid_math_sequence(table, "∑∏"))
    Assert.is_true(MathSymbols.is_valid_math_sequence(table, "∫dx"))
    Assert.is_false(MathSymbols.is_valid_math_sequence(table, "∑@"))
End Process

Note: =====================================================================
Note: TEST RUNNER
Note: =====================================================================

Process called "run_all_math_symbol_tests" returns Nothing:
    @TestCases
        - Fundamental arithmetic symbols (sum, product, plus/minus)
        - Comparison and relation symbols (≤, ≥, ≈, ≡)
        - Set theory symbols (∈, ∪, ∩, ⊆)
        - Logical symbols (∧, ∨, ¬, ∀, ∃)
        - Calculus symbols (∂, ∫, ∇, ∞)
        - Greek letters (α, β, γ, π, Σ, Δ)
        - Special mathematical symbols (√, ∝, ⊗)
        - Symbol to canonical conversions
        - Symbol categorization
        - Symbol validation
    @End TestCases
    
    test_fundamental_arithmetic_symbols()
    test_comparison_symbols()
    test_set_theory_symbols()
    test_logical_symbols()
    test_calculus_symbols()
    test_greek_letters()
    test_special_math_symbols()
    test_symbol_conversions()
    test_symbol_categories()
    test_symbol_validation()
    
    Print("All math symbol tests passed!")
End Process