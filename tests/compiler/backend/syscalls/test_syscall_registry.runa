Note:
tests/compiler/backend/syscalls/test_syscall_registry.runa
Comprehensive Tests for Syscall Registry

This module validates the centralized syscall registry that serves as the
single source of truth for syscall names, metadata, and platform support.
It ensures consistency and correctness of syscall definitions across all platforms.

Key test areas:
- Syscall name constant validation
- Platform support matrix verification  
- Syscall metadata integrity
- Category classification accuracy
- Version compatibility tracking
- Security capability requirements
- Cross-platform consistency
- Registry lookup performance
:End Note

Import "compiler/backend/syscalls/syscall_registry" as Registry
Import "compiler/frontend/primitives/types/compiler_internals" as Internals
Import "testing/test_framework" as Test

@Reasoning
The syscall registry is the foundation for all syscall operations. These tests
ensure that syscall definitions are correct, consistent, and properly categorized
across all supported platforms, preventing runtime failures and security issues.
@End Reasoning

Note: =====================================================================
Note: SYSCALL NAME CONSTANT TESTS
Note: =====================================================================

Process called "test_file_io_syscall_constants" returns Nothing:
    @TestCases
    - Verify all file I/O syscall names are defined
    - Check constant values match expected strings
    - Ensure no typos or incorrect names
    - Validate completeness of file operations
    @End TestCases
    
    Note: Test fundamental file operations
    Test.assert_equals(Registry.SYSCALL_READ, "read")
    Test.assert_equals(Registry.SYSCALL_WRITE, "write")
    Test.assert_equals(Registry.SYSCALL_OPEN, "open")
    Test.assert_equals(Registry.SYSCALL_CLOSE, "close")
    
    Note: Test file status operations
    Test.assert_equals(Registry.SYSCALL_STAT, "stat")
    Test.assert_equals(Registry.SYSCALL_FSTAT, "fstat")
    Test.assert_equals(Registry.SYSCALL_LSTAT, "lstat")
    
    Note: Test file positioning
    Test.assert_equals(Registry.SYSCALL_LSEEK, "lseek")
    
    Note: Test memory mapping
    Test.assert_equals(Registry.SYSCALL_MMAP, "mmap")
    Test.assert_equals(Registry.SYSCALL_MUNMAP, "munmap")
    Test.assert_equals(Registry.SYSCALL_MSYNC, "msync")
    Test.assert_equals(Registry.SYSCALL_MADVISE, "madvise")
    
    Note: Test file control operations
    Test.assert_equals(Registry.SYSCALL_FCNTL, "fcntl")
    Test.assert_equals(Registry.SYSCALL_IOCTL, "ioctl")
    
    Note: Test file descriptor operations
    Test.assert_equals(Registry.SYSCALL_DUP, "dup")
    Test.assert_equals(Registry.SYSCALL_DUP2, "dup2")
    
    Note: Test pipe operations
    Test.assert_equals(Registry.SYSCALL_PIPE, "pipe")
    Test.assert_equals(Registry.SYSCALL_PIPE2, "pipe2")
    
    Note: Test synchronization operations
    Test.assert_equals(Registry.SYSCALL_FSYNC, "fsync")
    Test.assert_equals(Registry.SYSCALL_FDATASYNC, "fdatasync")
End Process

Process called "test_process_management_syscall_constants" returns Nothing:
    @TestCases
    - Verify process management syscall names
    - Check process creation and termination
    - Validate process identification syscalls
    - Ensure user/group management syscalls
    @End TestCases
    
    Note: Test process creation
    Test.assert_equals(Registry.SYSCALL_FORK, "fork")
    Test.assert_equals(Registry.SYSCALL_VFORK, "vfork")
    Test.assert_equals(Registry.SYSCALL_EXECVE, "execve")
    
    Note: Test process termination
    Test.assert_equals(Registry.SYSCALL_EXIT, "exit")
    Test.assert_equals(Registry.SYSCALL_EXIT_GROUP, "exit_group")
    
    Note: Test process waiting
    Test.assert_equals(Registry.SYSCALL_WAIT4, "wait4")
    Test.assert_equals(Registry.SYSCALL_WAITPID, "waitpid")
    
    Note: Test process signaling
    Test.assert_equals(Registry.SYSCALL_KILL, "kill")
    
    Note: Test process identification
    Test.assert_equals(Registry.SYSCALL_GETPID, "getpid")
    Test.assert_equals(Registry.SYSCALL_GETPPID, "getppid")
    
    Note: Test user/group identification
    Test.assert_equals(Registry.SYSCALL_GETUID, "getuid")
    Test.assert_equals(Registry.SYSCALL_GETEUID, "geteuid")
    Test.assert_equals(Registry.SYSCALL_GETGID, "getgid")
    Test.assert_equals(Registry.SYSCALL_GETEGID, "getegid")
    
    Note: Test user/group modification
    Test.assert_equals(Registry.SYSCALL_SETUID, "setuid")
    Test.assert_equals(Registry.SYSCALL_SETGID, "setgid")
    
    Note: Test session management
    Test.assert_equals(Registry.SYSCALL_SETSID, "setsid")
End Process

Process called "test_memory_management_syscall_constants" returns Nothing:
    @TestCases
    - Verify memory management syscall names
    - Check heap management operations
    - Validate memory protection syscalls
    - Ensure memory locking operations
    @End TestCases
    
    Note: Test heap management
    Test.assert_equals(Registry.SYSCALL_BRK, "brk")
    Test.assert_equals(Registry.SYSCALL_SBRK, "sbrk")
    
    Note: Test memory protection
    Test.assert_equals(Registry.SYSCALL_MPROTECT, "mprotect")
    
    Note: Test memory locking
    Test.assert_equals(Registry.SYSCALL_MLOCK, "mlock")
    Test.assert_equals(Registry.SYSCALL_MUNLOCK, "munlock")
    Test.assert_equals(Registry.SYSCALL_MLOCKALL, "mlockall")
    Test.assert_equals(Registry.SYSCALL_MUNLOCKALL, "munlockall")
    
    Note: Test memory remapping
    Test.assert_equals(Registry.SYSCALL_MREMAP, "mremap")
End Process

Process called "test_network_syscall_constants" returns Nothing:
    @TestCases
    - Verify network syscall names
    - Check socket creation and management
    - Validate data transmission syscalls
    - Ensure socket option operations
    @End TestCases
    
    Note: Test socket creation and binding
    Test.assert_equals(Registry.SYSCALL_SOCKET, "socket")
    Test.assert_equals(Registry.SYSCALL_BIND, "bind")
    Test.assert_equals(Registry.SYSCALL_LISTEN, "listen")
    
    Note: Test connection management
    Test.assert_equals(Registry.SYSCALL_ACCEPT, "accept")
    Test.assert_equals(Registry.SYSCALL_ACCEPT4, "accept4")
    Test.assert_equals(Registry.SYSCALL_CONNECT, "connect")
    
    Note: Test data transmission
    Test.assert_equals(Registry.SYSCALL_SEND, "send")
    Test.assert_equals(Registry.SYSCALL_SENDTO, "sendto")
    Test.assert_equals(Registry.SYSCALL_SENDMSG, "sendmsg")
    Test.assert_equals(Registry.SYSCALL_RECV, "recv")
    Test.assert_equals(Registry.SYSCALL_RECVFROM, "recvfrom")
    Test.assert_equals(Registry.SYSCALL_RECVMSG, "recvmsg")
    
    Note: Test socket shutdown
    Test.assert_equals(Registry.SYSCALL_SHUTDOWN, "shutdown")
    
    Note: Test socket options
    Test.assert_equals(Registry.SYSCALL_GETSOCKOPT, "getsockopt")
    Test.assert_equals(Registry.SYSCALL_SETSOCKOPT, "setsockopt")
    
    Note: Test I/O multiplexing
    Test.assert_equals(Registry.SYSCALL_POLL, "poll")
    Test.assert_equals(Registry.SYSCALL_SELECT, "select")
    Test.assert_equals(Registry.SYSCALL_EPOLL_CREATE, "epoll_create")
    Test.assert_equals(Registry.SYSCALL_EPOLL_CTL, "epoll_ctl")
    Test.assert_equals(Registry.SYSCALL_EPOLL_WAIT, "epoll_wait")
End Process

Process called "test_time_syscall_constants" returns Nothing:
    @TestCases
    - Verify time-related syscall names
    - Check time retrieval operations
    - Validate time setting operations
    - Ensure clock resolution queries
    @End TestCases
    
    Note: Test time retrieval
    Test.assert_equals(Registry.SYSCALL_TIME, "time")
    Test.assert_equals(Registry.SYSCALL_GETTIMEOFDAY, "gettimeofday")
    
    Note: Test time setting
    Test.assert_equals(Registry.SYSCALL_SETTIMEOFDAY, "settimeofday")
    
    Note: Test clock operations
    Test.assert_equals(Registry.SYSCALL_CLOCK_GETTIME, "clock_gettime")
    Test.assert_equals(Registry.SYSCALL_CLOCK_SETTIME, "clock_settime")
    Test.assert_equals(Registry.SYSCALL_CLOCK_GETRES, "clock_getres")
End Process

Note: =====================================================================
Note: SYSCALL METADATA TESTS
Note: =====================================================================

Process called "test_syscall_metadata_integrity" returns Nothing:
    @TestCases
    - Verify syscall metadata structure
    - Check parameter count accuracy
    - Validate return type information
    - Ensure error code mappings
    @End TestCases
    
    Note: Get metadata for read syscall
    Let read_metadata be Registry.get_syscall_metadata(Registry.SYSCALL_READ)
    
    Note: Verify metadata fields
    Test.assert_equals(read_metadata.name, "read")
    Test.assert_equals(read_metadata.category, "file_io")
    Test.assert_equals(read_metadata.parameter_count, 3)
    Test.assert_equals(read_metadata.return_type, "ssize_t")
    
    Note: Verify parameter types
    Test.assert_equals(read_metadata.param_types[0], "int")      Note: fd
    Test.assert_equals(read_metadata.param_types[1], "void*")    Note: buffer
    Test.assert_equals(read_metadata.param_types[2], "size_t")   Note: count
    
    Note: Verify error conditions
    Test.assert_contains(read_metadata.error_codes, "EBADF")
    Test.assert_contains(read_metadata.error_codes, "EFAULT")
    Test.assert_contains(read_metadata.error_codes, "EINTR")
    Test.assert_contains(read_metadata.error_codes, "EINVAL")
    Test.assert_contains(read_metadata.error_codes, "EIO")
    
    Note: Test metadata for socket syscall
    Let socket_metadata be Registry.get_syscall_metadata(Registry.SYSCALL_SOCKET)
    
    Test.assert_equals(socket_metadata.name, "socket")
    Test.assert_equals(socket_metadata.category, "network")
    Test.assert_equals(socket_metadata.parameter_count, 3)
    Test.assert_equals(socket_metadata.return_type, "int")
    
    Note: Verify socket parameter types
    Test.assert_equals(socket_metadata.param_types[0], "int")     Note: domain
    Test.assert_equals(socket_metadata.param_types[1], "int")     Note: type
    Test.assert_equals(socket_metadata.param_types[2], "int")     Note: protocol
End Process

Process called "test_syscall_categorization" returns Nothing:
    @TestCases
    - Verify syscalls are properly categorized
    - Check category completeness
    - Validate category naming consistency
    - Ensure no orphaned syscalls
    @End TestCases
    
    Note: Get all syscall categories
    Let categories be Registry.get_all_categories()
    
    Note: Verify expected categories exist
    Test.assert_contains(categories, "file_io")
    Test.assert_contains(categories, "process")
    Test.assert_contains(categories, "memory")
    Test.assert_contains(categories, "network")
    Test.assert_contains(categories, "time")
    Test.assert_contains(categories, "signal")
    Test.assert_contains(categories, "ipc")
    Test.assert_contains(categories, "security")
    
    Note: Test syscalls by category
    Let file_io_syscalls be Registry.get_syscalls_by_category("file_io")
    Test.assert_contains(file_io_syscalls, Registry.SYSCALL_READ)
    Test.assert_contains(file_io_syscalls, Registry.SYSCALL_WRITE)
    Test.assert_contains(file_io_syscalls, Registry.SYSCALL_OPEN)
    Test.assert_contains(file_io_syscalls, Registry.SYSCALL_CLOSE)
    
    Let process_syscalls be Registry.get_syscalls_by_category("process")
    Test.assert_contains(process_syscalls, Registry.SYSCALL_FORK)
    Test.assert_contains(process_syscalls, Registry.SYSCALL_EXECVE)
    Test.assert_contains(process_syscalls, Registry.SYSCALL_EXIT)
    
    Let network_syscalls be Registry.get_syscalls_by_category("network")
    Test.assert_contains(network_syscalls, Registry.SYSCALL_SOCKET)
    Test.assert_contains(network_syscalls, Registry.SYSCALL_BIND)
    Test.assert_contains(network_syscalls, Registry.SYSCALL_CONNECT)
    
    Note: Verify no syscall belongs to multiple categories
    For Each syscall in Registry.get_all_syscalls():
        Let category_count be 0
        For Each category in categories:
            Let syscalls_in_category be Registry.get_syscalls_by_category(category)
            If contains(syscalls_in_category, syscall):
                Set category_count to category_count plus 1
            End If
        End For
        Test.assert_equals(category_count, 1)  Note: Each syscall in exactly one category
    End For
End Process

Note: =====================================================================
Note: PLATFORM SUPPORT TESTS
Note: =====================================================================

Process called "test_platform_support_matrix" returns Nothing:
    @TestCases
    - Verify platform support for common syscalls
    - Check platform-specific syscall availability
    - Validate syscall number mappings
    - Ensure no conflicts in syscall numbers
    @End TestCases
    
    Let platforms be ["linux_x64", "linux_arm64", "darwin_x64", "darwin_arm64", 
                     "freebsd_x64", "openbsd_x64", "netbsd_x64", "windows_x64"]
    
    Note: Test common syscalls supported across POSIX platforms
    Let posix_platforms be ["linux_x64", "linux_arm64", "darwin_x64", "darwin_arm64",
                           "freebsd_x64", "openbsd_x64", "netbsd_x64"]
    
    Let common_posix_syscalls be [
        Registry.SYSCALL_READ,
        Registry.SYSCALL_WRITE,
        Registry.SYSCALL_OPEN,
        Registry.SYSCALL_CLOSE,
        Registry.SYSCALL_FORK,
        Registry.SYSCALL_EXECVE,
        Registry.SYSCALL_EXIT
    ]
    
    For Each platform in posix_platforms:
        For Each syscall in common_posix_syscalls:
            Test.assert_true(
                Registry.is_syscall_supported(syscall, platform),
                syscall + " should be supported on " + platform
            )
            
            Note: Verify syscall has a valid number
            Let syscall_num be Registry.get_syscall_number(syscall, platform)
            Test.assert_greater_than_or_equal(syscall_num, 0)
        End For
    End For
    
    Note: Test Linux-specific syscalls
    Let linux_specific be ["epoll_create", "epoll_ctl", "epoll_wait", "io_uring_setup"]
    
    For Each syscall in linux_specific:
        Test.assert_true(Registry.is_syscall_supported(syscall, "linux_x64"))
        Test.assert_false(Registry.is_syscall_supported(syscall, "darwin_x64"))
        Test.assert_false(Registry.is_syscall_supported(syscall, "windows_x64"))
    End For
    
    Note: Test Darwin-specific syscalls
    Let darwin_specific be ["kqueue", "kevent"]
    
    For Each syscall in darwin_specific:
        Test.assert_true(Registry.is_syscall_supported(syscall, "darwin_x64"))
        Test.assert_false(Registry.is_syscall_supported(syscall, "linux_x64"))
    End For
    
    Note: Test Windows-specific syscalls
    Let windows_specific be ["NtCreateFile", "NtReadFile", "NtWriteFile"]
    
    For Each syscall in windows_specific:
        Test.assert_true(Registry.is_syscall_supported(syscall, "windows_x64"))
        Test.assert_false(Registry.is_syscall_supported(syscall, "linux_x64"))
    End For
End Process

Process called "test_syscall_number_consistency" returns Nothing:
    @TestCases
    - Verify syscall numbers are unique per platform
    - Check syscall number ranges
    - Validate no number conflicts
    - Ensure stable syscall numbers
    @End TestCases
    
    Let platforms be ["linux_x64", "darwin_x64", "freebsd_x64"]
    
    For Each platform in platforms:
        Note: Get all syscall numbers for this platform
        Let syscall_numbers be create_integer_set()
        Let all_syscalls be Registry.get_all_syscalls()
        
        For Each syscall in all_syscalls:
            If Registry.is_syscall_supported(syscall, platform):
                Let num be Registry.get_syscall_number(syscall, platform)
                
                Note: Check for duplicate syscall numbers
                Test.assert_false(
                    contains_integer(syscall_numbers, num),
                    "Duplicate syscall number " + string_from_integer(num) + 
                    " for " + syscall + " on " + platform
                )
                
                add_to_integer_set(syscall_numbers, num)
                
                Note: Verify syscall number is in valid range
                If platform starts_with "linux":
                    Test.assert_less_than(num, 1000)  Note: Linux syscalls typically < 1000
                End If
                
                If platform starts_with "darwin":
                    Note: Darwin uses high bits for syscall class
                    Test.assert_true(num greater than 0 Or num less than 0)  Note: Can be negative
                End If
            End If
        End For
    End For
End Process

Note: =====================================================================
Note: VERSION COMPATIBILITY TESTS
Note: =====================================================================

Process called "test_version_compatibility" returns Nothing:
    @TestCases
    - Verify kernel version requirements
    - Check deprecated syscall handling
    - Validate version-specific features
    - Ensure backward compatibility
    @End TestCases
    
    Note: Test syscall version requirements
    Let io_uring_min_version be Registry.get_min_kernel_version("io_uring_setup", "linux")
    Test.assert_equals(io_uring_min_version.major, 5)
    Test.assert_greater_than_or_equal(io_uring_min_version.minor, 1)
    
    Let pidfd_min_version be Registry.get_min_kernel_version("pidfd_open", "linux")
    Test.assert_equals(pidfd_min_version.major, 5)
    Test.assert_greater_than_or_equal(pidfd_min_version.minor, 3)
    
    Note: Test deprecated syscall warnings
    Let deprecated_syscalls be Registry.get_deprecated_syscalls("linux")
    Test.assert_contains(deprecated_syscalls, "alarm")      Note: Replaced by setitimer
    Test.assert_contains(deprecated_syscalls, "utime")      Note: Replaced by utimensat
    Test.assert_contains(deprecated_syscalls, "access")     Note: Replaced by faccessat
    
    Note: Test replacement syscalls
    Let alarm_replacement be Registry.get_replacement_syscall("alarm", "linux")
    Test.assert_equals(alarm_replacement, "setitimer")
    
    Let utime_replacement be Registry.get_replacement_syscall("utime", "linux")
    Test.assert_equals(utime_replacement, "utimensat")
End Process

Note: =====================================================================
Note: SECURITY CAPABILITY TESTS
Note: =====================================================================

Process called "test_security_capabilities" returns Nothing:
    @TestCases
    - Verify capability requirements for syscalls
    - Check privileged syscall identification
    - Validate security context requirements
    - Ensure proper permission mapping
    @End TestCases
    
    Note: Test capability requirements
    Let mount_caps be Registry.get_required_capabilities(Registry.SYSCALL_MOUNT, "linux")
    Test.assert_contains(mount_caps, "CAP_SYS_ADMIN")
    
    Let setuid_caps be Registry.get_required_capabilities(Registry.SYSCALL_SETUID, "linux")
    Test.assert_contains(setuid_caps, "CAP_SETUID")
    
    Let reboot_caps be Registry.get_required_capabilities("reboot", "linux")
    Test.assert_contains(reboot_caps, "CAP_SYS_BOOT")
    
    Note: Test privileged syscall identification
    Test.assert_true(Registry.is_privileged_syscall(Registry.SYSCALL_MOUNT))
    Test.assert_true(Registry.is_privileged_syscall("reboot"))
    Test.assert_true(Registry.is_privileged_syscall("init_module"))
    
    Test.assert_false(Registry.is_privileged_syscall(Registry.SYSCALL_READ))
    Test.assert_false(Registry.is_privileged_syscall(Registry.SYSCALL_WRITE))
    Test.assert_false(Registry.is_privileged_syscall(Registry.SYSCALL_GETPID))
    
    Note: Test seccomp filter compatibility
    Let seccomp_allowed be Registry.get_seccomp_safe_syscalls()
    Test.assert_contains(seccomp_allowed, Registry.SYSCALL_READ)
    Test.assert_contains(seccomp_allowed, Registry.SYSCALL_WRITE)
    Test.assert_not_contains(seccomp_allowed, Registry.SYSCALL_MOUNT)
    Test.assert_not_contains(seccomp_allowed, "ptrace")
End Process

Note: =====================================================================
Note: PERFORMANCE AND OPTIMIZATION TESTS
Note: =====================================================================

Process called "test_registry_lookup_performance" returns Nothing:
    @TestCases
    - Verify fast syscall lookups
    - Check caching effectiveness
    - Validate lookup complexity
    - Ensure efficient memory usage
    @End TestCases
    
    Note: Measure lookup performance for common syscalls
    Let start_time be get_current_time_ns()
    
    For i from 0 to 999:
        Let _ be Registry.get_syscall_number(Registry.SYSCALL_READ, "linux_x64")
        Let _ be Registry.get_syscall_metadata(Registry.SYSCALL_WRITE)
        Let _ be Registry.is_syscall_supported(Registry.SYSCALL_OPEN, "darwin_x64")
    End For
    
    Let end_time be get_current_time_ns()
    Let elapsed_ms be (end_time minus start_time) divided_by 1000000
    
    Note: 3000 lookups should complete in under 10ms
    Test.assert_less_than(elapsed_ms, 10)
    
    Note: Test cache effectiveness
    Let cache_stats be Registry.get_cache_statistics()
    Test.assert_greater_than(cache_stats.hit_rate, 0.95)  Note: 95% cache hit rate
    
    Note: Verify memory usage is reasonable
    Let memory_usage be Registry.get_memory_usage()
    Test.assert_less_than(memory_usage, 1048576)  Note: Less than 1MB
End Process

Note: =====================================================================
Note: HELPER FUNCTIONS
Note: =====================================================================

Process called "contains" that takes list as Internals.InternalArray, item as String returns Boolean:
    Let length be Internals.internal_array_length(list)
    For i from 0 to length minus 1:
        Let element be Internals.internal_array_get(list, i)
        If Internals.ptr_to_string(element) equals item:
            Return True
        End If
    End For
    Return False
End Process

Process called "create_integer_set" returns Internals.InternalMap:
    Return Internals.create_internal_map()
End Process

Process called "contains_integer" that takes set as Internals.InternalMap, value as Integer returns Boolean:
    Let key be Internals.integer_to_ptr(value)
    Let result be Internals.internal_map_get(set, key)
    Return result not equals 0
End Process

Process called "add_to_integer_set" that takes set as Internals.InternalMap, value as Integer returns Nothing:
    Let key be Internals.integer_to_ptr(value)
    Internals.internal_map_set(set, key, 1)
End Process

Process called "starts_with" that takes str as String, prefix as String returns Boolean:
    Return Internals.string_starts_with(str, prefix)
End Process

Process called "string_from_integer" that takes value as Integer returns String:
    Return Internals.integer_to_string(value)
End Process

Process called "divided_by" that takes a as Integer, b as Integer returns Integer:
    Return a / b
End Process

Process called "get_current_time_ns" returns Integer:
    Return Internals.get_system_time_nanoseconds()
End Process

Note: =====================================================================
Note: TEST RUNNER
Note: =====================================================================

Process called "run_all_syscall_registry_tests" returns Nothing:
    @TestCases
    Complete test coverage for syscall registry:
    - File I/O syscall constants
    - Process management syscall constants
    - Memory management syscall constants
    - Network syscall constants
    - Time syscall constants
    - Syscall metadata integrity
    - Syscall categorization
    - Platform support matrix
    - Version compatibility
    - Security capabilities
    - Registry performance
    @End TestCases
    
    Print("Testing Syscall Registry...")
    Print("===========================")
    
    test_file_io_syscall_constants()
    test_process_management_syscall_constants()
    test_memory_management_syscall_constants()
    test_network_syscall_constants()
    test_time_syscall_constants()
    test_syscall_metadata_integrity()
    test_syscall_categorization()
    test_platform_support_matrix()
    test_syscall_number_consistency()
    test_version_compatibility()
    test_security_capabilities()
    test_registry_lookup_performance()
    
    Print("All syscall registry tests passed!")
End Process

@Performance_Hints
These tests should be optimized for:
- Fast constant validation without syscall overhead
- Efficient metadata structure verification
- Parallel test execution where possible
- Memory-efficient data structure validation
@End Performance_Hints

@Security_Scope
The syscall registry tests operate with:
- Read-only access to syscall definitions
- No actual syscall execution
- Verification of security metadata without exploitation
- Safe capability requirement checking
@End Security_Scope