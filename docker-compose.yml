version: '3.8'

services:
  # Runa Main Runtime
  runa:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: runa-runtime
    environment:
      - RUNA_ENV=production
      - RUNA_LOG_LEVEL=INFO
      - RUNA_CACHE_DIR=/opt/runa/cache
    volumes:
      - runa_cache:/opt/runa/cache
      - runa_logs:/opt/runa/logs
      - ./examples:/opt/runa/examples:ro
    ports:
      - "8080:8080"
    networks:
      - runa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from src.runa.core.pipeline import get_pipeline; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Runa Package Registry Server
  runa-registry:
    build:
      context: .
      dockerfile: docker/registry.Dockerfile
    container_name: runa-registry
    environment:
      - REGISTRY_HOST=0.0.0.0
      - REGISTRY_PORT=8080
      - REGISTRY_TOKEN=${RUNA_REGISTRY_TOKEN:-runa-dev-token-change-in-production}
      - REGISTRY_DATA_DIR=/var/lib/runa-registry
      - REGISTRY_LOG_DIR=/var/log/runa-registry
    volumes:
      - registry_data:/var/lib/runa-registry
      - registry_logs:/var/log/runa-registry
    ports:
      - "8081:8080"
    networks:
      - runa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: runa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - runa-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for package metadata (optional)
  postgres:
    image: postgres:15-alpine
    container_name: runa-postgres
    environment:
      - POSTGRES_DB=runa_registry
      - POSTGRES_USER=runa
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-runa-dev-password-change-in-production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - runa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U runa"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: runa-nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - runa-network
    depends_on:
      - runa
      - runa-registry
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  runa_cache:
    driver: local
  runa_logs:
    driver: local
  registry_data:
    driver: local
  registry_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  runa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16