# Prime Number Checker Example
# Demonstrates modulo operator and loops

Process called "is_prime" takes n as Integer returns Integer:
    # Handle edge cases
    If n is less than or equal to 1:
        Return 0  # false
    End If

    If n is equal to 2:
        Return 1  # true
    End If

    # Check if even
    Let remainder be n modulo by 2
    If remainder is equal to 0:
        Return 0  # false
    End If

    # Check odd divisors up to sqrt(n)
    Let divisor be 3
    Let continue_checking be 1

    While continue_checking is equal to 1:
        Let square be divisor multiplied by divisor
        If square is greater than n:
            Set continue_checking to 0
        Otherwise:
            Let mod_result be n modulo by divisor
            If mod_result is equal to 0:
                Return 0  # false - not prime
            End If
            Set divisor to divisor plus 2
        End If
    End While

    Return 1  # true - is prime
End Process

Process called "main" returns Integer:
    # Check some numbers for primality
    Let test_num be 17

    system_print("Testing if 17 is prime: ")
    Let result be is_prime(test_num)
    If result is equal to 1:
        system_print("Yes, it's prime!")
    Otherwise:
        system_print("No, it's not prime.")
    End If

    # Test a non-prime
    Set test_num to 21
    system_print("Testing if 21 is prime: ")
    Set result to is_prime(test_num)
    If result is equal to 1:
        system_print("Yes, it's prime!")
    Otherwise:
        system_print("No, it's not prime.")
    End If

    Return 0
End Process