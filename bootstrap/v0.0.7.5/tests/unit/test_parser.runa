Process called "test_parser_arithmetic" returns Integer:
    Let source be "2 plus 3 multiplied by 4"
    Let lexer be lexer_create(source)
    Let parser be parser_create(lexer)

    Let expr be parse_expression(parser)

    # Verify AST structure for precedence
    assert(expr_get_type(expr) is equal to EXPR_BINARY_OP)
    assert(expr_get_operator(expr) is equal to TOKEN_PLUS)

    Let right be expr_get_right(expr)
    assert(expr_get_type(right) is equal to EXPR_BINARY_OP)
    assert(expr_get_operator(right) is equal to TOKEN_MULTIPLIED)

    parser_destroy(parser)
    lexer_destroy(lexer)
    Return 0
End Process

Process called "test_parser_function_call" returns Integer:
    Let source be "add(10, 20)"
    Let lexer be lexer_create(source)
    Let parser be parser_create(lexer)

    Let expr be parse_expression(parser)

    assert(expr_get_type(expr) is equal to EXPR_FUNCTION_CALL)
    Let func_name be expr_get_function_name(expr)
    assert(string_equals(func_name, "add"))

    Let arg_count be expr_get_argument_count(expr)
    assert(arg_count is equal to 2)

    parser_destroy(parser)
    lexer_destroy(lexer)
    Return 0
End Process