# Recursion Integration Test
# Tests multiple recursive functions

Process called "gcd" takes a as Integer, b as Integer returns Integer:
    # Greatest Common Divisor using Euclidean algorithm
    If b is equal to 0:
        Return a
    End If

    Let remainder be a modulo b
    Return gcd(b, remainder)
End Process

Process called "power" takes base as Integer, exp as Integer returns Integer:
    # Calculate base^exp recursively
    If exp is equal to 0:
        Return 1
    End If

    Let exp_minus_one be exp minus 1
    Let recursive_result be power(base, exp_minus_one)
    Return base multiplied by recursive_result
End Process

Process called "sum_to_n" takes n as Integer returns Integer:
    # Sum of numbers from 1 to n
    If n is less than or equal to 0:
        Return 0
    End If

    Let n_minus_one be n minus 1
    Let recursive_sum be sum_to_n(n_minus_one)
    Return n plus recursive_sum
End Process

Process called "main" returns Integer:
    # Test GCD
    Let gcd_result be gcd(48, 18)
    If gcd_result is not equal to 6:
        Return 1
    End If

    # Test power function
    Let power_result be power(2, 8)
    If power_result is not equal to 256:
        Return 2
    End If

    # Test sum to n
    Let sum_result be sum_to_n(10)
    # Should be 1+2+3+4+5+6+7+8+9+10 = 55
    If sum_result is not equal to 55:
        Return 3
    End If

    # Test edge cases
    Let edge_power be power(5, 0)
    If edge_power is not equal to 1:
        Return 4
    End If

    Let edge_gcd be gcd(17, 0)
    If edge_gcd is not equal to 17:
        Return 5
    End If

    Return 0
End Process