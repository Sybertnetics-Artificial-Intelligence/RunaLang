Import "lexer.runa" as Lexer
Import "parser.runa" as Parser
Import "codegen.runa" as Codegen

Process called "read_file" takes filename as String returns String:
    Let file be fopen(filename, "r")
    If file is equal to null:
        fprintf(stderr, "[MAIN ERROR] Could not open input file '%s'\n", filename)
        Return null
    End If

    fseek(file, 0, SEEK_END)
    Let length be ftell(file)
    fseek(file, 0, SEEK_SET)

    Let content be malloc(length plus 1)
    Let bytes_read be fread(content, 1, length, file)
    Set content[length] to '\0'

    fclose(file)
    Return content
End Process

Process called "main" takes argc as Integer, argv as String returns Integer:
    If argc is not equal to 3:
        fprintf(stderr, "Usage: %s <input.runa> <output.s>\n", argv[0])
        Return 1
    End If

    Let input_filename be argv[1]
    Let output_filename be argv[2]

    Let source_code be read_file(input_filename)
    If source_code is equal to null:
        Return 1
    End If

    Let lexer be Lexer.lexer_create(source_code)
    Let parser be Parser.parser_create(lexer)
    Let program be Parser.parser_parse_program(parser)

    Let codegen be Codegen.codegen_create(output_filename)
    If codegen is equal to null:
        Parser.program_destroy(program)
        Parser.parser_destroy(parser)
        Lexer.lexer_destroy(lexer)
        free(source_code)
        Return 1
    End If

    Codegen.codegen_generate(codegen, program)

    printf("Successfully compiled '%s' to '%s'\n", input_filename, output_filename)

    Codegen.codegen_destroy(codegen)
    Parser.program_destroy(program)
    Parser.parser_destroy(parser)
    Lexer.lexer_destroy(lexer)
    free(source_code)

    Return 0
End Process