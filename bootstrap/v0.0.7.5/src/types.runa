# Shared type definitions for Runa self-hosted compiler v0.0.7.5
# These types correspond to the C structs from v0.0.7
# IMPORTANT: Only uses features available in v0.0.7

# Individual token (corresponds to Token struct in lexer.h)
Type called "Token":
    token_type as Integer,
    value as String,
    line as Integer,
    column as Integer
End Type

# Lexer state (corresponds to Lexer struct in lexer.h)
Type called "Lexer":
    source as String,
    position as Integer,
    line as Integer,
    column as Integer,
    current_char as String
End Type

# Expression (corresponds to Expression struct in parser.h)
Type called "Expression":
    expr_type as Integer,
    integer_value as Integer,
    variable_name as String,
    string_literal as String,
    type_name as String,
    left as Expression,
    right as Expression,
    operator as Integer,
    comparison_op as Integer,
    function_name as String,
    object as Expression,
    field_name as String,
    builtin_type as Integer
End Type

# Statement types enumeration (corresponds to StatementType enum in parser.h)
Type called "StatementType":
    value as Integer
End Type

# Forward declare Statement for recursive references
Type called "Statement":
    stmt_type as StatementType
    # For let statements
    variable_name as String
    expression as Expression
    # For set statements
    field_name as String
    # For if statements
    condition as Expression
    if_body as List[Statement]
    else_body as List[Statement]
    # For while statements
    body as List[Statement]
End Type

# Function parameter (corresponds to Parameter struct in parser.h)
Type called "Parameter":
    name as String
    param_type as String
End Type

# Type field definition (corresponds to TypeField struct in parser.h)
Type called "TypeField":
    name as String
    field_type as String
    offset as Integer
    size as Integer
End Type

# Type definition (corresponds to TypeDefinition struct in parser.h)
Type called "TypeDefinition":
    name as String
    fields as List[TypeField]
    size as Integer
End Type

# Function definition (corresponds to Function struct in parser.h)
Type called "Function":
    name as String
    parameters as List[Parameter]
    return_type as String
    statements as List[Statement]
End Type

# Import definition (corresponds to Import struct in parser.h)
Type called "Import":
    filename as String
    module_name as String
End Type

# Complete program (corresponds to Program struct in parser.h)
Type called "Program":
    functions as List[Function]
    types as List[TypeDefinition]
    imports as List[Import]
End Type

# Parser state (corresponds to Parser struct in parser.h)
Type called "Parser":
    lexer as Lexer
    current_token as Token
    current_program as Program
End Type

# Variable tracking for code generation (corresponds to Variable struct in codegen_x86.h)
Type called "Variable":
    name as String
    stack_offset as Integer
    type_name as String
End Type

# String literal tracking for code generation (corresponds to StringLiteral struct in codegen_x86.h)
Type called "StringLiteral":
    value as String
    label as String
End Type

# Code generator state (corresponds to CodeGenerator struct in codegen_x86.h)
Type called "CodeGenerator":
    output_filename as String
    variables as List[Variable]
    stack_offset as Integer
    label_counter as Integer
    strings as List[StringLiteral]
    current_program as Program
End Type

# Token type constants (corresponds to TokenType enum values)
Constant TOKEN_EOF as Integer is 0
Constant TOKEN_PROCESS as Integer is 1
Constant TOKEN_CALLED as Integer is 2
Constant TOKEN_RETURNS as Integer is 3
Constant TOKEN_INTEGER_TYPE as Integer is 4
Constant TOKEN_RETURN as Integer is 5
Constant TOKEN_END as Integer is 6
Constant TOKEN_COLON as Integer is 7
Constant TOKEN_STRING_LITERAL as Integer is 8
Constant TOKEN_INTEGER as Integer is 9
Constant TOKEN_LET as Integer is 10
Constant TOKEN_BE as Integer is 11
Constant TOKEN_SET as Integer is 12
Constant TOKEN_TO as Integer is 13
Constant TOKEN_PLUS as Integer is 14
Constant TOKEN_MINUS as Integer is 15
Constant TOKEN_IF as Integer is 16
Constant TOKEN_OTHERWISE as Integer is 17
Constant TOKEN_WHILE as Integer is 18
Constant TOKEN_IS as Integer is 19
Constant TOKEN_EQUAL as Integer is 20
Constant TOKEN_LESS as Integer is 21
Constant TOKEN_GREATER as Integer is 22
Constant TOKEN_GREATER_EQUAL as Integer is 23
Constant TOKEN_LESS_EQUAL as Integer is 24
Constant TOKEN_THAN as Integer is 25
Constant TOKEN_OR as Integer is 26
Constant TOKEN_THAT as Integer is 27
Constant TOKEN_TAKES as Integer is 28
Constant TOKEN_AS as Integer is 29
Constant TOKEN_MULTIPLIED as Integer is 30
Constant TOKEN_DIVIDED as Integer is 31
Constant TOKEN_BY as Integer is 32
Constant TOKEN_PRINT as Integer is 33
Constant TOKEN_LPAREN as Integer is 34
Constant TOKEN_RPAREN as Integer is 35
Constant TOKEN_TYPE as Integer is 36
Constant TOKEN_DOT as Integer is 37
Constant TOKEN_COMMA as Integer is 38
Constant TOKEN_IDENTIFIER as Integer is 39
Constant TOKEN_READ_FILE as Integer is 40
Constant TOKEN_WRITE_FILE as Integer is 41
Constant TOKEN_IMPORT as Integer is 42
Constant TOKEN_ERROR as Integer is 43

# Expression type constants (corresponds to ExpressionType enum values)
Constant EXPR_INTEGER as Integer is 0
Constant EXPR_VARIABLE as Integer is 1
Constant EXPR_BINARY_OP as Integer is 2
Constant EXPR_COMPARISON as Integer is 3
Constant EXPR_FUNCTION_CALL as Integer is 4
Constant EXPR_STRING_LITERAL as Integer is 5
Constant EXPR_FIELD_ACCESS as Integer is 6
Constant EXPR_TYPE_NAME as Integer is 7
Constant EXPR_BUILTIN_CALL as Integer is 8

# Statement type constants (corresponds to StatementType enum values)
Constant STMT_LET as Integer is 0
Constant STMT_SET as Integer is 1
Constant STMT_RETURN as Integer is 2
Constant STMT_IF as Integer is 3
Constant STMT_WHILE as Integer is 4
Constant STMT_PRINT as Integer is 5
Constant STMT_EXPRESSION as Integer is 6
Constant STMT_IMPORT as Integer is 7