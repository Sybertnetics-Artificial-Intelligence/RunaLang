Note: Test suite for array bounds checking
Note: Tests both compile-time and runtime bounds checking

Note: Helper to create an array of 5 elements
Process called "create_test_array" returns Integer:
    Note: Allocate array with metadata: 8 bytes for size + 5*8 bytes for data
    Let arr_with_meta be allocate(48)

    Note: Store size in metadata
    memory_set_integer(arr_with_meta, 0, 5)

    Note: Get pointer to data (after metadata)
    Let arr be arr_with_meta plus 8

    Note: Initialize array elements
    memory_set_integer(arr, 0, 10)
    memory_set_integer(arr, 8, 20)
    memory_set_integer(arr, 16, 30)
    memory_set_integer(arr, 24, 40)
    memory_set_integer(arr, 32, 50)

    Return arr
End Process

Note: Helper to create an array of 3 elements
Process called "create_small_array" returns Integer:
    Note: Allocate array with metadata: 8 bytes for size + 3*8 bytes for data
    Let arr_with_meta be allocate(32)

    Note: Store size in metadata
    memory_set_integer(arr_with_meta, 0, 3)

    Note: Get pointer to data (after metadata)
    Let arr be arr_with_meta plus 8

    Note: Initialize array elements
    memory_set_integer(arr, 0, 100)
    memory_set_integer(arr, 8, 200)
    memory_set_integer(arr, 16, 300)

    Return arr
End Process

Process called "test_valid_access" returns Integer:
    Note: Create array with metadata
    Let arr be create_test_array()

    Note: Valid access within bounds (should work)
    Let first be arr at index 0
    Let last be arr at index 4

    print_string("Valid access test PASSED")
    print_integer(first)
    print_integer(last)

    Return 0
End Process

Process called "test_variable_index" takes index as Integer returns Integer:
    Note: Create array with metadata
    Let arr be create_small_array()

    Note: Access with variable index (runtime check)
    Let value be arr at index index

    print_string("Variable index access: ")
    print_integer(value)

    Return 0
End Process

Process called "main" returns Integer:
    print_string("=== ARRAY BOUNDS CHECKING TEST SUITE ===")

    Note: TEST 1: Valid accesses
    print_string("TEST 1: Valid Array Access")
    test_valid_access()

    Note: TEST 2: Variable index within bounds
    print_string("TEST 2: Variable Index (valid)")
    test_variable_index(1)

    Note: TEST 3: Edge case - last element
    print_string("TEST 3: Edge Case - Last Element")
    test_variable_index(2)

    Note: TEST 4: First element
    print_string("TEST 4: First Element")
    test_variable_index(0)

    print_string("=== ALL VALID TESTS PASSED ===")

    Note: The following tests should FAIL at runtime:
    Note: Uncomment ONE test at a time to verify error handling

    Note: TEST 5: Negative index (should fail at runtime)
    Note: test_variable_index(-1)

    Note: TEST 6: Index out of bounds (should fail at runtime)
    Note: test_variable_index(10)

    Return 0
End Process
