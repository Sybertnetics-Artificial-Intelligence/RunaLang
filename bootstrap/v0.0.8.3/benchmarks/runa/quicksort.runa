Process called "partition" takes arr as Integer, low as Integer, high as Integer, n as Integer returns Integer:
    Let pivot_offset be high multiplied by 8
    Let pivot be memory_get_integer(arr, pivot_offset)
    Let i be low minus 1

    Let j be low
    While j is less than high:
        Let j_offset be j multiplied by 8
        Let j_val be memory_get_integer(arr, j_offset)

        If j_val is less than pivot:
            Set i to i plus 1
            Let i_offset be i multiplied by 8
            Let i_val be memory_get_integer(arr, i_offset)
            memory_set_integer(arr, i_offset, j_val)
            memory_set_integer(arr, j_offset, i_val)
        End If

        Set j to j plus 1
    End While

    Set i to i plus 1
    Let i_offset be i multiplied by 8
    Let i_val be memory_get_integer(arr, i_offset)
    memory_set_integer(arr, i_offset, pivot)
    memory_set_integer(arr, pivot_offset, i_val)

    Return i
End Process

Process called "quicksort" takes arr as Integer, low as Integer, high as Integer, n as Integer returns Integer:
    If low is less than high:
        Let pi be partition(arr, low, high, n)
        Let left be quicksort(arr, low, pi minus 1, n)
        Let right be quicksort(arr, pi plus 1, high, n)
    End If
    Return 0
End Process

Process called "main" returns Integer:
    Let n be 10000
    Let arr be allocate(n multiplied by 8)

    Let i be 0
    While i is less than n:
        Let offset be i multiplied by 8
        Let value be n minus i
        memory_set_integer(arr, offset, value)
        Set i to i plus 1
    End While

    Let result be quicksort(arr, 0, n minus 1, n)

    deallocate(arr)
    Return 0
End Process
