Process called "is_safe" takes board as Integer, row as Integer, col as Integer, n as Integer returns Integer:
    Let i be 0
    While i is less than col:
        Let offset be row multiplied by n plus i
        Set offset to offset multiplied by 8
        Let val be memory_get_integer(board, offset)
        If val is equal to 1:
            Return 0
        End If
        Set i to i plus 1
    End While

    Set i to row minus 1
    Let j be col minus 1
    While i is greater than or equal to 0:
        If j is greater than or equal to 0:
            Let offset be i multiplied by n plus j
            Set offset to offset multiplied by 8
            Let val be memory_get_integer(board, offset)
            If val is equal to 1:
                Return 0
            End If
        End If
        Set i to i minus 1
        Set j to j minus 1
    End While

    Set i to row plus 1
    Set j to col minus 1
    While i is less than n:
        If j is greater than or equal to 0:
            Let offset be i multiplied by n plus j
            Set offset to offset multiplied by 8
            Let val be memory_get_integer(board, offset)
            If val is equal to 1:
                Return 0
            End If
        End If
        Set i to i plus 1
        Set j to j minus 1
    End While

    Return 1
End Process

Process called "solve" takes board as Integer, col as Integer, n as Integer returns Integer:
    If col is greater than or equal to n:
        Return 1
    End If

    Let i be 0
    While i is less than n:
        Let safe be is_safe(board, i, col, n)
        If safe is equal to 1:
            Let offset be i multiplied by n plus col
            Set offset to offset multiplied by 8
            memory_set_integer(board, offset, 1)

            Let next_col be col plus 1
            Let result be solve(board, next_col, n)
            If result is equal to 1:
                Return 1
            End If

            memory_set_integer(board, offset, 0)
        End If
        Set i to i plus 1
    End While

    Return 0
End Process

Process called "main" returns Integer:
    Let n be 8
    Let size be n multiplied by n multiplied by 8
    Let board be allocate(size)

    Let i be 0
    While i is less than n multiplied by n:
        Let offset be i multiplied by 8
        memory_set_integer(board, offset, 0)
        Set i to i plus 1
    End While

    Let result be solve(board, 0, n)

    deallocate(board)
    Return 0
End Process
