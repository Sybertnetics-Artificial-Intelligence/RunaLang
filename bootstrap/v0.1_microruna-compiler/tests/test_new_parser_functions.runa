Note: TestNewParserFunctions

Process called "extract_token_part" that takes token_data as String, part_index as Integer returns String:
    Note: ExtractTokenPart
    Let current_part be 0
    Let start_pos be 0
    Let i be 0
    Let token_length be length_of(token_data)

    While i is less than token_length:
        Let char_code be char_at(token_data, i)
        If char_code is equal to 124:
            If current_part is equal to part_index:
                Return substring(token_data, start_pos, i)
            End If
            Set current_part to current_part plus 1
            Set start_pos to i plus 1
        End If
        Set i to i plus 1
    End While

    If current_part is equal to part_index:
        Return substring(token_data, start_pos, token_length)
    End If
    Return ""
End Process

Process called "parse_primary_expression" that takes tokens as String, position as Integer returns String:
    Note: ParsePrimaryExpression
    Let token_type be extract_token_part(tokens, 0)
    Let token_value be extract_token_part(tokens, 1)

    If token_type is equal to "Integer":
        Return concat("integer_literal|", token_value)
    End If
    If token_type is equal to "StringLiteral":
        Return concat("string_literal|", token_value)
    End If
    If token_type is equal to "Identifier":
        Return concat("identifier|", token_value)
    End If

    Return "expression_error"
End Process

Process called "test_main":
    Note: TestNewFunctions
    Let test_tokens be "Integer|42|1|1"
    Let result be parse_primary_expression(test_tokens, 0)

    Let type_part be extract_token_part(test_tokens, 0)
    Let value_part be extract_token_part(test_tokens, 1)
End Process