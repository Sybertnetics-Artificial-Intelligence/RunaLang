Note: SelfCompilationTest

Process called "is_letter" that takes char_code as Integer returns Integer:
    Note: CheckIfCharacterIsLetter
    If char_code is greater than 64:
        If char_code is less than 91:
            Return 1
        End If
    End If
    If char_code is greater than 96:
        If char_code is less than 123:
            Return 1
        End If
    End If
    Return 0
End Process

Process called "is_digit" that takes char_code as Integer returns Integer:
    Note: CheckIfCharacterIsDigit
    If char_code is greater than 47:
        If char_code is less than 58:
            Return 1
        End If
    End If
    Return 0
End Process

Process called "is_whitespace" that takes char_code as Integer returns Integer:
    Note: CheckIfCharacterIsWhitespace
    If char_code is equal to 32:
        Return 1
    End If
    If char_code is equal to 9:
        Return 1
    End If
    If char_code is equal to 10:
        Return 1
    End If
    If char_code is equal to 13:
        Return 1
    End If
    Return 0
End Process

Process called "create_token" that takes token_type as String, value as String, line as Integer, column as Integer returns String:
    Note: CreateTokenInPipeFormat
    Let result be token_type
    Set result to concat(result, "|")
    Set result to concat(result, value)
    Set result to concat(result, "|")
    Set result to concat(result, to_string(line))
    Set result to concat(result, "|")
    Set result to concat(result, to_string(column))
    Return result
End Process

Process called "append_token" that takes tokens as String, new_token as String returns String:
    Note: AppendTokenToList
    If length_of(tokens) is equal to 0:
        Return new_token
    End If
    Let result be concat(tokens, "\n")
    Set result to concat(result, new_token)
    Return result
End Process

Process called "classify_word" that takes word as String returns String:
    Note: ClassifyWordAsKeyword
    If word is equal to "Process":
        Return "Process"
    End If
    If word is equal to "called":
        Return "Called"
    End If
    If word is equal to "Let":
        Return "Let"
    End If
    If word is equal to "be":
        Return "Be"
    End If
    If word is equal to "Display":
        Return "Display"
    End If
    If word is equal to "End":
        Return "End"
    End If
    If word is equal to "Note":
        Return "Note"
    End If
    Return "Identifier"
End Process

Process called "simple_tokenize" that takes source as String returns String:
    Note: SimpleTokenizer
    Let tokens be ""
    Let position be 0
    Let source_length be length_of(source)

    While position is less than source_length:
        Let current_char be char_at(source, position)

        If is_whitespace(current_char) is equal to 1:
            Set position to position plus 1
        End If

        If is_whitespace(current_char) is equal to 0:
            If is_letter(current_char) is equal to 1:
                Let word_start be position
                While position is less than source_length:
                    Let char_check be char_at(source, position)
                    If is_letter(char_check) is equal to 1:
                        Set position to position plus 1
                    End If
                    If is_letter(char_check) is equal to 0:
                        Set position to source_length
                    End If
                End While
                Let word be substring(source, word_start, position)
                Let token_type be classify_word(word)
                Let token be create_token(token_type, word, 1, 1)
                Set tokens to append_token(tokens, token)
                Set position to word_start plus length_of(word)
            End If

            If is_digit(current_char) is equal to 1:
                Let number_start be position
                While position is less than source_length:
                    Let char_check be char_at(source, position)
                    If is_digit(char_check) is equal to 1:
                        Set position to position plus 1
                    End If
                    If is_digit(char_check) is equal to 0:
                        Set position to source_length
                    End If
                End While
                Let number be substring(source, number_start, position)
                Let token be create_token("Integer", number, 1, 1)
                Set tokens to append_token(tokens, token)
                Set position to number_start plus length_of(number)
            End If

            If current_char is equal to 58:
                Let token be create_token("Colon", ":", 1, 1)
                Set tokens to append_token(tokens, token)
                Set position to position plus 1
            End If

            If is_letter(current_char) is equal to 0:
                If is_digit(current_char) is equal to 0:
                    If current_char is not equal to 58:
                        Set position to position plus 1
                    End If
                End If
            End If
        End If
    End While

    Return tokens
End Process

Process called "compile_simple_program" that takes source_code as String returns String:
    Note: CompileSimpleProgram
    Let tokens be simple_tokenize(source_code)
    Let assembly_header be ".text\n.global _start\n_start:\n"
    Let assembly_footer be "    mov $60, %rax\n    mov $0, %rdi\n    syscall\n"
    Let result be concat(assembly_header, "    # Compiled from MicroRuna\n")
    Set result to concat(result, "    # Tokens generated: ")
    Set result to concat(result, to_string(length_of(tokens)))
    Set result to concat(result, " characters\n")
    Set result to concat(result, assembly_footer)
    Return result
End Process

Process called "test_self_compilation":
    Note: TestSelfCompilation
    Let test_source be "Process called \"test_main\":\n    Let x be 42\n    Display x\nEnd Process"
    Let compiled_result be compile_simple_program(test_source)
    Display "SELF COMPILATION TEST:"
    Display compiled_result
    Display "TEST COMPLETE"
End Process