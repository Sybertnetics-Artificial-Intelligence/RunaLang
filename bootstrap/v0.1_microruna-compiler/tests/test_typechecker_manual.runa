Note: Manual TypeChecker Test
Note: Tests the typechecker with manually constructed AST strings

Note: Initialize the typechecker
call initialize_builtins()

Note: Test 1: Simple Let statement with integer
Let test1_ast be "let_statement|x|integer_literal|42"
Let result1 be check_statement(test1_ast)
Display "Test 1 result:"
Display result1

Note: Test 2: Simple Let statement with string
Let test2_ast be "let_statement|message|string_literal|Hello"
Let result2 be check_statement(test2_ast)
Display "Test 2 result:"
Display result2

Note: Test 3: Variable lookup should find x as Integer
Let test3_ast be "identifier|x"
Let result3 be get_expression_type(test3_ast)
Display "Test 3 x type:"
Display result3

Note: Test 4: Variable lookup should find message as String
Let test4_ast be "identifier|message"
Let result4 be get_expression_type(test4_ast)
Display "Test 4 message type:"
Display result4

Note: Test 5: Set statement with compatible type (should work)
Let test5_ast be "set_statement|x|integer_literal|100"
Let result5 be check_statement(test5_ast)
Display "Test 5 result:"
Display result5

Note: Test 6: Set statement with incompatible type (should fail)
Let test6_ast be "set_statement|x|string_literal|invalid"
Let result6 be check_statement(test6_ast)
Display "Test 6 result:"
Display result6

Note: Test 7: Function call type inference
Let test7_ast be "function_call|length_of|string_literal|test"
Let result7 be get_expression_type(test7_ast)
Display "Test 7 length_of return type:"
Display result7

Note: Test 8: Binary expression plus with integers
Let test8_ast be "binary_expression|plus|integer_literal|5|integer_literal|3"
Let result8 be get_expression_type(test8_ast)
Display "Test 8 binary plus type:"
Display result8

Note: Test 9: Type error reporting
Let test9_ast be "set_statement|undefined_var|integer_literal|42"
Let result9 be check_statement(test9_ast)
Display "Test 9 result:"
Display result9

Display "All tests completed!"