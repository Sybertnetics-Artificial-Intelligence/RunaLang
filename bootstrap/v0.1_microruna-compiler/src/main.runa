Note: MicroRunaMainEntry

Process called "compile_source" that takes source_code as String returns String:
    Note: MainCompilationPipeline
    Let tokens be tokenize_input(source_code)
    If length_of(tokens) is equal to 0:
        Return "ERROR: Tokenization failed"
    End If

    Let ast be parse_program(tokens)
    If length_of(ast) is equal to 0:
        Return "ERROR: Parsing failed"
    End If

    Let type_result be check_types(ast)
    If length_of(type_result) is equal to 0:
        Return "ERROR: Type checking failed"
    End If

    Let assembly_code be generate_code(ast)
    If length_of(assembly_code) is equal to 0:
        Return "ERROR: Code generation failed"
    End If

    Return assembly_code
End Process

Process called "compile_file" that takes filename as String returns String:
    Note: CompileSourceFile
    Let source_code be read_file(filename)
    If length_of(source_code) is equal to 0:
        Return "ERROR: Could not read file"
    End If
    Let compilation_result be compile_source(source_code)
    Return compilation_result
End Process

Process called "test_compiler":
    Note: TestCompilerFunction
    Let test_source be "Let x be 42\nDisplay x"
    Let result be compile_source(test_source)
    Display result

    Let test_result be compile_file("test.runa")
    Display test_result
End Process

Note: Main entry point - v0.1 MicroRuna Compiler
Display "ðŸš€ RUNA v0.1 MICRORUNA SELF-HOSTED COMPILER"
Display "============================================="
Display ""

Note: Test the compiler with a simple program
Let simple_test be compile_source("Let x be 42\nDisplay x")
Display "Test compilation result:"
Display simple_test
Display ""

Note: Self-compilation test
Display "ðŸ”¥ ATTEMPTING SELF-COMPILATION..."
Display "This is the bootstrap moment!"
Display ""

Note: For now, run the test function
test_compiler()

Display ""
Display "âœ… V0.1 COMPILER EXECUTION COMPLETE"