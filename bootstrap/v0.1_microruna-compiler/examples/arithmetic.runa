Note: MicroRuna v0.1 Arithmetic Example
Note: Demonstrates mathematical operations, functions, and control flow
Note: Tests the compiler's ability to handle complex expressions and logic

Note: Mathematical utility functions
Process called "add" that takes a as Integer and b as Integer returns Integer:
    Return a plus b
End Process

Process called "subtract" that takes a as Integer and b as Integer returns Integer:
    Return a minus b
End Process

Process called "multiply" that takes a as Integer and b as Integer returns Integer:
    Note: Multiplication using repeated addition
    Let result be 0
    Let counter be 0

    If b is less than 0:
        Note: Handle negative multiplication
        Let positive_b be 0 minus b
        While counter is less than positive_b:
            Set result to result minus a
            Set counter to counter plus 1
        End While
    Otherwise:
        While counter is less than b:
            Set result to result plus a
            Set counter to counter plus 1
        End While
    End If

    Return result
End Process

Process called "divide" that takes a as Integer and b as Integer returns Integer:
    Note: Integer division using repeated subtraction
    If b is equal to 0:
        Display "Error: Division by zero!"
        Return 0
    End If

    Let result be 0
    Let remainder be a

    If a is greater than 0 and b is greater than 0:
        While remainder is greater than b minus 1:
            Set remainder to remainder minus b
            Set result to result plus 1
        End While
    Otherwise:
        Note: For now, handle only positive division
        Display "Error: Negative division not implemented"
        Return 0
    End If

    Return result
End Process

Process called "factorial" that takes n as Integer returns Integer:
    Note: Calculate factorial of n
    If n is less than 1:
        Return 1
    End If

    Let result be 1
    Let counter be 1

    While counter is less than n plus 1:
        Set result to call multiply(result, counter)
        Set counter to counter plus 1
    End While

    Return result
End Process

Process called "fibonacci" that takes n as Integer returns Integer:
    Note: Calculate nth Fibonacci number
    If n is less than 1:
        Return 0
    End If

    If n is equal to 1:
        Return 1
    End If

    Let prev1 be 0
    Let prev2 be 1
    Let current be 0
    Let counter be 2

    While counter is less than n plus 1:
        Set current to prev1 plus prev2
        Set prev1 to prev2
        Set prev2 to current
        Set counter to counter plus 1
    End While

    Return current
End Process

Process called "is_prime" that takes n as Integer returns Integer:
    Note: Check if n is a prime number (returns 1 if prime, 0 if not)
    If n is less than 2:
        Return 0
    End If

    If n is equal to 2:
        Return 1
    End If

    Let divisor be 2
    While divisor is less than n:
        Let quotient be call divide(n, divisor)
        Let product be call multiply(quotient, divisor)

        If product is equal to n:
            Note: n is divisible by divisor, so not prime
            Return 0
        End If

        Set divisor to divisor plus 1
    End While

    Return 1
End Process

Process called "print_arithmetic_result" that takes operation as String and a as Integer and b as Integer and result as Integer returns Void:
    Let result_text be call concat(call to_string(a), " ")
    Set result_text to call concat(result_text, operation)
    Set result_text to call concat(result_text, " ")
    Set result_text to call concat(result_text, call to_string(b))
    Set result_text to call concat(result_text, " = ")
    Set result_text to call concat(result_text, call to_string(result))
    Display result_text
End Process

Note: Main arithmetic demonstration
Display "üßÆ MicroRuna v0.1 Arithmetic Examples"
Display "====================================="

Note: Basic arithmetic operations
Let a be 15
Let b be 7

Let add_result be call add(a, b)
call print_arithmetic_result("+", a, b, add_result)

Let sub_result be call subtract(a, b)
call print_arithmetic_result("-", a, b, sub_result)

Let mul_result be call multiply(a, b)
call print_arithmetic_result("*", a, b, mul_result)

Let div_result be call divide(a, b)
call print_arithmetic_result("/", a, b, div_result)

Display ""

Note: Factorial demonstration
Display "üìä Factorial Calculations:"
Let i be 1
While i is less than 6:
    Let fact_result be call factorial(i)
    Let fact_text be call concat(call to_string(i), "! = ")
    Set fact_text to call concat(fact_text, call to_string(fact_result))
    Display fact_text
    Set i to i plus 1
End While

Display ""

Note: Fibonacci sequence demonstration
Display "üåÄ Fibonacci Sequence:"
Let fib_i be 1
While fib_i is less than 11:
    Let fib_result be call fibonacci(fib_i)
    Let fib_text be call concat("F(", call to_string(fib_i))
    Set fib_text to call concat(fib_text, ") = ")
    Set fib_text to call concat(fib_text, call to_string(fib_result))
    Display fib_text
    Set fib_i to fib_i plus 1
End While

Display ""

Note: Prime number demonstration
Display "üî¢ Prime Number Check:"
Let prime_check be 2
While prime_check is less than 21:
    Let is_prime_result be call is_prime(prime_check)
    Let prime_text be call to_string(prime_check)

    If is_prime_result is equal to 1:
        Set prime_text to call concat(prime_text, " is prime")
    Otherwise:
        Set prime_text to call concat(prime_text, " is not prime")
    End If

    Display prime_text
    Set prime_check to prime_check plus 1
End While

Display ""

Note: Complex calculation demonstration
Display "üî¨ Complex Calculation Example:"
Display "Computing: (5! + F(8)) / 3"

Let factorial_5 be call factorial(5)
Let fibonacci_8 be call fibonacci(8)
Let sum_intermediate be call add(factorial_5, fibonacci_8)
Let final_result be call divide(sum_intermediate, 3)

Let step1_text be call concat("5! = ", call to_string(factorial_5))
Display step1_text

Let step2_text be call concat("F(8) = ", call to_string(fibonacci_8))
Display step2_text

Let step3_text be call concat("5! + F(8) = ", call to_string(sum_intermediate))
Display step3_text

Let step4_text be call concat("Final result = ", call to_string(final_result))
Display step4_text

Display ""

Note: Comparison operations demonstration
Display "‚öñÔ∏è Comparison Operations:"
Let x be 10
Let y be 15

If x is equal to y:
    Display "x equals y"
Otherwise:
    Display "x does not equal y"
End If

If x is less than y:
    Display "x is less than y"
Otherwise:
    Display "x is not less than y"
End If

If x is greater than y:
    Display "x is greater than y"
Otherwise:
    Display "x is not greater than y"
End If

Display ""
Display "‚úÖ Arithmetic example completed successfully!"
Display "The MicroRuna v0.1 compiler handles complex mathematical operations!"