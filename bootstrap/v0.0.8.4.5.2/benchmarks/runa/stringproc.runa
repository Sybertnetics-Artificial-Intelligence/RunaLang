Note: String Processing Benchmark - String concatenation and length calculation
Note: Tests repeated string operations (10000 iterations)

Process called "string_length" takes str as Integer returns Integer:
    Let len be 0
    Let done be 0

    While done is equal to 0:
        Let offset be len
        Let char be memory_get_byte(str, offset)

        If char is equal to 0:
            Set done to 1
        End If
        If done is equal to 0:
            Set len to len plus 1
        End If
    End While

    Return len
End Process

Process called "copy_string" takes dest as Integer, src as Integer returns Integer:
    Let i be 0
    Let done be 0

    While done is equal to 0:
        Let char be memory_get_byte(src, i)
        memory_set_byte(dest, i, char)

        If char is equal to 0:
            Set done to 1
        End If
        If done is equal to 0:
            Set i to i plus 1
        End If
    End While

    Return 0
End Process

Process called "main" returns Integer:
    Let iterations be 10000
    Let base_str be allocate(100)
    Let result_str be allocate(1000)

    Note: Initialize base string "Hello"
    memory_set_byte(base_str, 0, 72)   Note: H
    memory_set_byte(base_str, 1, 101)  Note: e
    memory_set_byte(base_str, 2, 108)  Note: l
    memory_set_byte(base_str, 3, 108)  Note: l
    memory_set_byte(base_str, 4, 111)  Note: o
    memory_set_byte(base_str, 5, 0)    Note: null terminator

    Let i be 0
    Let total_len be 0

    While i is less than iterations:
        Note: Copy string
        Let result be copy_string(result_str, base_str)

        Note: Calculate length
        Let len be string_length(result_str)
        Set total_len to total_len plus len

        Set i to i plus 1
    End While

    deallocate(base_str)
    deallocate(result_str)

    Return 0
End Process
