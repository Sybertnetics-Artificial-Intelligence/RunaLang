Print "=== Phase 6: Comprehensive v0.0 Validation ==="

Print "Test 1: String Edge Cases"

Let empty_str be ""
Let empty_len be length_of(empty_str)
Print empty_len

Let single_char be "A"
Let single_len be length_of(single_char)
Print single_len
Let single_at_0 be char_at(single_char, 0)
Print single_at_0

Print "Test 2: Bounds Checking"

Let test_str be "Hello"
Let oob_char be char_at(test_str, 10)
Print oob_char

Print "Test 3: Complex String Operations"

Let str1 be "Runa"
Let str2 be " Language"
Let combined be concat(str1, str2)
Let substr_combined be substring(combined, 0, 4)
Print substr_combined

Let part1 be "The"
Let part2 be " Runa"
Let part3 be " Compiler"
Let step1 be concat(part1, part2)
Let final_str be concat(step1, part3)
Print final_str

Print "Test 4: Control Flow Integration"

Let test_val be 42
If test_val is equal to 42:
    Let success_msg be "Condition passed"
    Print success_msg
Otherwise:
    Print "Condition failed"
End If

Print "Test 5: Function Integration"

Process called "string_processor" that takes input as String returns String:
    Let prefix be "Processed: "
    Let result be concat(prefix, input)
    Return result
End Process

Let processed be string_processor("test data")
Print processed

Print "Test 6: Mixed Types Integration"

Let number be 100
Let number_str be to_string(number)
Let doubled be number plus number
Let doubled_str be to_string(doubled)
Let combined_numbers be concat(number_str, " + ")
Let final_math be concat(combined_numbers, doubled_str)
Print final_math

Print "Test 7: Loop Integration"

Let counter be 0
Let message be "Count: "
While counter is less than 3:
    Let counter_str be to_string(counter)
    Let output be concat(message, counter_str)
    Print output
    Set counter to counter plus 1
End While

Print "Test 8: Memory Allocation Tests"

Let str_a be concat("First", " Allocation")
Let str_b be concat("Second", " Allocation")
Let str_c be concat("Third", " Allocation")
Print str_a
Print str_b
Print str_c

Let base_string be "Memory allocation test string"
Let sub1 be substring(base_string, 0, 6)
Let sub2 be substring(base_string, 7, 10)
Let sub3 be substring(base_string, 18, 4)
Print sub1
Print sub2
Print sub3

Print "Test 9: Large String Operations"

Let large_num be 123456789
Let large_str be to_string(large_num)
Print large_str
Let large_len be length_of(large_str)
Print large_len

Print "Test 10: Complete Feature Integration"

Process called "comprehensive_test" that takes value as Integer returns String:
    Let value_str be to_string(value)
    Let prefix be "Result: "
    Let suffix be " (validated)"
    Let step1 be concat(prefix, value_str)
    Let final be concat(step1, suffix)
    Return final
End Process

Let test_result be comprehensive_test(999)
Print test_result

Print "=== Phase 6 Validation Complete: All Systems Operational ==="