                    Note: \r - carriage return
                    Let cr_char be 13
                    Set processed_string to concat(processed_string, substring(source, end_pos plus 1, end_pos plus 2))
                    Set processed_string to substring(processed_string, 0, length_of(processed_string) minus 1)
                    Note: Append actual CR character (ASCII 13)
                    Set end_pos to end_pos plus 2
                End If

                If next_char is equal to 92:
                    Note: \\ - backslash
                    Set processed_string to concat(processed_string, substring(source, end_pos plus 1, end_pos plus 2))
                    Set end_pos to end_pos plus 2
                End If

                If next_char is equal to 34:
                    Note: \" - quote
                    Set processed_string to concat(processed_string, substring(source, end_pos plus 1, end_pos plus 2))
                    Set end_pos to end_pos plus 2
                End If

                Note: If no recognized escape sequence, include backslash as-is
                If next_char is not equal to 110:
                    If next_char is not equal to 116:
                        If next_char is not equal to 114:
                            If next_char is not equal to 92:
                                If next_char is not equal to 34:
                                    Set processed_string to concat(processed_string, substring(source, end_pos, end_pos plus 1))
                                    Set end_pos to end_pos plus 1
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If end_pos plus 1 is equal to source_length:
                Set processed_string to concat(processed_string, substring(source, end_pos, end_pos plus 1))
                Set end_pos to end_pos plus 1
            End If
        End If

        Note: Check for closing quote
        If current_char is equal to 34:
            If current_char is not equal to 92:
                Let result be concat(processed_string, "|")
                Set result to concat(result, to_string(end_pos plus 1))
                Return result
            End If
        End If

        Note: Regular character
        If current_char is not equal to 92:
            If current_char is not equal to 34:
                Set processed_string to concat(processed_string, substring(source, end_pos, end_pos plus 1))
                Set end_pos to end_pos plus 1
            End If
        End If
    End While

    Note: Unterminated string
    Let result be concat(processed_string, "|")
    Set result to concat(result, to_string(source_length))
    Return result
End Process

Process called "append_token" that takes tokens as String, new_token as String returns String:
    Note: Append new token to token list with newline separator
    If length_of(tokens) is equal to 0:
        Return new_token
    End If
    Let result be concat(tokens, "\n")
    Set result to concat(result, new_token)
    Return result
End Process

Process called "tokenize_input" that takes source as String returns String:
    Note: Full tokenization implementation that scans source and generates tokens
    Let tokens be ""
    Let position be 0
    Let line be 1
    Let column be 1
    Let source_length be length_of(source)

    While position is less than source_length:
        Let current_char be char_at(source, position)

        If is_whitespace(current_char) is equal to 1:
            If current_char is equal to 10:
                Set line to line plus 1
                Set column to 1
            End If
            If current_char is not equal to 10:
                Set column to column plus 1
            End If
            Set position to position plus 1
        End If

        If is_whitespace(current_char) is equal to 0:
            If is_letter(current_char) is equal to 1:
                Let word_result be read_word(source, position)
                Let word be extract_word_value(word_result)
