Note: Hash Table Benchmark - Insert and lookup operations
Note: Tests 10000 insert/lookup operations with simple hash table

Process called "hash" takes key as Integer returns Integer:
    Note: Simple modulo hash function
    Let hash_value be key modulo by 1000
    Return hash_value
End Process

Process called "ht_insert" takes table as Integer, key as Integer, value as Integer returns Integer:
    Let index be hash(key)
    Let offset be index multiplied by 16

    Note: Store key at offset, value at offset+8
    memory_set_integer(table, offset, key)
    Let value_offset be offset plus 8
    memory_set_integer(table, value_offset, value)

    Return 0
End Process

Process called "ht_lookup" takes table as Integer, key as Integer returns Integer:
    Let index be hash(key)
    Let offset be index multiplied by 16

    Note: Get key and check if it matches
    Let stored_key be memory_get_integer(table, offset)

    If stored_key is equal to key:
        Let value_offset be offset plus 8
        Let value be memory_get_integer(table, value_offset)
        Return value
    End If

    Return 0
End Process

Process called "main" returns Integer:
    Let table_size be 1000 multiplied by 16
    Let table be allocate(table_size)

    Note: Initialize table to zeros
    Let i be 0
    While i is less than table_size:
        memory_set_byte(table, i, 0)
        Set i to i plus 1
    End While

    Note: Insert 10000 key-value pairs
    Set i to 0
    While i is less than 10000:
        Let key be i
        Let value be i multiplied by 2
        Let result be ht_insert(table, key, value)
        Set i to i plus 1
    End While

    Note: Lookup 10000 values
    Set i to 0
    Let total be 0
    While i is less than 10000:
        Let key be i
        Let value be ht_lookup(table, key)
        Set total to total plus value
        Set i to i plus 1
    End While

    deallocate(table)
    Return 0
End Process
