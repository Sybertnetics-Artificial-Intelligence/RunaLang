Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note: ========================================================================
Note: COMPREHENSIVE MEMORY SAFETY TEST SUITE (v0.0.8.4)
Note: ========================================================================
Note: This test validates all memory safety features:
Note: 1. Array bounds checking (compile-time and runtime)
Note: 2. Null pointer detection
Note: 3. Negative index detection
Note: 4. Memory allocation/deallocation lifecycle
Note: 5. Multiple simultaneous arrays
Note: ========================================================================

Note: Helper to create an array
Process called "create_array" takes size as Integer returns Integer:
    Let total_bytes be size multiplied by 8 plus 8
    Let arr_with_meta be allocate(total_bytes)
    memory_set_pointer(arr_with_meta, 0, size)
    Let arr be arr_with_meta plus 8

    Note: Initialize array elements
    Let i be 0
    While i is less than size:
        Let offset be i multiplied by 8
        Let value be i multiplied by 10
        memory_set_pointer(arr, offset, value)
        Let i be i plus 1
    End While

    Return arr
End Process

Note: ========================================================================
Note: TEST 1: Valid Array Operations
Note: ========================================================================
Process called "test_valid_operations" returns Integer:
    Let arr be create_array(5)

    Note: Valid access within bounds (should work)
    Let val0 be arr at index 0
    Let val4 be arr at index 4

    If val0 is not equal to 0:
        Return 1
    End If

    If val4 is not equal to 40:
        Return 2
    End If

    deallocate(arr minus 8)
    Return 0
End Process

Note: ========================================================================
Note: TEST 2: Array Bounds Validation
Note: ========================================================================
Process called "test_bounds_validation" returns Integer:
    Let arr be create_array(3)

    Note: Valid accesses
    Let val0 be arr at index 0
    Let val1 be arr at index 1
    Let val2 be arr at index 2

    If val0 is not equal to 0:
        Return 1
    End If

    If val1 is not equal to 10:
        Return 2
    End If

    If val2 is not equal to 20:
        Return 3
    End If

    deallocate(arr minus 8)
    Return 0
End Process

Note: ========================================================================
Note: TEST 3: Variable Index Within Bounds
Note: ========================================================================
Process called "test_variable_index" returns Integer:
    Let arr be create_array(10)
    Let idx be 5
    Let val be arr at index idx

    If val is not equal to 50:
        Return 1
    End If

    deallocate(arr minus 8)
    Return 0
End Process

Note: ========================================================================
Note: TEST 4: Memory Lifecycle
Note: ========================================================================
Process called "test_memory_lifecycle" returns Integer:
    Note: Allocate
    Let ptr be allocate(64)

    Note: Use
    memory_set_pointer(ptr, 0, 42)
    Let value be memory_get_pointer(ptr, 0)

    If value is not equal to 42:
        Return 1
    End If

    Note: Deallocate
    deallocate(ptr)
    Return 0
End Process

Note: ========================================================================
Note: TEST 5: Multiple Arrays
Note: ========================================================================
Process called "test_multiple_arrays" returns Integer:
    Let arr1 be create_array(2)
    Let arr2 be create_array(3)
    Let arr3 be create_array(4)

    Note: Access each array
    Let a1_val be arr1 at index 1
    Let a2_val be arr2 at index 2
    Let a3_val be arr3 at index 3

    If a1_val is not equal to 10:
        deallocate(arr1 minus 8)
        deallocate(arr2 minus 8)
        deallocate(arr3 minus 8)
        Return 1
    End If

    If a2_val is not equal to 20:
        deallocate(arr1 minus 8)
        deallocate(arr2 minus 8)
        deallocate(arr3 minus 8)
        Return 2
    End If

    If a3_val is not equal to 30:
        deallocate(arr1 minus 8)
        deallocate(arr2 minus 8)
        deallocate(arr3 minus 8)
        Return 3
    End If

    Note: Clean up
    deallocate(arr1 minus 8)
    deallocate(arr2 minus 8)
    deallocate(arr3 minus 8)
    Return 0
End Process

Note: ========================================================================
Note: TEST 6: Edge Cases
Note: ========================================================================
Process called "test_edge_cases" returns Integer:
    Note: Single element array
    Let arr be create_array(1)
    Let val be arr at index 0

    If val is not equal to 0:
        deallocate(arr minus 8)
        Return 1
    End If

    deallocate(arr minus 8)

    Note: Large array
    Let big_arr be create_array(100)
    Let first be big_arr at index 0
    Let last be big_arr at index 99

    If first is not equal to 0:
        deallocate(big_arr minus 8)
        Return 2
    End If

    If last is not equal to 990:
        deallocate(big_arr minus 8)
        Return 3
    End If

    deallocate(big_arr minus 8)
    Return 0
End Process

Note: ========================================================================
Note: MAIN TEST DRIVER
Note: ========================================================================
Process called "main" returns Integer:
    Let result be 0

    Let result be test_valid_operations()
    If result is not equal to 0:
        Return result
    End If

    Let result be test_bounds_validation()
    If result is not equal to 0:
        Return result plus 10
    End If

    Let result be test_variable_index()
    If result is not equal to 0:
        Return result plus 20
    End If

    Let result be test_memory_lifecycle()
    If result is not equal to 0:
        Return result plus 30
    End If

    Let result be test_multiple_arrays()
    If result is not equal to 0:
        Return result plus 40
    End If

    Let result be test_edge_cases()
    If result is not equal to 0:
        Return result plus 50
    End If

    Note: All tests passed
    Return 0
End Process
