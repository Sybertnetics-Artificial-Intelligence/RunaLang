#!/usr/bin/env bash

# Runa Compiler Driver v0.0.8.4.5.3
# World-class compiler driver with automatic assembly, linking, and include paths
# Usage: runa [options] <input.runa>

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
OUTPUT_FILE=""
INPUT_FILE=""
COMPILE_ONLY=false
ASM_ONLY=false
KEEP_TEMP=false
VERBOSE=false
INCLUDE_PATHS=()
RUNAC_PATH="$(dirname "$0")/build/runac"
RUNTIME_PATH="$(dirname "$0")/runtime/runtime.c"

# Function to print usage
usage() {
    cat <<EOF
Runa Compiler Driver v0.0.8.4.5.3

USAGE:
    runa [OPTIONS] <input.runa>

OPTIONS:
    -o <file>         Specify output file name
    -c                Compile only (generate .o object file)
    -S                Generate assembly only (generate .s file)
    -I <path>         Add include directory for imports
    -k, --keep-temp   Keep temporary files
    -v, --verbose     Verbose output
    -h, --help        Show this help message

EXAMPLES:
    # Compile and link to executable
    runa myprogram.runa -o myprogram

    # Generate assembly only
    runa myprogram.runa -S -o myprogram.s

    # Compile with include paths
    runa src/main.runa -I lib -I vendor -o app

    # Compile to object file
    runa module.runa -c -o module.o

NOTES:
    - Import paths are relative to include directories specified with -I
    - If no -I is specified, imports are relative to current directory
    - Temporary files are created in /tmp and cleaned up automatically
    - Use -k to keep temporary .s and .o files for debugging

EOF
    exit 0
}

# Function to print error and exit
error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

# Function to print info
info() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${GREEN}[INFO]${NC} $1"
    fi
}

# Function to print warning
warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -o)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        -c)
            COMPILE_ONLY=true
            shift
            ;;
        -S)
            ASM_ONLY=true
            shift
            ;;
        -I)
            INCLUDE_PATHS+=("$2")
            shift 2
            ;;
        -k|--keep-temp)
            KEEP_TEMP=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -*)
            error "Unknown option: $1"
            ;;
        *)
            if [ -z "$INPUT_FILE" ]; then
                INPUT_FILE="$1"
            else
                error "Multiple input files not yet supported"
            fi
            shift
            ;;
    esac
done

# Validate input
if [ -z "$INPUT_FILE" ]; then
    error "No input file specified. Use -h for help."
fi

if [ ! -f "$INPUT_FILE" ]; then
    error "Input file not found: $INPUT_FILE"
fi

if [ ! -f "$RUNAC_PATH" ]; then
    error "Runa compiler not found at: $RUNAC_PATH"
fi

# Determine output file if not specified
if [ -z "$OUTPUT_FILE" ]; then
    BASENAME=$(basename "$INPUT_FILE" .runa)
    if [ "$ASM_ONLY" = true ]; then
        OUTPUT_FILE="${BASENAME}.s"
    elif [ "$COMPILE_ONLY" = true ]; then
        OUTPUT_FILE="${BASENAME}.o"
    else
        OUTPUT_FILE="${BASENAME}"
    fi
fi

# Create temporary files
TMP_ASM="/tmp/runa_$$.s"
TMP_OBJ="/tmp/runa_$$.o"

# Setup include path environment
# For now, change to first include directory if specified
if [ ${#INCLUDE_PATHS[@]} -gt 0 ]; then
    ORIGINAL_DIR="$(pwd)"
    info "Include paths: ${INCLUDE_PATHS[*]}"
    warn "Multiple -I paths not fully supported yet. Using first path as working directory."
    cd "${INCLUDE_PATHS[0]}"
    INPUT_FILE="$ORIGINAL_DIR/$INPUT_FILE"
fi

# Step 1: Compile .runa to .s
info "Compiling $INPUT_FILE to assembly..."
if ! "$RUNAC_PATH" "$INPUT_FILE" "$TMP_ASM" 2>&1; then
    error "Compilation failed"
fi

info "✓ Compilation successful"

# If -S flag, copy assembly and exit
if [ "$ASM_ONLY" = true ]; then
    cp "$TMP_ASM" "$OUTPUT_FILE"
    info "✓ Assembly written to $OUTPUT_FILE"

    if [ "$KEEP_TEMP" = false ]; then
        rm -f "$TMP_ASM"
    fi

    exit 0
fi

# Step 2: Assemble .s to .o
info "Assembling to object file..."
if ! as "$TMP_ASM" -o "$TMP_OBJ" 2>&1; then
    error "Assembly failed"
fi

info "✓ Assembly successful"

# If -c flag, copy object file and exit
if [ "$COMPILE_ONLY" = true ]; then
    cp "$TMP_OBJ" "$OUTPUT_FILE"
    info "✓ Object file written to $OUTPUT_FILE"

    if [ "$KEEP_TEMP" = false ]; then
        rm -f "$TMP_ASM" "$TMP_OBJ"
    fi

    exit 0
fi

# Step 3: Link to create executable
info "Linking executable..."
if [ ! -f "$RUNTIME_PATH" ]; then
    error "Runtime not found at: $RUNTIME_PATH"
fi

if ! gcc "$TMP_OBJ" "$RUNTIME_PATH" -o "$OUTPUT_FILE" -lm -no-pie 2>&1; then
    error "Linking failed"
fi

info "✓ Linking successful"

# Cleanup temporary files
if [ "$KEEP_TEMP" = false ]; then
    rm -f "$TMP_ASM" "$TMP_OBJ"
    info "Cleaned up temporary files"
else
    info "Temporary files kept: $TMP_ASM, $TMP_OBJ"
fi

# Restore directory if we changed it
if [ ${#INCLUDE_PATHS[@]} -gt 0 ]; then
    cd "$ORIGINAL_DIR"
fi

echo -e "${GREEN}✓${NC} Successfully built: $OUTPUT_FILE"
exit 0
