Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file provides the alignof intrinsic - returns alignment requirements for types.

Alignment is the number of bytes a type must be aligned to in memory.
For example:
- byte: 1-byte alignment
- int32: 4-byte alignment
- int64/pointer: 8-byte alignment
- struct: alignment of largest field

This is used for:
- Struct layout calculations
- Memory allocation alignment
- Performance optimization

Depends on: NOTHING (returns compile-time constants)
:End Note

Note: ============================================================================
Note: Type Alignment Queries
Note: ============================================================================

Process called "get_type_alignment" takes type_name as String returns Integer:
    Note: Get alignment requirement for a type
    Note: Returns alignment in bytes (must be power of 2)

    Note: Basic integer types
    If string_equals(type_name, "Integer") is equal to 1:
        Return 8  Note: 64-bit integer
    End If

    If string_equals(type_name, "Int64") is equal to 1:
        Return 8
    End If

    If string_equals(type_name, "Int32") is equal to 1:
        Return 4
    End If

    If string_equals(type_name, "Int16") is equal to 1:
        Return 2
    End If

    If string_equals(type_name, "Int8") is equal to 1:
        Return 1
    End If

    If string_equals(type_name, "Byte") is equal to 1:
        Return 1
    End If

    If string_equals(type_name, "Short") is equal to 1:
        Return 2  Note: 16-bit integer (same as Int16)
    End If

    If string_equals(type_name, "Long") is equal to 1:
        Return 8  Note: 64-bit integer (same as Int64)
    End If

    Note: Extended integer types
    If string_equals(type_name, "Int128") is equal to 1:
        Return 16  Note: 128-bit integer requires 16-byte alignment
    End If

    If string_equals(type_name, "Int256") is equal to 1:
        Return 32  Note: 256-bit integer requires 32-byte alignment
    End If

    If string_equals(type_name, "Int512") is equal to 1:
        Return 64  Note: 512-bit integer requires 64-byte alignment (cache line)
    End If

    Note: Pointer types - always 8 bytes on x86_64
    If string_equals(type_name, "Pointer") is equal to 1:
        Return 8
    End If

    If string_equals(type_name, "String") is equal to 1:
        Return 8  Note: String is a pointer
    End If

    Note: Floating point types
    If string_equals(type_name, "Float16") is equal to 1:
        Return 2  Note: Half precision (IEEE 754)
    End If

    If string_equals(type_name, "Float") is equal to 1:
        Return 4  Note: Default float (32-bit)
    End If

    If string_equals(type_name, "Float32") is equal to 1:
        Return 4  Note: Single precision (IEEE 754)
    End If

    If string_equals(type_name, "Double") is equal to 1:
        Return 8  Note: Default double (64-bit)
    End If

    If string_equals(type_name, "Float64") is equal to 1:
        Return 8  Note: Double precision (IEEE 754)
    End If

    If string_equals(type_name, "Float80") is equal to 1:
        Return 16  Note: x87 extended precision (80-bit stored in 128-bit for alignment)
    End If

    If string_equals(type_name, "Float128") is equal to 1:
        Return 16  Note: Quadruple precision (IEEE 754)
    End If

    Note: Boolean type
    If string_equals(type_name, "Boolean") is equal to 1:
        Return 1
    End If

    Note: Character type
    If string_equals(type_name, "Character") is equal to 1:
        Return 1
    End If

    Note: Default alignment for unknown types
    Note: Use 8-byte alignment as safe default for x86_64
    Return 8
End Process

Note: ============================================================================
Note: Struct Alignment Calculation
Note: ============================================================================

Process called "calculate_struct_alignment" takes field_alignments as Integer, field_count as Integer returns Integer:
    Note: Calculate struct alignment (max of all field alignments)
    Note: field_alignments: pointer to array of integers
    Note: field_count: number of fields
    Note: Returns: alignment for the entire struct

    If field_count is less than or equal to 0:
        Return 8  Note: Default alignment
    End If

    Let max_alignment be 1
    Let i be 0

    While i is less than field_count:
        Note: Get alignment at index i (each alignment is 8 bytes as Integer)
        Let offset be i multiplied by 8
        Let field_alignment be memory_get_int64(field_alignments, offset)

        If field_alignment is greater than max_alignment:
            Set max_alignment to field_alignment
        End If

        Set i to i plus 1
    End While

    Return max_alignment
End Process

Note: ============================================================================
Note: Array Alignment
Note: ============================================================================

Process called "get_array_alignment" takes element_type as String returns Integer:
    Note: Get alignment for array (same as element alignment)
    Return get_type_alignment(element_type)
End Process

Note: ============================================================================
Note: Common Alignment Constants
Note: ============================================================================

Process called "ALIGNOF_BYTE" returns Integer:
    Return 1
End Process

Process called "ALIGNOF_INT16" returns Integer:
    Return 2
End Process

Process called "ALIGNOF_INT32" returns Integer:
    Return 4
End Process

Process called "ALIGNOF_INT64" returns Integer:
    Return 8
End Process

Process called "ALIGNOF_SHORT" returns Integer:
    Return 2
End Process

Process called "ALIGNOF_LONG" returns Integer:
    Return 8
End Process

Process called "ALIGNOF_POINTER" returns Integer:
    Return 8
End Process

Process called "ALIGNOF_FLOAT" returns Integer:
    Return 4
End Process

Process called "ALIGNOF_DOUBLE" returns Integer:
    Return 8
End Process

Process called "ALIGNOF_INT128" returns Integer:
    Return 16
End Process

Process called "ALIGNOF_INT256" returns Integer:
    Return 32
End Process

Process called "ALIGNOF_INT512" returns Integer:
    Return 64
End Process

Process called "ALIGNOF_FLOAT16" returns Integer:
    Return 2
End Process

Process called "ALIGNOF_FLOAT32" returns Integer:
    Return 4
End Process

Process called "ALIGNOF_FLOAT64" returns Integer:
    Return 8
End Process

Process called "ALIGNOF_FLOAT80" returns Integer:
    Return 16
End Process

Process called "ALIGNOF_FLOAT128" returns Integer:
    Return 16
End Process
