Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file provides the sizeof intrinsic - returns size in bytes for types.

Size is the total number of bytes a type occupies in memory.
For example:
- byte: 1 byte
- int32: 4 bytes
- int64/pointer: 8 bytes
- struct: sum of field sizes plus padding for alignment

This is used for:
- Memory allocation
- Pointer arithmetic
- Array indexing
- Struct layout

Depends on:
- string_core.runa (for string_equals)
- alignment_core.runa (for padding calculations)
:End Note

Import "compiler/frontend/primitives/core/string_core.runa" as StringCore
Import "compiler/frontend/primitives/core/alignment_core.runa" as Alignment
Import "compiler/frontend/primitives/core/memory_core.runa" as Memory

Note: ============================================================================
Note: Type Size Queries
Note: ============================================================================

Process called "calculate_type_size" takes type_name as String returns Integer:
    Note: Get size in bytes for a type
    Note: This is the main sizeof implementation
    Note: Extracted from codegen_calculate_type_size (line 100)

    Note: Basic integer types
    If string equals from StringCore with type_name, "Integer" is equal to 1:
        Return 8  Note: 64-bit integer
    End If

    If string equals from StringCore with type_name, "Int64" is equal to 1:
        Return 8
    End If

    If string equals from StringCore with type_name, "Int32" is equal to 1:
        Return 4
    End If

    If string equals from StringCore with type_name, "Int16" is equal to 1:
        Return 2
    End If

    If string equals from StringCore with type_name, "Int8" is equal to 1:
        Return 1
    End If

    If string equals from StringCore with type_name, "Byte" is equal to 1:
        Return 1
    End If

    If string equals from StringCore with type_name, "Short" is equal to 1:
        Return 2
    End If

    If string equals from StringCore with type_name, "Long" is equal to 1:
        Return 8
    End If

    Note: Extended integer types
    If string equals from StringCore with type_name, "Int128" is equal to 1:
        Return 16  Note: 128-bit integer (16 bytes)
    End If

    If string equals from StringCore with type_name, "Int256" is equal to 1:
        Return 32  Note: 256-bit integer (32 bytes)
    End If

    If string equals from StringCore with type_name, "Int512" is equal to 1:
        Return 64  Note: 512-bit integer (64 bytes)
    End If

    Note: Pointer types - always 8 bytes on x86_64
    If string equals from StringCore with type_name, "Pointer" is equal to 1:
        Return 8
    End If

    If string equals from StringCore with type_name, "String" is equal to 1:
        Return 8  Note: String is a pointer
    End If

    Note: Floating point types
    If string equals from StringCore with type_name, "Float16" is equal to 1:
        Return 2  Note: Half precision (IEEE 754)
    End If

    If string equals from StringCore with type_name, "Float" is equal to 1:
        Return 4  Note: Default float (32-bit)
    End If

    If string equals from StringCore with type_name, "Float32" is equal to 1:
        Return 4  Note: Single precision (IEEE 754)
    End If

    If string equals from StringCore with type_name, "Double" is equal to 1:
        Return 8  Note: Default double (64-bit)
    End If

    If string equals from StringCore with type_name, "Float64" is equal to 1:
        Return 8  Note: Double precision (IEEE 754)
    End If

    If string equals from StringCore with type_name, "Float80" is equal to 1:
        Return 16  Note: x87 extended precision (80-bit stored in 128-bit for alignment)
    End If

    If string equals from StringCore with type_name, "Float128" is equal to 1:
        Return 16  Note: Quadruple precision (IEEE 754)
    End If

    Note: Boolean type
    If string equals from StringCore with type_name, "Boolean" is equal to 1:
        Return 1
    End If

    Note: Character type
    If string equals from StringCore with type_name, "Character" is equal to 1:
        Return 1
    End If

    Note: Default size for unknown types
    Note: Use 8 bytes as safe default for x86_64
    Return 8
End Process

Note: ============================================================================
Note: Struct Size Calculation
Note: ============================================================================

Process called "calculate_struct_size" takes field_sizes as Integer, field_alignments as Integer, field_count as Integer returns Integer:
    Note: Calculate struct size with proper padding
    Note: field_sizes: pointer to array of field sizes
    Note: field_alignments: pointer to array of field alignments
    Note: field_count: number of fields
    Note: Returns: total struct size including padding

    If field_count is less than or equal to 0:
        Return 0  Note: Empty struct
    End If

    Let current_offset be 0
    Let struct_alignment be 1
    Let i be 0

    Note: Calculate size of each field with padding
    While i is less than field_count:
        Let offset be i multiplied by 8

        Let field_size be proc memory get int64 from Memory with field_sizes, offset
        Let field_alignment be proc memory get int64 from Memory with field_alignments, offset

        Note: Track maximum alignment for struct
        If field_alignment is greater than struct_alignment:
            Set struct_alignment to field_alignment
        End If

        Note: Align current offset to field alignment
        Let aligned_offset be proc align struct field from Alignment with current_offset, field_alignment

        Note: Add field size
        Set current_offset to aligned_offset plus field_size

        Set i to i plus 1
    End While

    Note: Add padding at end to align struct size
    Let final_size be proc align struct size from Alignment with current_offset, struct_alignment

    Return final_size
End Process

Note: ============================================================================
Note: Array Size Calculation
Note: ============================================================================

Process called "calculate_array_size" takes element_type as String, element_count as Integer returns Integer:
    Note: Calculate array size (element_size * element_count)
    Let element_size be proc calculate_type_size with element_type
    Let total_size be element_size multiplied by element_count
    Return total_size
End Process

Note: ============================================================================
Note: Common Size Constants
Note: ============================================================================

Process called "SIZEOF_BYTE" returns Integer:
    Return 1
End Process

Process called "SIZEOF_INT16" returns Integer:
    Return 2
End Process

Process called "SIZEOF_INT32" returns Integer:
    Return 4
End Process

Process called "SIZEOF_INT64" returns Integer:
    Return 8
End Process

Process called "SIZEOF_SHORT" returns Integer:
    Return 2
End Process

Process called "SIZEOF_LONG" returns Integer:
    Return 8
End Process

Process called "SIZEOF_POINTER" returns Integer:
    Return 8
End Process

Process called "SIZEOF_FLOAT" returns Integer:
    Return 4
End Process

Process called "SIZEOF_DOUBLE" returns Integer:
    Return 8
End Process

Process called "SIZEOF_INT128" returns Integer:
    Return 16
End Process

Process called "SIZEOF_INT256" returns Integer:
    Return 32
End Process

Process called "SIZEOF_INT512" returns Integer:
    Return 64
End Process

Process called "SIZEOF_FLOAT16" returns Integer:
    Return 2
End Process

Process called "SIZEOF_FLOAT32" returns Integer:
    Return 4
End Process

Process called "SIZEOF_FLOAT64" returns Integer:
    Return 8
End Process

Process called "SIZEOF_FLOAT80" returns Integer:
    Return 16
End Process

Process called "SIZEOF_FLOAT128" returns Integer:
    Return 16
End Process
