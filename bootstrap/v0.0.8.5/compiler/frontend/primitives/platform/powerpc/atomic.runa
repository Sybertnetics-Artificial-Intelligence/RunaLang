Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions
Licensed under the Apache License, Version 2.0
:End Note

Note:
PowerPC ATOMIC OPERATIONS
Uses LWARX/STWCX (load-word-and-reserve/store-conditional) for 64-bit
:End Note

Process called "atomic_load_relaxed" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, 0(3)
        std 4, -16(1)
    End Assembly
    Return result
End Process

Process called "atomic_load_acquire" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, 0(3)
        lwsync
        std 4, -16(1)
    End Assembly
    Return result
End Process

Process called "atomic_load_seq_cst" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        sync
        ld 4, 0(3)
        lwsync
        std 4, -16(1)
    End Assembly
    Return result
End Process

Process called "atomic_store_relaxed" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)
        std 4, 0(3)
    End Assembly
    Return 0
End Process

Process called "atomic_store_release" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)
        lwsync
        std 4, 0(3)
    End Assembly
    Return 0
End Process

Process called "atomic_store_seq_cst" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)
        sync
        std 4, 0(3)
    End Assembly
    Return 0
End Process

Process called "atomic_fetch_add" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)

        .retry:
        ldarx 5, 0, 3
        add 6, 5, 4
        stdcx. 6, 0, 3
        bne- .retry

        std 5, -24(1)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_sub" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)

        .retry:
        ldarx 5, 0, 3
        subf 6, 4, 5
        stdcx. 6, 0, 3
        bne- .retry

        std 5, -24(1)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_and" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)

        .retry:
        ldarx 5, 0, 3
        and 6, 5, 4
        stdcx. 6, 0, 3
        bne- .retry

        std 5, -24(1)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_or" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)

        .retry:
        ldarx 5, 0, 3
        or 6, 5, 4
        stdcx. 6, 0, 3
        bne- .retry

        std 5, -24(1)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_xor" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)

        .retry:
        ldarx 5, 0, 3
        xor 6, 5, 4
        stdcx. 6, 0, 3
        bne- .retry

        std 5, -24(1)
    End Assembly
    Return result
End Process

Process called "atomic_compare_and_swap" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)
        ld 5, -24(1)

        .retry:
        ldarx 6, 0, 3
        cmpd 6, 4
        bne- .failed
        stdcx. 5, 0, 3
        bne- .retry

        li 7, 1
        b .done

        .failed:
        li 7, 0

        .done:
        std 7, -32(1)
    End Assembly
    Return result
End Process

Process called "atomic_compare_and_swap_weak" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Return atomic_compare_and_swap(ptr, expected, desired)
End Process

Process called "atomic_exchange" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld 3, -8(1)
        ld 4, -16(1)

        .retry:
        ldarx 5, 0, 3
        stdcx. 4, 0, 3
        bne- .retry

        std 5, -24(1)
    End Assembly
    Return result
End Process

Process called "memory_barrier_acquire" returns Integer:
    Inline Assembly:
        lwsync
    End Assembly
    Return 0
End Process

Process called "memory_barrier_release" returns Integer:
    Inline Assembly:
        lwsync
    End Assembly
    Return 0
End Process

Process called "memory_barrier_full" returns Integer:
    Inline Assembly:
        sync
    End Assembly
    Return 0
End Process

Process called "memory_barrier_seq_cst" returns Integer:
    Inline Assembly:
        sync
    End Assembly
    Return 0
End Process
