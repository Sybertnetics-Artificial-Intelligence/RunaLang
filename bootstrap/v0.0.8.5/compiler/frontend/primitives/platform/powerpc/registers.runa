Note: 
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements PowerPC 64-bit register definitions for Linux.

PowerPC 64-bit Register Architecture:
- R0-R31: 64-bit general-purpose registers
- R0: Always zero (reads as 0, writes discarded)
- R1: Stack pointer (SP)
- R2: Table of Contents (TOC) pointer
- R3-R10: Parameter registers
- R11-R12: Volatile registers
- R13-R31: Non-volatile registers
- F0-F31: 64-bit floating-point registers
- V0-V31: 128-bit vector registers (AltiVec/VMX)
- CR: Condition register (32 bits, 8 condition fields)
- LR: Link register (return address)
- CTR: Count register (loop counter)
- XER: Fixed-point exception register
- FPSCR: Floating-point status and control register

PowerPC 64-bit Calling Convention (System V ABI):
- R3-R10: Parameter registers (8 parameters)
- R3-R4: Return value registers (64-bit values use R3:R4)
- R11-R12: Volatile registers (caller-saved)
- R13-R31: Non-volatile registers (callee-saved)
- R1: Stack pointer
- R2: TOC pointer
- F1-F13: Floating-point parameter registers
- F1: Floating-point return value register
- F14-F31: Non-volatile floating-point registers
- V2-V13: Vector parameter registers
- V2: Vector return value register
- V14-V19: Non-volatile vector registers
- V20-V31: Volatile vector registers

Register Encoding:
- General-purpose registers: 0-31 (R0-R31)
- Floating-point registers: 32-63 (F0-F31)
- Vector registers: 64-95 (V0-V31)
- Special registers: 96-99 (CR, LR, CTR, XER)

Platform: Linux PowerPC 64-bit (ppc64le)
:End Note

Note: ============================================================================
Note: GENERAL-PURPOSE REGISTER CONSTANTS
Note: ============================================================================

Note: PowerPC 64-bit calling convention uses R3-R10 for parameters, R3-R4 for return values
Note: R0 is always zero, R1 is stack pointer, R2 is TOC pointer
Note: R11-R12 are volatile, R13-R31 are non-volatile

Process called "REG_R0" returns Integer:
    Return 0
End Process

Process called "REG_R1" returns Integer:
    Return 1
End Process

Process called "REG_R2" returns Integer:
    Return 2
End Process

Process called "REG_R3" returns Integer:
    Return 3
End Process

Process called "REG_R4" returns Integer:
    Return 4
End Process

Process called "REG_R5" returns Integer:
    Return 5
End Process

Process called "REG_R6" returns Integer:
    Return 6
End Process

Process called "REG_R7" returns Integer:
    Return 7
End Process

Process called "REG_R8" returns Integer:
    Return 8
End Process

Process called "REG_R9" returns Integer:
    Return 9
End Process

Process called "REG_R10" returns Integer:
    Return 10
End Process

Process called "REG_R11" returns Integer:
    Return 11
End Process

Process called "REG_R12" returns Integer:
    Return 12
End Process

Process called "REG_R13" returns Integer:
    Return 13
End Process

Process called "REG_R14" returns Integer:
    Return 14
End Process

Process called "REG_R15" returns Integer:
    Return 15
End Process

Process called "REG_R16" returns Integer:
    Return 16
End Process

Process called "REG_R17" returns Integer:
    Return 17
End Process

Process called "REG_R18" returns Integer:
    Return 18
End Process

Process called "REG_R19" returns Integer:
    Return 19
End Process

Process called "REG_R20" returns Integer:
    Return 20
End Process

Process called "REG_R21" returns Integer:
    Return 21
End Process

Process called "REG_R22" returns Integer:
    Return 22
End Process

Process called "REG_R23" returns Integer:
    Return 23
End Process

Process called "REG_R24" returns Integer:
    Return 24
End Process

Process called "REG_R25" returns Integer:
    Return 25
End Process

Process called "REG_R26" returns Integer:
    Return 26
End Process

Process called "REG_R27" returns Integer:
    Return 27
End Process

Process called "REG_R28" returns Integer:
    Return 28
End Process

Process called "REG_R29" returns Integer:
    Return 29
End Process

Process called "REG_R30" returns Integer:
    Return 30
End Process

Process called "REG_R31" returns Integer:
    Return 31
End Process

Note: ============================================================================
Note: FLOATING-POINT REGISTER CONSTANTS
Note: ============================================================================

Note: PowerPC 64-bit uses F1-F13 for parameters, F1 for return value
Note: F14-F31 are non-volatile, F0 is volatile

Process called "REG_F0" returns Integer:
    Return 32
End Process

Process called "REG_F1" returns Integer:
    Return 33
End Process

Process called "REG_F2" returns Integer:
    Return 34
End Process

Process called "REG_F3" returns Integer:
    Return 35
End Process

Process called "REG_F4" returns Integer:
    Return 36
End Process

Process called "REG_F5" returns Integer:
    Return 37
End Process

Process called "REG_F6" returns Integer:
    Return 38
End Process

Process called "REG_F7" returns Integer:
    Return 39
End Process

Process called "REG_F8" returns Integer:
    Return 40
End Process

Process called "REG_F9" returns Integer:
    Return 41
End Process

Process called "REG_F10" returns Integer:
    Return 42
End Process

Process called "REG_F11" returns Integer:
    Return 43
End Process

Process called "REG_F12" returns Integer:
    Return 44
End Process

Process called "REG_F13" returns Integer:
    Return 45
End Process

Process called "REG_F14" returns Integer:
    Return 46
End Process

Process called "REG_F15" returns Integer:
    Return 47
End Process

Process called "REG_F16" returns Integer:
    Return 48
End Process

Process called "REG_F17" returns Integer:
    Return 49
End Process

Process called "REG_F18" returns Integer:
    Return 50
End Process

Process called "REG_F19" returns Integer:
    Return 51
End Process

Process called "REG_F20" returns Integer:
    Return 52
End Process

Process called "REG_F21" returns Integer:
    Return 53
End Process

Process called "REG_F22" returns Integer:
    Return 54
End Process

Process called "REG_F23" returns Integer:
    Return 55
End Process

Process called "REG_F24" returns Integer:
    Return 56
End Process

Process called "REG_F25" returns Integer:
    Return 57
End Process

Process called "REG_F26" returns Integer:
    Return 58
End Process

Process called "REG_F27" returns Integer:
    Return 59
End Process

Process called "REG_F28" returns Integer:
    Return 60
End Process

Process called "REG_F29" returns Integer:
    Return 61
End Process

Process called "REG_F30" returns Integer:
    Return 62
End Process

Process called "REG_F31" returns Integer:
    Return 63
End Process

Note: ============================================================================
Note: VECTOR REGISTER CONSTANTS
Note: ============================================================================

Note: PowerPC 64-bit uses V2-V13 for parameters, V2 for return value
Note: V14-V19 are non-volatile, V0-V1 and V20-V31 are volatile

Process called "REG_V0" returns Integer:
    Return 64
End Process

Process called "REG_V1" returns Integer:
    Return 65
End Process

Process called "REG_V2" returns Integer:
    Return 66
End Process

Process called "REG_V3" returns Integer:
    Return 67
End Process

Process called "REG_V4" returns Integer:
    Return 68
End Process

Process called "REG_V5" returns Integer:
    Return 69
End Process

Process called "REG_V6" returns Integer:
    Return 70
End Process

Process called "REG_V7" returns Integer:
    Return 71
End Process

Process called "REG_V8" returns Integer:
    Return 72
End Process

Process called "REG_V9" returns Integer:
    Return 73
End Process

Process called "REG_V10" returns Integer:
    Return 74
End Process

Process called "REG_V11" returns Integer:
    Return 75
End Process

Process called "REG_V12" returns Integer:
    Return 76
End Process

Process called "REG_V13" returns Integer:
    Return 77
End Process

Process called "REG_V14" returns Integer:
    Return 78
End Process

Process called "REG_V15" returns Integer:
    Return 79
End Process

Process called "REG_V16" returns Integer:
    Return 80
End Process

Process called "REG_V17" returns Integer:
    Return 81
End Process

Process called "REG_V18" returns Integer:
    Return 82
End Process

Process called "REG_V19" returns Integer:
    Return 83
End Process

Process called "REG_V20" returns Integer:
    Return 84
End Process

Process called "REG_V21" returns Integer:
    Return 85
End Process

Process called "REG_V22" returns Integer:
    Return 86
End Process

Process called "REG_V23" returns Integer:
    Return 87
End Process

Process called "REG_V24" returns Integer:
    Return 88
End Process

Process called "REG_V25" returns Integer:
    Return 89
End Process

Process called "REG_V26" returns Integer:
    Return 90
End Process

Process called "REG_V27" returns Integer:
    Return 91
End Process

Process called "REG_V28" returns Integer:
    Return 92
End Process

Process called "REG_V29" returns Integer:
    Return 93
End Process

Process called "REG_V30" returns Integer:
    Return 94
End Process

Process called "REG_V31" returns Integer:
    Return 95
End Process

Note: ============================================================================
Note: SPECIAL REGISTER CONSTANTS
Note: ============================================================================

Process called "REG_CR" returns Integer:
    Return 96  Note: Condition register
End Process

Process called "REG_LR" returns Integer:
    Return 97  Note: Link register
End Process

Process called "REG_CTR" returns Integer:
    Return 98  Note: Count register
End Process

Process called "REG_XER" returns Integer:
    Return 99  Note: Fixed-point exception register
End Process

Process called "REG_FPSCR" returns Integer:
    Return 100  Note: Floating-point status and control register
End Process

Note: ============================================================================
Note: REGISTER NAME HELPERS
Note: ============================================================================

Process called "get_register_name" takes reg_num as Integer returns String:
    Note: Get register name for PowerPC 64-bit
    Note: reg_num: register number (0-100)
    Note: Returns register name (e.g., "r3", "f1", "v2")
    
    If reg_num is greater than or equal to 0 and reg_num is less than or equal to 31:
        Let name be "r"
        Let name be name plus reg_num
        Return name
    End If
    
    If reg_num is greater than or equal to 32 and reg_num is less than or equal to 63:
        Let fp_num be reg_num minus 32
        Let name be "f"
        Let name be name plus fp_num
        Return name
    End If
    
    If reg_num is greater than or equal to 64 and reg_num is less than or equal to 95:
        Let vec_num be reg_num minus 64
        Let name be "v"
        Let name be name plus vec_num
        Return name
    End If
    
    If reg_num is equal to 96:
        Return "cr"
    End If
    
    If reg_num is equal to 97:
        Return "lr"
    End If
    
    If reg_num is equal to 98:
        Return "ctr"
    End If
    
    If reg_num is equal to 99:
        Return "xer"
    End If
    
    If reg_num is equal to 100:
        Return "fpscr"
    End If
    
    Return "unknown"
End Process

Process called "get_parameter_register" takes param_index as Integer returns Integer:
    Note: Get parameter register number for PowerPC 64-bit calling convention
    Note: param_index: 0-7 for first 8 parameters
    Note: Returns register number
    
    If param_index is equal to 0:
        Return 3  Note: R3
    End If
    
    If param_index is equal to 1:
        Return 4  Note: R4
    End If
    
    If param_index is equal to 2:
        Return 5  Note: R5
    End If
    
    If param_index is equal to 3:
        Return 6  Note: R6
    End If
    
    If param_index is equal to 4:
        Return 7  Note: R7
    End If
    
    If param_index is equal to 5:
        Return 8  Note: R8
    End If
    
    If param_index is equal to 6:
        Return 9  Note: R9
    End If
    
    If param_index is equal to 7:
        Return 10  Note: R10
    End If
    
    Return -1  Note: Invalid parameter index
End Process

Process called "get_return_register" returns Integer:
    Note: Get return value register number for PowerPC 64-bit
    Note: Returns register number for R3
    
    Return 3  Note: R3
End Process

Process called "get_stack_pointer_register" returns Integer:
    Note: Get stack pointer register number for PowerPC 64-bit
    Note: Returns register number for R1
    
    Return 1  Note: R1
End Process

Process called "get_toc_pointer_register" returns Integer:
    Note: Get TOC pointer register number for PowerPC 64-bit
    Note: Returns register number for R2
    
    Return 2  Note: R2
End Process

Process called "get_zero_register" returns Integer:
    Note: Get zero register number for PowerPC 64-bit
    Note: Returns register number for R0
    
    Return 0  Note: R0
End Process

Process called "get_link_register" returns Integer:
    Note: Get link register number for PowerPC 64-bit
    Note: Returns register number for LR
    
    Return 97  Note: LR
End Process

Process called "get_condition_register" returns Integer:
    Note: Get condition register number for PowerPC 64-bit
    Note: Returns register number for CR
    
    Return 96  Note: CR
End Process

Process called "get_count_register" returns Integer:
    Note: Get count register number for PowerPC 64-bit
    Note: Returns register number for CTR
    
    Return 98  Note: CTR
End Process

Process called "is_volatile_register" takes reg_num as Integer returns Integer:
    Note: Check if register is volatile (caller-saved) for PowerPC 64-bit
    Note: reg_num: register number
    Note: Returns 1 if volatile, 0 if non-volatile
    
    If reg_num is equal to 0:
        Return 1  Note: R0 (zero register)
    End If
    
    If reg_num is greater than or equal to 3 and reg_num is less than or equal to 10:
        Return 1  Note: R3-R10 (parameter registers)
    End If
    
    If reg_num is greater than or equal to 11 and reg_num is less than or equal to 12:
        Return 1  Note: R11-R12 (volatile)
    End If
    
    If reg_num is greater than or equal to 32 and reg_num is less than or equal to 33:
        Return 1  Note: F0-F1 (volatile)
    End If
    
    If reg_num is greater than or equal to 34 and reg_num is less than or equal to 45:
        Return 1  Note: F2-F13 (parameter registers)
    End If
    
    If reg_num is greater than or equal to 64 and reg_num is less than or equal to 65:
        Return 1  Note: V0-V1 (volatile)
    End If
    
    If reg_num is greater than or equal to 66 and reg_num is less than or equal to 77:
        Return 1  Note: V2-V13 (parameter registers)
    End If
    
    If reg_num is greater than or equal to 84 and reg_num is less than or equal to 95:
        Return 1  Note: V20-V31 (volatile)
    End If
    
    Return 0  Note: Non-volatile
End Process

Process called "is_parameter_register" takes reg_num as Integer returns Integer:
    Note: Check if register is used for parameters for PowerPC 64-bit
    Note: reg_num: register number
    Note: Returns 1 if parameter register, 0 otherwise
    
    If reg_num is greater than or equal to 3 and reg_num is less than or equal to 10:
        Return 1  Note: R3-R10 (integer parameters)
    End If
    
    If reg_num is greater than or equal to 34 and reg_num is less than or equal to 45:
        Return 1  Note: F2-F13 (floating-point parameters)
    End If
    
    If reg_num is greater than or equal to 66 and reg_num is less than or equal to 77:
        Return 1  Note: V2-V13 (vector parameters)
    End If
    
    Return 0
End Process

Process called "get_register_size" takes reg_num as Integer returns Integer:
    Note: Get register size in bits for PowerPC 64-bit
    Note: reg_num: register number
    Note: Returns size in bits
    
    If reg_num is greater than or equal to 0 and reg_num is less than or equal to 31:
        Return 64  Note: General-purpose registers
    End If
    
    If reg_num is greater than or equal to 32 and reg_num is less than or equal to 63:
        Return 64  Note: Floating-point registers
    End If
    
    If reg_num is greater than or equal to 64 and reg_num is less than or equal to 95:
        Return 128  Note: Vector registers
    End If
    
    If reg_num is equal to 96:
        Return 32  Note: Condition register
    End If
    
    If reg_num is equal to 97:
        Return 64  Note: Link register
    End If
    
    If reg_num is equal to 98:
        Return 64  Note: Count register
    End If
    
    If reg_num is equal to 99:
        Return 32  Note: XER
    End If
    
    If reg_num is equal to 100:
        Return 32  Note: FPSCR
    End If
    
    Return 0  Note: Unknown register
End Process