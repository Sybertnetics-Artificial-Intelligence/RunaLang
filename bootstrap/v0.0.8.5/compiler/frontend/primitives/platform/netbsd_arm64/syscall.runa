Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
NetBSD ARM64 System Call Interface

This file implements NetBSD ARM64 (AArch64) system calls.

Platform-specific details:
- Platform: NetBSD ARM64
- Syscall mechanism: SVC instruction (svc #0)
- Syscall number register: X8
- Argument registers: X0-X5 (up to 6 arguments)
- Return value: X0 (positive on success, negative errno on error)

NetBSD syscall convention (ARM64):
- X8 = syscall number
- X0-X5 = arguments 1-6
- Stack = arguments 7+ (if needed)
- X0 = return value (or -errno on error)
- Carry flag in CPSR indicates error (but typically check for negative return)

NetBSD syscall numbers differ from Linux, FreeBSD, and Darwin.
This file provides both syscall number constants and wrapper functions.

Dependencies: None (uses inline assembly for syscalls)
:End Note

Import "compiler/frontend/primitives/core/memory_core.runa" as Memory

Note: ============================================================================
Note: SYSCALL NUMBER CONSTANTS
Note: ============================================================================

Note: NetBSD syscall numbers (from sys/kern/syscalls.master)
Note: These are specific to NetBSD and differ from Linux/FreeBSD/Darwin

Process called "SYS_EXIT" returns Integer:
    Return 1
End Process

Process called "SYS_FORK" returns Integer:
    Return 2
End Process

Process called "SYS_READ" returns Integer:
    Return 3
End Process

Process called "SYS_WRITE" returns Integer:
    Return 4
End Process

Process called "SYS_OPEN" returns Integer:
    Return 5
End Process

Process called "SYS_CLOSE" returns Integer:
    Return 6
End Process

Process called "SYS_WAIT4" returns Integer:
    Return 7
End Process

Process called "SYS_LINK" returns Integer:
    Return 9
End Process

Process called "SYS_UNLINK" returns Integer:
    Return 10
End Process

Process called "SYS_CHDIR" returns Integer:
    Return 12
End Process

Process called "SYS_FCHDIR" returns Integer:
    Return 13
End Process

Process called "SYS_MKNOD" returns Integer:
    Return 14
End Process

Process called "SYS_CHMOD" returns Integer:
    Return 15
End Process

Process called "SYS_CHOWN" returns Integer:
    Return 16
End Process

Process called "SYS_BREAK" returns Integer:
    Return 17
End Process

Process called "SYS_GETPID" returns Integer:
    Return 20
End Process

Process called "SYS_UNMOUNT" returns Integer:
    Return 22
End Process

Process called "SYS_SETUID" returns Integer:
    Return 23
End Process

Process called "SYS_GETUID" returns Integer:
    Return 24
End Process

Process called "SYS_GETEUID" returns Integer:
    Return 25
End Process

Process called "SYS_PTRACE" returns Integer:
    Return 26
End Process

Process called "SYS_RECVMSG" returns Integer:
    Return 27
End Process

Process called "SYS_SENDMSG" returns Integer:
    Return 28
End Process

Process called "SYS_RECVFROM" returns Integer:
    Return 29
End Process

Process called "SYS_ACCEPT" returns Integer:
    Return 30
End Process

Process called "SYS_GETPEERNAME" returns Integer:
    Return 31
End Process

Process called "SYS_GETSOCKNAME" returns Integer:
    Return 32
End Process

Process called "SYS_ACCESS" returns Integer:
    Return 33
End Process

Process called "SYS_CHFLAGS" returns Integer:
    Return 34
End Process

Process called "SYS_FCHFLAGS" returns Integer:
    Return 35
End Process

Process called "SYS_SYNC" returns Integer:
    Return 36
End Process

Process called "SYS_KILL" returns Integer:
    Return 37
End Process

Process called "SYS_GETPPID" returns Integer:
    Return 39
End Process

Process called "SYS_DUP" returns Integer:
    Return 41
End Process

Process called "SYS_PIPE" returns Integer:
    Return 42
End Process

Process called "SYS_GETEGID" returns Integer:
    Return 43
End Process

Process called "SYS_PROFIL" returns Integer:
    Return 44
End Process

Process called "SYS_KTRACE" returns Integer:
    Return 45
End Process

Process called "SYS_GETGID" returns Integer:
    Return 47
End Process

Process called "SYS_IOCTL" returns Integer:
    Return 54
End Process

Process called "SYS_REBOOT" returns Integer:
    Return 55
End Process

Process called "SYS_REVOKE" returns Integer:
    Return 56
End Process

Process called "SYS_SYMLINK" returns Integer:
    Return 57
End Process

Process called "SYS_READLINK" returns Integer:
    Return 58
End Process

Process called "SYS_EXECVE" returns Integer:
    Return 59
End Process

Process called "SYS_UMASK" returns Integer:
    Return 60
End Process

Process called "SYS_CHROOT" returns Integer:
    Return 61
End Process

Process called "SYS_VFORK" returns Integer:
    Return 66
End Process

Process called "SYS_SBRK" returns Integer:
    Return 69
End Process

Process called "SYS_SSTK" returns Integer:
    Return 70
End Process

Process called "SYS_MUNMAP" returns Integer:
    Return 73
End Process

Process called "SYS_MPROTECT" returns Integer:
    Return 74
End Process

Process called "SYS_MADVISE" returns Integer:
    Return 75
End Process

Process called "SYS_MINCORE" returns Integer:
    Return 78
End Process

Process called "SYS_GETGROUPS" returns Integer:
    Return 79
End Process

Process called "SYS_SETGROUPS" returns Integer:
    Return 80
End Process

Process called "SYS_GETPGRP" returns Integer:
    Return 81
End Process

Process called "SYS_SETPGID" returns Integer:
    Return 82
End Process

Process called "SYS_DUP2" returns Integer:
    Return 90
End Process

Process called "SYS_FCNTL" returns Integer:
    Return 92
End Process

Process called "SYS_SELECT" returns Integer:
    Return 93
End Process

Process called "SYS_FSYNC" returns Integer:
    Return 95
End Process

Process called "SYS_SETPRIORITY" returns Integer:
    Return 96
End Process

Process called "SYS_SOCKET" returns Integer:
    Return 97
End Process

Process called "SYS_CONNECT" returns Integer:
    Return 98
End Process

Process called "SYS_GETPRIORITY" returns Integer:
    Return 100
End Process

Process called "SYS_BIND" returns Integer:
    Return 104
End Process

Process called "SYS_SETSOCKOPT" returns Integer:
    Return 105
End Process

Process called "SYS_LISTEN" returns Integer:
    Return 106
End Process

Process called "SYS_GETTIMEOFDAY" returns Integer:
    Return 116
End Process

Process called "SYS_GETRUSAGE" returns Integer:
    Return 117
End Process

Process called "SYS_GETSOCKOPT" returns Integer:
    Return 118
End Process

Process called "SYS_READV" returns Integer:
    Return 120
End Process

Process called "SYS_WRITEV" returns Integer:
    Return 121
End Process

Process called "SYS_FCHOWN" returns Integer:
    Return 123
End Process

Process called "SYS_FCHMOD" returns Integer:
    Return 124
End Process

Process called "SYS_SETREUID" returns Integer:
    Return 126
End Process

Process called "SYS_SETREGID" returns Integer:
    Return 127
End Process

Process called "SYS_RENAME" returns Integer:
    Return 128
End Process

Process called "SYS_FLOCK" returns Integer:
    Return 131
End Process

Process called "SYS_MKFIFO" returns Integer:
    Return 132
End Process

Process called "SYS_SENDTO" returns Integer:
    Return 133
End Process

Process called "SYS_SHUTDOWN" returns Integer:
    Return 134
End Process

Process called "SYS_SOCKETPAIR" returns Integer:
    Return 135
End Process

Process called "SYS_MKDIR" returns Integer:
    Return 136
End Process

Process called "SYS_RMDIR" returns Integer:
    Return 137
End Process

Process called "SYS_SETSID" returns Integer:
    Return 147
End Process

Process called "SYS_NFSSVC" returns Integer:
    Return 155
End Process

Process called "SYS_GETDIRENTRIES" returns Integer:
    Return 196
End Process

Process called "SYS_MMAP" returns Integer:
    Return 197
End Process

Process called "SYS_LSEEK" returns Integer:
    Return 199
End Process

Process called "SYS_TRUNCATE" returns Integer:
    Return 200
End Process

Process called "SYS_FTRUNCATE" returns Integer:
    Return 201
End Process

Process called "SYS___SYSCTL" returns Integer:
    Return 202
End Process

Process called "SYS_MLOCK" returns Integer:
    Return 203
End Process

Process called "SYS_MUNLOCK" returns Integer:
    Return 204
End Process

Process called "SYS_GETPGID" returns Integer:
    Return 207
End Process

Process called "SYS_POLL" returns Integer:
    Return 209
End Process

Process called "SYS_LCHOWN" returns Integer:
    Return 254
End Process

Process called "SYS_LCHMOD" returns Integer:
    Return 274
End Process

Process called "SYS_MSYNC" returns Integer:
    Return 277
End Process

Process called "SYS_PREAD" returns Integer:
    Return 173
End Process

Process called "SYS_PWRITE" returns Integer:
    Return 174
End Process

Process called "SYS_PREADV" returns Integer:
    Return 289
End Process

Process called "SYS_PWRITEV" returns Integer:
    Return 290
End Process

Process called "SYS_FHOPEN" returns Integer:
    Return 298
End Process

Process called "SYS_KQUEUE" returns Integer:
    Return 344
End Process

Process called "SYS_KEVENT" returns Integer:
    Return 345
End Process

Process called "SYS_CLOCK_GETTIME" returns Integer:
    Return 427
End Process

Process called "SYS_CLOCK_SETTIME" returns Integer:
    Return 428
End Process

Process called "SYS_CLOCK_GETRES" returns Integer:
    Return 429
End Process

Process called "SYS_NANOSLEEP" returns Integer:
    Return 430
End Process

Process called "SYS_ACCEPT4" returns Integer:
    Return 456
End Process

Process called "SYS_PIPE2" returns Integer:
    Return 457
End Process

Process called "SYS_DUP3" returns Integer:
    Return 458
End Process

Note: ============================================================================
Note: FILE DESCRIPTOR CONSTANTS
Note: ============================================================================

Process called "STDIN_FILENO" returns Integer:
    Return 0
End Process

Process called "STDOUT_FILENO" returns Integer:
    Return 1
End Process

Process called "STDERR_FILENO" returns Integer:
    Return 2
End Process

Note: ============================================================================
Note: FILE OPEN FLAGS
Note: ============================================================================

Process called "O_RDONLY" returns Integer:
    Return 0  Note: Open for reading only
End Process

Process called "O_WRONLY" returns Integer:
    Return 1  Note: Open for writing only
End Process

Process called "O_RDWR" returns Integer:
    Return 2  Note: Open for reading and writing
End Process

Process called "O_NONBLOCK" returns Integer:
    Return 4  Note: No delay
End Process

Process called "O_APPEND" returns Integer:
    Return 8  Note: Set append mode
End Process

Process called "O_SHLOCK" returns Integer:
    Return 16  Note: Atomically obtain a shared lock
End Process

Process called "O_EXLOCK" returns Integer:
    Return 32  Note: Atomically obtain an exclusive lock
End Process

Process called "O_ASYNC" returns Integer:
    Return 64  Note: Signal pgrp when data ready
End Process

Process called "O_SYNC" returns Integer:
    Return 128  Note: Synchronous writes
End Process

Process called "O_NOFOLLOW" returns Integer:
    Return 256  Note: Don't follow symlinks
End Process

Process called "O_CREAT" returns Integer:
    Return 512  Note: Create if nonexistent
End Process

Process called "O_TRUNC" returns Integer:
    Return 1024  Note: Truncate to zero length
End Process

Process called "O_EXCL" returns Integer:
    Return 2048  Note: Error if already exists
End Process

Process called "O_NOCTTY" returns Integer:
    Return 32768  Note: Don't assign controlling terminal
End Process

Process called "O_DIRECT" returns Integer:
    Return 524288  Note: Direct I/O
End Process

Process called "O_DIRECTORY" returns Integer:
    Return 2097152  Note: Fail if not directory
End Process

Process called "O_CLOEXEC" returns Integer:
    Return 4194304  Note: Close on exec
End Process

Note: ============================================================================
Note: MEMORY PROTECTION FLAGS
Note: ============================================================================

Process called "PROT_NONE" returns Integer:
    Return 0  Note: No access
End Process

Process called "PROT_READ" returns Integer:
    Return 1  Note: Pages can be read
End Process

Process called "PROT_WRITE" returns Integer:
    Return 2  Note: Pages can be written
End Process

Process called "PROT_EXEC" returns Integer:
    Return 4  Note: Pages can be executed
End Process

Note: ============================================================================
Note: MEMORY MAPPING FLAGS
Note: ============================================================================

Process called "MAP_SHARED" returns Integer:
    Return 1  Note: Share changes
End Process

Process called "MAP_PRIVATE" returns Integer:
    Return 2  Note: Changes are private
End Process

Process called "MAP_FIXED" returns Integer:
    Return 16  Note: Interpret addr exactly
End Process

Process called "MAP_ANON" returns Integer:
    Return 4096  Note: Anonymous memory (not file-backed)
End Process

Process called "MAP_STACK" returns Integer:
    Return 8192  Note: Region grows down (stack)
End Process

Process called "MAP_FILE" returns Integer:
    Return 0  Note: File mapping (default)
End Process

Note: ============================================================================
Note: GENERIC SYSCALL WRAPPERS
Note: ============================================================================

Note: NetBSD ARM64 syscall convention:
Note: - X8 = syscall number
Note: - X0-X5 = arguments 1-6
Note: - Stack = arguments 7+
Note: - Return value in X0

Process called "syscall_0" takes syscall_number as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 0 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-16]
    End Assembly
    Return result
End Process

Process called "syscall_1" takes syscall_number as Integer, arg1 as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 1 argument
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-24]
    End Assembly
    Return result
End Process

Process called "syscall_2" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 2 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-2 into X0-X1
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-32]
    End Assembly
    Return result
End Process

Process called "syscall_3" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 3 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-3 into X0-X2
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-40]
    End Assembly
    Return result
End Process

Process called "syscall_4" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 4 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-4 into X0-X3
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-48]
    End Assembly
    Return result
End Process

Process called "syscall_5" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 5 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-5 into X0-X4
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-56]
    End Assembly
    Return result
End Process

Process called "syscall_6" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer returns Integer:
    Note: NetBSD ARM64 syscall with 6 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-6 into X0-X5
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]
        ldr x5, [fp, #-56]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-64]
    End Assembly
    Return result
End Process

Note: ============================================================================
Note: HIGH-LEVEL SYSCALL WRAPPERS
Note: ============================================================================

Process called "exit" takes status as Integer returns Integer:
    Note: Exit the current process
    Return syscall_1(SYS_EXIT(), status)
End Process

Process called "read" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Note: Read from file descriptor
    Return syscall_3(SYS_READ(), fd, buffer, count)
End Process

Process called "write" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Note: Write to file descriptor
    Return syscall_3(SYS_WRITE(), fd, buffer, count)
End Process

Process called "open" takes path as Integer, flags as Integer, mode as Integer returns Integer:
    Note: Open file
    Return syscall_3(SYS_OPEN(), path, flags, mode)
End Process

Process called "close" takes fd as Integer returns Integer:
    Note: Close file descriptor
    Return syscall_1(SYS_CLOSE(), fd)
End Process

Process called "mmap" takes addr as Integer, length as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Integer:
    Note: Map memory
    Return syscall_6(SYS_MMAP(), addr, length, prot, flags, fd, offset)
End Process

Process called "munmap" takes addr as Integer, length as Integer returns Integer:
    Note: Unmap memory
    Return syscall_2(SYS_MUNMAP(), addr, length)
End Process

Process called "mprotect" takes addr as Integer, length as Integer, prot as Integer returns Integer:
    Note: Change memory protection
    Return syscall_3(SYS_MPROTECT(), addr, length, prot)
End Process

Process called "getpid" returns Integer:
    Note: Get process ID
    Return syscall_0(SYS_GETPID())
End Process

Process called "fork" returns Integer:
    Note: Create child process
    Return syscall_0(SYS_FORK())
End Process

Process called "execve" takes path as Integer, argv as Integer, envp as Integer returns Integer:
    Note: Execute program
    Return syscall_3(SYS_EXECVE(), path, argv, envp)
End Process

Process called "wait4" takes pid as Integer, status as Integer, options as Integer, rusage as Integer returns Integer:
    Note: Wait for process to change state
    Return syscall_4(SYS_WAIT4(), pid, status, options, rusage)
End Process

Process called "kill" takes pid as Integer, sig as Integer returns Integer:
    Note: Send signal to process
    Return syscall_2(SYS_KILL(), pid, sig)
End Process

Process called "getuid" returns Integer:
    Note: Get user ID
    Return syscall_0(SYS_GETUID())
End Process

Process called "geteuid" returns Integer:
    Note: Get effective user ID
    Return syscall_0(SYS_GETEUID())
End Process

Process called "getgid" returns Integer:
    Note: Get group ID
    Return syscall_0(SYS_GETGID())
End Process

Process called "getegid" returns Integer:
    Note: Get effective group ID
    Return syscall_0(SYS_GETEGID())
End Process

Process called "dup" takes fd as Integer returns Integer:
    Note: Duplicate file descriptor
    Return syscall_1(SYS_DUP(), fd)
End Process

Process called "dup2" takes oldfd as Integer, newfd as Integer returns Integer:
    Note: Duplicate file descriptor to specific fd
    Return syscall_2(SYS_DUP2(), oldfd, newfd)
End Process

Process called "pipe" takes pipefd as Integer returns Integer:
    Note: Create pipe
    Return syscall_1(SYS_PIPE(), pipefd)
End Process

Process called "ioctl" takes fd as Integer, request as Integer, arg as Integer returns Integer:
    Note: Device-specific input/output operations
    Return syscall_3(SYS_IOCTL(), fd, request, arg)
End Process

Process called "fcntl" takes fd as Integer, cmd as Integer, arg as Integer returns Integer:
    Note: File control operations
    Return syscall_3(SYS_FCNTL(), fd, cmd, arg)
End Process

Process called "lseek" takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Note: Reposition file offset
    Return syscall_3(SYS_LSEEK(), fd, offset, whence)
End Process

Process called "ftruncate" takes fd as Integer, length as Integer returns Integer:
    Note: Truncate file to specified length
    Return syscall_2(SYS_FTRUNCATE(), fd, length)
End Process

Process called "fsync" takes fd as Integer returns Integer:
    Note: Synchronize file's in-core state with storage
    Return syscall_1(SYS_FSYNC(), fd)
End Process

Process called "chmod" takes path as Integer, mode as Integer returns Integer:
    Note: Change file mode
    Return syscall_2(SYS_CHMOD(), path, mode)
End Process

Process called "fchmod" takes fd as Integer, mode as Integer returns Integer:
    Note: Change file mode
    Return syscall_2(SYS_FCHMOD(), fd, mode)
End Process

Process called "chown" takes path as Integer, owner as Integer, group as Integer returns Integer:
    Note: Change file owner and group
    Return syscall_3(SYS_CHOWN(), path, owner, group)
End Process

Process called "fchown" takes fd as Integer, owner as Integer, group as Integer returns Integer:
    Note: Change file owner and group
    Return syscall_3(SYS_FCHOWN(), fd, owner, group)
End Process

Process called "mkdir" takes path as Integer, mode as Integer returns Integer:
    Note: Create directory
    Return syscall_2(SYS_MKDIR(), path, mode)
End Process

Process called "rmdir" takes path as Integer returns Integer:
    Note: Remove directory
    Return syscall_1(SYS_RMDIR(), path)
End Process

Process called "unlink" takes path as Integer returns Integer:
    Note: Delete file
    Return syscall_1(SYS_UNLINK(), path)
End Process

Process called "rename" takes oldpath as Integer, newpath as Integer returns Integer:
    Note: Rename file
    Return syscall_2(SYS_RENAME(), oldpath, newpath)
End Process

Process called "link" takes oldpath as Integer, newpath as Integer returns Integer:
    Note: Create hard link
    Return syscall_2(SYS_LINK(), oldpath, newpath)
End Process

Process called "symlink" takes target as Integer, linkpath as Integer returns Integer:
    Note: Create symbolic link
    Return syscall_2(SYS_SYMLINK(), target, linkpath)
End Process

Process called "readlink" takes path as Integer, buf as Integer, bufsiz as Integer returns Integer:
    Note: Read symbolic link
    Return syscall_3(SYS_READLINK(), path, buf, bufsiz)
End Process

Process called "chdir" takes path as Integer returns Integer:
    Note: Change working directory
    Return syscall_1(SYS_CHDIR(), path)
End Process

Process called "fchdir" takes fd as Integer returns Integer:
    Note: Change working directory to fd
    Return syscall_1(SYS_FCHDIR(), fd)
End Process

Process called "socket" takes domain as Integer, socket_type as Integer, protocol as Integer returns Integer:
    Note: Create socket
    Return syscall_3(SYS_SOCKET(), domain, socket_type, protocol)
End Process

Process called "bind" takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Note: Bind socket to address
    Return syscall_3(SYS_BIND(), sockfd, addr, addrlen)
End Process

Process called "listen" takes sockfd as Integer, backlog as Integer returns Integer:
    Note: Listen for connections
    Return syscall_2(SYS_LISTEN(), sockfd, backlog)
End Process

Process called "accept" takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Note: Accept connection
    Return syscall_3(SYS_ACCEPT(), sockfd, addr, addrlen)
End Process

Process called "connect" takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Note: Connect socket
    Return syscall_3(SYS_CONNECT(), sockfd, addr, addrlen)
End Process

Process called "sendto" takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer, dest_addr as Integer, addrlen as Integer returns Integer:
    Note: Send message on socket
    Return syscall_6(SYS_SENDTO(), sockfd, buf, len, flags, dest_addr, addrlen)
End Process

Process called "recvfrom" takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer, src_addr as Integer, addrlen as Integer returns Integer:
    Note: Receive message from socket
    Return syscall_6(SYS_RECVFROM(), sockfd, buf, len, flags, src_addr, addrlen)
End Process

Process called "shutdown" takes sockfd as Integer, how as Integer returns Integer:
    Note: Shut down socket
    Return syscall_2(SYS_SHUTDOWN(), sockfd, how)
End Process

Process called "setsockopt" takes sockfd as Integer, level as Integer, optname as Integer, optval as Integer, optlen as Integer returns Integer:
    Note: Set socket option
    Return syscall_5(SYS_SETSOCKOPT(), sockfd, level, optname, optval, optlen)
End Process

Process called "getsockopt" takes sockfd as Integer, level as Integer, optname as Integer, optval as Integer, optlen as Integer returns Integer:
    Note: Get socket option
    Return syscall_5(SYS_GETSOCKOPT(), sockfd, level, optname, optval, optlen)
End Process

Process called "nanosleep" takes req as Integer, rem as Integer returns Integer:
    Note: Sleep for specified time
    Return syscall_2(SYS_NANOSLEEP(), req, rem)
End Process

Process called "clock_gettime" takes clk_id as Integer, tp as Integer returns Integer:
    Note: Get clock time
    Return syscall_2(SYS_CLOCK_GETTIME(), clk_id, tp)
End Process

Process called "gettimeofday" takes tv as Integer, tz as Integer returns Integer:
    Note: Get time of day
    Return syscall_2(SYS_GETTIMEOFDAY(), tv, tz)
End Process

Process called "kqueue" returns Integer:
    Note: Create kernel event queue
    Return syscall_0(SYS_KQUEUE())
End Process

Process called "kevent" takes kq as Integer, changelist as Integer, nchanges as Integer, eventlist as Integer, nevents as Integer, timeout as Integer returns Integer:
    Note: Kernel event notification mechanism
    Return syscall_6(SYS_KEVENT(), kq, changelist, nchanges, eventlist, nevents, timeout)
End Process
