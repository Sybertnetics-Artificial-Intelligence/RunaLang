Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements RISC-V 32-bit register definitions for Linux.

RISC-V 32-bit Register Architecture:
- x0-x31: 32-bit general-purpose registers
- x0: Always zero (reads as 0, writes discarded)
- x1: Return address register (ra)
- x2: Stack pointer (sp)
- x3-x4: Global pointer (gp), Thread pointer (tp)
- x5-x7: Temporary registers (t0-t2)
- x8: Frame pointer (fp/s0)
- x9: Saved register (s1)
- x10-x11: Function arguments/return values (a0-a1)
- x12-x17: Function arguments (a2-a7)
- x18-x27: Saved registers (s2-s11)
- x28-x31: Temporary registers (t3-t6)
- f0-f31: 32-bit floating-point registers (RV32F)
- f0-f7: Caller-saved floating-point registers
- f8-f9: Callee-saved floating-point registers
- f10-f11: Floating-point arguments/return values
- f12-f17: Floating-point arguments
- f18-f27: Callee-saved floating-point registers
- f28-f31: Caller-saved floating-point registers

RISC-V 32-bit Calling Convention (RISC-V ABI):
- x10-x17: Integer parameter registers (8 parameters)
- x10-x11: Integer return value registers
- x1: Return address register
- x2: Stack pointer
- x8: Frame pointer
- x9, x18-x27: Callee-saved registers
- x5-x7, x28-x31: Caller-saved registers
- f10-f17: Floating-point parameter registers
- f10-f11: Floating-point return value registers
- f8-f9, f18-f27: Callee-saved floating-point registers
- f0-f7, f28-f31: Caller-saved floating-point registers

Register Encoding:
- General-purpose registers: 0-31 (x0-x31)
- Floating-point registers: 32-63 (f0-f31)

Platform: Linux RISC-V 32-bit (RV32I/RV32F)
:End Note

Note: ============================================================================
Note: GENERAL-PURPOSE REGISTER CONSTANTS
Note: ============================================================================

Note: RISC-V 32-bit calling convention uses x10-x17 for parameters, x10-x11 for return values
Note: x0 is always zero, x1 is return address, x2 is stack pointer
Note: x5-x7, x28-x31 are caller-saved, x8-x9, x18-x27 are callee-saved

Process called "REG_X0" returns Integer:
    Return 0
End Process

Process called "REG_X1" returns Integer:
    Return 1
End Process

Process called "REG_X2" returns Integer:
    Return 2
End Process

Process called "REG_X3" returns Integer:
    Return 3
End Process

Process called "REG_X4" returns Integer:
    Return 4
End Process

Process called "REG_X5" returns Integer:
    Return 5
End Process

Process called "REG_X6" returns Integer:
    Return 6
End Process

Process called "REG_X7" returns Integer:
    Return 7
End Process

Process called "REG_X8" returns Integer:
    Return 8
End Process

Process called "REG_X9" returns Integer:
    Return 9
End Process

Process called "REG_X10" returns Integer:
    Return 10
End Process

Process called "REG_X11" returns Integer:
    Return 11
End Process

Process called "REG_X12" returns Integer:
    Return 12
End Process

Process called "REG_X13" returns Integer:
    Return 13
End Process

Process called "REG_X14" returns Integer:
    Return 14
End Process

Process called "REG_X15" returns Integer:
    Return 15
End Process

Process called "REG_X16" returns Integer:
    Return 16
End Process

Process called "REG_X17" returns Integer:
    Return 17
End Process

Process called "REG_X18" returns Integer:
    Return 18
End Process

Process called "REG_X19" returns Integer:
    Return 19
End Process

Process called "REG_X20" returns Integer:
    Return 20
End Process

Process called "REG_X21" returns Integer:
    Return 21
End Process

Process called "REG_X22" returns Integer:
    Return 22
End Process

Process called "REG_X23" returns Integer:
    Return 23
End Process

Process called "REG_X24" returns Integer:
    Return 24
End Process

Process called "REG_X25" returns Integer:
    Return 25
End Process

Process called "REG_X26" returns Integer:
    Return 26
End Process

Process called "REG_X27" returns Integer:
    Return 27
End Process

Process called "REG_X28" returns Integer:
    Return 28
End Process

Process called "REG_X29" returns Integer:
    Return 29
End Process

Process called "REG_X30" returns Integer:
    Return 30
End Process

Process called "REG_X31" returns Integer:
    Return 31
End Process

Note: ============================================================================
Note: FLOATING-POINT REGISTER CONSTANTS
Note: ============================================================================

Note: RISC-V 32-bit uses f10-f17 for parameters, f10-f11 for return values
Note: f0-f7, f28-f31 are caller-saved, f8-f9, f18-f27 are callee-saved

Process called "REG_F0" returns Integer:
    Return 32
End Process

Process called "REG_F1" returns Integer:
    Return 33
End Process

Process called "REG_F2" returns Integer:
    Return 34
End Process

Process called "REG_F3" returns Integer:
    Return 35
End Process

Process called "REG_F4" returns Integer:
    Return 36
End Process

Process called "REG_F5" returns Integer:
    Return 37
End Process

Process called "REG_F6" returns Integer:
    Return 38
End Process

Process called "REG_F7" returns Integer:
    Return 39
End Process

Process called "REG_F8" returns Integer:
    Return 40
End Process

Process called "REG_F9" returns Integer:
    Return 41
End Process

Process called "REG_F10" returns Integer:
    Return 42
End Process

Process called "REG_F11" returns Integer:
    Return 43
End Process

Process called "REG_F12" returns Integer:
    Return 44
End Process

Process called "REG_F13" returns Integer:
    Return 45
End Process

Process called "REG_F14" returns Integer:
    Return 46
End Process

Process called "REG_F15" returns Integer:
    Return 47
End Process

Process called "REG_F16" returns Integer:
    Return 48
End Process

Process called "REG_F17" returns Integer:
    Return 49
End Process

Process called "REG_F18" returns Integer:
    Return 50
End Process

Process called "REG_F19" returns Integer:
    Return 51
End Process

Process called "REG_F20" returns Integer:
    Return 52
End Process

Process called "REG_F21" returns Integer:
    Return 53
End Process

Process called "REG_F22" returns Integer:
    Return 54
End Process

Process called "REG_F23" returns Integer:
    Return 55
End Process

Process called "REG_F24" returns Integer:
    Return 56
End Process

Process called "REG_F25" returns Integer:
    Return 57
End Process

Process called "REG_F26" returns Integer:
    Return 58
End Process

Process called "REG_F27" returns Integer:
    Return 59
End Process

Process called "REG_F28" returns Integer:
    Return 60
End Process

Process called "REG_F29" returns Integer:
    Return 61
End Process

Process called "REG_F30" returns Integer:
    Return 62
End Process

Process called "REG_F31" returns Integer:
    Return 63
End Process

Note: ============================================================================
Note: REGISTER NAME HELPERS
Note: ============================================================================

Process called "get_register_name" takes reg_num as Integer returns String:
    Note: Get register name for RISC-V 32-bit
    Note: reg_num: register number (0-63)
    Note: Returns register name (e.g., "x10", "f12")
    
    If reg_num is greater than or equal to 0 and reg_num is less than or equal to 31:
        Let name be "x"
        Let name be name plus reg_num
        Return name
    End If
    
    If reg_num is greater than or equal to 32 and reg_num is less than or equal to 63:
        Let fp_num be reg_num minus 32
        Let name be "f"
        Let name be name plus fp_num
        Return name
    End If
    
    Return "unknown"
End Process

Process called "get_parameter_register" takes param_index as Integer returns Integer:
    Note: Get parameter register number for RISC-V 32-bit calling convention
    Note: param_index: 0-7 for first 8 parameters
    Note: Returns register number
    
    If param_index is equal to 0:
        Return 10  Note: x10
    End If
    
    If param_index is equal to 1:
        Return 11  Note: x11
    End If
    
    If param_index is equal to 2:
        Return 12  Note: x12
    End If
    
    If param_index is equal to 3:
        Return 13  Note: x13
    End If
    
    If param_index is equal to 4:
        Return 14  Note: x14
    End If
    
    If param_index is equal to 5:
        Return 15  Note: x15
    End If
    
    If param_index is equal to 6:
        Return 16  Note: x16
    End If
    
    If param_index is equal to 7:
        Return 17  Note: x17
    End If
    
    Return -1  Note: Invalid parameter index
End Process

Process called "get_return_register" returns Integer:
    Note: Get return value register number for RISC-V 32-bit
    Note: Returns register number for x10
    
    Return 10  Note: x10
End Process

Process called "get_stack_pointer_register" returns Integer:
    Note: Get stack pointer register number for RISC-V 32-bit
    Note: Returns register number for x2
    
    Return 2  Note: x2
End Process

Process called "get_frame_pointer_register" returns Integer:
    Note: Get frame pointer register number for RISC-V 32-bit
    Note: Returns register number for x8
    
    Return 8  Note: x8
End Process

Process called "get_zero_register" returns Integer:
    Note: Get zero register number for RISC-V 32-bit
    Note: Returns register number for x0
    
    Return 0  Note: x0
End Process

Process called "get_return_address_register" returns Integer:
    Note: Get return address register number for RISC-V 32-bit
    Note: Returns register number for x1
    
    Return 1  Note: x1
End Process

Process called "get_global_pointer_register" returns Integer:
    Note: Get global pointer register number for RISC-V 32-bit
    Note: Returns register number for x3
    
    Return 3  Note: x3
End Process

Process called "get_thread_pointer_register" returns Integer:
    Note: Get thread pointer register number for RISC-V 32-bit
    Note: Returns register number for x4
    
    Return 4  Note: x4
End Process

Process called "is_volatile_register" takes reg_num as Integer returns Integer:
    Note: Check if register is volatile (caller-saved) for RISC-V 32-bit
    Note: reg_num: register number
    Note: Returns 1 if volatile, 0 if non-volatile
    
    If reg_num is equal to 0:
        Return 1  Note: x0 (zero register)
    End If
    
    If reg_num is greater than or equal to 5 and reg_num is less than or equal to 7:
        Return 1  Note: x5-x7 (t0-t2)
    End If
    
    If reg_num is greater than or equal to 10 and reg_num is less than or equal to 17:
        Return 1  Note: x10-x17 (a0-a7)
    End If
    
    If reg_num is greater than or equal to 28 and reg_num is less than or equal to 31:
        Return 1  Note: x28-x31 (t3-t6)
    End If
    
    If reg_num is greater than or equal to 32 and reg_num is less than or equal to 39:
        Return 1  Note: f0-f7 (caller-saved)
    End If
    
    If reg_num is greater than or equal to 42 and reg_num is less than or equal to 49:
        Return 1  Note: f10-f17 (parameter registers)
    End If
    
    If reg_num is greater than or equal to 60 and reg_num is less than or equal to 63:
        Return 1  Note: f28-f31 (caller-saved)
    End If
    
    Return 0  Note: Non-volatile
End Process

Process called "is_parameter_register" takes reg_num as Integer returns Integer:
    Note: Check if register is used for parameters for RISC-V 32-bit
    Note: reg_num: register number
    Note: Returns 1 if parameter register, 0 otherwise
    
    If reg_num is greater than or equal to 10 and reg_num is less than or equal to 17:
        Return 1  Note: x10-x17 (integer parameters)
    End If
    
    If reg_num is greater than or equal to 42 and reg_num is less than or equal to 49:
        Return 1  Note: f10-f17 (floating-point parameters)
    End If
    
    Return 0
End Process

Process called "get_register_size" takes reg_num as Integer returns Integer:
    Note: Get register size in bits for RISC-V 32-bit
    Note: reg_num: register number
    Note: Returns size in bits
    
    If reg_num is greater than or equal to 0 and reg_num is less than or equal to 31:
        Return 32  Note: General-purpose registers
    End If
    
    If reg_num is greater than or equal to 32 and reg_num is less than or equal to 63:
        Return 32  Note: Floating-point registers
    End If
    
    Return 0  Note: Unknown register
End Process

Process called "get_floating_point_parameter_register" takes param_index as Integer returns Integer:
    Note: Get floating-point parameter register number for RISC-V 32-bit calling convention
    Note: param_index: 0-7 for first 8 floating-point parameters
    Note: Returns register number
    
    If param_index is equal to 0:
        Return 42  Note: f10
    End If
    
    If param_index is equal to 1:
        Return 43  Note: f11
    End If
    
    If param_index is equal to 2:
        Return 44  Note: f12
    End If
    
    If param_index is equal to 3:
        Return 45  Note: f13
    End If
    
    If param_index is equal to 4:
        Return 46  Note: f14
    End If
    
    If param_index is equal to 5:
        Return 47  Note: f15
    End If
    
    If param_index is equal to 6:
        Return 48  Note: f16
    End If
    
    If param_index is equal to 7:
        Return 49  Note: f17
    End If
    
    Return -1  Note: Invalid parameter index
End Process

Process called "get_floating_point_return_register" returns Integer:
    Note: Get floating-point return value register number for RISC-V 32-bit
    Note: Returns register number for f10
    
    Return 42  Note: f10
End Process