Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions
Licensed under the Apache License, Version 2.0
:End Note

Note:
RISC-V 64 ATOMIC OPERATIONS
Uses LR.D/SC.D (load-reserved/store-conditional) and AMO instructions
:End Note

Process called "atomic_load_relaxed" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, 0(a0)
        sd a1, -16(fp)
    End Assembly
    Return result
End Process

Process called "atomic_load_acquire" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, 0(a0)
        fence r, rw
        sd a1, -16(fp)
    End Assembly
    Return result
End Process

Process called "atomic_load_seq_cst" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        fence rw, rw
        ld a1, 0(a0)
        fence r, rw
        sd a1, -16(fp)
    End Assembly
    Return result
End Process

Process called "atomic_store_relaxed" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        sd a1, 0(a0)
    End Assembly
    Return 0
End Process

Process called "atomic_store_release" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        fence rw, w
        sd a1, 0(a0)
    End Assembly
    Return 0
End Process

Process called "atomic_store_seq_cst" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        fence rw, w
        sd a1, 0(a0)
        fence rw, rw
    End Assembly
    Return 0
End Process

Process called "atomic_fetch_add" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        amoadd.d.aqrl a2, a1, (a0)
        sd a2, -24(fp)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_sub" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        neg a1, a1
        amoadd.d.aqrl a2, a1, (a0)
        sd a2, -24(fp)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_and" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        amoand.d.aqrl a2, a1, (a0)
        sd a2, -24(fp)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_or" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        amoor.d.aqrl a2, a1, (a0)
        sd a2, -24(fp)
    End Assembly
    Return result
End Process

Process called "atomic_fetch_xor" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        amoxor.d.aqrl a2, a1, (a0)
        sd a2, -24(fp)
    End Assembly
    Return result
End Process

Process called "atomic_compare_and_swap" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        ld a2, -24(fp)

        .retry:
        lr.d.aq a3, (a0)
        bne a3, a1, .failed
        sc.d.rl a4, a2, (a0)
        bnez a4, .retry

        li a5, 1
        j .done

        .failed:
        li a5, 0

        .done:
        sd a5, -32(fp)
    End Assembly
    Return result
End Process

Process called "atomic_compare_and_swap_weak" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        ld a2, -24(fp)

        lr.d.aq a3, (a0)
        bne a3, a1, .failed
        sc.d.rl a4, a2, (a0)
        bnez a4, .failed

        li a5, 1
        j .done

        .failed:
        li a5, 0

        .done:
        sd a5, -32(fp)
    End Assembly
    Return result
End Process

Process called "atomic_exchange" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ld a0, -8(fp)
        ld a1, -16(fp)
        amoswap.d.aqrl a2, a1, (a0)
        sd a2, -24(fp)
    End Assembly
    Return result
End Process

Process called "memory_barrier_acquire" returns Integer:
    Inline Assembly:
        fence r, rw
    End Assembly
    Return 0
End Process

Process called "memory_barrier_release" returns Integer:
    Inline Assembly:
        fence rw, w
    End Assembly
    Return 0
End Process

Process called "memory_barrier_full" returns Integer:
    Inline Assembly:
        fence rw, rw
    End Assembly
    Return 0
End Process

Process called "memory_barrier_seq_cst" returns Integer:
    Inline Assembly:
        fence rw, rw
    End Assembly
    Return 0
End Process
