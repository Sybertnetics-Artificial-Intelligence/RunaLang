Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
MIPS64 Register Definitions (n64 ABI)

This file implements MIPS64 register management for the Runa compiler.

Platform-specific details:
- Platform: Linux MIPS64 (n64 ABI)
- Architecture: MIPS64 (64-bit)
- Register count: 32 general-purpose registers ($0-$31), 64 bits each
- FPU registers: 32 floating-point registers ($f0-$f31), 64 bits each
- Special registers: HI, LO (multiply/divide results)

MIPS64 n64 ABI register conventions:
- $0 (zero): Always zero
- $1 (at): Assembler temporary
- $2-$3 (v0-v1): Return values
- $4-$11 (a0-a7): Arguments (first 8 - more than o32!)
- $12-$15, $24-$25 (t0-t9): Temporaries (caller-saved)
- $16-$23 (s0-s7): Saved registers (callee-saved)
- $28 (gp): Global pointer
- $29 (sp): Stack pointer
- $30 (fp): Frame pointer
- $31 (ra): Return address

FPU register conventions:
- $f0: Float return value
- $f12-$f19: FP arguments (8 registers)
- $f0-$f19: Caller-saved
- $f20-$f31: Callee-saved

Dependencies: None
:End Note

Note: General Purpose Registers ($0-$31)
Note: $0 = zero (always 0)
Note: $1 = at (assembler temporary)
Note: $2-$3 = v0-v1 (return values)
Note: $4-$11 = a0-a7 (argument registers - 8 in n64)
Note: $12-$15, $24-$25 = t0-t7 (temporaries)
Note: $16-$23 = s0-s7 (saved registers)
Note: $26-$27 = k0-k1 (kernel reserved)
Note: $28 = gp (global pointer)
Note: $29 = sp (stack pointer)
Note: $30 = fp (frame pointer) / s8
Note: $31 = ra (return address)

Process called "get_register_count" returns Integer:
    Return 32
End Process

Process called "get_register_name" takes reg_number as Integer returns String:
    If reg_number is equal to 0:
        Return "zero"
    End If
    If reg_number is equal to 1:
        Return "at"
    End If
    If reg_number is equal to 2:
        Return "v0"
    End If
    If reg_number is equal to 3:
        Return "v1"
    End If
    If reg_number is equal to 4:
        Return "a0"
    End If
    If reg_number is equal to 5:
        Return "a1"
    End If
    If reg_number is equal to 6:
        Return "a2"
    End If
    If reg_number is equal to 7:
        Return "a3"
    End If
    If reg_number is equal to 8:
        Return "a4"
    End If
    If reg_number is equal to 9:
        Return "a5"
    End If
    If reg_number is equal to 10:
        Return "a6"
    End If
    If reg_number is equal to 11:
        Return "a7"
    End If
    If reg_number is equal to 12:
        Return "t0"
    End If
    If reg_number is equal to 13:
        Return "t1"
    End If
    If reg_number is equal to 14:
        Return "t2"
    End If
    If reg_number is equal to 15:
        Return "t3"
    End If
    If reg_number is equal to 16:
        Return "s0"
    End If
    If reg_number is equal to 17:
        Return "s1"
    End If
    If reg_number is equal to 18:
        Return "s2"
    End If
    If reg_number is equal to 19:
        Return "s3"
    End If
    If reg_number is equal to 20:
        Return "s4"
    End If
    If reg_number is equal to 21:
        Return "s5"
    End If
    If reg_number is equal to 22:
        Return "s6"
    End If
    If reg_number is equal to 23:
        Return "s7"
    End If
    If reg_number is equal to 24:
        Return "t8"
    End If
    If reg_number is equal to 25:
        Return "t9"
    End If
    If reg_number is equal to 26:
        Return "k0"
    End If
    If reg_number is equal to 27:
        Return "k1"
    End If
    If reg_number is equal to 28:
        Return "gp"
    End If
    If reg_number is equal to 29:
        Return "sp"
    End If
    If reg_number is equal to 30:
        Return "fp"
    End If
    If reg_number is equal to 31:
        Return "ra"
    End If
    Return "invalid"
End Process

Process called "get_zero_register" returns Integer:
    Return 0
End Process

Process called "get_return_register" returns Integer:
    Return 2  Note: $v0
End Process

Process called "get_secondary_return_register" returns Integer:
    Return 3  Note: $v1
End Process

Process called "get_stack_pointer_register" returns Integer:
    Return 29  Note: $sp
End Process

Process called "get_frame_pointer_register" returns Integer:
    Return 30  Note: $fp
End Process

Process called "get_return_address_register" returns Integer:
    Return 31  Note: $ra
End Process

Process called "get_global_pointer_register" returns Integer:
    Return 28  Note: $gp
End Process

Process called "is_caller_saved" takes reg_number as Integer returns Integer:
    Note: n64 ABI: $t0-$t9, $a0-$a7, $v0-$v1, $at are caller-saved
    If reg_number is equal to 1:
        Return 1  Note: $at
    End If
    If (reg_number is greater than or equal to 2) and (reg_number is less than or equal to 15):
        Return 1  Note: $v0-$v1, $a0-$a7, $t0-$t3
    End If
    If (reg_number is equal to 24) or (reg_number is equal to 25):
        Return 1  Note: $t8-$t9
    End If
    Return 0
End Process

Process called "is_callee_saved" takes reg_number as Integer returns Integer:
    Note: n64 ABI: $s0-$s8, $gp are callee-saved
    If (reg_number is greater than or equal to 16) and (reg_number is less than or equal to 23):
        Return 1  Note: $s0-$s7
    End If
    If reg_number is equal to 28:
        Return 1  Note: $gp
    End If
    If reg_number is equal to 30:
        Return 1  Note: $fp/$s8
    End If
    Return 0
End Process

Process called "is_allocatable" takes reg_number as Integer returns Integer:
    Note: Cannot allocate $zero, $at, $k0, $k1, $gp, $sp, $fp, $ra
    If reg_number is equal to 0:
        Return 0
    End If
    If reg_number is equal to 1:
        Return 0
    End If
    If (reg_number is equal to 26) or (reg_number is equal to 27):
        Return 0  Note: $k0-$k1
    End If
    If (reg_number is equal to 28) or (reg_number is equal to 29):
        Return 0  Note: $gp, $sp
    End If
    If (reg_number is equal to 30) or (reg_number is equal to 31):
        Return 0  Note: $fp, $ra
    End If
    Return 1
End Process

Process called "get_argument_register" takes arg_index as Integer returns Integer:
    Note: n64 ABI uses 8 argument registers: $a0-$a7
    If arg_index is less than 8:
        Return 4 plus arg_index
    End If
    Return -1
End Process

Process called "get_argument_register_count" returns Integer:
    Return 8  Note: n64 ABI has 8 argument registers
End Process

Process called "get_temporary_register" takes temp_index as Integer returns Integer:
    Note: Temporary registers: $t0-$t9
    If temp_index is less than 4:
        Return 12 plus temp_index  Note: $t0-$t3
    End If
    If temp_index is less than 10:
        Return 16 plus temp_index  Note: $t4-$t9 mapped to $s0-$s5 slots
    End If
    Return -1
End Process

Process called "get_saved_register" takes saved_index as Integer returns Integer:
    Note: Saved registers: $s0-$s7, $fp/$s8
    If saved_index is less than 8:
        Return 16 plus saved_index
    End If
    If saved_index is equal to 8:
        Return 30  Note: $fp/$s8
    End If
    Return -1
End Process

Note: FPU Registers ($f0-$f31)
Process called "get_fpu_register_count" returns Integer:
    Return 32
End Process

Process called "get_fpu_register_name" takes reg_number as Integer returns String:
    Note: Return canonical FPU register name in form f0..f31
    If reg_number is less than 0:
        Return ""
    End If
    If reg_number is greater than 31:
        Return ""
    End If

    Let base be "f"
    Let tens be reg_number divided by 10
    Let ones be reg_number minus (tens multiplied by 10)

    If tens is equal to 0:
        Return base plus ones
    End If

    Return base plus tens plus ones
End Process

Process called "is_fpu_caller_saved" takes reg_number as Integer returns Integer:
    Note: n64 ABI: $f0-$f19 are caller-saved
    If reg_number is less than 20:
        Return 1
    End If
    Return 0
End Process

Process called "is_fpu_callee_saved" takes reg_number as Integer returns Integer:
    Note: n64 ABI: $f20-$f31 are callee-saved
    If reg_number is greater than or equal to 20:
        Return 1
    End If
    Return 0
End Process

Process called "get_fpu_argument_register" takes arg_index as Integer returns Integer:
    Note: n64 ABI uses $f12-$f19 for FP arguments
    If arg_index is less than 8:
        Return 12 plus arg_index
    End If
    Return -1
End Process

Process called "get_fpu_return_register" returns Integer:
    Return 0  Note: $f0
End Process

Process called "get_register_size" returns Integer:
    Return 8  Note: 64-bit registers
End Process

Process called "get_fpu_register_size" returns Integer:
    Return 8  Note: 64-bit FP registers (double precision)
End Process

Process called "encode_register_number" takes reg_number as Integer returns Integer:
    Note: Register number is directly used in encoding
    Return reg_number bitwise_and 31
End Process

Process called "decode_register_number" takes encoded as Integer returns Integer:
    Return encoded bitwise_and 31
End Process
