Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
Windows x86_64 Register Definitions and Calling Convention

This file provides CPU register definitions and mappings for Windows x86_64 architecture.
Windows uses the Microsoft x64 calling convention, which differs significantly from System V ABI.

Key differences from System V ABI (Linux/macOS):
- Only 4 integer parameter registers (vs 6 for System V)
- Parameters passed in: RCX, RDX, R8, R9 (vs RDI, RSI, RDX, RCX, R8, R9)
- Caller must allocate 32-byte "shadow space" for parameter registers
- Different caller/callee-saved register sets
- XMM6-XMM15 are callee-saved (vs all caller-saved in System V)

This is a foundation primitive with NO dependencies.
:End Note

Note: ============================================================================
Note: Microsoft x64 Calling Convention
Note: ============================================================================
Note: Function parameters are passed in registers in this order:
Note:   1st parameter: RCX (integer/pointer) or XMM0 (float)
Note:   2nd parameter: RDX (integer/pointer) or XMM1 (float)
Note:   3rd parameter: R8 (integer/pointer) or XMM2 (float)
Note:   4th parameter: R9 (integer/pointer) or XMM3 (float)
Note:   5th+ parameters: Stack (left-to-right)

Note: Caller responsibilities:
Note:   - Allocate 32 bytes of "shadow space" on stack for parameter registers
Note:   - Maintain 16-byte stack alignment before CALL
Note:   - Clean up stack after function returns

Note: Callee responsibilities:
Note:   - Preserve RBX, RBP, RDI, RSI, RSP, R12-R15, XMM6-XMM15

Note: Return value: RAX (integer/pointer), XMM0 (float)
Note: Frame pointer: RBP (optional)
Note: Stack pointer: RSP

Process called "get_param_register" takes param_index as Integer returns String:
    Note: Get parameter register name for Microsoft x64 calling convention
    Note: param_index: 0-3 for first 4 parameters (integer/pointer)
    Note: Returns register name with % prefix (e.g., "%rcx")

    If param_index is equal to 0:
        Return "%rcx"
    End If

    If param_index is equal to 1:
        Return "%rdx"
    End If

    If param_index is equal to 2:
        Return "%r8"
    End If

    If param_index is equal to 3:
        Return "%r9"
    End If

    Note: Parameters 4+ go on the stack
    Return ""
End Process

Process called "get_max_register_params" returns Integer:
    Note: Maximum number of parameters passed in registers
    Note: Microsoft x64: 4 parameters (vs 6 for System V)
    Return 4
End Process

Process called "get_return_register" returns String:
    Note: Return value register for Microsoft x64 calling convention
    Return "%rax"
End Process

Process called "get_frame_pointer_register" returns String:
    Note: Frame pointer register for x86_64
    Return "%rbp"
End Process

Process called "get_stack_pointer_register" returns String:
    Note: Stack pointer register for x86_64
    Return "%rsp"
End Process

Process called "get_shadow_space_size" returns Integer:
    Note: Get size of shadow space required by Microsoft x64 ABI
    Note: Caller must allocate 32 bytes for parameter register spilling
    Return 32
End Process

Note: ============================================================================
Note: Register Name Lookups
Note: ============================================================================

Process called "get_register_name" takes register_number as Integer returns String:
    Note: Convert register number to name
    Note: Uses x86_64 register encoding (same as System V)

    If register_number is equal to 0:
        Return "%rax"
    End If

    If register_number is equal to 1:
        Return "%rcx"
    End If

    If register_number is equal to 2:
        Return "%rdx"
    End If

    If register_number is equal to 3:
        Return "%rbx"
    End If

    If register_number is equal to 4:
        Return "%rsp"
    End If

    If register_number is equal to 5:
        Return "%rbp"
    End If

    If register_number is equal to 6:
        Return "%rsi"
    End If

    If register_number is equal to 7:
        Return "%rdi"
    End If

    If register_number is equal to 8:
        Return "%r8"
    End If

    If register_number is equal to 9:
        Return "%r9"
    End If

    If register_number is equal to 10:
        Return "%r10"
    End If

    If register_number is equal to 11:
        Return "%r11"
    End If

    If register_number is equal to 12:
        Return "%r12"
    End If

    If register_number is equal to 13:
        Return "%r13"
    End If

    If register_number is equal to 14:
        Return "%r14"
    End If

    If register_number is equal to 15:
        Return "%r15"
    End If

    Return "%rax"  Note: Default to RAX for invalid numbers
End Process

Process called "get_register_number" takes register_name as String returns Integer:
    Note: Convert register name to number
    Note: Returns -1 for invalid register names

    If string_equals(register_name, "rax") is equal to 1:
        Return 0
    End If

    If string_equals(register_name, "rcx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rdx") is equal to 1:
        Return 2
    End If

    If string_equals(register_name, "rbx") is equal to 1:
        Return 3
    End If

    If string_equals(register_name, "rsp") is equal to 1:
        Return 4
    End If

    If string_equals(register_name, "rbp") is equal to 1:
        Return 5
    End If

    If string_equals(register_name, "rsi") is equal to 1:
        Return 6
    End If

    If string_equals(register_name, "rdi") is equal to 1:
        Return 7
    End If

    If string_equals(register_name, "r8") is equal to 1:
        Return 8
    End If

    If string_equals(register_name, "r9") is equal to 1:
        Return 9
    End If

    If string_equals(register_name, "r10") is equal to 1:
        Return 10
    End If

    If string_equals(register_name, "r11") is equal to 1:
        Return 11
    End If

    If string_equals(register_name, "r12") is equal to 1:
        Return 12
    End If

    If string_equals(register_name, "r13") is equal to 1:
        Return 13
    End If

    If string_equals(register_name, "r14") is equal to 1:
        Return 14
    End If

    If string_equals(register_name, "r15") is equal to 1:
        Return 15
    End If

    Return -1  Note: Invalid register
End Process

Note: ============================================================================
Note: Register Classification (Microsoft x64 Calling Convention)
Note: ============================================================================

Process called "is_caller_saved" takes register_name as String returns Integer:
    Note: Check if register is caller-saved (volatile) under Microsoft x64 ABI
    Note: Caller-saved: RAX, RCX, RDX, R8-R11, XMM0-XMM5
    Note: Returns 1 if caller-saved, 0 if callee-saved
    
    Note: KEY DIFFERENCE: RSI, RDI are CALLEE-SAVED on Windows (vs caller-saved on Linux)

    If string_equals(register_name, "rax") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rcx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rdx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r8") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r9") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r10") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r11") is equal to 1:
        Return 1
    End If

    Return 0  Note: Callee-saved or invalid
End Process

Process called "is_callee_saved" takes register_name as String returns Integer:
    Note: Check if register is callee-saved (non-volatile) under Microsoft x64 ABI
    Note: Callee-saved: RBX, RBP, RDI, RSI, RSP, R12-R15, XMM6-XMM15
    Note: Returns 1 if callee-saved, 0 if caller-saved
    
    Note: KEY DIFFERENCE: RSI, RDI are CALLEE-SAVED on Windows (vs caller-saved on Linux)

    If string_equals(register_name, "rbx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rbp") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rdi") is equal to 1:
        Return 1  Note: CALLEE-SAVED on Windows (different from System V)
    End If

    If string_equals(register_name, "rsi") is equal to 1:
        Return 1  Note: CALLEE-SAVED on Windows (different from System V)
    End If

    If string_equals(register_name, "rsp") is equal to 1:
        Return 1  Note: Stack pointer always preserved
    End If

    If string_equals(register_name, "r12") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r13") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r14") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r15") is equal to 1:
        Return 1
    End If

    Return 0  Note: Caller-saved or invalid
End Process

Note: ============================================================================
Note: XMM Registers (SSE/Floating-Point) - Microsoft x64
Note: ============================================================================
Note: Microsoft x64 uses XMM registers for floating-point operations
Note: XMM0-XMM3: Used for floating-point parameters (matches integer param order)
Note: XMM0: Used for floating-point return value
Note: XMM0-XMM5: Caller-saved (volatile)
Note: XMM6-XMM15: Callee-saved (non-volatile) - KEY DIFFERENCE from System V

Process called "get_xmm_param_register" takes param_index as Integer returns Integer:
    Note: Get XMM register number for floating-point parameter
    Note: Microsoft x64: XMM0-XMM3 for first 4 float params
    Note: param_index: 0-3 for first 4 floating-point parameters
    Note: Returns XMM register number (16-31 range to avoid conflict with GPRs)
    Note: We use 16+xmm_num encoding (XMM0=16, XMM1=17, ..., XMM15=31)

    If param_index is equal to 0:
        Return 16  Note: XMM0
    End If

    If param_index is equal to 1:
        Return 17  Note: XMM1
    End If

    If param_index is equal to 2:
        Return 18  Note: XMM2
    End If

    If param_index is equal to 3:
        Return 19  Note: XMM3
    End If

    Note: Parameters 4+ go on the stack
    Return -1
End Process

Process called "get_max_xmm_register_params" returns Integer:
    Note: Maximum number of floating-point parameters passed in XMM registers
    Note: Microsoft x64: 4 parameters (matches integer param count)
    Return 4
End Process

Process called "get_xmm_return_register" returns Integer:
    Note: Get XMM register number for floating-point return value
    Note: Microsoft x64: XMM0
    Return 16  Note: XMM0 (encoded as 16)
End Process

Process called "get_xmm_register_name" takes xmm_number as Integer returns String:
    Note: Convert XMM register number to name
    Note: xmm_number: 16-31 for XMM0-XMM15 (offset by 16 from GPRs)

    Let actual_xmm be xmm_number minus 16

    If actual_xmm is equal to 0:
        Return "%xmm0"
    End If

    If actual_xmm is equal to 1:
        Return "%xmm1"
    End If

    If actual_xmm is equal to 2:
        Return "%xmm2"
    End If

    If actual_xmm is equal to 3:
        Return "%xmm3"
    End If

    If actual_xmm is equal to 4:
        Return "%xmm4"
    End If

    If actual_xmm is equal to 5:
        Return "%xmm5"
    End If

    If actual_xmm is equal to 6:
        Return "%xmm6"
    End If

    If actual_xmm is equal to 7:
        Return "%xmm7"
    End If

    If actual_xmm is equal to 8:
        Return "%xmm8"
    End If

    If actual_xmm is equal to 9:
        Return "%xmm9"
    End If

    If actual_xmm is equal to 10:
        Return "%xmm10"
    End If

    If actual_xmm is equal to 11:
        Return "%xmm11"
    End If

    If actual_xmm is equal to 12:
        Return "%xmm12"
    End If

    If actual_xmm is equal to 13:
        Return "%xmm13"
    End If

    If actual_xmm is equal to 14:
        Return "%xmm14"
    End If

    If actual_xmm is equal to 15:
        Return "%xmm15"
    End If

    Return "%xmm0"  Note: Default to XMM0 for invalid numbers
End Process

Process called "get_xmm_register_number" takes register_name as String returns Integer:
    Note: Convert XMM register name to number
    Note: Returns 16-31 for XMM0-XMM15, -1 for invalid

    If string_equals(register_name, "xmm0") is equal to 1:
        Return 16
    End If

    If string_equals(register_name, "xmm1") is equal to 1:
        Return 17
    End If

    If string_equals(register_name, "xmm2") is equal to 1:
        Return 18
    End If

    If string_equals(register_name, "xmm3") is equal to 1:
        Return 19
    End If

    If string_equals(register_name, "xmm4") is equal to 1:
        Return 20
    End If

    If string_equals(register_name, "xmm5") is equal to 1:
        Return 21
    End If

    If string_equals(register_name, "xmm6") is equal to 1:
        Return 22
    End If

    If string_equals(register_name, "xmm7") is equal to 1:
        Return 23
    End If

    If string_equals(register_name, "xmm8") is equal to 1:
        Return 24
    End If

    If string_equals(register_name, "xmm9") is equal to 1:
        Return 25
    End If

    If string_equals(register_name, "xmm10") is equal to 1:
        Return 26
    End If

    If string_equals(register_name, "xmm11") is equal to 1:
        Return 27
    End If

    If string_equals(register_name, "xmm12") is equal to 1:
        Return 28
    End If

    If string_equals(register_name, "xmm13") is equal to 1:
        Return 29
    End If

    If string_equals(register_name, "xmm14") is equal to 1:
        Return 30
    End If

    If string_equals(register_name, "xmm15") is equal to 1:
        Return 31
    End If

    Return -1  Note: Invalid register
End Process

Process called "is_xmm_register" takes reg_number as Integer returns Integer:
    Note: Check if register number is an XMM register
    Note: Returns 1 if XMM (16-31), 0 otherwise

    If reg_number is greater than or equal to 16:
        If reg_number is less than or equal to 31:
            Return 1
        End If
    End If

    Return 0
End Process

Process called "is_xmm_callee_saved" takes xmm_number as Integer returns Integer:
    Note: Check if XMM register is callee-saved under Microsoft x64 ABI
    Note: XMM6-XMM15 are callee-saved (non-volatile)
    Note: XMM0-XMM5 are caller-saved (volatile)
    Note: KEY DIFFERENCE: System V has ALL XMM registers as caller-saved

    Let actual_xmm be xmm_number minus 16

    If actual_xmm is greater than or equal to 6:
        If actual_xmm is less than or equal to 15:
            Return 1  Note: XMM6-XMM15 are callee-saved
        End If
    End If

    Return 0  Note: XMM0-XMM5 are caller-saved
End Process
