Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements low-level Linux x86_64 system calls using PURE RUNA.

System calls are the interface between user programs and the Linux kernel.
They replace C runtime library functions with direct kernel invocations.

Linux x86_64 System Call ABI:
- Syscall number in RAX
- Arguments in RDI, RSI, RDX, R10, R8, R9 (in that order)
- Return value in RAX (negative values indicate errors)
- Syscall instruction invokes the kernel
- RCX and R11 are clobbered by syscall instruction

This implementation provides:
1. Generic syscall wrappers (syscall_0 through syscall_6) for 0-6 arguments
2. High-level wrappers for common syscalls (read, write, open, close, etc.)
3. Syscall number constants for Linux x86_64

PLATFORM-SPECIFIC IMPLEMENTATION:
This file uses x86_64-specific inline assembly.
Each platform has its own version with platform-specific assembly code.
The abstraction layer (assembly/syscall.runa) delegates to this file.
:End Note

Note: ============================================================================
Note: SYSCALL NUMBER CONSTANTS (Linux x86_64)
Note: ============================================================================
Note: Reference: /usr/include/x86_64-linux-gnu/asm/unistd_64.h
Note: Or use: ausyscall --dump to see all syscalls

Note: File I/O syscalls

Process called "SYS_READ" returns Integer:
    Return 0
End Process

Process called "SYS_WRITE" returns Integer:
    Return 1
End Process

Process called "SYS_OPEN" returns Integer:
    Return 2
End Process

Process called "SYS_CLOSE" returns Integer:
    Return 3
End Process

Process called "SYS_STAT" returns Integer:
    Return 4
End Process

Process called "SYS_FSTAT" returns Integer:
    Return 5
End Process

Process called "SYS_LSTAT" returns Integer:
    Return 6
End Process

Process called "SYS_POLL" returns Integer:
    Return 7
End Process

Process called "SYS_LSEEK" returns Integer:
    Return 8
End Process

Process called "SYS_MMAP" returns Integer:
    Return 9
End Process

Process called "SYS_MPROTECT" returns Integer:
    Return 10
End Process

Process called "SYS_MUNMAP" returns Integer:
    Return 11
End Process

Process called "SYS_BRK" returns Integer:
    Return 12
End Process

Process called "SYS_RT_SIGACTION" returns Integer:
    Return 13
End Process

Process called "SYS_RT_SIGPROCMASK" returns Integer:
    Return 14
End Process

Process called "SYS_RT_SIGRETURN" returns Integer:
    Return 15
End Process

Process called "SYS_IOCTL" returns Integer:
    Return 16
End Process

Process called "SYS_PREAD64" returns Integer:
    Return 17
End Process

Process called "SYS_PWRITE64" returns Integer:
    Return 18
End Process

Process called "SYS_READV" returns Integer:
    Return 19
End Process

Process called "SYS_WRITEV" returns Integer:
    Return 20
End Process

Process called "SYS_ACCESS" returns Integer:
    Return 21
End Process

Process called "SYS_PIPE" returns Integer:
    Return 22
End Process

Process called "SYS_SELECT" returns Integer:
    Return 23
End Process

Process called "SYS_SCHED_YIELD" returns Integer:
    Return 24
End Process

Process called "SYS_MREMAP" returns Integer:
    Return 25
End Process

Process called "SYS_MSYNC" returns Integer:
    Return 26
End Process

Process called "SYS_MINCORE" returns Integer:
    Return 27
End Process

Process called "SYS_MADVISE" returns Integer:
    Return 28
End Process

Process called "SYS_SHMGET" returns Integer:
    Return 29
End Process

Process called "SYS_SHMAT" returns Integer:
    Return 30
End Process

Process called "SYS_SHMCTL" returns Integer:
    Return 31
End Process

Process called "SYS_DUP" returns Integer:
    Return 32
End Process

Process called "SYS_DUP2" returns Integer:
    Return 33
End Process

Process called "SYS_PAUSE" returns Integer:
    Return 34
End Process

Process called "SYS_NANOSLEEP" returns Integer:
    Return 35
End Process

Process called "SYS_GETITIMER" returns Integer:
    Return 36
End Process

Process called "SYS_ALARM" returns Integer:
    Return 37
End Process

Process called "SYS_SETITIMER" returns Integer:
    Return 38
End Process

Process called "SYS_GETPID" returns Integer:
    Return 39
End Process

Process called "SYS_SENDFILE" returns Integer:
    Return 40
End Process

Process called "SYS_SOCKET" returns Integer:
    Return 41
End Process

Process called "SYS_CONNECT" returns Integer:
    Return 42
End Process

Process called "SYS_ACCEPT" returns Integer:
    Return 43
End Process

Process called "SYS_SENDTO" returns Integer:
    Return 44
End Process

Process called "SYS_RECVFROM" returns Integer:
    Return 45
End Process

Process called "SYS_SENDMSG" returns Integer:
    Return 46
End Process

Process called "SYS_RECVMSG" returns Integer:
    Return 47
End Process

Process called "SYS_SHUTDOWN" returns Integer:
    Return 48
End Process

Process called "SYS_BIND" returns Integer:
    Return 49
End Process

Process called "SYS_LISTEN" returns Integer:
    Return 50
End Process

Process called "SYS_GETSOCKNAME" returns Integer:
    Return 51
End Process

Process called "SYS_GETPEERNAME" returns Integer:
    Return 52
End Process

Process called "SYS_SOCKETPAIR" returns Integer:
    Return 53
End Process

Process called "SYS_SETSOCKOPT" returns Integer:
    Return 54
End Process

Process called "SYS_GETSOCKOPT" returns Integer:
    Return 55
End Process

Process called "SYS_CLONE" returns Integer:
    Return 56
End Process

Process called "SYS_FORK" returns Integer:
    Return 57
End Process

Process called "SYS_VFORK" returns Integer:
    Return 58
End Process

Process called "SYS_EXECVE" returns Integer:
    Return 59
End Process

Process called "SYS_EXIT" returns Integer:
    Return 60
End Process

Process called "SYS_WAIT4" returns Integer:
    Return 61
End Process

Process called "SYS_KILL" returns Integer:
    Return 62
End Process

Process called "SYS_UNAME" returns Integer:
    Return 63
End Process

Process called "SYS_SEMGET" returns Integer:
    Return 64
End Process

Process called "SYS_SEMOP" returns Integer:
    Return 65
End Process

Process called "SYS_SEMCTL" returns Integer:
    Return 66
End Process

Process called "SYS_SHMDT" returns Integer:
    Return 67
End Process

Process called "SYS_MSGGET" returns Integer:
    Return 68
End Process

Process called "SYS_MSGSND" returns Integer:
    Return 69
End Process

Process called "SYS_MSGRCV" returns Integer:
    Return 70
End Process

Process called "SYS_MSGCTL" returns Integer:
    Return 71
End Process

Process called "SYS_FCNTL" returns Integer:
    Return 72
End Process

Process called "SYS_FLOCK" returns Integer:
    Return 73
End Process

Process called "SYS_FSYNC" returns Integer:
    Return 74
End Process

Process called "SYS_FDATASYNC" returns Integer:
    Return 75
End Process

Process called "SYS_TRUNCATE" returns Integer:
    Return 76
End Process

Process called "SYS_FTRUNCATE" returns Integer:
    Return 77
End Process

Process called "SYS_GETDENTS" returns Integer:
    Return 78
End Process

Process called "SYS_GETCWD" returns Integer:
    Return 79
End Process

Process called "SYS_CHDIR" returns Integer:
    Return 80
End Process

Process called "SYS_FCHDIR" returns Integer:
    Return 81
End Process

Process called "SYS_RENAME" returns Integer:
    Return 82
End Process

Process called "SYS_MKDIR" returns Integer:
    Return 83
End Process

Process called "SYS_RMDIR" returns Integer:
    Return 84
End Process

Process called "SYS_CREAT" returns Integer:
    Return 85
End Process

Process called "SYS_LINK" returns Integer:
    Return 86
End Process

Process called "SYS_UNLINK" returns Integer:
    Return 87
End Process

Process called "SYS_SYMLINK" returns Integer:
    Return 88
End Process

Process called "SYS_READLINK" returns Integer:
    Return 89
End Process

Process called "SYS_CHMOD" returns Integer:
    Return 90
End Process

Process called "SYS_FCHMOD" returns Integer:
    Return 91
End Process

Process called "SYS_CHOWN" returns Integer:
    Return 92
End Process

Process called "SYS_FCHOWN" returns Integer:
    Return 93
End Process

Process called "SYS_LCHOWN" returns Integer:
    Return 94
End Process

Process called "SYS_UMASK" returns Integer:
    Return 95
End Process

Process called "SYS_GETTIMEOFDAY" returns Integer:
    Return 96
End Process

Process called "SYS_GETRLIMIT" returns Integer:
    Return 97
End Process

Process called "SYS_GETRUSAGE" returns Integer:
    Return 98
End Process

Process called "SYS_SYSINFO" returns Integer:
    Return 99
End Process

Process called "SYS_TIMES" returns Integer:
    Return 100
End Process

Process called "SYS_PTRACE" returns Integer:
    Return 101
End Process

Process called "SYS_GETUID" returns Integer:
    Return 102
End Process

Process called "SYS_SYSLOG" returns Integer:
    Return 103
End Process

Process called "SYS_GETGID" returns Integer:
    Return 104
End Process

Process called "SYS_SETUID" returns Integer:
    Return 105
End Process

Process called "SYS_SETGID" returns Integer:
    Return 106
End Process

Process called "SYS_GETEUID" returns Integer:
    Return 107
End Process

Process called "SYS_GETEGID" returns Integer:
    Return 108
End Process

Process called "SYS_SETPGID" returns Integer:
    Return 109
End Process

Process called "SYS_GETPPID" returns Integer:
    Return 110
End Process

Process called "SYS_GETPGRP" returns Integer:
    Return 111
End Process

Process called "SYS_SETSID" returns Integer:
    Return 112
End Process

Process called "SYS_SETREUID" returns Integer:
    Return 113
End Process

Process called "SYS_SETREGID" returns Integer:
    Return 114
End Process

Process called "SYS_GETGROUPS" returns Integer:
    Return 115
End Process

Process called "SYS_SETGROUPS" returns Integer:
    Return 116
End Process

Process called "SYS_SETRESUID" returns Integer:
    Return 117
End Process

Process called "SYS_GETRESUID" returns Integer:
    Return 118
End Process

Process called "SYS_SETRESGID" returns Integer:
    Return 119
End Process

Process called "SYS_GETRESGID" returns Integer:
    Return 120
End Process

Process called "SYS_GETPGID" returns Integer:
    Return 121
End Process

Process called "SYS_SETFSUID" returns Integer:
    Return 122
End Process

Process called "SYS_SETFSGID" returns Integer:
    Return 123
End Process

Process called "SYS_GETSID" returns Integer:
    Return 124
End Process

Process called "SYS_CAPGET" returns Integer:
    Return 125
End Process

Process called "SYS_CAPSET" returns Integer:
    Return 126
End Process

Process called "SYS_RT_SIGPENDING" returns Integer:
    Return 127
End Process

Process called "SYS_RT_SIGTIMEDWAIT" returns Integer:
    Return 128
End Process

Process called "SYS_RT_SIGQUEUEINFO" returns Integer:
    Return 129
End Process

Process called "SYS_RT_SIGSUSPEND" returns Integer:
    Return 130
End Process

Process called "SYS_SIGALTSTACK" returns Integer:
    Return 131
End Process

Process called "SYS_UTIME" returns Integer:
    Return 132
End Process

Process called "SYS_MKNOD" returns Integer:
    Return 133
End Process

Process called "SYS_USELIB" returns Integer:
    Return 134
End Process

Process called "SYS_PERSONALITY" returns Integer:
    Return 135
End Process

Process called "SYS_USTAT" returns Integer:
    Return 136
End Process

Process called "SYS_STATFS" returns Integer:
    Return 137
End Process

Process called "SYS_FSTATFS" returns Integer:
    Return 138
End Process

Process called "SYS_SYSFS" returns Integer:
    Return 139
End Process

Process called "SYS_GETPRIORITY" returns Integer:
    Return 140
End Process

Process called "SYS_SETPRIORITY" returns Integer:
    Return 141
End Process

Process called "SYS_SCHED_SETPARAM" returns Integer:
    Return 142
End Process

Process called "SYS_SCHED_GETPARAM" returns Integer:
    Return 143
End Process

Process called "SYS_SCHED_SETSCHEDULER" returns Integer:
    Return 144
End Process

Process called "SYS_SCHED_GETSCHEDULER" returns Integer:
    Return 145
End Process

Process called "SYS_SCHED_GET_PRIORITY_MAX" returns Integer:
    Return 146
End Process

Process called "SYS_SCHED_GET_PRIORITY_MIN" returns Integer:
    Return 147
End Process

Process called "SYS_SCHED_RR_GET_INTERVAL" returns Integer:
    Return 148
End Process

Process called "SYS_MLOCK" returns Integer:
    Return 149
End Process

Process called "SYS_MUNLOCK" returns Integer:
    Return 150
End Process

Process called "SYS_MLOCKALL" returns Integer:
    Return 151
End Process

Process called "SYS_MUNLOCKALL" returns Integer:
    Return 152
End Process

Process called "SYS_VHANGUP" returns Integer:
    Return 153
End Process

Process called "SYS_MODIFY_LDT" returns Integer:
    Return 154
End Process

Process called "SYS_PIVOT_ROOT" returns Integer:
    Return 155
End Process

Process called "SYS__SYSCTL" returns Integer:
    Return 156
End Process

Process called "SYS_PRCTL" returns Integer:
    Return 157
End Process

Process called "SYS_ARCH_PRCTL" returns Integer:
    Return 158
End Process

Process called "SYS_ADJTIMEX" returns Integer:
    Return 159
End Process

Process called "SYS_SETRLIMIT" returns Integer:
    Return 160
End Process

Process called "SYS_CHROOT" returns Integer:
    Return 161
End Process

Process called "SYS_SYNC" returns Integer:
    Return 162
End Process

Process called "SYS_ACCT" returns Integer:
    Return 163
End Process

Process called "SYS_SETTIMEOFDAY" returns Integer:
    Return 164
End Process

Process called "SYS_MOUNT" returns Integer:
    Return 165
End Process

Process called "SYS_UMOUNT2" returns Integer:
    Return 166
End Process

Process called "SYS_SWAPON" returns Integer:
    Return 167
End Process

Process called "SYS_SWAPOFF" returns Integer:
    Return 168
End Process

Process called "SYS_REBOOT" returns Integer:
    Return 169
End Process

Process called "SYS_SETHOSTNAME" returns Integer:
    Return 170
End Process

Process called "SYS_SETDOMAINNAME" returns Integer:
    Return 171
End Process

Process called "SYS_IOPL" returns Integer:
    Return 172
End Process

Process called "SYS_IOPERM" returns Integer:
    Return 173
End Process

Process called "SYS_CREATE_MODULE" returns Integer:
    Return 174
End Process

Process called "SYS_INIT_MODULE" returns Integer:
    Return 175
End Process

Process called "SYS_DELETE_MODULE" returns Integer:
    Return 176
End Process

Process called "SYS_GET_KERNEL_SYMS" returns Integer:
    Return 177
End Process

Process called "SYS_QUERY_MODULE" returns Integer:
    Return 178
End Process

Process called "SYS_QUOTACTL" returns Integer:
    Return 179
End Process

Process called "SYS_NFSSERVCTL" returns Integer:
    Return 180
End Process

Process called "SYS_GETPMSG" returns Integer:
    Return 181
End Process

Process called "SYS_PUTPMSG" returns Integer:
    Return 182
End Process

Process called "SYS_AFS_SYSCALL" returns Integer:
    Return 183
End Process

Process called "SYS_TUXCALL" returns Integer:
    Return 184
End Process

Process called "SYS_SECURITY" returns Integer:
    Return 185
End Process

Process called "SYS_GETTID" returns Integer:
    Return 186
End Process

Process called "SYS_READAHEAD" returns Integer:
    Return 187
End Process

Process called "SYS_SETXATTR" returns Integer:
    Return 188
End Process

Process called "SYS_LSETXATTR" returns Integer:
    Return 189
End Process

Process called "SYS_FSETXATTR" returns Integer:
    Return 190
End Process

Process called "SYS_GETXATTR" returns Integer:
    Return 191
End Process

Process called "SYS_LGETXATTR" returns Integer:
    Return 192
End Process

Process called "SYS_FGETXATTR" returns Integer:
    Return 193
End Process

Process called "SYS_LISTXATTR" returns Integer:
    Return 194
End Process

Process called "SYS_LLISTXATTR" returns Integer:
    Return 195
End Process

Process called "SYS_FLISTXATTR" returns Integer:
    Return 196
End Process

Process called "SYS_REMOVEXATTR" returns Integer:
    Return 197
End Process

Process called "SYS_LREMOVEXATTR" returns Integer:
    Return 198
End Process

Process called "SYS_FREMOVEXATTR" returns Integer:
    Return 199
End Process

Process called "SYS_TKILL" returns Integer:
    Return 200
End Process

Process called "SYS_TIME" returns Integer:
    Return 201
End Process

Process called "SYS_FUTEX" returns Integer:
    Return 202
End Process

Process called "SYS_SCHED_SETAFFINITY" returns Integer:
    Return 203
End Process

Process called "SYS_SCHED_GETAFFINITY" returns Integer:
    Return 204
End Process

Process called "SYS_SET_THREAD_AREA" returns Integer:
    Return 205
End Process

Process called "SYS_IO_SETUP" returns Integer:
    Return 206
End Process

Process called "SYS_IO_DESTROY" returns Integer:
    Return 207
End Process

Process called "SYS_IO_GETEVENTS" returns Integer:
    Return 208
End Process

Process called "SYS_IO_SUBMIT" returns Integer:
    Return 209
End Process

Process called "SYS_IO_CANCEL" returns Integer:
    Return 210
End Process

Process called "SYS_GET_THREAD_AREA" returns Integer:
    Return 211
End Process

Process called "SYS_LOOKUP_DCOOKIE" returns Integer:
    Return 212
End Process

Process called "SYS_EPOLL_CREATE" returns Integer:
    Return 213
End Process

Process called "SYS_EPOLL_CTL_OLD" returns Integer:
    Return 214
End Process

Process called "SYS_EPOLL_WAIT_OLD" returns Integer:
    Return 215
End Process

Process called "SYS_REMAP_FILE_PAGES" returns Integer:
    Return 216
End Process

Process called "SYS_GETDENTS64" returns Integer:
    Return 217
End Process

Process called "SYS_SET_TID_ADDRESS" returns Integer:
    Return 218
End Process

Process called "SYS_RESTART_SYSCALL" returns Integer:
    Return 219
End Process

Process called "SYS_SEMTIMEDOP" returns Integer:
    Return 220
End Process

Process called "SYS_FADVISE64" returns Integer:
    Return 221
End Process

Process called "SYS_TIMER_CREATE" returns Integer:
    Return 222
End Process

Process called "SYS_TIMER_SETTIME" returns Integer:
    Return 223
End Process

Process called "SYS_TIMER_GETTIME" returns Integer:
    Return 224
End Process

Process called "SYS_TIMER_GETOVERRUN" returns Integer:
    Return 225
End Process

Process called "SYS_TIMER_DELETE" returns Integer:
    Return 226
End Process

Process called "SYS_CLOCK_SETTIME" returns Integer:
    Return 227
End Process

Process called "SYS_CLOCK_GETTIME" returns Integer:
    Return 228
End Process

Process called "SYS_CLOCK_GETRES" returns Integer:
    Return 229
End Process

Process called "SYS_CLOCK_NANOSLEEP" returns Integer:
    Return 230
End Process

Process called "SYS_EXIT_GROUP" returns Integer:
    Return 231
End Process

Process called "SYS_EPOLL_WAIT" returns Integer:
    Return 232
End Process

Process called "SYS_EPOLL_CTL" returns Integer:
    Return 233
End Process

Process called "SYS_TGKILL" returns Integer:
    Return 234
End Process

Process called "SYS_UTIMES" returns Integer:
    Return 235
End Process

Process called "SYS_VSERVER" returns Integer:
    Return 236
End Process

Process called "SYS_MBIND" returns Integer:
    Return 237
End Process

Process called "SYS_SET_MEMPOLICY" returns Integer:
    Return 238
End Process

Process called "SYS_GET_MEMPOLICY" returns Integer:
    Return 239
End Process

Process called "SYS_MQ_OPEN" returns Integer:
    Return 240
End Process

Process called "SYS_MQ_UNLINK" returns Integer:
    Return 241
End Process

Process called "SYS_MQ_TIMEDSEND" returns Integer:
    Return 242
End Process

Process called "SYS_MQ_TIMEDRECEIVE" returns Integer:
    Return 243
End Process

Process called "SYS_MQ_NOTIFY" returns Integer:
    Return 244
End Process

Process called "SYS_MQ_GETSETATTR" returns Integer:
    Return 245
End Process

Process called "SYS_KEXEC_LOAD" returns Integer:
    Return 246
End Process

Process called "SYS_WAITID" returns Integer:
    Return 247
End Process

Process called "SYS_ADD_KEY" returns Integer:
    Return 248
End Process

Process called "SYS_REQUEST_KEY" returns Integer:
    Return 249
End Process

Process called "SYS_KEYCTL" returns Integer:
    Return 250
End Process

Process called "SYS_IOPRIO_SET" returns Integer:
    Return 251
End Process

Process called "SYS_IOPRIO_GET" returns Integer:
    Return 252
End Process

Process called "SYS_INOTIFY_INIT" returns Integer:
    Return 253
End Process

Process called "SYS_INOTIFY_ADD_WATCH" returns Integer:
    Return 254
End Process

Process called "SYS_INOTIFY_RM_WATCH" returns Integer:
    Return 255
End Process

Process called "SYS_MIGRATE_PAGES" returns Integer:
    Return 256
End Process

Process called "SYS_OPENAT" returns Integer:
    Return 257
End Process

Process called "SYS_MKDIRAT" returns Integer:
    Return 258
End Process

Process called "SYS_MKNODAT" returns Integer:
    Return 259
End Process

Process called "SYS_FCHOWNAT" returns Integer:
    Return 260
End Process

Process called "SYS_FUTIMESAT" returns Integer:
    Return 261
End Process

Process called "SYS_NEWFSTATAT" returns Integer:
    Return 262
End Process

Process called "SYS_UNLINKAT" returns Integer:
    Return 263
End Process

Process called "SYS_RENAMEAT" returns Integer:
    Return 264
End Process

Process called "SYS_LINKAT" returns Integer:
    Return 265
End Process

Process called "SYS_SYMLINKAT" returns Integer:
    Return 266
End Process

Process called "SYS_READLINKAT" returns Integer:
    Return 267
End Process

Process called "SYS_FCHMODAT" returns Integer:
    Return 268
End Process

Process called "SYS_FACCESSAT" returns Integer:
    Return 269
End Process

Process called "SYS_PSELECT6" returns Integer:
    Return 270
End Process

Process called "SYS_PPOLL" returns Integer:
    Return 271
End Process

Process called "SYS_UNSHARE" returns Integer:
    Return 272
End Process

Process called "SYS_SET_ROBUST_LIST" returns Integer:
    Return 273
End Process

Process called "SYS_GET_ROBUST_LIST" returns Integer:
    Return 274
End Process

Process called "SYS_SPLICE" returns Integer:
    Return 275
End Process

Process called "SYS_TEE" returns Integer:
    Return 276
End Process

Process called "SYS_SYNC_FILE_RANGE" returns Integer:
    Return 277
End Process

Process called "SYS_VMSPLICE" returns Integer:
    Return 278
End Process

Process called "SYS_MOVE_PAGES" returns Integer:
    Return 279
End Process

Process called "SYS_UTIMENSAT" returns Integer:
    Return 280
End Process

Process called "SYS_EPOLL_PWAIT" returns Integer:
    Return 281
End Process

Process called "SYS_SIGNALFD" returns Integer:
    Return 282
End Process

Process called "SYS_TIMERFD_CREATE" returns Integer:
    Return 283
End Process

Process called "SYS_EVENTFD" returns Integer:
    Return 284
End Process

Process called "SYS_FALLOCATE" returns Integer:
    Return 285
End Process

Process called "SYS_TIMERFD_SETTIME" returns Integer:
    Return 286
End Process

Process called "SYS_TIMERFD_GETTIME" returns Integer:
    Return 287
End Process

Process called "SYS_ACCEPT4" returns Integer:
    Return 288
End Process

Process called "SYS_SIGNALFD4" returns Integer:
    Return 289
End Process

Process called "SYS_EVENTFD2" returns Integer:
    Return 290
End Process

Process called "SYS_EPOLL_CREATE1" returns Integer:
    Return 291
End Process

Process called "SYS_DUP3" returns Integer:
    Return 292
End Process

Process called "SYS_PIPE2" returns Integer:
    Return 293
End Process

Process called "SYS_INOTIFY_INIT1" returns Integer:
    Return 294
End Process

Process called "SYS_PREADV" returns Integer:
    Return 295
End Process

Process called "SYS_PWRITEV" returns Integer:
    Return 296
End Process

Process called "SYS_RT_TGSIGQUEUEINFO" returns Integer:
    Return 297
End Process

Process called "SYS_PERF_EVENT_OPEN" returns Integer:
    Return 298
End Process

Process called "SYS_RECVMMSG" returns Integer:
    Return 299
End Process

Process called "SYS_FANOTIFY_INIT" returns Integer:
    Return 300
End Process

Process called "SYS_FANOTIFY_MARK" returns Integer:
    Return 301
End Process

Process called "SYS_PRLIMIT64" returns Integer:
    Return 302
End Process

Process called "SYS_NAME_TO_HANDLE_AT" returns Integer:
    Return 303
End Process

Process called "SYS_OPEN_BY_HANDLE_AT" returns Integer:
    Return 304
End Process

Process called "SYS_CLOCK_ADJTIME" returns Integer:
    Return 305
End Process

Process called "SYS_SYNCFS" returns Integer:
    Return 306
End Process

Process called "SYS_SENDMMSG" returns Integer:
    Return 307
End Process

Process called "SYS_SETNS" returns Integer:
    Return 308
End Process

Process called "SYS_GETCPU" returns Integer:
    Return 309
End Process

Process called "SYS_PROCESS_VM_READV" returns Integer:
    Return 310
End Process

Process called "SYS_PROCESS_VM_WRITEV" returns Integer:
    Return 311
End Process

Process called "SYS_KCMP" returns Integer:
    Return 312
End Process

Process called "SYS_FINIT_MODULE" returns Integer:
    Return 313
End Process

Process called "SYS_SCHED_SETATTR" returns Integer:
    Return 314
End Process

Process called "SYS_SCHED_GETATTR" returns Integer:
    Return 315
End Process

Process called "SYS_RENAMEAT2" returns Integer:
    Return 316
End Process

Process called "SYS_SECCOMP" returns Integer:
    Return 317
End Process

Process called "SYS_GETRANDOM" returns Integer:
    Return 318
End Process

Process called "SYS_MEMFD_CREATE" returns Integer:
    Return 319
End Process

Process called "SYS_KEXEC_FILE_LOAD" returns Integer:
    Return 320
End Process

Process called "SYS_BPF" returns Integer:
    Return 321
End Process

Process called "SYS_EXECVEAT" returns Integer:
    Return 322
End Process

Process called "SYS_USERFAULTFD" returns Integer:
    Return 323
End Process

Process called "SYS_MEMBARRIER" returns Integer:
    Return 324
End Process

Process called "SYS_MLOCK2" returns Integer:
    Return 325
End Process

Process called "SYS_COPY_FILE_RANGE" returns Integer:
    Return 326
End Process

Process called "SYS_PREADV2" returns Integer:
    Return 327
End Process

Process called "SYS_PWRITEV2" returns Integer:
    Return 328
End Process

Process called "SYS_PKEY_MPROTECT" returns Integer:
    Return 329
End Process

Process called "SYS_PKEY_ALLOC" returns Integer:
    Return 330
End Process

Process called "SYS_PKEY_FREE" returns Integer:
    Return 331
End Process

Process called "SYS_STATX" returns Integer:
    Return 332
End Process

Process called "SYS_IO_PGETEVENTS" returns Integer:
    Return 333
End Process

Process called "SYS_RSEQ" returns Integer:
    Return 334
End Process

Process called "SYS_URETPROBE" returns Integer:
    Return 335
End Process

Process called "SYS_UPROBE" returns Integer:
    Return 336
End Process

Process called "SYS_PIDFD_SEND_SIGNAL" returns Integer:
    Return 424
End Process

Process called "SYS_IO_URING_SETUP" returns Integer:
    Return 425
End Process

Process called "SYS_IO_URING_ENTER" returns Integer:
    Return 426
End Process

Process called "SYS_IO_URING_REGISTER" returns Integer:
    Return 427
End Process

Process called "SYS_OPEN_TREE" returns Integer:
    Return 428
End Process

Process called "SYS_MOVE_MOUNT" returns Integer:
    Return 429
End Process

Process called "SYS_FSOPEN" returns Integer:
    Return 430
End Process

Process called "SYS_FSCONFIG" returns Integer:
    Return 431
End Process

Process called "SYS_FSMOUNT" returns Integer:
    Return 432
End Process

Process called "SYS_FSPICK" returns Integer:
    Return 433
End Process

Process called "SYS_PIDFD_OPEN" returns Integer:
    Return 434
End Process

Process called "SYS_CLONE3" returns Integer:
    Return 435
End Process

Process called "SYS_CLOSE_RANGE" returns Integer:
    Return 436
End Process

Process called "SYS_OPENAT2" returns Integer:
    Return 437
End Process

Process called "SYS_PIDFD_GETFD" returns Integer:
    Return 438
End Process

Process called "SYS_FACCESSAT2" returns Integer:
    Return 439
End Process

Process called "SYS_PROCESS_MADVISE" returns Integer:
    Return 440
End Process

Process called "SYS_EPOLL_PWAIT2" returns Integer:
    Return 441
End Process

Process called "SYS_MOUNT_SETATTR" returns Integer:
    Return 442
End Process

Process called "SYS_QUOTACTL_FD" returns Integer:
    Return 443
End Process

Process called "SYS_LANDLOCK_CREATE_RULESET" returns Integer:
    Return 444
End Process

Process called "SYS_LANDLOCK_ADD_RULE" returns Integer:
    Return 445
End Process

Process called "SYS_LANDLOCK_RESTRICT_SELF" returns Integer:
    Return 446
End Process

Process called "SYS_MEMFD_SECRET" returns Integer:
    Return 447
End Process

Process called "SYS_PROCESS_MRELEASE" returns Integer:
    Return 448
End Process

Process called "SYS_FUTEX_WAITV" returns Integer:
    Return 449
End Process

Process called "SYS_SET_MEMPOLICY_HOME_NODE" returns Integer:
    Return 450
End Process

Process called "SYS_CACHESTAT" returns Integer:
    Return 451
End Process

Process called "SYS_FCHMODAT2" returns Integer:
    Return 452
End Process

Process called "SYS_MAP_SHADOW_STACK" returns Integer:
    Return 453
End Process

Process called "SYS_FUTEX_WAKE" returns Integer:
    Return 454
End Process

Process called "SYS_FUTEX_WAIT" returns Integer:
    Return 455
End Process

Process called "SYS_FUTEX_REQUEUE" returns Integer:
    Return 456
End Process

Process called "SYS_STATMOUNT" returns Integer:
    Return 457
End Process

Process called "SYS_LISTMOUNT" returns Integer:
    Return 458
End Process

Process called "SYS_LSM_GET_SELF_ATTR" returns Integer:
    Return 459
End Process

Process called "SYS_LSM_SET_SELF_ATTR" returns Integer:
    Return 460
End Process

Process called "SYS_LSM_LIST_MODULES" returns Integer:
    Return 461
End Process

Process called "SYS_MSEAL" returns Integer:
    Return 462
End Process

Process called "SYS_SETXATTRAT" returns Integer:
    Return 463
End Process

Process called "SYS_GETXATTRAT" returns Integer:
    Return 464
End Process

Process called "SYS_LISTXATTRAT" returns Integer:
    Return 465
End Process

Process called "SYS_REMOVEXATTRAT" returns Integer:
    Return 466
End Process

Process called "SYS_OPEN_TREE_ATTR" returns Integer:
    Return 467
End Process

Process called "SYS_FILE_GETATTR" returns Integer:
    Return 468
End Process

Process called "SYS_FILE_SETATTR" returns Integer:
    Return 469
End Process

Note: ============================================================================
Note: GENERIC SYSCALL WRAPPERS
Note: ============================================================================
Note: These provide raw syscall invocation with 0-6 arguments
Note: Arguments follow System V x86_64 ABI for function calls (RDI, RSI, RDX, RCX, R8, R9)
Note: But syscalls use R10 instead of RCX (because syscall clobbers RCX)

Note: Syscall with 0 arguments
Process called "syscall_0" takes syscall_number as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with no arguments
    Note: RAX = syscall_number
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -16(%rbp)
    End Assembly
    Return result
End Process

Note: Syscall with 1 argument
Process called "syscall_1" takes syscall_number as Integer, arg1 as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with 1 argument
    Note: RAX = syscall_number, RDI = arg1
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Load argument 1 into RDI
        movq -16(%rbp), %rdi

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -24(%rbp)
    End Assembly
    Return result
End Process

Note: Syscall with 2 arguments
Process called "syscall_2" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with 2 arguments
    Note: RAX = syscall_number, RDI = arg1, RSI = arg2
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Load argument 1 into RDI
        movq -16(%rbp), %rdi

        # Load argument 2 into RSI
        movq -24(%rbp), %rsi

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -32(%rbp)
    End Assembly
    Return result
End Process

Note: Syscall with 3 arguments
Process called "syscall_3" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with 3 arguments
    Note: RAX = syscall_number, RDI = arg1, RSI = arg2, RDX = arg3
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Load argument 1 into RDI
        movq -16(%rbp), %rdi

        # Load argument 2 into RSI
        movq -24(%rbp), %rsi

        # Load argument 3 into RDX
        movq -32(%rbp), %rdx

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -40(%rbp)
    End Assembly
    Return result
End Process

Note: Syscall with 4 arguments
Process called "syscall_4" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with 4 arguments
    Note: RAX = syscall_number, RDI = arg1, RSI = arg2, RDX = arg3, R10 = arg4
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Load argument 1 into RDI
        movq -16(%rbp), %rdi

        # Load argument 2 into RSI
        movq -24(%rbp), %rsi

        # Load argument 3 into RDX
        movq -32(%rbp), %rdx

        # Load argument 4 into R10 (syscalls use R10 instead of RCX)
        movq -40(%rbp), %r10

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -48(%rbp)
    End Assembly
    Return result
End Process

Note: Syscall with 5 arguments
Process called "syscall_5" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with 5 arguments
    Note: RAX = syscall_number, RDI = arg1, RSI = arg2, RDX = arg3, R10 = arg4, R8 = arg5
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Load argument 1 into RDI
        movq -16(%rbp), %rdi

        # Load argument 2 into RSI
        movq -24(%rbp), %rsi

        # Load argument 3 into RDX
        movq -32(%rbp), %rdx

        # Load argument 4 into R10 (syscalls use R10 instead of RCX)
        movq -40(%rbp), %r10

        # Load argument 5 into R8
        movq -48(%rbp), %r8

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -56(%rbp)
    End Assembly
    Return result
End Process

Note: Syscall with 6 arguments (maximum for Linux syscalls)
Process called "syscall_6" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer returns Integer:
    Note: x86_64 inline assembly - Syscall with 6 arguments (maximum)
    Note: RAX = syscall_number, RDI = arg1, RSI = arg2, RDX = arg3, R10 = arg4, R8 = arg5, R9 = arg6
    Let result be 0
    Inline Assembly:
        # Load syscall number into RAX
        movq -8(%rbp), %rax

        # Load argument 1 into RDI
        movq -16(%rbp), %rdi

        # Load argument 2 into RSI
        movq -24(%rbp), %rsi

        # Load argument 3 into RDX
        movq -32(%rbp), %rdx

        # Load argument 4 into R10 (syscalls use R10 instead of RCX)
        movq -40(%rbp), %r10

        # Load argument 5 into R8
        movq -48(%rbp), %r8

        # Load argument 6 into R9
        movq -56(%rbp), %r9

        # Invoke kernel
        syscall

        # Store result from RAX
        movq %rax, -64(%rbp)
    End Assembly
    Return result
End Process

Note: ============================================================================
Note: HIGH-LEVEL SYSCALL WRAPPERS
Note: ============================================================================
Note: These provide convenient named functions for common syscalls

Note: Read from file descriptor
Note: fd: file descriptor (0 = stdin, 1 = stdout, 2 = stderr)
Note: buffer: pointer to buffer to read into
Note: count: number of bytes to read
Note: Returns: number of bytes read, or negative error code
Process called "syscall_read" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Let syscall_num be SYS_READ()
    Return syscall_3(syscall_num, fd, buffer, count)
End Process

Note: Write to file descriptor
Note: fd: file descriptor (0 = stdin, 1 = stdout, 2 = stderr)
Note: buffer: pointer to buffer containing data to write
Note: count: number of bytes to write
Note: Returns: number of bytes written, or negative error code
Process called "syscall_write" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Let syscall_num be SYS_WRITE()
    Return syscall_3(syscall_num, fd, buffer, count)
End Process

Note: Open a file
Note: filename: pointer to null-terminated filename string
Note: flags: O_RDONLY (0), O_WRONLY (1), O_RDWR (2), O_CREAT (64), O_TRUNC (512), etc.
Note: mode: file permissions (e.g., 0644 octal = 420 decimal)
Note: Returns: file descriptor number, or negative error code
Process called "syscall_open" takes filename as Integer, flags as Integer, mode as Integer returns Integer:
    Let syscall_num be SYS_OPEN()
    Return syscall_3(syscall_num, filename, flags, mode)
End Process

Note: Close a file descriptor
Note: fd: file descriptor to close
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_close" takes fd as Integer returns Integer:
    Let syscall_num be SYS_CLOSE()
    Return syscall_1(syscall_num, fd)
End Process

Note: Exit process immediately
Note: status: exit code (0 = success, non-zero = failure)
Note: Does not return
Process called "syscall_exit" takes status as Integer returns Integer:
    Let syscall_num be SYS_EXIT()
    Return syscall_1(syscall_num, status)
End Process

Note: Adjust program break (heap boundary)
Note: addr: new break address (or 0 to query current break)
Note: Returns: new break address, or negative error code
Process called "syscall_brk" takes addr as Integer returns Integer:
    Let syscall_num be SYS_BRK()
    Return syscall_1(syscall_num, addr)
End Process

Note: Map memory region
Note: addr: suggested address (or 0 for kernel to choose)
Note: length: number of bytes to map
Note: prot: protection flags (PROT_READ=1, PROT_WRITE=2, PROT_EXEC=4)
Note: flags: MAP_PRIVATE=2, MAP_ANONYMOUS=32, MAP_FIXED=16
Note: fd: file descriptor (or -1 for anonymous mapping)
Note: offset: offset in file (must be page-aligned)
Note: Returns: address of mapped region, or negative error code
Process called "syscall_mmap" takes addr as Integer, length as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Integer:
    Let syscall_num be SYS_MMAP()
    Return syscall_6(syscall_num, addr, length, prot, flags, fd, offset)
End Process

Note: Unmap memory region
Note: addr: address of mapped region
Note: length: number of bytes to unmap
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_munmap" takes addr as Integer, length as Integer returns Integer:
    Let syscall_num be SYS_MUNMAP()
    Return syscall_2(syscall_num, addr, length)
End Process

Note: Get file status
Note: fd: file descriptor
Note: statbuf: pointer to stat structure (144 bytes on x86_64)
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_fstat" takes fd as Integer, statbuf as Integer returns Integer:
    Let syscall_num be SYS_FSTAT()
    Return syscall_2(syscall_num, fd, statbuf)
End Process

Note: Reposition file offset
Note: fd: file descriptor
Note: offset: offset in bytes
Note: whence: SEEK_SET (0), SEEK_CUR (1), SEEK_END (2)
Note: Returns: resulting offset, or negative error code
Process called "syscall_lseek" takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Let syscall_num be SYS_LSEEK()
    Return syscall_3(syscall_num, fd, offset, whence)
End Process

Note: Create a new process (fork)
Note: Returns: 0 in child process, child PID in parent, or negative error code
Process called "syscall_fork" returns Integer:
    Let syscall_num be SYS_FORK()
    Return syscall_0(syscall_num)
End Process

Note: Get process ID
Note: Returns: process ID of calling process
Process called "syscall_getpid" returns Integer:
    Let syscall_num be SYS_GETPID()
    Return syscall_0(syscall_num)
End Process

Note: Get parent process ID
Note: Returns: parent process ID
Process called "syscall_getppid" returns Integer:
    Let syscall_num be SYS_GETPPID()
    Return syscall_0(syscall_num)
End Process

Note: Send signal to process
Note: pid: process ID to send signal to
Note: sig: signal number (SIGTERM=15, SIGKILL=9, SIGUSR1=10, etc.)
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_kill" takes pid as Integer, sig as Integer returns Integer:
    Let syscall_num be SYS_KILL()
    Return syscall_2(syscall_num, pid, sig)
End Process

Note: Wait for child process state change
Note: pid: process ID to wait for (-1 for any child)
Note: wstatus: pointer to integer to store exit status
Note: options: WNOHANG=1, WUNTRACED=2, WCONTINUED=8
Note: rusage: pointer to rusage struct (or 0 to ignore)
Note: Returns: PID of exited child, or negative error code
Process called "syscall_wait4" takes pid as Integer, wstatus as Integer, options as Integer, rusage as Integer returns Integer:
    Let syscall_num be SYS_WAIT4()
    Return syscall_4(syscall_num, pid, wstatus, options, rusage)
End Process

Note: Execute a new program
Note: filename: pointer to null-terminated executable path
Note: argv: pointer to null-terminated array of argument strings
Note: envp: pointer to null-terminated array of environment strings
Note: Does not return on success, returns negative error code on failure
Process called "syscall_execve" takes filename as Integer, argv as Integer, envp as Integer returns Integer:
    Let syscall_num be SYS_EXECVE()
    Return syscall_3(syscall_num, filename, argv, envp)
End Process

Note: Duplicate file descriptor
Note: oldfd: file descriptor to duplicate
Note: Returns: new file descriptor, or negative error code
Process called "syscall_dup" takes oldfd as Integer returns Integer:
    Let syscall_num be SYS_DUP()
    Return syscall_1(syscall_num, oldfd)
End Process

Note: Duplicate file descriptor to specific fd number
Note: oldfd: file descriptor to duplicate
Note: newfd: desired new file descriptor number
Note: Returns: new file descriptor, or negative error code
Process called "syscall_dup2" takes oldfd as Integer, newfd as Integer returns Integer:
    Let syscall_num be SYS_DUP2()
    Return syscall_2(syscall_num, oldfd, newfd)
End Process

Note: Create a pipe
Note: pipefd: pointer to array of 2 integers [read_fd, write_fd]
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_pipe" takes pipefd as Integer returns Integer:
    Let syscall_num be SYS_PIPE()
    Return syscall_1(syscall_num, pipefd)
End Process

Note: File control operations
Note: fd: file descriptor
Note: cmd: command (F_GETFD=1, F_SETFD=2, F_GETFL=3, F_SETFL=4, etc.)
Note: arg: command-specific argument
Note: Returns: command-specific result, or negative error code
Process called "syscall_fcntl" takes fd as Integer, cmd as Integer, arg as Integer returns Integer:
    Let syscall_num be SYS_FCNTL()
    Return syscall_3(syscall_num, fd, cmd, arg)
End Process

Note: Device-specific I/O control
Note: fd: file descriptor
Note: request: device-specific request code
Note: argp: pointer to request-specific argument
Note: Returns: request-specific result, or negative error code
Process called "syscall_ioctl" takes fd as Integer, request as Integer, argp as Integer returns Integer:
    Let syscall_num be SYS_IOCTL()
    Return syscall_3(syscall_num, fd, request, argp)
End Process

Note: Create a socket
Note: domain: AF_INET=2 (IPv4), AF_INET6=10 (IPv6), AF_UNIX=1 (local)
Note: type: SOCK_STREAM=1 (TCP), SOCK_DGRAM=2 (UDP), SOCK_RAW=3
Note: protocol: 0 for default protocol for given domain/type
Note: Returns: socket file descriptor, or negative error code
Process called "syscall_socket" takes domain as Integer, type as Integer, protocol as Integer returns Integer:
    Let syscall_num be SYS_SOCKET()
    Return syscall_3(syscall_num, domain, type, protocol)
End Process

Note: Bind socket to address
Note: sockfd: socket file descriptor
Note: addr: pointer to sockaddr structure
Note: addrlen: size of sockaddr structure
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_bind" takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Let syscall_num be SYS_BIND()
    Return syscall_3(syscall_num, sockfd, addr, addrlen)
End Process

Note: Listen for connections on socket
Note: sockfd: socket file descriptor
Note: backlog: maximum length of pending connections queue
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_listen" takes sockfd as Integer, backlog as Integer returns Integer:
    Let syscall_num be SYS_LISTEN()
    Return syscall_2(syscall_num, sockfd, backlog)
End Process

Note: Accept connection on socket
Note: sockfd: listening socket file descriptor
Note: addr: pointer to sockaddr structure to fill with client address
Note: addrlen: pointer to integer containing addr buffer size
Note: Returns: new socket file descriptor for accepted connection, or negative error code
Process called "syscall_accept" takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Let syscall_num be SYS_ACCEPT()
    Return syscall_3(syscall_num, sockfd, addr, addrlen)
End Process

Note: Initiate connection on socket
Note: sockfd: socket file descriptor
Note: addr: pointer to sockaddr structure with server address
Note: addrlen: size of sockaddr structure
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_connect" takes sockfd as Integer, addr as Integer, addrlen as Integer returns Integer:
    Let syscall_num be SYS_CONNECT()
    Return syscall_3(syscall_num, sockfd, addr, addrlen)
End Process

Note: Send data on socket
Note: sockfd: socket file descriptor
Note: buf: pointer to buffer containing data to send
Note: len: number of bytes to send
Note: flags: send flags (MSG_DONTWAIT=64, MSG_NOSIGNAL=16384, etc.)
Note: dest_addr: pointer to destination sockaddr (or 0 for connected socket)
Note: addrlen: size of dest_addr structure
Note: Returns: number of bytes sent, or negative error code
Process called "syscall_sendto" takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer, dest_addr as Integer, addrlen as Integer returns Integer:
    Let syscall_num be SYS_SENDTO()
    Return syscall_6(syscall_num, sockfd, buf, len, flags, dest_addr, addrlen)
End Process

Note: Receive data from socket
Note: sockfd: socket file descriptor
Note: buf: pointer to buffer to receive data
Note: len: size of buffer
Note: flags: receive flags (MSG_DONTWAIT=64, MSG_PEEK=2, MSG_WAITALL=256, etc.)
Note: src_addr: pointer to sockaddr to fill with sender address (or 0)
Note: addrlen: pointer to integer with src_addr buffer size
Note: Returns: number of bytes received, or negative error code
Process called "syscall_recvfrom" takes sockfd as Integer, buf as Integer, len as Integer, flags as Integer, src_addr as Integer, addrlen as Integer returns Integer:
    Let syscall_num be SYS_RECVFROM()
    Return syscall_6(syscall_num, sockfd, buf, len, flags, src_addr, addrlen)
End Process

Note: Shutdown socket
Note: sockfd: socket file descriptor
Note: how: SHUT_RD=0 (disable reads), SHUT_WR=1 (disable writes), SHUT_RDWR=2 (both)
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_shutdown" takes sockfd as Integer, how as Integer returns Integer:
    Let syscall_num be SYS_SHUTDOWN()
    Return syscall_2(syscall_num, sockfd, how)
End Process

Note: Set socket options
Note: sockfd: socket file descriptor
Note: level: SOL_SOCKET=1, IPPROTO_TCP=6, IPPROTO_IP=0
Note: optname: option name (SO_REUSEADDR=2, SO_KEEPALIVE=9, etc.)
Note: optval: pointer to option value
Note: optlen: size of option value
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_setsockopt" takes sockfd as Integer, level as Integer, optname as Integer, optval as Integer, optlen as Integer returns Integer:
    Let syscall_num be SYS_SETSOCKOPT()
    Return syscall_5(syscall_num, sockfd, level, optname, optval, optlen)
End Process

Note: Get socket options
Note: sockfd: socket file descriptor
Note: level: SOL_SOCKET=1, IPPROTO_TCP=6, IPPROTO_IP=0
Note: optname: option name
Note: optval: pointer to buffer to receive option value
Note: optlen: pointer to integer with optval buffer size
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_getsockopt" takes sockfd as Integer, level as Integer, optname as Integer, optval as Integer, optlen as Integer returns Integer:
    Let syscall_num be SYS_GETSOCKOPT()
    Return syscall_5(syscall_num, sockfd, level, optname, optval, optlen)
End Process

Note: Create epoll instance
Note: size: ignored since Linux 2.6.8 (use 0)
Note: Returns: epoll file descriptor, or negative error code
Process called "syscall_epoll_create" takes size as Integer returns Integer:
    Let syscall_num be SYS_EPOLL_CREATE()
    Return syscall_1(syscall_num, size)
End Process

Note: Create epoll instance with flags
Note: flags: EPOLL_CLOEXEC=524288
Note: Returns: epoll file descriptor, or negative error code
Process called "syscall_epoll_create1" takes flags as Integer returns Integer:
    Let syscall_num be SYS_EPOLL_CREATE1()
    Return syscall_1(syscall_num, flags)
End Process

Note: Control epoll instance
Note: epfd: epoll file descriptor
Note: op: EPOLL_CTL_ADD=1, EPOLL_CTL_MOD=2, EPOLL_CTL_DEL=3
Note: fd: file descriptor to add/modify/delete
Note: event: pointer to epoll_event structure
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_epoll_ctl" takes epfd as Integer, op as Integer, fd as Integer, event as Integer returns Integer:
    Let syscall_num be SYS_EPOLL_CTL()
    Return syscall_4(syscall_num, epfd, op, fd, event)
End Process

Note: Wait for epoll events
Note: epfd: epoll file descriptor
Note: events: pointer to array of epoll_event structures
Note: maxevents: maximum number of events to return
Note: timeout: timeout in milliseconds (-1 for infinite, 0 for non-blocking)
Note: Returns: number of events, 0 on timeout, or negative error code
Process called "syscall_epoll_wait" takes epfd as Integer, events as Integer, maxevents as Integer, timeout as Integer returns Integer:
    Let syscall_num be SYS_EPOLL_WAIT()
    Return syscall_4(syscall_num, epfd, events, maxevents, timeout)
End Process

Note: Poll file descriptors for events
Note: fds: pointer to array of pollfd structures
Note: nfds: number of file descriptors in array
Note: timeout: timeout in milliseconds (-1 for infinite, 0 for non-blocking)
Note: Returns: number of ready descriptors, 0 on timeout, or negative error code
Process called "syscall_poll" takes fds as Integer, nfds as Integer, timeout as Integer returns Integer:
    Let syscall_num be SYS_POLL()
    Return syscall_3(syscall_num, fds, nfds, timeout)
End Process

Note: Select file descriptors for I/O readiness
Note: nfds: highest-numbered fd in any set, plus 1
Note: readfds: pointer to fd_set for read readiness (or 0)
Note: writefds: pointer to fd_set for write readiness (or 0)
Note: exceptfds: pointer to fd_set for exceptional conditions (or 0)
Note: timeout: pointer to timeval structure for timeout (or 0 for infinite)
Note: Returns: number of ready descriptors, 0 on timeout, or negative error code
Process called "syscall_select" takes nfds as Integer, readfds as Integer, writefds as Integer, exceptfds as Integer, timeout as Integer returns Integer:
    Let syscall_num be SYS_SELECT()
    Return syscall_5(syscall_num, nfds, readfds, writefds, exceptfds, timeout)
End Process

Note: Sleep for specified time
Note: req: pointer to timespec structure with sleep duration
Note: rem: pointer to timespec to store remaining time on interruption (or 0)
Note: Returns: 0 on success, -1 if interrupted (remaining time in rem)
Process called "syscall_nanosleep" takes req as Integer, rem as Integer returns Integer:
    Let syscall_num be SYS_NANOSLEEP()
    Return syscall_2(syscall_num, req, rem)
End Process

Note: Get time of day
Note: tv: pointer to timeval structure to fill
Note: tz: pointer to timezone structure (deprecated, use 0)
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_gettimeofday" takes tv as Integer, tz as Integer returns Integer:
    Let syscall_num be SYS_GETTIMEOFDAY()
    Return syscall_2(syscall_num, tv, tz)
End Process

Note: Get clock time
Note: clk_id: CLOCK_REALTIME=0, CLOCK_MONOTONIC=1, CLOCK_PROCESS_CPUTIME_ID=2
Note: tp: pointer to timespec structure to fill
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_clock_gettime" takes clk_id as Integer, tp as Integer returns Integer:
    Let syscall_num be SYS_CLOCK_GETTIME()
    Return syscall_2(syscall_num, clk_id, tp)
End Process

Note: Change memory protection
Note: addr: starting address (must be page-aligned)
Note: len: length of region
Note: prot: new protection flags (PROT_READ=1, PROT_WRITE=2, PROT_EXEC=4)
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_mprotect" takes addr as Integer, len as Integer, prot as Integer returns Integer:
    Let syscall_num be SYS_MPROTECT()
    Return syscall_3(syscall_num, addr, len, prot)
End Process

Note: Give advice about memory usage
Note: addr: starting address (must be page-aligned)
Note: length: length of region
Note: advice: MADV_NORMAL=0, MADV_RANDOM=1, MADV_SEQUENTIAL=2, MADV_WILLNEED=3, MADV_DONTNEED=4
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_madvise" takes addr as Integer, length as Integer, advice as Integer returns Integer:
    Let syscall_num be SYS_MADVISE()
    Return syscall_3(syscall_num, addr, length, advice)
End Process

Note: Remap memory region
Note: old_address: current address
Note: old_size: current size
Note: new_size: desired new size
Note: flags: MREMAP_MAYMOVE=1, MREMAP_FIXED=2
Note: new_address: new address if MREMAP_FIXED specified
Note: Returns: new address on success, or negative error code
Process called "syscall_mremap" takes old_address as Integer, old_size as Integer, new_size as Integer, flags as Integer, new_address as Integer returns Integer:
    Let syscall_num be SYS_MREMAP()
    Return syscall_5(syscall_num, old_address, old_size, new_size, flags, new_address)
End Process

Note: Fast user-space locking primitive
Note: uaddr: pointer to futex word (4-byte aligned integer)
Note: futex_op: operation (FUTEX_WAIT=0, FUTEX_WAKE=1, FUTEX_REQUEUE=3, etc.)
Note: val: operation-specific value
Note: timeout: pointer to timespec for timeout (or 0 for infinite)
Note: uaddr2: second futex address for requeue operations (or 0)
Note: val3: operation-specific value
Note: Returns: operation-specific result, or negative error code
Process called "syscall_futex" takes uaddr as Integer, futex_op as Integer, val as Integer, timeout as Integer, uaddr2 as Integer, val3 as Integer returns Integer:
    Let syscall_num be SYS_FUTEX()
    Return syscall_6(syscall_num, uaddr, futex_op, val, timeout, uaddr2, val3)
End Process

Note: Get system information
Note: info: pointer to sysinfo structure to fill
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_sysinfo" takes info as Integer returns Integer:
    Let syscall_num be SYS_SYSINFO()
    Return syscall_1(syscall_num, info)
End Process

Note: Get system name and information
Note: buf: pointer to utsname structure to fill
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_uname" takes buf as Integer returns Integer:
    Let syscall_num be SYS_UNAME()
    Return syscall_1(syscall_num, buf)
End Process

Note: Change working directory
Note: path: pointer to null-terminated path string
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_chdir" takes path as Integer returns Integer:
    Let syscall_num be SYS_CHDIR()
    Return syscall_1(syscall_num, path)
End Process

Note: Get current working directory
Note: buf: pointer to buffer to store path
Note: size: size of buffer
Note: Returns: buf on success, or negative error code
Process called "syscall_getcwd" takes buf as Integer, size as Integer returns Integer:
    Let syscall_num be SYS_GETCWD()
    Return syscall_2(syscall_num, buf, size)
End Process

Note: Change file permissions
Note: filename: pointer to null-terminated filename string
Note: mode: new permissions (e.g., 0644 octal = 420 decimal)
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_chmod" takes filename as Integer, mode as Integer returns Integer:
    Let syscall_num be SYS_CHMOD()
    Return syscall_2(syscall_num, filename, mode)
End Process

Note: Change file permissions by fd
Note: fd: file descriptor
Note: mode: new permissions
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_fchmod" takes fd as Integer, mode as Integer returns Integer:
    Let syscall_num be SYS_FCHMOD()
    Return syscall_2(syscall_num, fd, mode)
End Process

Note: Synchronize file's in-core state with storage device
Note: fd: file descriptor
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_fsync" takes fd as Integer returns Integer:
    Let syscall_num be SYS_FSYNC()
    Return syscall_1(syscall_num, fd)
End Process

Note: Truncate file to specified length
Note: path: pointer to null-terminated filename string
Note: length: new file size in bytes
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_truncate" takes path as Integer, length as Integer returns Integer:
    Let syscall_num be SYS_TRUNCATE()
    Return syscall_2(syscall_num, path, length)
End Process

Note: Truncate file to specified length by fd
Note: fd: file descriptor
Note: length: new file size in bytes
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_ftruncate" takes fd as Integer, length as Integer returns Integer:
    Let syscall_num be SYS_FTRUNCATE()
    Return syscall_2(syscall_num, fd, length)
End Process

Note: Get resource usage
Note: who: RUSAGE_SELF=0, RUSAGE_CHILDREN=-1, RUSAGE_THREAD=1
Note: usage: pointer to rusage structure to fill
Note: Returns: 0 on success, negative error code on failure
Process called "syscall_getrusage" takes who as Integer, usage as Integer returns Integer:
    Let syscall_num be SYS_GETRUSAGE()
    Return syscall_2(syscall_num, who, usage)
End Process

Note: Yield CPU to another thread
Note: Returns: 0 (always succeeds)
Process called "syscall_sched_yield" returns Integer:
    Let syscall_num be SYS_SCHED_YIELD()
    Return syscall_0(syscall_num)
End Process

Note: ============================================================================
Note: SYSCALL CONSTANTS
Note: ============================================================================
Note: These are commonly used with the syscall wrappers above

Note: File open flags
Process called "O_RDONLY" returns Integer:
    Return 0
End Process

Process called "O_WRONLY" returns Integer:
    Return 1
End Process

Process called "O_RDWR" returns Integer:
    Return 2
End Process

Process called "O_CREAT" returns Integer:
    Return 64
End Process

Process called "O_TRUNC" returns Integer:
    Return 512
End Process

Process called "O_APPEND" returns Integer:
    Return 1024
End Process

Note: File permissions (octal values converted to decimal)
Process called "MODE_0644" returns Integer:
    Return 420  Note: 0644 octal = rw-r--r--
End Process

Process called "MODE_0755" returns Integer:
    Return 493  Note: 0755 octal = rwxr-xr-x
End Process

Note: Memory protection flags (for mmap)
Process called "PROT_NONE" returns Integer:
    Return 0
End Process

Process called "PROT_READ" returns Integer:
    Return 1
End Process

Process called "PROT_WRITE" returns Integer:
    Return 2
End Process

Process called "PROT_EXEC" returns Integer:
    Return 4
End Process

Note: Memory mapping flags (for mmap)
Process called "MAP_SHARED" returns Integer:
    Return 1
End Process

Process called "MAP_PRIVATE" returns Integer:
    Return 2
End Process

Process called "MAP_FIXED" returns Integer:
    Return 16
End Process

Process called "MAP_ANONYMOUS" returns Integer:
    Return 32
End Process

Note: File seek positions (for lseek)
Process called "SEEK_SET" returns Integer:
    Return 0
End Process

Process called "SEEK_CUR" returns Integer:
    Return 1
End Process

Process called "SEEK_END" returns Integer:
    Return 2
End Process

Note: Standard file descriptors
Process called "STDIN_FILENO" returns Integer:
    Return 0
End Process

Process called "STDOUT_FILENO" returns Integer:
    Return 1
End Process

Process called "STDERR_FILENO" returns Integer:
    Return 2
End Process
