Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements ARM32 (ARMv7) register definitions for Linux.

Linux ARM32 Register Architecture:
- R0-R15: 32-bit general-purpose registers
- R13 (SP): Stack pointer
- R14 (LR): Link register (stores return address)
- R15 (PC): Program counter
- S0-S31: 32-bit single-precision FP registers (VFPv2/VFPv3)
- D0-D31: 64-bit double-precision FP registers (VFPv3)
- Q0-Q15: 128-bit NEON quad-word registers

Linux ARM32 Calling Convention (AAPCS):
- R0-R3: Parameter registers
- R0-R1: Return value registers (64-bit values use R0:R1)
- R4-R11: Callee-saved registers
- R12 (IP): Intra-procedure-call scratch register
- R13 (SP): Stack pointer
- R14 (LR): Link register
- R15 (PC): Program counter
- S0-S15/D0-D7: Parameter/return FP registers (VFP)
- S16-S31/D8-D15: Callee-saved FP registers (VFP)

Register Encoding:
- General-purpose registers: 0-15 (R0-R15)
- VFP S registers: 16-47 (S0-S31)
- VFP D registers: 48-79 (D0-D31)
- NEON Q registers: 80-95 (Q0-Q15)

Platform: Linux ARM32 (ARMv7) - 32-bit ARM Linux systems
:End Note

Note: ============================================================================
Note: GENERAL-PURPOSE REGISTER CONSTANTS
Note: ============================================================================

Note: ARM32 calling convention uses R0-R3 for parameters, R0-R1 for return values
Note: R0-R3, R12 are caller-saved
Note: R4-R11 are callee-saved
Note: R13 is stack pointer (SP), R14 is link register (LR), R15 is program counter (PC)

Process called "REG_R0" returns Integer:
    Return 0
End Process

Process called "REG_R1" returns Integer:
    Return 1
End Process

Process called "REG_R2" returns Integer:
    Return 2
End Process

Process called "REG_R3" returns Integer:
    Return 3
End Process

Process called "REG_R4" returns Integer:
    Return 4  Note: Callee-saved
End Process

Process called "REG_R5" returns Integer:
    Return 5  Note: Callee-saved
End Process

Process called "REG_R6" returns Integer:
    Return 6  Note: Callee-saved
End Process

Process called "REG_R7" returns Integer:
    Return 7  Note: Callee-saved
End Process

Process called "REG_R8" returns Integer:
    Return 8  Note: Callee-saved
End Process

Process called "REG_R9" returns Integer:
    Return 9  Note: Callee-saved (platform register on some systems)
End Process

Process called "REG_R10" returns Integer:
    Return 10  Note: Callee-saved
End Process

Process called "REG_R11" returns Integer:
    Return 11  Note: Callee-saved (FP on some systems)
End Process

Process called "REG_R12" returns Integer:
    Return 12  Note: IP - Intra-procedure-call scratch register
End Process

Process called "REG_SP" returns Integer:
    Return 13  Note: Stack pointer
End Process

Process called "REG_LR" returns Integer:
    Return 14  Note: Link register (return address)
End Process

Process called "REG_PC" returns Integer:
    Return 15  Note: Program counter
End Process

Note: ============================================================================
Note: VFP SINGLE-PRECISION REGISTER CONSTANTS (S0-S31)
Note: ============================================================================

Note: VFP single-precision registers S0-S31
Note: Encoded as 16-47 to avoid conflict with GPRs
Note: S0-S15 are parameter/return registers
Note: S16-S31 are callee-saved

Process called "REG_S0" returns Integer:
    Return 16
End Process

Process called "REG_S1" returns Integer:
    Return 17
End Process

Process called "REG_S2" returns Integer:
    Return 18
End Process

Process called "REG_S3" returns Integer:
    Return 19
End Process

Process called "REG_S4" returns Integer:
    Return 20
End Process

Process called "REG_S5" returns Integer:
    Return 21
End Process

Process called "REG_S6" returns Integer:
    Return 22
End Process

Process called "REG_S7" returns Integer:
    Return 23
End Process

Process called "REG_S8" returns Integer:
    Return 24
End Process

Process called "REG_S9" returns Integer:
    Return 25
End Process

Process called "REG_S10" returns Integer:
    Return 26
End Process

Process called "REG_S11" returns Integer:
    Return 27
End Process

Process called "REG_S12" returns Integer:
    Return 28
End Process

Process called "REG_S13" returns Integer:
    Return 29
End Process

Process called "REG_S14" returns Integer:
    Return 30
End Process

Process called "REG_S15" returns Integer:
    Return 31
End Process

Process called "REG_S16" returns Integer:
    Return 32  Note: Callee-saved
End Process

Process called "REG_S17" returns Integer:
    Return 33  Note: Callee-saved
End Process

Process called "REG_S18" returns Integer:
    Return 34  Note: Callee-saved
End Process

Process called "REG_S19" returns Integer:
    Return 35  Note: Callee-saved
End Process

Process called "REG_S20" returns Integer:
    Return 36  Note: Callee-saved
End Process

Process called "REG_S21" returns Integer:
    Return 37  Note: Callee-saved
End Process

Process called "REG_S22" returns Integer:
    Return 38  Note: Callee-saved
End Process

Process called "REG_S23" returns Integer:
    Return 39  Note: Callee-saved
End Process

Process called "REG_S24" returns Integer:
    Return 40  Note: Callee-saved
End Process

Process called "REG_S25" returns Integer:
    Return 41  Note: Callee-saved
End Process

Process called "REG_S26" returns Integer:
    Return 42  Note: Callee-saved
End Process

Process called "REG_S27" returns Integer:
    Return 43  Note: Callee-saved
End Process

Process called "REG_S28" returns Integer:
    Return 44  Note: Callee-saved
End Process

Process called "REG_S29" returns Integer:
    Return 45  Note: Callee-saved
End Process

Process called "REG_S30" returns Integer:
    Return 46  Note: Callee-saved
End Process

Process called "REG_S31" returns Integer:
    Return 47  Note: Callee-saved
End Process

Note: ============================================================================
Note: VFP DOUBLE-PRECISION REGISTER CONSTANTS (D0-D31)
Note: ============================================================================

Note: VFP double-precision registers D0-D31
Note: Encoded as 48-79
Note: D0-D7 are parameter/return registers
Note: D8-D15 are callee-saved

Process called "REG_D0" returns Integer:
    Return 48
End Process

Process called "REG_D1" returns Integer:
    Return 49
End Process

Process called "REG_D2" returns Integer:
    Return 50
End Process

Process called "REG_D3" returns Integer:
    Return 51
End Process

Process called "REG_D4" returns Integer:
    Return 52
End Process

Process called "REG_D5" returns Integer:
    Return 53
End Process

Process called "REG_D6" returns Integer:
    Return 54
End Process

Process called "REG_D7" returns Integer:
    Return 55
End Process

Process called "REG_D8" returns Integer:
    Return 56  Note: Callee-saved
End Process

Process called "REG_D9" returns Integer:
    Return 57  Note: Callee-saved
End Process

Process called "REG_D10" returns Integer:
    Return 58  Note: Callee-saved
End Process

Process called "REG_D11" returns Integer:
    Return 59  Note: Callee-saved
End Process

Process called "REG_D12" returns Integer:
    Return 60  Note: Callee-saved
End Process

Process called "REG_D13" returns Integer:
    Return 61  Note: Callee-saved
End Process

Process called "REG_D14" returns Integer:
    Return 62  Note: Callee-saved
End Process

Process called "REG_D15" returns Integer:
    Return 63  Note: Callee-saved
End Process

Process called "REG_D16" returns Integer:
    Return 64
End Process

Process called "REG_D17" returns Integer:
    Return 65
End Process

Process called "REG_D18" returns Integer:
    Return 66
End Process

Process called "REG_D19" returns Integer:
    Return 67
End Process

Process called "REG_D20" returns Integer:
    Return 68
End Process

Process called "REG_D21" returns Integer:
    Return 69
End Process

Process called "REG_D22" returns Integer:
    Return 70
End Process

Process called "REG_D23" returns Integer:
    Return 71
End Process

Process called "REG_D24" returns Integer:
    Return 72
End Process

Process called "REG_D25" returns Integer:
    Return 73
End Process

Process called "REG_D26" returns Integer:
    Return 74
End Process

Process called "REG_D27" returns Integer:
    Return 75
End Process

Process called "REG_D28" returns Integer:
    Return 76
End Process

Process called "REG_D29" returns Integer:
    Return 77
End Process

Process called "REG_D30" returns Integer:
    Return 78
End Process

Process called "REG_D31" returns Integer:
    Return 79
End Process

Note: ============================================================================
Note: NEON QUAD-WORD REGISTER CONSTANTS (Q0-Q15)
Note: ============================================================================

Note: NEON quad-word (128-bit) registers Q0-Q15
Note: Encoded as 80-95
Note: Each Q register overlaps with two D registers

Process called "REG_Q0" returns Integer:
    Return 80
End Process

Process called "REG_Q1" returns Integer:
    Return 81
End Process

Process called "REG_Q2" returns Integer:
    Return 82
End Process

Process called "REG_Q3" returns Integer:
    Return 83
End Process

Process called "REG_Q4" returns Integer:
    Return 84
End Process

Process called "REG_Q5" returns Integer:
    Return 85
End Process

Process called "REG_Q6" returns Integer:
    Return 86
End Process

Process called "REG_Q7" returns Integer:
    Return 87
End Process

Process called "REG_Q8" returns Integer:
    Return 88
End Process

Process called "REG_Q9" returns Integer:
    Return 89
End Process

Process called "REG_Q10" returns Integer:
    Return 90
End Process

Process called "REG_Q11" returns Integer:
    Return 91
End Process

Process called "REG_Q12" returns Integer:
    Return 92
End Process

Process called "REG_Q13" returns Integer:
    Return 93
End Process

Process called "REG_Q14" returns Integer:
    Return 94
End Process

Process called "REG_Q15" returns Integer:
    Return 95
End Process

Note: ============================================================================
Note: REGISTER QUERY FUNCTIONS
Note: ============================================================================

Process called "get_integer_param_register" takes param_index as Integer returns Integer:
    Note: Get register number for integer parameter
    Note: ARM32 AAPCS: R0-R3 for first 4 integer parameters

    If param_index is equal to 0:
        Return 0  Note: R0
    End If

    If param_index is equal to 1:
        Return 1  Note: R1
    End If

    If param_index is equal to 2:
        Return 2  Note: R2
    End If

    If param_index is equal to 3:
        Return 3  Note: R3
    End If

    Return -1  Note: Parameters 4+ are passed on stack
End Process

Process called "get_integer_return_register" returns Integer:
    Note: Get register number for integer return value
    Note: ARM32 AAPCS: R0 for primary return value
    Return 0  Note: R0
End Process

Process called "get_secondary_return_register" returns Integer:
    Note: Get register number for secondary return value (64-bit returns)
    Note: ARM32 AAPCS: R1 for secondary return value (used with R0 for 64-bit)
    Return 1  Note: R1
End Process

Process called "get_max_integer_register_params" returns Integer:
    Note: Get maximum number of integer parameters in registers
    Note: ARM32 AAPCS: 4 registers (R0-R3)
    Return 4
End Process

Process called "get_stack_pointer_register" returns Integer:
    Note: Get stack pointer register number
    Return 13  Note: R13 (SP)
End Process

Process called "get_link_register" returns Integer:
    Note: Get link register number (stores return address)
    Return 14  Note: R14 (LR)
End Process

Process called "get_program_counter_register" returns Integer:
    Note: Get program counter register number
    Return 15  Note: R15 (PC)
End Process

Process called "get_frame_pointer_register" returns Integer:
    Note: Get frame pointer register number
    Note: Typically R11 is used as frame pointer in ARM32
    Return 11  Note: R11 (FP)
End Process

Process called "get_intra_procedure_scratch_register" returns Integer:
    Note: Get intra-procedure-call scratch register (IP)
    Note: R12 can be used by linker veneers and as scratch
    Return 12  Note: R12 (IP)
End Process

Process called "get_register_name" takes reg_num as Integer returns String:
    Note: Convert register number to ARM32 register name

    Note: General-purpose registers (0-15)
    If reg_num is equal to 0:
        Return "r0"
    End If
    If reg_num is equal to 1:
        Return "r1"
    End If
    If reg_num is equal to 2:
        Return "r2"
    End If
    If reg_num is equal to 3:
        Return "r3"
    End If
    If reg_num is equal to 4:
        Return "r4"
    End If
    If reg_num is equal to 5:
        Return "r5"
    End If
    If reg_num is equal to 6:
        Return "r6"
    End If
    If reg_num is equal to 7:
        Return "r7"
    End If
    If reg_num is equal to 8:
        Return "r8"
    End If
    If reg_num is equal to 9:
        Return "r9"
    End If
    If reg_num is equal to 10:
        Return "r10"
    End If
    If reg_num is equal to 11:
        Return "r11"
    End If
    If reg_num is equal to 12:
        Return "r12"
    End If
    If reg_num is equal to 13:
        Return "sp"  Note: R13
    End If
    If reg_num is equal to 14:
        Return "lr"  Note: R14
    End If
    If reg_num is equal to 15:
        Return "pc"  Note: R15
    End If

    Note: VFP S registers (16-47)
    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 47:
            Let s_num be reg_num minus 16
            If s_num is equal to 0:
                Return "s0"
            End If
            If s_num is equal to 1:
                Return "s1"
            End If
            If s_num is equal to 2:
                Return "s2"
            End If
            If s_num is equal to 3:
                Return "s3"
            End If
            If s_num is equal to 4:
                Return "s4"
            End If
            If s_num is equal to 5:
                Return "s5"
            End If
            If s_num is equal to 6:
                Return "s6"
            End If
            If s_num is equal to 7:
                Return "s7"
            End If
            If s_num is equal to 8:
                Return "s8"
            End If
            If s_num is equal to 9:
                Return "s9"
            End If
            If s_num is equal to 10:
                Return "s10"
            End If
            If s_num is equal to 11:
                Return "s11"
            End If
            If s_num is equal to 12:
                Return "s12"
            End If
            If s_num is equal to 13:
                Return "s13"
            End If
            If s_num is equal to 14:
                Return "s14"
            End If
            If s_num is equal to 15:
                Return "s15"
            End If
            Return "s?"  Note: S16-S31
        End If
    End If

    Note: VFP D registers (48-79)
    If reg_num is greater than or equal to 48:
        If reg_num is less than or equal to 79:
            Let d_num be reg_num minus 48
            If d_num is less than 10:
                Return "d?"
            End If
            Return "d?"
        End If
    End If

    Note: NEON Q registers (80-95)
    If reg_num is greater than or equal to 80:
        If reg_num is less than or equal to 95:
            Return "q?"
        End If
    End If

    Return "unknown"
End Process

Process called "encode_register" takes reg_num as Integer returns Integer:
    Note: Encode register number for machine code
    Note: For GPRs (0-15), return as-is
    Note: For FP registers, extract hardware encoding

    If reg_num is less than 16:
        Return reg_num  Note: GPR encoding
    End If

    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 47:
            Return reg_num minus 16  Note: S0-S31 map to 0-31
        End If
    End If

    If reg_num is greater than or equal to 48:
        If reg_num is less than or equal to 79:
            Return reg_num minus 48  Note: D0-D31 map to 0-31
        End If
    End If

    If reg_num is greater than or equal to 80:
        If reg_num is less than or equal to 95:
            Return reg_num minus 80  Note: Q0-Q15 map to 0-15
        End If
    End If

    Return 0  Note: Default to R0 if unknown
End Process

Note: ============================================================================
Note: VFP/FP REGISTER FUNCTIONS
Note: ============================================================================

Process called "get_fp_param_register" takes param_index as Integer returns Integer:
    Note: Get VFP register number for floating-point parameter
    Note: ARM32 AAPCS: S0-S15 or D0-D7 for FP parameters
    Note: Returns S register encoding (16-31)

    If param_index is equal to 0:
        Return 16  Note: S0
    End If
    If param_index is equal to 1:
        Return 17  Note: S1
    End If
    If param_index is equal to 2:
        Return 18  Note: S2
    End If
    If param_index is equal to 3:
        Return 19  Note: S3
    End If
    If param_index is equal to 4:
        Return 20  Note: S4
    End If
    If param_index is equal to 5:
        Return 21  Note: S5
    End If
    If param_index is equal to 6:
        Return 22  Note: S6
    End If
    If param_index is equal to 7:
        Return 23  Note: S7
    End If
    If param_index is equal to 8:
        Return 24  Note: S8
    End If
    If param_index is equal to 9:
        Return 25  Note: S9
    End If
    If param_index is equal to 10:
        Return 26  Note: S10
    End If
    If param_index is equal to 11:
        Return 27  Note: S11
    End If
    If param_index is equal to 12:
        Return 28  Note: S12
    End If
    If param_index is equal to 13:
        Return 29  Note: S13
    End If
    If param_index is equal to 14:
        Return 30  Note: S14
    End If
    If param_index is equal to 15:
        Return 31  Note: S15
    End If

    Return -1  Note: Parameters 16+ are passed on stack
End Process

Process called "get_fp_param_register_double" takes param_index as Integer returns Integer:
    Note: Get VFP double-precision register for parameter
    Note: ARM32 AAPCS: D0-D7 for double-precision FP parameters
    Note: Returns D register encoding (48-55)

    If param_index is equal to 0:
        Return 48  Note: D0
    End If
    If param_index is equal to 1:
        Return 49  Note: D1
    End If
    If param_index is equal to 2:
        Return 50  Note: D2
    End If
    If param_index is equal to 3:
        Return 51  Note: D3
    End If
    If param_index is equal to 4:
        Return 52  Note: D4
    End If
    If param_index is equal to 5:
        Return 53  Note: D5
    End If
    If param_index is equal to 6:
        Return 54  Note: D6
    End If
    If param_index is equal to 7:
        Return 55  Note: D7
    End If

    Return -1  Note: Parameters 8+ are passed on stack
End Process

Process called "get_fp_return_register" returns Integer:
    Note: Get VFP register number for floating-point return value
    Note: ARM32 AAPCS: S0 for single-precision FP return value
    Return 16  Note: S0
End Process

Process called "get_fp_return_register_double" returns Integer:
    Note: Get VFP register number for double-precision return value
    Note: ARM32 AAPCS: D0 for double-precision FP return value
    Return 48  Note: D0
End Process

Process called "get_max_fp_register_params" returns Integer:
    Note: Get maximum number of single-precision FP parameters in registers
    Note: ARM32 AAPCS with VFP: Up to 16 single-precision (S0-S15)
    Return 16
End Process

Process called "get_max_fp_register_params_double" returns Integer:
    Note: Get maximum number of double-precision FP parameters in registers
    Note: ARM32 AAPCS with VFP: Up to 8 double-precision (D0-D7)
    Return 8
End Process

Process called "is_gp_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is a general-purpose register
    Note: GPRs are 0-15

    If reg_num is greater than or equal to 0:
        If reg_num is less than or equal to 15:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_fp_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is a VFP/FP register
    Note: FP registers are encoded as 16-79 (S0-S31, D0-D31)

    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 79:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_neon_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is a NEON register
    Note: NEON Q registers are 80-95

    If reg_num is greater than or equal to 80:
        If reg_num is less than or equal to 95:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_callee_saved" takes reg_num as Integer returns Integer:
    Note: Check if register must be preserved by callee
    Note: ARM32 AAPCS: R4-R11, S16-S31 (D8-D15) are callee-saved

    Note: Callee-saved GPRs: R4-R11
    If reg_num is greater than or equal to 4:
        If reg_num is less than or equal to 11:
            Return 1  Note: True
        End If
    End If

    Note: Callee-saved VFP S registers: S16-S31 (encoded as 32-47)
    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 47:
            Return 1  Note: True
        End If
    End If

    Note: Callee-saved VFP D registers: D8-D15 (encoded as 56-63)
    If reg_num is greater than or equal to 56:
        If reg_num is less than or equal to 63:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False - caller-saved
End Process

Process called "is_caller_saved" takes reg_num as Integer returns Integer:
    Note: Check if register is caller-saved (volatile)
    Note: ARM32 AAPCS: R0-R3, R12, S0-S15, D0-D7 are caller-saved

    Note: Caller-saved GPRs: R0-R3
    If reg_num is greater than or equal to 0:
        If reg_num is less than or equal to 3:
            Return 1  Note: True
        End If
    End If

    Note: R12 (IP) is caller-saved
    If reg_num is equal to 12:
        Return 1  Note: True
    End If

    Note: Caller-saved VFP S registers: S0-S15 (encoded as 16-31)
    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 31:
            Return 1  Note: True
        End If
    End If

    Note: Caller-saved VFP D registers: D0-D7 (encoded as 48-55)
    If reg_num is greater than or equal to 48:
        If reg_num is less than or equal to 55:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False - callee-saved
End Process

Note: ============================================================================
Note: REGISTER ALLOCATION HELPERS
Note: ============================================================================

Process called "get_first_callee_saved_gpr" returns Integer:
    Note: Get first callee-saved general-purpose register
    Note: Useful for register allocation
    Return 4  Note: R4
End Process

Process called "get_last_callee_saved_gpr" returns Integer:
    Note: Get last callee-saved general-purpose register
    Return 11  Note: R11
End Process

Process called "get_callee_saved_gpr_count" returns Integer:
    Note: Get number of callee-saved GPRs
    Note: R4-R11 = 8 registers
    Return 8
End Process

Process called "get_first_caller_saved_gpr" returns Integer:
    Note: Get first caller-saved general-purpose register
    Return 0  Note: R0
End Process

Process called "get_last_caller_saved_gpr" returns Integer:
    Note: Get last caller-saved general-purpose register (excluding R12)
    Return 3  Note: R3
End Process

Process called "get_caller_saved_gpr_count" returns Integer:
    Note: Get number of caller-saved GPRs
    Note: R0-R3, R12 = 5 registers
    Return 5
End Process
