Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements Metal register primitives for Apple GPU execution in the Runa compiler frontend.

This file performs the following tasks:
- Process Metal register file definitions and Apple GPU register architecture support
- Handle Metal general-purpose registers and special-purpose registers with Apple GPU register allocation
- Manage Metal vector registers and SIMD register operations with thread group-level register management
- Process Metal register pressure analysis and spill code generation with Apple GPU memory hierarchy
- Handle Metal register coalescing and move elimination with Apple GPU optimization
- Process Metal register debugging support and performance monitoring with Apple GPU register usage analysis
- Handle integration with Runa's dual syntax system and mathematical symbol optimization
- Process Metal target architecture support and Apple GPU register optimization level management

This file is essential because of the following reasons:
- registers enables comprehensive Metal register architecture support and Apple GPU register management primitives
- Proper Metal registers ensure correct Apple GPU register allocation and optimization
- registers support enables Runa compiler for advanced Metal Apple GPU programming workflows

This file consists of the following functions/features/operation types:
- Metal register file definitions and Apple GPU register architecture support
- Metal general-purpose registers and special-purpose registers with Apple GPU register allocation
- Metal vector registers and SIMD register operations with thread group-level register management
- Metal register pressure analysis and spill code generation with Apple GPU memory hierarchy
- Metal register coalescing and move elimination with Apple GPU optimization
- Metal register debugging support and performance monitoring with Apple GPU register usage analysis
- Integration with Runa's dual syntax system and mathematical symbol optimization
- Metal target architecture support and Apple GPU register optimization level management
:End Note

Note: ============================================================================
Note: METAL ADDRESS SPACE IDENTIFIERS
Note: ============================================================================

Process called "METAL_ADDRESS_SPACE_DEVICE" returns Integer:
    Note: Device memory (GPU global memory)
    Return 0
End Process

Process called "METAL_ADDRESS_SPACE_CONSTANT" returns Integer:
    Note: Read-only constant memory
    Return 1
End Process

Process called "METAL_ADDRESS_SPACE_THREADGROUP" returns Integer:
    Note: Shared memory within threadgroup
    Return 2
End Process

Process called "METAL_ADDRESS_SPACE_THREAD" returns Integer:
    Note: Thread-local memory (registers/stack)
    Return 3
End Process

Note: ============================================================================
Note: METAL BUILT-IN VARIABLE INDICES
Note: ============================================================================

Process called "METAL_BUILTIN_THREAD_POSITION_IN_GRID" returns Integer:
    Note: Global thread ID (uint3)
    Return 0
End Process

Process called "METAL_BUILTIN_THREAD_POSITION_IN_THREADGROUP" returns Integer:
    Note: Local thread ID within threadgroup (uint3)
    Return 1
End Process

Process called "METAL_BUILTIN_THREADGROUP_POSITION_IN_GRID" returns Integer:
    Note: Threadgroup ID (uint3)
    Return 2
End Process

Process called "METAL_BUILTIN_THREAD_INDEX_IN_THREADGROUP" returns Integer:
    Note: Flattened local thread index (uint)
    Return 3
End Process

Process called "METAL_BUILTIN_THREADS_PER_THREADGROUP" returns Integer:
    Note: Threadgroup dimensions (uint3)
    Return 4
End Process

Process called "METAL_BUILTIN_THREADGROUPS_PER_GRID" returns Integer:
    Note: Grid dimensions (uint3)
    Return 5
End Process

Process called "METAL_BUILTIN_THREAD_INDEX_IN_SIMDGROUP" returns Integer:
    Note: Thread index within SIMD group (uint)
    Return 6
End Process

Process called "METAL_BUILTIN_THREADS_PER_SIMDGROUP" returns Integer:
    Note: SIMD group size (uint, typically 32)
    Return 7
End Process

Process called "METAL_BUILTIN_SIMDGROUP_INDEX_IN_THREADGROUP" returns Integer:
    Note: SIMD group index within threadgroup (uint)
    Return 8
End Process

Note: ============================================================================
Note: METAL BUFFER BINDING INDICES
Note: ============================================================================

Process called "get_kernel_arg_buffer_index" takes arg_index as Integer returns Integer:
    Note: Get buffer binding index for kernel argument
    Note: arg_index: Zero-based kernel argument position
    Note: Returns: Buffer binding index (0-29)

    If arg_index is less than 30:
        Return arg_index
    End If

    Return 29
End Process

Process called "get_max_kernel_buffers" returns Integer:
    Note: Maximum number of kernel argument buffers
    Note: Metal supports 31 buffer bindings (0-30)
    Note: Reserve index 30 for compiler-generated data
    Return 30
End Process

Note: ============================================================================
Note: METAL THREADGROUP MEMORY ALLOCATION
Note: ============================================================================

Process called "get_threadgroup_memory_index" takes memory_index as Integer returns Integer:
    Note: Get threadgroup memory allocation index
    Note: memory_index: Index of threadgroup memory allocation
    Note: Returns: Threadgroup memory binding index

    Return memory_index
End Process

Process called "get_max_threadgroup_memory_size" returns Integer:
    Note: Maximum threadgroup memory size
    Note: Apple Silicon: 32 KB typical
    Note: Intel GPUs: 16-32 KB depending on device
    Return 32768
End Process

Note: ============================================================================
Note: METAL THREAD HIERARCHY FUNCTIONS
Note: ============================================================================

Process called "get_thread_id_x_register" returns Integer:
    Note: Get register index for thread X position
    Note: Returns: Built-in variable index for thread_position_in_grid.x
    Return METAL_BUILTIN_THREAD_POSITION_IN_GRID()
End Process

Process called "get_thread_id_y_register" returns Integer:
    Note: Get register index for thread Y position
    Note: Returns: Built-in variable index for thread_position_in_grid.y
    Return METAL_BUILTIN_THREAD_POSITION_IN_GRID()
End Process

Process called "get_thread_id_z_register" returns Integer:
    Note: Get register index for thread Z position
    Note: Returns: Built-in variable index for thread_position_in_grid.z
    Return METAL_BUILTIN_THREAD_POSITION_IN_GRID()
End Process

Process called "get_local_thread_id_x_register" returns Integer:
    Note: Get register index for local thread X position
    Note: Returns: Built-in variable index for thread_position_in_threadgroup.x
    Return METAL_BUILTIN_THREAD_POSITION_IN_THREADGROUP()
End Process

Process called "get_local_thread_id_y_register" returns Integer:
    Note: Get register index for local thread Y position
    Note: Returns: Built-in variable index for thread_position_in_threadgroup.y
    Return METAL_BUILTIN_THREAD_POSITION_IN_THREADGROUP()
End Process

Process called "get_local_thread_id_z_register" returns Integer:
    Note: Get register index for local thread Z position
    Note: Returns: Built-in variable index for thread_position_in_threadgroup.z
    Return METAL_BUILTIN_THREAD_POSITION_IN_THREADGROUP()
End Process

Process called "get_threadgroup_id_x_register" returns Integer:
    Note: Get register index for threadgroup X position
    Note: Returns: Built-in variable index for threadgroup_position_in_grid.x
    Return METAL_BUILTIN_THREADGROUP_POSITION_IN_GRID()
End Process

Process called "get_threadgroup_id_y_register" returns Integer:
    Note: Get register index for threadgroup Y position
    Note: Returns: Built-in variable index for threadgroup_position_in_grid.y
    Return METAL_BUILTIN_THREADGROUP_POSITION_IN_GRID()
End Process

Process called "get_threadgroup_id_z_register" returns Integer:
    Note: Get register index for threadgroup Z position
    Note: Returns: Built-in variable index for threadgroup_position_in_grid.z
    Return METAL_BUILTIN_THREADGROUP_POSITION_IN_GRID()
End Process

Process called "get_local_thread_index_register" returns Integer:
    Note: Get register index for flattened local thread index
    Note: Returns: Built-in variable index for thread_index_in_threadgroup
    Return METAL_BUILTIN_THREAD_INDEX_IN_THREADGROUP()
End Process

Note: ============================================================================
Note: METAL SIMD GROUP FUNCTIONS
Note: ============================================================================

Process called "get_simd_lane_id_register" returns Integer:
    Note: Get register index for SIMD lane ID
    Note: Returns: Built-in variable index for thread_index_in_simdgroup
    Return METAL_BUILTIN_THREAD_INDEX_IN_SIMDGROUP()
End Process

Process called "get_simd_group_size_register" returns Integer:
    Note: Get register index for SIMD group size
    Note: Returns: Built-in variable index for threads_per_simdgroup
    Return METAL_BUILTIN_THREADS_PER_SIMDGROUP()
End Process

Process called "get_simd_group_index_register" returns Integer:
    Note: Get register index for SIMD group index
    Note: Returns: Built-in variable index for simdgroup_index_in_threadgroup
    Return METAL_BUILTIN_SIMDGROUP_INDEX_IN_THREADGROUP()
End Process

Note: ============================================================================
Note: METAL TEXTURE BINDING INDICES
Note: ============================================================================

Process called "get_texture_binding_index" takes texture_index as Integer returns Integer:
    Note: Get texture binding index
    Note: texture_index: Texture argument index
    Note: Returns: Texture binding index (0-127)

    If texture_index is less than 128:
        Return texture_index
    End If

    Return 127
End Process

Process called "get_max_texture_bindings" returns Integer:
    Note: Maximum number of texture bindings
    Note: Metal supports 128 texture bindings
    Return 128
End Process

Note: ============================================================================
Note: METAL SAMPLER BINDING INDICES
Note: ============================================================================

Process called "get_sampler_binding_index" takes sampler_index as Integer returns Integer:
    Note: Get sampler binding index
    Note: sampler_index: Sampler argument index
    Note: Returns: Sampler binding index (0-15)

    If sampler_index is less than 16:
        Return sampler_index
    End If

    Return 15
End Process

Process called "get_max_sampler_bindings" returns Integer:
    Note: Maximum number of sampler bindings
    Note: Metal supports 16 sampler bindings
    Return 16
End Process

Note: ============================================================================
Note: METAL RESOURCE ATTRIBUTE NAMES
Note: ============================================================================

Process called "get_buffer_attribute_name" takes buffer_index as Integer returns String:
    Note: Get MSL attribute name for buffer binding
    Note: buffer_index: Buffer binding index
    Note: Returns: MSL attribute string (e.g., "[[buffer(0)]]")

    If buffer_index is equal to 0:
        Return "[[buffer(0)]]"
    End If
    If buffer_index is equal to 1:
        Return "[[buffer(1)]]"
    End If
    If buffer_index is equal to 2:
        Return "[[buffer(2)]]"
    End If
    If buffer_index is equal to 3:
        Return "[[buffer(3)]]"
    End If
    If buffer_index is equal to 4:
        Return "[[buffer(4)]]"
    End If
    If buffer_index is equal to 5:
        Return "[[buffer(5)]]"
    End If
    If buffer_index is equal to 6:
        Return "[[buffer(6)]]"
    End If
    If buffer_index is equal to 7:
        Return "[[buffer(7)]]"
    End If
    If buffer_index is equal to 8:
        Return "[[buffer(8)]]"
    End If
    If buffer_index is equal to 9:
        Return "[[buffer(9)]]"
    End If

    Return "[[buffer(?)]]"
End Process

Process called "get_texture_attribute_name" takes texture_index as Integer returns String:
    Note: Get MSL attribute name for texture binding
    Note: texture_index: Texture binding index
    Note: Returns: MSL attribute string (e.g., "[[texture(0)]]")

    If texture_index is equal to 0:
        Return "[[texture(0)]]"
    End If
    If texture_index is equal to 1:
        Return "[[texture(1)]]"
    End If
    If texture_index is equal to 2:
        Return "[[texture(2)]]"
    End If

    Return "[[texture(?)]]"
End Process

Process called "get_threadgroup_attribute_name" returns String:
    Note: Get MSL attribute name for threadgroup memory
    Note: Returns: MSL attribute string "[[threadgroup(0)]]"
    Return "[[threadgroup(0)]]"
End Process

Note: ============================================================================
Note: METAL BUILT-IN VARIABLE NAMES
Note: ============================================================================

Process called "get_builtin_variable_name" takes builtin_index as Integer returns String:
    Note: Get MSL built-in variable name
    Note: builtin_index: Built-in variable index
    Note: Returns: MSL variable name

    If builtin_index is equal to METAL_BUILTIN_THREAD_POSITION_IN_GRID():
        Return "thread_position_in_grid"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREAD_POSITION_IN_THREADGROUP():
        Return "thread_position_in_threadgroup"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREADGROUP_POSITION_IN_GRID():
        Return "threadgroup_position_in_grid"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREAD_INDEX_IN_THREADGROUP():
        Return "thread_index_in_threadgroup"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREADS_PER_THREADGROUP():
        Return "threads_per_threadgroup"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREADGROUPS_PER_GRID():
        Return "threadgroups_per_grid"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREAD_INDEX_IN_SIMDGROUP():
        Return "thread_index_in_simdgroup"
    End If

    If builtin_index is equal to METAL_BUILTIN_THREADS_PER_SIMDGROUP():
        Return "threads_per_simdgroup"
    End If

    If builtin_index is equal to METAL_BUILTIN_SIMDGROUP_INDEX_IN_THREADGROUP():
        Return "simdgroup_index_in_threadgroup"
    End If

    Return "unknown_builtin"
End Process

Note: ============================================================================
Note: METAL ADDRESS SPACE QUALIFIERS
Note: ============================================================================

Process called "get_address_space_qualifier" takes address_space as Integer returns String:
    Note: Get MSL address space qualifier
    Note: address_space: Address space identifier
    Note: Returns: MSL address space keyword

    If address_space is equal to METAL_ADDRESS_SPACE_DEVICE():
        Return "device"
    End If

    If address_space is equal to METAL_ADDRESS_SPACE_CONSTANT():
        Return "constant"
    End If

    If address_space is equal to METAL_ADDRESS_SPACE_THREADGROUP():
        Return "threadgroup"
    End If

    If address_space is equal to METAL_ADDRESS_SPACE_THREAD():
        Return "thread"
    End If

    Return "device"
End Process

Note: ============================================================================
Note: METAL RESOURCE LAYOUT INFORMATION
Note: ============================================================================

Process called "calculate_threadgroup_dimensions" takes total_threads as Integer, max_threads_per_threadgroup as Integer, result_buffer as Integer returns Integer:
    Note: Calculate optimal threadgroup dimensions for 1D dispatch
    Note: total_threads: Total number of threads needed
    Note: max_threads_per_threadgroup: Maximum threads per threadgroup
    Note: result_buffer: Pointer to 6-integer array [tg_x, tg_y, tg_z, threads_x, threads_y, threads_z]
    Note: Returns: Number of threadgroups

    Let threads_per_tg be max_threads_per_threadgroup
    If threads_per_tg is greater than total_threads:
        Set threads_per_tg to total_threads
    End If

    Let num_threadgroups be total_threads divided by threads_per_tg
    Let remainder be total_threads modulo threads_per_tg
    If remainder is not equal to 0:
        Set num_threadgroups to num_threadgroups plus 1
    End If

    Return num_threadgroups
End Process

Process called "get_simd_group_size" returns Integer:
    Note: Get SIMD group size (warp size equivalent)
    Note: Apple Silicon: 32 threads per SIMD group
    Note: Intel GPUs: 32 threads per SIMD group (EU threads)
    Return 32
End Process

Process called "get_max_threadgroup_size" returns Integer:
    Note: Get maximum threadgroup size
    Note: Apple Silicon: 1024 threads
    Note: Intel GPUs: 512-1024 threads depending on device
    Return 1024
End Process

Process called "get_threadgroup_memory_alignment" returns Integer:
    Note: Get required alignment for threadgroup memory
    Note: Metal requires 16-byte alignment for threadgroup memory
    Return 16
End Process
