Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
Windows ARM64 System Call Implementation

CRITICAL ARCHITECTURAL NOTE:
Windows does NOT use stable syscall numbers like Linux. Syscall numbers change
between Windows versions (7, 8, 10, 11, Server editions). The traditional approach
is to use the Windows API (kernel32.dll, ntdll.dll) via dynamic linking.

This implementation provides direct syscalls for Windows 10/11 ARM64, but these
numbers are NOT guaranteed to work across all Windows versions. For production:
- Use dynamic linking to ntdll.dll (NtXxx functions)
- Use dynamic linking to kernel32.dll (higher-level API)
- Consider runtime syscall number detection

Platform-specific details:
- OS: Windows 10/11
- Architecture: ARM64 (AArch64)
- Syscall convention: X8 = syscall number, X0-X7 = arguments, stack for 8+
- Register usage: X8 (syscall#), X0-X7 (args 1-8), stack (args 9+)
- Syscall instruction: "svc #0" (supervisor call)

Windows ARM64 Syscall Convention:
- X8: Syscall number
- X0-X7: Arguments 1-8 (same as function calling convention)
- Stack: Arguments 9+ (16-byte aligned)
- X0: Return value (NTSTATUS code)

Windows Native API (NT API) vs Win32 API:
- NT API: ntdll.dll - lower level, closer to kernel (NtReadFile, NtWriteFile, etc.)
- Win32 API: kernel32.dll - higher level, user-friendly (ReadFile, WriteFile, etc.)
- This implementation focuses on NT API syscalls

IMPORTANT: These syscall numbers are for Windows 10 build 19041+ and Windows 11 ARM64.
They WILL break on older Windows versions.
:End Note

Note: ============================================================================
Note: WINDOWS NT API SYSCALL NUMBER CONSTANTS
Note: ============================================================================
Note: Syscall numbers for Windows 10 Build 19041+ / Windows 11 ARM64
Note: These numbers are NOT stable across Windows versions
Note: Source: Windows 10/11 ARM64 ntdll.dll analysis

Process called "NT_READ_FILE" returns Integer:
    Note: NtReadFile - Read from file handle
    Return 6
End Process

Process called "NT_WRITE_FILE" returns Integer:
    Note: NtWriteFile - Write to file handle
    Return 8
End Process

Process called "NT_CLOSE" returns Integer:
    Note: NtClose - Close handle
    Return 15
End Process

Process called "NT_CREATE_FILE" returns Integer:
    Note: NtCreateFile - Create or open file
    Return 85
End Process

Process called "NT_TERMINATE_PROCESS" returns Integer:
    Note: NtTerminateProcess - Terminate process
    Return 44
End Process

Process called "NT_ALLOCATE_VIRTUAL_MEMORY" returns Integer:
    Note: NtAllocateVirtualMemory - Allocate virtual memory
    Return 24
End Process

Process called "NT_FREE_VIRTUAL_MEMORY" returns Integer:
    Note: NtFreeVirtualMemory - Free virtual memory
    Return 30
End Process

Process called "NT_QUERY_INFORMATION_PROCESS" returns Integer:
    Note: NtQueryInformationProcess - Query process information
    Return 25
End Process

Process called "NT_QUERY_INFORMATION_FILE" returns Integer:
    Note: NtQueryInformationFile - Query file information
    Return 17
End Process

Process called "NT_SET_INFORMATION_FILE" returns Integer:
    Note: NtSetInformationFile - Set file information
    Return 39
End Process

Process called "NT_QUERY_SYSTEM_INFORMATION" returns Integer:
    Note: NtQuerySystemInformation - Query system information
    Return 54
End Process

Process called "NT_WAIT_FOR_SINGLE_OBJECT" returns Integer:
    Note: NtWaitForSingleObject - Wait for object to signal
    Return 4
End Process

Process called "NT_CREATE_THREAD" returns Integer:
    Note: NtCreateThread - Create a thread
    Return 78
End Process

Process called "NT_DELAY_EXECUTION" returns Integer:
    Note: NtDelayExecution - Sleep/delay execution
    Return 52
End Process

Process called "NT_QUERY_VIRTUAL_MEMORY" returns Integer:
    Note: NtQueryVirtualMemory - Query virtual memory information
    Return 35
End Process

Process called "NT_PROTECT_VIRTUAL_MEMORY" returns Integer:
    Note: NtProtectVirtualMemory - Change memory protection
    Return 80
End Process

Process called "NT_DUPLICATE_OBJECT" returns Integer:
    Note: NtDuplicateObject - Duplicate an object handle
    Return 60
End Process

Process called "NT_QUERY_OBJECT" returns Integer:
    Note: NtQueryObject - Query object information
    Return 16
End Process

Process called "NT_CREATE_EVENT" returns Integer:
    Note: NtCreateEvent - Create an event object
    Return 72
End Process

Process called "NT_SET_EVENT" returns Integer:
    Note: NtSetEvent - Set event to signaled state
    Return 14
End Process

Process called "NT_CLEAR_EVENT" returns Integer:
    Note: NtClearEvent - Clear event to non-signaled state
    Return 62
End Process

Process called "NT_OPEN_FILE" returns Integer:
    Note: NtOpenFile - Open existing file
    Return 51
End Process

Process called "NT_DELETE_FILE" returns Integer:
    Note: NtDeleteFile - Delete file
    Return 73
End Process

Process called "NT_QUERY_DIRECTORY_FILE" returns Integer:
    Note: NtQueryDirectoryFile - Query directory contents
    Return 53
End Process

Process called "NT_FLUSH_BUFFERS_FILE" returns Integer:
    Note: NtFlushBuffersFile - Flush file buffers
    Return 75
End Process

Process called "NT_LOCK_FILE" returns Integer:
    Note: NtLockFile - Lock region of file
    Return 66
End Process

Process called "NT_UNLOCK_FILE" returns Integer:
    Note: NtUnlockFile - Unlock region of file
    Return 67
End Process

Process called "NT_QUERY_VOLUME_INFORMATION_FILE" returns Integer:
    Note: NtQueryVolumeInformationFile - Query volume information
    Return 73
End Process

Process called "NT_SET_VOLUME_INFORMATION_FILE" returns Integer:
    Note: NtSetVolumeInformationFile - Set volume information
    Return 74
End Process

Process called "NT_CREATE_NAMED_PIPE_FILE" returns Integer:
    Note: NtCreateNamedPipeFile - Create named pipe
    Return 67
End Process

Process called "NT_CREATE_MAILSLOT_FILE" returns Integer:
    Note: NtCreateMailslotFile - Create mailslot
    Return 68
End Process

Process called "NT_CREATE_PROCESS" returns Integer:
    Note: NtCreateProcess - Create new process
    Return 79
End Process

Process called "NT_CREATE_PROCESS_EX" returns Integer:
    Note: NtCreateProcessEx - Create process (extended)
    Return 77
End Process

Process called "NT_OPEN_PROCESS" returns Integer:
    Note: NtOpenProcess - Open existing process
    Return 38
End Process

Process called "NT_RESUME_THREAD" returns Integer:
    Note: NtResumeThread - Resume suspended thread
    Return 82
End Process

Process called "NT_SUSPEND_THREAD" returns Integer:
    Note: NtSuspendThread - Suspend thread execution
    Return 83
End Process

Process called "NT_GET_CONTEXT_THREAD" returns Integer:
    Note: NtGetContextThread - Get thread context
    Return 84
End Process

Process called "NT_SET_CONTEXT_THREAD" returns Integer:
    Note: NtSetContextThread - Set thread context
    Return 85
End Process

Process called "NT_QUERY_INFORMATION_THREAD" returns Integer:
    Note: NtQueryInformationThread - Query thread information
    Return 37
End Process

Process called "NT_SET_INFORMATION_THREAD" returns Integer:
    Note: NtSetInformationThread - Set thread information
    Return 13
End Process

Process called "NT_OPEN_THREAD" returns Integer:
    Note: NtOpenThread - Open existing thread
    Return 129
End Process

Process called "NT_TERMINATE_THREAD" returns Integer:
    Note: NtTerminateThread - Terminate thread
    Return 83
End Process

Process called "NT_ALERT_THREAD" returns Integer:
    Note: NtAlertThread - Alert thread
    Return 86
End Process

Process called "NT_ALERT_RESUME_THREAD" returns Integer:
    Note: NtAlertResumeThread - Alert and resume thread
    Return 87
End Process

Process called "NT_MAP_VIEW_OF_SECTION" returns Integer:
    Note: NtMapViewOfSection - Map section into process
    Return 40
End Process

Process called "NT_UNMAP_VIEW_OF_SECTION" returns Integer:
    Note: NtUnmapViewOfSection - Unmap section from process
    Return 42
End Process

Process called "NT_CREATE_SECTION" returns Integer:
    Note: NtCreateSection - Create section object
    Return 74
End Process

Process called "NT_OPEN_SECTION" returns Integer:
    Note: NtOpenSection - Open existing section
    Return 55
End Process

Process called "NT_EXTEND_SECTION" returns Integer:
    Note: NtExtendSection - Extend section size
    Return 80
End Process

Process called "NT_FLUSH_VIRTUAL_MEMORY" returns Integer:
    Note: NtFlushVirtualMemory - Flush virtual memory
    Return 81
End Process

Process called "NT_READ_VIRTUAL_MEMORY" returns Integer:
    Note: NtReadVirtualMemory - Read process memory
    Return 63
End Process

Process called "NT_WRITE_VIRTUAL_MEMORY" returns Integer:
    Note: NtWriteVirtualMemory - Write process memory
    Return 58
End Process

Process called "NT_CREATE_MUTANT" returns Integer:
    Note: NtCreateMutant - Create mutex object
    Return 130
End Process

Process called "NT_OPEN_MUTANT" returns Integer:
    Note: NtOpenMutant - Open existing mutex
    Return 131
End Process

Process called "NT_RELEASE_MUTANT" returns Integer:
    Note: NtReleaseMutant - Release mutex ownership
    Return 32
End Process

Process called "NT_CREATE_SEMAPHORE" returns Integer:
    Note: NtCreateSemaphore - Create semaphore
    Return 132
End Process

Process called "NT_OPEN_SEMAPHORE" returns Integer:
    Note: NtOpenSemaphore - Open existing semaphore
    Return 133
End Process

Process called "NT_RELEASE_SEMAPHORE" returns Integer:
    Note: NtReleaseSemaphore - Release semaphore
    Return 10
End Process

Process called "NT_WAIT_FOR_MULTIPLE_OBJECTS" returns Integer:
    Note: NtWaitForMultipleObjects - Wait for multiple objects
    Return 91
End Process

Process called "NT_SIGNAL_AND_WAIT_FOR_SINGLE_OBJECT" returns Integer:
    Note: NtSignalAndWaitForSingleObject - Signal and wait atomically
    Return 92
End Process

Process called "NT_CREATE_KEY" returns Integer:
    Note: NtCreateKey - Create registry key
    Return 29
End Process

Process called "NT_OPEN_KEY" returns Integer:
    Note: NtOpenKey - Open existing registry key
    Return 18
End Process

Process called "NT_DELETE_KEY" returns Integer:
    Note: NtDeleteKey - Delete registry key
    Return 1126
End Process

Process called "NT_DELETE_VALUE_KEY" returns Integer:
    Note: NtDeleteValueKey - Delete registry value
    Return 1127
End Process

Process called "NT_ENUMERATE_KEY" returns Integer:
    Note: NtEnumerateKey - Enumerate registry subkeys
    Return 50
End Process

Process called "NT_ENUMERATE_VALUE_KEY" returns Integer:
    Note: NtEnumerateValueKey - Enumerate registry values
    Return 19
End Process

Process called "NT_FLUSH_KEY" returns Integer:
    Note: NtFlushKey - Flush registry key to disk
    Return 1128
End Process

Process called "NT_QUERY_KEY" returns Integer:
    Note: NtQueryKey - Query registry key information
    Return 22
End Process

Process called "NT_QUERY_VALUE_KEY" returns Integer:
    Note: NtQueryValueKey - Query registry value
    Return 23
End Process

Process called "NT_SET_VALUE_KEY" returns Integer:
    Note: NtSetValueKey - Set registry value
    Return 96
End Process

Process called "NT_LOAD_KEY" returns Integer:
    Note: NtLoadKey - Load registry hive
    Return 1129
End Process

Process called "NT_UNLOAD_KEY" returns Integer:
    Note: NtUnloadKey - Unload registry hive
    Return 1130
End Process

Process called "NT_RESTORE_KEY" returns Integer:
    Note: NtRestoreKey - Restore registry key
    Return 1131
End Process

Process called "NT_SAVE_KEY" returns Integer:
    Note: NtSaveKey - Save registry key
    Return 1132
End Process

Process called "NT_OPEN_PROCESS_TOKEN" returns Integer:
    Note: NtOpenProcessToken - Open process security token
    Return 290
End Process

Process called "NT_OPEN_THREAD_TOKEN" returns Integer:
    Note: NtOpenThreadToken - Open thread security token
    Return 36
End Process

Process called "NT_ADJUST_PRIVILEGES_TOKEN" returns Integer:
    Note: NtAdjustPrivilegesToken - Adjust token privileges
    Return 65
End Process

Process called "NT_ADJUST_GROUPS_TOKEN" returns Integer:
    Note: NtAdjustGroupsToken - Adjust token groups
    Return 1152
End Process

Process called "NT_DUPLICATE_TOKEN" returns Integer:
    Note: NtDuplicateToken - Duplicate security token
    Return 66
End Process

Process called "NT_QUERY_INFORMATION_TOKEN" returns Integer:
    Note: NtQueryInformationToken - Query token information
    Return 33
End Process

Process called "NT_SET_INFORMATION_TOKEN" returns Integer:
    Note: NtSetInformationToken - Set token information
    Return 1153
End Process

Process called "NT_SET_SECURITY_OBJECT" returns Integer:
    Note: NtSetSecurityObject - Set object security descriptor
    Return 1154
End Process

Process called "NT_QUERY_SECURITY_OBJECT" returns Integer:
    Note: NtQuerySecurityObject - Query object security descriptor
    Return 1155
End Process

Process called "NT_CREATE_SYMBOLIC_LINK_OBJECT" returns Integer:
    Note: NtCreateSymbolicLinkObject - Create symbolic link
    Return 1156
End Process

Process called "NT_OPEN_SYMBOLIC_LINK_OBJECT" returns Integer:
    Note: NtOpenSymbolicLinkObject - Open symbolic link
    Return 1157
End Process

Process called "NT_QUERY_SYMBOLIC_LINK_OBJECT" returns Integer:
    Note: NtQuerySymbolicLinkObject - Query symbolic link
    Return 1158
End Process

Process called "NT_CREATE_DIRECTORY_OBJECT" returns Integer:
    Note: NtCreateDirectoryObject - Create directory object
    Return 1159
End Process

Process called "NT_OPEN_DIRECTORY_OBJECT" returns Integer:
    Note: NtOpenDirectoryObject - Open directory object
    Return 88
End Process

Process called "NT_QUERY_DIRECTORY_OBJECT" returns Integer:
    Note: NtQueryDirectoryObject - Query directory object
    Return 1160
End Process

Process called "NT_CREATE_TIMER" returns Integer:
    Note: NtCreateTimer - Create timer object
    Return 1161
End Process

Process called "NT_OPEN_TIMER" returns Integer:
    Note: NtOpenTimer - Open existing timer
    Return 1162
End Process

Process called "NT_SET_TIMER" returns Integer:
    Note: NtSetTimer - Set timer
    Return 98
End Process

Process called "NT_CANCEL_TIMER" returns Integer:
    Note: NtCancelTimer - Cancel timer
    Return 99
End Process

Process called "NT_QUERY_TIMER" returns Integer:
    Note: NtQueryTimer - Query timer information
    Return 56
End Process

Process called "NT_CREATE_IO_COMPLETION" returns Integer:
    Note: NtCreateIoCompletion - Create I/O completion port
    Return 1163
End Process

Process called "NT_OPEN_IO_COMPLETION" returns Integer:
    Note: NtOpenIoCompletion - Open I/O completion port
    Return 1164
End Process

Process called "NT_QUERY_IO_COMPLETION" returns Integer:
    Note: NtQueryIoCompletion - Query I/O completion port
    Return 1165
End Process

Process called "NT_SET_IO_COMPLETION" returns Integer:
    Note: NtSetIoCompletion - Post to I/O completion port
    Return 1166
End Process

Process called "NT_REMOVE_IO_COMPLETION" returns Integer:
    Note: NtRemoveIoCompletion - Remove from I/O completion port
    Return 9
End Process

Process called "NT_CREATE_FILE_MAPPING" returns Integer:
    Note: NtCreateFileMapping - Create file mapping (alias for NtCreateSection)
    Return 74
End Process

Process called "NT_OPEN_FILE_MAPPING" returns Integer:
    Note: NtOpenFileMapping - Open file mapping (alias for NtOpenSection)
    Return 55
End Process

Process called "NT_DEVICE_IO_CONTROL_FILE" returns Integer:
    Note: NtDeviceIoControlFile - Send IOCTL to device
    Return 7
End Process

Process called "NT_FS_CONTROL_FILE" returns Integer:
    Note: NtFsControlFile - Send FSCTL to filesystem
    Return 57
End Process

Process called "NT_CREATE_PORT" returns Integer:
    Note: NtCreatePort - Create LPC port
    Return 1167
End Process

Process called "NT_CONNECT_PORT" returns Integer:
    Note: NtConnectPort - Connect to LPC port
    Return 1168
End Process

Process called "NT_LISTEN_PORT" returns Integer:
    Note: NtListenPort - Listen on LPC port
    Return 1169
End Process

Process called "NT_ACCEPT_CONNECT_PORT" returns Integer:
    Note: NtAcceptConnectPort - Accept LPC connection
    Return 1170
End Process

Process called "NT_REPLY_WAIT_RECEIVE_PORT" returns Integer:
    Note: NtReplyWaitReceivePort - Reply and wait on LPC port
    Return 11
End Process

Process called "NT_REQUEST_WAIT_REPLY_PORT" returns Integer:
    Note: NtRequestWaitReplyPort - Send LPC request and wait
    Return 34
End Process

Process called "NT_IMPERSONATE_CLIENT_OF_PORT" returns Integer:
    Note: NtImpersonateClientOfPort - Impersonate LPC client
    Return 1171
End Process

Process called "NT_CREATE_JOB_OBJECT" returns Integer:
    Note: NtCreateJobObject - Create job object
    Return 1172
End Process

Process called "NT_OPEN_JOB_OBJECT" returns Integer:
    Note: NtOpenJobObject - Open existing job object
    Return 1173
End Process

Process called "NT_ASSIGN_PROCESS_TO_JOB_OBJECT" returns Integer:
    Note: NtAssignProcessToJobObject - Assign process to job
    Return 1174
End Process

Process called "NT_QUERY_INFORMATION_JOB_OBJECT" returns Integer:
    Note: NtQueryInformationJobObject - Query job information
    Return 1175
End Process

Process called "NT_SET_INFORMATION_JOB_OBJECT" returns Integer:
    Note: NtSetInformationJobObject - Set job information
    Return 1176
End Process

Process called "NT_TERMINATE_JOB_OBJECT" returns Integer:
    Note: NtTerminateJobObject - Terminate job
    Return 1177
End Process

Process called "NT_CREATE_PROFILE" returns Integer:
    Note: NtCreateProfile - Create profiling object
    Return 1178
End Process

Process called "NT_START_PROFILE" returns Integer:
    Note: NtStartProfile - Start profiling
    Return 1179
End Process

Process called "NT_STOP_PROFILE" returns Integer:
    Note: NtStopProfile - Stop profiling
    Return 1180
End Process

Process called "NT_QUERY_INTERVAL_PROFILE" returns Integer:
    Note: NtQueryIntervalProfile - Query profile interval
    Return 1181
End Process

Process called "NT_SET_INTERVAL_PROFILE" returns Integer:
    Note: NtSetIntervalProfile - Set profile interval
    Return 1182
End Process

Process called "NT_QUERY_PERFORMANCE_COUNTER" returns Integer:
    Note: NtQueryPerformanceCounter - Query performance counter
    Return 49
End Process

Process called "NT_QUERY_SYSTEM_TIME" returns Integer:
    Note: NtQuerySystemTime - Query system time
    Return 1183
End Process

Process called "NT_SET_SYSTEM_TIME" returns Integer:
    Note: NtSetSystemTime - Set system time
    Return 1184
End Process

Process called "NT_QUERY_TIMER_RESOLUTION" returns Integer:
    Note: NtQueryTimerResolution - Query timer resolution
    Return 1185
End Process

Process called "NT_SET_TIMER_RESOLUTION" returns Integer:
    Note: NtSetTimerResolution - Set timer resolution
    Return 1186
End Process

Process called "NT_ALLOCATE_LOCALLY_UNIQUE_ID" returns Integer:
    Note: NtAllocateLocallyUniqueId - Allocate LUID
    Return 1187
End Process

Process called "NT_ALLOCATE_UUIDS" returns Integer:
    Note: NtAllocateUuids - Allocate UUIDs
    Return 1188
End Process

Process called "NT_CREATE_PAGING_FILE" returns Integer:
    Note: NtCreatePagingFile - Create paging file
    Return 1189
End Process

Process called "NT_SET_DEFAULT_LOCALE" returns Integer:
    Note: NtSetDefaultLocale - Set default locale
    Return 1190
End Process

Process called "NT_QUERY_DEFAULT_LOCALE" returns Integer:
    Note: NtQueryDefaultLocale - Query default locale
    Return 1191
End Process

Process called "NT_SET_DEFAULT_UI_LANGUAGE" returns Integer:
    Note: NtSetDefaultUILanguage - Set default UI language
    Return 1192
End Process

Process called "NT_QUERY_DEFAULT_UI_LANGUAGE" returns Integer:
    Note: NtQueryDefaultUILanguage - Query default UI language
    Return 1193
End Process

Process called "NT_QUERY_INSTALL_UI_LANGUAGE" returns Integer:
    Note: NtQueryInstallUILanguage - Query install UI language
    Return 1194
End Process

Process called "NT_CREATE_WAIT_COMPLETION_PACKET" returns Integer:
    Note: NtCreateWaitCompletionPacket - Create wait completion packet
    Return 1195
End Process

Process called "NT_ASSOCIATE_WAIT_COMPLETION_PACKET" returns Integer:
    Note: NtAssociateWaitCompletionPacket - Associate wait completion packet
    Return 1196
End Process

Process called "NT_CANCEL_WAIT_COMPLETION_PACKET" returns Integer:
    Note: NtCancelWaitCompletionPacket - Cancel wait completion packet
    Return 1197
End Process

Process called "NT_QUERY_EFI_VARIABLES" returns Integer:
    Note: NtQueryEfiVariables - Query EFI variables
    Return 1198
End Process

Process called "NT_SET_EFI_VARIABLES" returns Integer:
    Note: NtSetEfiVariables - Set EFI variables
    Return 1199
End Process

Process called "NT_QUERY_BOOT_OPTIONS" returns Integer:
    Note: NtQueryBootOptions - Query boot options
    Return 1200
End Process

Process called "NT_SET_BOOT_OPTIONS" returns Integer:
    Note: NtSetBootOptions - Set boot options
    Return 1201
End Process

Process called "NT_QUERY_BOOT_ENTRY_ORDER" returns Integer:
    Note: NtQueryBootEntryOrder - Query boot entry order
    Return 1202
End Process

Process called "NT_SET_BOOT_ENTRY_ORDER" returns Integer:
    Note: NtSetBootEntryOrder - Set boot entry order
    Return 1203
End Process

Process called "NT_ENUMERATE_BOOT_ENTRIES" returns Integer:
    Note: NtEnumerateBootEntries - Enumerate boot entries
    Return 1204
End Process

Process called "NT_QUERY_DRIVER_ENTRY_ORDER" returns Integer:
    Note: NtQueryDriverEntryOrder - Query driver entry order
    Return 1205
End Process

Process called "NT_SET_DRIVER_ENTRY_ORDER" returns Integer:
    Note: NtSetDriverEntryOrder - Set driver entry order
    Return 1206
End Process

Process called "NT_ENUMERATE_DRIVER_ENTRIES" returns Integer:
    Note: NtEnumerateDriverEntries - Enumerate driver entries
    Return 1207
End Process

Process called "NT_ADD_BOOT_ENTRY" returns Integer:
    Note: NtAddBootEntry - Add boot entry
    Return 1208
End Process

Process called "NT_DELETE_BOOT_ENTRY" returns Integer:
    Note: NtDeleteBootEntry - Delete boot entry
    Return 1209
End Process

Process called "NT_MODIFY_BOOT_ENTRY" returns Integer:
    Note: NtModifyBootEntry - Modify boot entry
    Return 1210
End Process

Process called "NT_ADD_DRIVER_ENTRY" returns Integer:
    Note: NtAddDriverEntry - Add driver entry
    Return 1211
End Process

Process called "NT_DELETE_DRIVER_ENTRY" returns Integer:
    Note: NtDeleteDriverEntry - Delete driver entry
    Return 1212
End Process

Process called "NT_MODIFY_DRIVER_ENTRY" returns Integer:
    Note: NtModifyDriverEntry - Modify driver entry
    Return 1213
End Process

Process called "NT_TRANSLATE_FILE_PATH" returns Integer:
    Note: NtTranslateFilePath - Translate file path
    Return 1214
End Process

Process called "NT_QUERY_LICENSE_VALUE" returns Integer:
    Note: NtQueryLicenseValue - Query license value
    Return 1215
End Process

Process called "NT_CREATE_RESOURCE_MANAGER" returns Integer:
    Note: NtCreateResourceManager - Create TM resource manager
    Return 1216
End Process

Process called "NT_OPEN_RESOURCE_MANAGER" returns Integer:
    Note: NtOpenResourceManager - Open TM resource manager
    Return 1217
End Process

Process called "NT_RECOVER_RESOURCE_MANAGER" returns Integer:
    Note: NtRecoverResourceManager - Recover resource manager
    Return 1218
End Process

Process called "NT_CREATE_TRANSACTION_MANAGER" returns Integer:
    Note: NtCreateTransactionManager - Create transaction manager
    Return 1219
End Process

Process called "NT_OPEN_TRANSACTION_MANAGER" returns Integer:
    Note: NtOpenTransactionManager - Open transaction manager
    Return 1220
End Process

Process called "NT_RECOVER_TRANSACTION_MANAGER" returns Integer:
    Note: NtRecoverTransactionManager - Recover transaction manager
    Return 1221
End Process

Process called "NT_CREATE_TRANSACTION" returns Integer:
    Note: NtCreateTransaction - Create transaction
    Return 1222
End Process

Process called "NT_OPEN_TRANSACTION" returns Integer:
    Note: NtOpenTransaction - Open transaction
    Return 1223
End Process

Process called "NT_QUERY_INFORMATION_TRANSACTION" returns Integer:
    Note: NtQueryInformationTransaction - Query transaction info
    Return 1224
End Process

Process called "NT_SET_INFORMATION_TRANSACTION" returns Integer:
    Note: NtSetInformationTransaction - Set transaction info
    Return 1225
End Process

Process called "NT_COMMIT_TRANSACTION" returns Integer:
    Note: NtCommitTransaction - Commit transaction
    Return 1226
End Process

Process called "NT_ROLLBACK_TRANSACTION" returns Integer:
    Note: NtRollbackTransaction - Rollback transaction
    Return 1227
End Process

Process called "NT_CREATE_ENLISTMENT" returns Integer:
    Note: NtCreateEnlistment - Create transaction enlistment
    Return 1228
End Process

Process called "NT_OPEN_ENLISTMENT" returns Integer:
    Note: NtOpenEnlistment - Open transaction enlistment
    Return 1229
End Process

Process called "NT_QUERY_INFORMATION_ENLISTMENT" returns Integer:
    Note: NtQueryInformationEnlistment - Query enlistment info
    Return 1230
End Process

Process called "NT_SET_INFORMATION_ENLISTMENT" returns Integer:
    Note: NtSetInformationEnlistment - Set enlistment info
    Return 1231
End Process

Process called "NT_RECOVER_ENLISTMENT" returns Integer:
    Note: NtRecoverEnlistment - Recover enlistment
    Return 1232
End Process

Process called "NT_PREPARE_COMPLETE" returns Integer:
    Note: NtPrepareComplete - Complete transaction prepare
    Return 1233
End Process

Process called "NT_PREPARE_ENLISTMENT" returns Integer:
    Note: NtPrepareEnlistment - Prepare enlistment
    Return 1234
End Process

Process called "NT_COMMIT_COMPLETE" returns Integer:
    Note: NtCommitComplete - Complete transaction commit
    Return 1235
End Process

Process called "NT_COMMIT_ENLISTMENT" returns Integer:
    Note: NtCommitEnlistment - Commit enlistment
    Return 1236
End Process

Process called "NT_ROLLBACK_COMPLETE" returns Integer:
    Note: NtRollbackComplete - Complete transaction rollback
    Return 1237
End Process

Process called "NT_ROLLBACK_ENLISTMENT" returns Integer:
    Note: NtRollbackEnlistment - Rollback enlistment
    Return 1238
End Process

Process called "NT_READONLY_ENLISTMENT" returns Integer:
    Note: NtReadOnlyEnlistment - Mark enlistment read-only
    Return 1239
End Process

Process called "NT_SINGLE_PHASE_REJECT" returns Integer:
    Note: NtSinglePhaseReject - Reject single-phase commit
    Return 1240
End Process

Process called "NT_CREATE_HARD_LINK" returns Integer:
    Note: NtCreateHardLink - Create hard link to file
    Return 1241
End Process

Process called "NT_CREATE_SYMBOLIC_LINK" returns Integer:
    Note: NtCreateSymbolicLink - Create symbolic link
    Return 1242
End Process

Process called "NT_QUERY_SYMBOLIC_LINK" returns Integer:
    Note: NtQuerySymbolicLink - Query symbolic link target
    Return 1243
End Process

Process called "NT_DELETE_VALUE_KEY_EXTENDED" returns Integer:
    Note: NtDeleteValueKeyExtended - Delete registry value (extended)
    Return 1244
End Process

Process called "NT_FSCTL_GET_REPARSE_POINT" returns Integer:
    Note: File system control - Get reparse point data
    Return 1245
End Process

Process called "NT_FSCTL_SET_REPARSE_POINT" returns Integer:
    Note: File system control - Set reparse point data
    Return 1246
End Process

Process called "NT_FSCTL_DELETE_REPARSE_POINT" returns Integer:
    Note: File system control - Delete reparse point
    Return 1247
End Process

Process called "NT_QUERY_EA_FILE" returns Integer:
    Note: NtQueryEaFile - Query extended attributes
    Return 1248
End Process

Process called "NT_SET_EA_FILE" returns Integer:
    Note: NtSetEaFile - Set extended attributes
    Return 1249
End Process

Process called "NT_POWER_INFORMATION" returns Integer:
    Note: NtPowerInformation - Query/set power information
    Return 1250
End Process

Process called "NT_INITIATE_POWER_ACTION" returns Integer:
    Note: NtInitiatePowerAction - Initiate power state change
    Return 1251
End Process

Process called "NT_SET_SYSTEM_POWER_STATE" returns Integer:
    Note: NtSetSystemPowerState - Set system power state
    Return 1252
End Process

Process called "NT_REQUEST_WAKE_UP_LATENCY" returns Integer:
    Note: NtRequestWakeupLatency - Request wakeup latency
    Return 1253
End Process

Process called "NT_DEBUG_ACTIVE_PROCESS" returns Integer:
    Note: NtDebugActiveProcess - Attach debugger to process
    Return 1254
End Process

Process called "NT_DEBUG_CONTINUE" returns Integer:
    Note: NtDebugContinue - Continue debugged process
    Return 1255
End Process

Process called "NT_REMOVE_PROCESS_DEBUG" returns Integer:
    Note: NtRemoveProcessDebug - Detach debugger from process
    Return 1256
End Process

Process called "NT_WAIT_FOR_DEBUG_EVENT" returns Integer:
    Note: NtWaitForDebugEvent - Wait for debug event
    Return 1257
End Process

Process called "NT_SET_INFORMATION_DEBUG_OBJECT" returns Integer:
    Note: NtSetInformationDebugObject - Set debug object information
    Return 1258
End Process

Process called "NT_QUERY_INFORMATION_DEBUG_OBJECT" returns Integer:
    Note: NtQueryInformationDebugObject - Query debug object information
    Return 1259
End Process

Process called "NT_RAISE_EXCEPTION" returns Integer:
    Note: NtRaiseException - Raise exception
    Return 1260
End Process

Process called "NT_RAISE_HARD_ERROR" returns Integer:
    Note: NtRaiseHardError - Raise hard error (system error dialog)
    Return 1261
End Process

Process called "NT_CONTINUE" returns Integer:
    Note: NtContinue - Continue execution after exception
    Return 1262
End Process

Process called "NT_GET_CONTEXT" returns Integer:
    Note: NtGetContext - Get thread context
    Return 1263
End Process

Process called "NT_SET_CONTEXT" returns Integer:
    Note: NtSetContext - Set thread context
    Return 1264
End Process

Process called "NT_CREATE_WORKER_FACTORY" returns Integer:
    Note: NtCreateWorkerFactory - Create worker thread pool factory
    Return 1265
End Process

Process called "NT_QUERY_INFORMATION_WORKER_FACTORY" returns Integer:
    Note: NtQueryInformationWorkerFactory - Query worker factory info
    Return 1266
End Process

Process called "NT_SET_INFORMATION_WORKER_FACTORY" returns Integer:
    Note: NtSetInformationWorkerFactory - Set worker factory info
    Return 1267
End Process

Process called "NT_SHUTDOWN_WORKER_FACTORY" returns Integer:
    Note: NtShutdownWorkerFactory - Shutdown worker factory
    Return 1268
End Process

Process called "NT_RELEASE_WORKER_FACTORY_WORKER" returns Integer:
    Note: NtReleaseWorkerFactoryWorker - Release worker thread
    Return 1269
End Process

Process called "NT_WORKER_FACTORY_WORKER_READY" returns Integer:
    Note: NtWorkerFactoryWorkerReady - Mark worker as ready
    Return 1270
End Process

Process called "NT_WAIT_FOR_WORKER_VIA_WORKER_FACTORY" returns Integer:
    Note: NtWaitForWorkerViaWorkerFactory - Wait for work
    Return 1271
End Process

Process called "NT_ALPC_CREATE_PORT" returns Integer:
    Note: NtAlpcCreatePort - Create ALPC port
    Return 1272
End Process

Process called "NT_ALPC_CONNECT_PORT" returns Integer:
    Note: NtAlpcConnectPort - Connect to ALPC port
    Return 1273
End Process

Process called "NT_ALPC_SEND_WAIT_RECEIVE_PORT" returns Integer:
    Note: NtAlpcSendWaitReceivePort - Send and wait on ALPC port
    Return 1274
End Process

Process called "NT_ALPC_DISCONNECT_PORT" returns Integer:
    Note: NtAlpcDisconnectPort - Disconnect from ALPC port
    Return 1275
End Process

Process called "NT_ALPC_QUERY_INFORMATION" returns Integer:
    Note: NtAlpcQueryInformation - Query ALPC information
    Return 1276
End Process

Process called "NT_ALPC_SET_INFORMATION" returns Integer:
    Note: NtAlpcSetInformation - Set ALPC information
    Return 1277
End Process

Process called "NT_ALPC_CREATE_PORT_SECTION" returns Integer:
    Note: NtAlpcCreatePortSection - Create ALPC port section
    Return 1278
End Process

Process called "NT_ALPC_DELETE_PORT_SECTION" returns Integer:
    Note: NtAlpcDeletePortSection - Delete ALPC port section
    Return 1279
End Process

Process called "NT_ALPC_CREATE_RESOURCE_RESERVE" returns Integer:
    Note: NtAlpcCreateResourceReserve - Create ALPC resource reserve
    Return 1280
End Process

Process called "NT_ALPC_DELETE_RESOURCE_RESERVE" returns Integer:
    Note: NtAlpcDeleteResourceReserve - Delete ALPC resource reserve
    Return 1281
End Process

Process called "NT_ALPC_CREATE_SECURITY_CONTEXT" returns Integer:
    Note: NtAlpcCreateSecurityContext - Create ALPC security context
    Return 1282
End Process

Process called "NT_ALPC_DELETE_SECURITY_CONTEXT" returns Integer:
    Note: NtAlpcDeleteSecurityContext - Delete ALPC security context
    Return 1283
End Process

Process called "NT_ALPC_REVOKE_SECURITY_CONTEXT" returns Integer:
    Note: NtAlpcRevokeSecurityContext - Revoke ALPC security context
    Return 1284
End Process

Process called "NT_ALPC_QUERY_INFORMATION_MESSAGE" returns Integer:
    Note: NtAlpcQueryInformationMessage - Query ALPC message info
    Return 1285
End Process

Process called "NT_ALPC_IMPERSONATE_CLIENT_OF_PORT" returns Integer:
    Note: NtAlpcImpersonateClientOfPort - Impersonate ALPC client
    Return 1286
End Process

Process called "NT_ALPC_OPEN_SENDER_PROCESS" returns Integer:
    Note: NtAlpcOpenSenderProcess - Open ALPC sender process
    Return 1287
End Process

Process called "NT_ALPC_OPEN_SENDER_THREAD" returns Integer:
    Note: NtAlpcOpenSenderThread - Open ALPC sender thread
    Return 1288
End Process

Process called "NT_SET_CACHED_SIGN_LEVEL" returns Integer:
    Note: NtSetCachedSignLevel - Set cached signature level
    Return 1289
End Process

Process called "NT_FLUSH_INSTRUCTION_CACHE" returns Integer:
    Note: NtFlushInstructionCache - Flush instruction cache
    Return 1290
End Process

Process called "NT_FLUSH_WRITE_BUFFER" returns Integer:
    Note: NtFlushWriteBuffer - Flush write buffer
    Return 1291
End Process

Process called "NT_QUERY_ATTRIBUTES_FILE" returns Integer:
    Note: NtQueryAttributesFile - Query file attributes
    Return 1292
End Process

Process called "NT_QUERY_FULL_ATTRIBUTES_FILE" returns Integer:
    Note: NtQueryFullAttributesFile - Query full file attributes
    Return 1293
End Process

Process called "NT_LOCK_VIRTUAL_MEMORY" returns Integer:
    Note: NtLockVirtualMemory - Lock pages in physical memory
    Return 1294
End Process

Process called "NT_UNLOCK_VIRTUAL_MEMORY" returns Integer:
    Note: NtUnlockVirtualMemory - Unlock pages from physical memory
    Return 1295
End Process

Process called "NT_MAP_USER_PHYSICAL_PAGES" returns Integer:
    Note: NtMapUserPhysicalPages - Map user physical pages
    Return 1296
End Process

Process called "NT_MAP_USER_PHYSICAL_PAGES_SCATTER" returns Integer:
    Note: NtMapUserPhysicalPagesScatter - Map scattered physical pages
    Return 1297
End Process

Process called "NT_ALLOCATE_USER_PHYSICAL_PAGES" returns Integer:
    Note: NtAllocateUserPhysicalPages - Allocate user physical pages
    Return 1298
End Process

Process called "NT_FREE_USER_PHYSICAL_PAGES" returns Integer:
    Note: NtFreeUserPhysicalPages - Free user physical pages
    Return 1299
End Process

Process called "NT_PLUG_PLAY_CONTROL" returns Integer:
    Note: NtPlugPlayControl - Plug and play control operations
    Return 1300
End Process

Process called "NT_GET_PLUG_PLAY_EVENT" returns Integer:
    Note: NtGetPlugPlayEvent - Get plug and play event
    Return 1301
End Process

Process called "NT_CANCEL_IO_FILE" returns Integer:
    Note: NtCancelIoFile - Cancel I/O operation on file
    Return 1302
End Process

Process called "NT_CANCEL_IO_FILE_EX" returns Integer:
    Note: NtCancelIoFileEx - Cancel I/O operation (extended)
    Return 1303
End Process

Process called "NT_CANCEL_SYNCHRONOUS_IO_FILE" returns Integer:
    Note: NtCancelSynchronousIoFile - Cancel synchronous I/O
    Return 1304
End Process

Process called "NT_QUERY_FULL_ATTRIBUTES_TOKEN" returns Integer:
    Note: NtQueryFullAttributesToken - Query full token attributes
    Return 1305
End Process

Process called "NT_FILTER_TOKEN" returns Integer:
    Note: NtFilterToken - Create filtered token
    Return 1306
End Process

Process called "NT_FILTER_TOKEN_EX" returns Integer:
    Note: NtFilterTokenEx - Create filtered token (extended)
    Return 1307
End Process

Process called "NT_COMPARE_TOKENS" returns Integer:
    Note: NtCompareTokens - Compare two tokens
    Return 1308
End Process

Process called "NT_CREATE_LOW_BOX_TOKEN" returns Integer:
    Note: NtCreateLowBoxToken - Create AppContainer token
    Return 1309
End Process

Process called "NT_QUERY_INFORMATION_BY_NAME" returns Integer:
    Note: NtQueryInformationByName - Query file info by name
    Return 1310
End Process

Process called "NT_SET_INFORMATION_BY_NAME" returns Integer:
    Note: NtSetInformationByName - Set file info by name
    Return 1311
End Process

Process called "NT_WOW64_CALL_FUNCTION64" returns Integer:
    Note: NtWow64CallFunction64 - Call 64-bit function from WOW64
    Return 1312
End Process

Process called "NT_WOW64_READ_VIRTUAL_MEMORY_64" returns Integer:
    Note: NtWow64ReadVirtualMemory64 - Read 64-bit memory from WOW64
    Return 1313
End Process

Process called "NT_WOW64_WRITE_VIRTUAL_MEMORY_64" returns Integer:
    Note: NtWow64WriteVirtualMemory64 - Write 64-bit memory from WOW64
    Return 1314
End Process

Process called "NT_WOW64_QUERY_INFORMATION_PROCESS_64" returns Integer:
    Note: NtWow64QueryInformationProcess64 - Query 64-bit process info
    Return 1315
End Process

Process called "NT_WOW64_ALLOCATE_VIRTUAL_MEMORY_64" returns Integer:
    Note: NtWow64AllocateVirtualMemory64 - Allocate 64-bit memory
    Return 1316
End Process

Process called "NT_WOW64_FREE_VIRTUAL_MEMORY_64" returns Integer:
    Note: NtWow64FreeVirtualMemory64 - Free 64-bit memory
    Return 1317
End Process

Process called "NT_QUERY_DIRECTORY_FILE_EX" returns Integer:
    Note: NtQueryDirectoryFileEx - Query directory (extended)
    Return 1318
End Process

Process called "NT_NOTIFY_CHANGE_DIRECTORY_FILE" returns Integer:
    Note: NtNotifyChangeDirectoryFile - Watch directory for changes
    Return 1319
End Process

Process called "NT_NOTIFY_CHANGE_DIRECTORY_FILE_EX" returns Integer:
    Note: NtNotifyChangeDirectoryFileEx - Watch directory (extended)
    Return 1320
End Process

Process called "NT_CREATE_USER_PROCESS" returns Integer:
    Note: NtCreateUserProcess - Create user-mode process
    Return 1321
End Process

Process called "NT_QUERY_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION" returns Integer:
    Note: NtQueryPortableWorkspaceEfiLauncherInformation
    Return 1322
End Process

Process called "NT_COMPARE_SIGNING_LEVELS" returns Integer:
    Note: NtCompareSigningLevels - Compare code signing levels
    Return 1323
End Process

Process called "NT_MANAGE_PARTITION" returns Integer:
    Note: NtManagePartition - Manage memory partition
    Return 1324
End Process

Process called "NT_COMMIT_REGISTRATION" returns Integer:
    Note: NtCommitRegistration - Commit registry transaction
    Return 1325
End Process

Process called "NT_ROLLBACK_REGISTRATION" returns Integer:
    Note: NtRollbackRegistration - Rollback registry transaction
    Return 1326
End Process

Process called "NT_SET_INFORMATION_VIRTUAL_MEMORY" returns Integer:
    Note: NtSetInformationVirtualMemory - Set virtual memory info
    Return 1327
End Process

Process called "NT_CREATE_ENCLAVE" returns Integer:
    Note: NtCreateEnclave - Create secure enclave
    Return 1328
End Process

Process called "NT_LOAD_ENCLAVE_DATA" returns Integer:
    Note: NtLoadEnclaveData - Load data into enclave
    Return 1329
End Process

Process called "NT_INITIALIZE_ENCLAVE" returns Integer:
    Note: NtInitializeEnclave - Initialize secure enclave
    Return 1330
End Process

Process called "NT_TERMINATE_ENCLAVE" returns Integer:
    Note: NtTerminateEnclave - Terminate secure enclave
    Return 1331
End Process

Process called "NT_CALL_ENCLAVE" returns Integer:
    Note: NtCallEnclave - Call function in secure enclave
    Return 1332
End Process

Process called "NT_CREATE_PARTITION" returns Integer:
    Note: NtCreatePartition - Create memory partition
    Return 1333
End Process

Process called "NT_OPEN_PARTITION" returns Integer:
    Note: NtOpenPartition - Open memory partition
    Return 1334
End Process

Process called "NT_QUERY_SYSTEM_INFORMATION_EX" returns Integer:
    Note: NtQuerySystemInformationEx - Query system info (extended)
    Return 1335
End Process

Process called "NT_SET_SYSTEM_INFORMATION" returns Integer:
    Note: NtSetSystemInformation - Set system information
    Return 1336
End Process

Process called "NT_QUERY_OBJECT_EX" returns Integer:
    Note: NtQueryObjectEx - Query object info (extended)
    Return 1337
End Process

Process called "NT_QUERY_QUOTA_INFORMATION_FILE" returns Integer:
    Note: NtQueryQuotaInformationFile - Query disk quota info
    Return 1338
End Process

Process called "NT_SET_QUOTA_INFORMATION_FILE" returns Integer:
    Note: NtSetQuotaInformationFile - Set disk quota info
    Return 1339
End Process

Process called "NT_QUERY_IO_RING_CAPABILITIES" returns Integer:
    Note: NtQueryIoRingCapabilities - Query I/O ring capabilities
    Return 1340
End Process

Process called "NT_CREATE_IO_RING" returns Integer:
    Note: NtCreateIoRing - Create I/O ring for async I/O
    Return 1341
End Process

Process called "NT_CLOSE_IO_RING" returns Integer:
    Note: NtCloseIoRing - Close I/O ring
    Return 1342
End Process

Process called "NT_SUBMIT_IO_RING" returns Integer:
    Note: NtSubmitIoRing - Submit I/O operations to ring
    Return 1343
End Process

Process called "NT_CONSUME_IO_RING_COMPLETION" returns Integer:
    Note: NtConsumeIoRingCompletion - Consume completed I/O
    Return 1344
End Process

Note: ============================================================================
Note: GENERIC SYSCALL WRAPPERS
Note: ============================================================================
Note: Windows ARM64 syscall convention:
Note: - X8 = syscall number
Note: - X0-X7 = arguments 1-8
Note: - Stack = arguments 9+ (16-byte aligned)
Note: - Return value in X0

Process called "syscall_0" takes syscall_number as Integer returns Integer:
    Note: Windows ARM64 syscall with 0 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-16]
    End Assembly
    Return result
End Process

Process called "syscall_1" takes syscall_number as Integer, arg1 as Integer returns Integer:
    Note: Windows ARM64 syscall with 1 argument
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-24]
    End Assembly
    Return result
End Process

Process called "syscall_2" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Note: Windows ARM64 syscall with 2 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Load argument 2 into X1
        ldr x1, [fp, #-24]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-32]
    End Assembly
    Return result
End Process

Process called "syscall_3" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer returns Integer:
    Note: Windows ARM64 syscall with 3 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Load argument 2 into X1
        ldr x1, [fp, #-24]

        // Load argument 3 into X2
        ldr x2, [fp, #-32]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-40]
    End Assembly
    Return result
End Process

Process called "syscall_4" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer returns Integer:
    Note: Windows ARM64 syscall with 4 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Load argument 2 into X1
        ldr x1, [fp, #-24]

        // Load argument 3 into X2
        ldr x2, [fp, #-32]

        // Load argument 4 into X3
        ldr x3, [fp, #-40]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-48]
    End Assembly
    Return result
End Process

Process called "syscall_5" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer returns Integer:
    Note: Windows ARM64 syscall with 5 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Load argument 2 into X1
        ldr x1, [fp, #-24]

        // Load argument 3 into X2
        ldr x2, [fp, #-32]

        // Load argument 4 into X3
        ldr x3, [fp, #-40]

        // Load argument 5 into X4
        ldr x4, [fp, #-48]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-56]
    End Assembly
    Return result
End Process

Process called "syscall_6" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer returns Integer:
    Note: Windows ARM64 syscall with 6 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load argument 1 into X0
        ldr x0, [fp, #-16]

        // Load argument 2 into X1
        ldr x1, [fp, #-24]

        // Load argument 3 into X2
        ldr x2, [fp, #-32]

        // Load argument 4 into X3
        ldr x3, [fp, #-40]

        // Load argument 5 into X4
        ldr x4, [fp, #-48]

        // Load argument 6 into X5
        ldr x5, [fp, #-56]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-64]
    End Assembly
    Return result
End Process

Process called "syscall_7" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer, arg7 as Integer returns Integer:
    Note: Windows ARM64 syscall with 7 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-7 into X0-X6
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]
        ldr x5, [fp, #-56]
        ldr x6, [fp, #-64]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-72]
    End Assembly
    Return result
End Process

Process called "syscall_8" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer, arg7 as Integer, arg8 as Integer returns Integer:
    Note: Windows ARM64 syscall with 8 arguments
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-8 into X0-X7
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]
        ldr x5, [fp, #-56]
        ldr x6, [fp, #-64]
        ldr x7, [fp, #-72]

        // Execute syscall
        svc #0

        // Store result from X0
        str x0, [fp, #-80]
    End Assembly
    Return result
End Process

Process called "syscall_9" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer, arg7 as Integer, arg8 as Integer, arg9 as Integer returns Integer:
    Note: Windows ARM64 syscall with 9 arguments
    Note: Argument 9 goes on stack
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-8 into X0-X7
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]
        ldr x5, [fp, #-56]
        ldr x6, [fp, #-64]
        ldr x7, [fp, #-72]

        // Load argument 9 and push to stack
        ldr x9, [fp, #-80]
        str x9, [sp, #-16]!

        // Execute syscall
        svc #0

        // Clean up stack
        add sp, sp, #16

        // Store result from X0
        str x0, [fp, #-88]
    End Assembly
    Return result
End Process

Process called "syscall_10" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer, arg7 as Integer, arg8 as Integer, arg9 as Integer, arg10 as Integer returns Integer:
    Note: Windows ARM64 syscall with 10 arguments
    Note: Arguments 9-10 go on stack
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-8 into X0-X7
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]
        ldr x5, [fp, #-56]
        ldr x6, [fp, #-64]
        ldr x7, [fp, #-72]

        // Load arguments 9-10 and push to stack (16-byte aligned)
        ldr x9, [fp, #-80]
        ldr x10, [fp, #-88]
        stp x9, x10, [sp, #-16]!

        // Execute syscall
        svc #0

        // Clean up stack
        add sp, sp, #16

        // Store result from X0
        str x0, [fp, #-96]
    End Assembly
    Return result
End Process

Process called "syscall_11" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer, arg7 as Integer, arg8 as Integer, arg9 as Integer, arg10 as Integer, arg11 as Integer returns Integer:
    Note: Windows ARM64 syscall with 11 arguments
    Note: Arguments 9-11 go on stack
    Let result be 0
    Inline Assembly:
        // Load syscall number into X8
        ldr x8, [fp, #-8]

        // Load arguments 1-8 into X0-X7
        ldr x0, [fp, #-16]
        ldr x1, [fp, #-24]
        ldr x2, [fp, #-32]
        ldr x3, [fp, #-40]
        ldr x4, [fp, #-48]
        ldr x5, [fp, #-56]
        ldr x6, [fp, #-64]
        ldr x7, [fp, #-72]

        // Allocate 32 bytes on stack (16-byte aligned, for args 9-11)
        sub sp, sp, #32

        // Load and store arguments 9-11 to stack
        ldr x9, [fp, #-80]
        str x9, [sp, #0]

        ldr x9, [fp, #-88]
        str x9, [sp, #8]

        ldr x9, [fp, #-96]
        str x9, [sp, #16]

        // Execute syscall
        svc #0

        // Clean up stack
        add sp, sp, #32

        // Store result from X0
        str x0, [fp, #-104]
    End Assembly
    Return result
End Process

Note: ============================================================================
Note: HIGH-LEVEL NT API WRAPPERS
Note: ============================================================================
Note: These provide convenient named functions for common NT syscalls

Process called "nt_read_file" takes file_handle as Integer, event as Integer, apc_routine as Integer, apc_context as Integer, io_status_block as Integer, buffer as Integer, length as Integer, byte_offset as Integer, key as Integer returns Integer:
    Note: NtReadFile - Read from file handle
    Note: Full signature with all NT API parameters (9 total)
    Let syscall_num be NT_READ_FILE()
    Return syscall_9(syscall_num, file_handle, event, apc_routine, apc_context, io_status_block, buffer, length, byte_offset, key)
End Process

Process called "nt_write_file" takes file_handle as Integer, event as Integer, apc_routine as Integer, apc_context as Integer, io_status_block as Integer, buffer as Integer, length as Integer, byte_offset as Integer, key as Integer returns Integer:
    Note: NtWriteFile - Write to file handle
    Note: Full signature with all NT API parameters (9 total)
    Let syscall_num be NT_WRITE_FILE()
    Return syscall_9(syscall_num, file_handle, event, apc_routine, apc_context, io_status_block, buffer, length, byte_offset, key)
End Process

Process called "nt_close" takes handle as Integer returns Integer:
    Note: NtClose - Close handle (file, event, thread, process, etc.)
    Let syscall_num be NT_CLOSE()
    Return syscall_1(syscall_num, handle)
End Process

Process called "nt_terminate_process" takes process_handle as Integer, exit_status as Integer returns Integer:
    Note: NtTerminateProcess - Terminate a process
    Let syscall_num be NT_TERMINATE_PROCESS()
    Return syscall_2(syscall_num, process_handle, exit_status)
End Process

Process called "nt_allocate_virtual_memory" takes process_handle as Integer, base_address_ptr as Integer, zero_bits as Integer, region_size_ptr as Integer, allocation_type as Integer, protect as Integer returns Integer:
    Note: NtAllocateVirtualMemory - Allocate virtual memory
    Let syscall_num be NT_ALLOCATE_VIRTUAL_MEMORY()
    Return syscall_6(syscall_num, process_handle, base_address_ptr, zero_bits, region_size_ptr, allocation_type, protect)
End Process

Process called "nt_free_virtual_memory" takes process_handle as Integer, base_address_ptr as Integer, region_size_ptr as Integer, free_type as Integer returns Integer:
    Note: NtFreeVirtualMemory - Free virtual memory
    Let syscall_num be NT_FREE_VIRTUAL_MEMORY()
    Return syscall_4(syscall_num, process_handle, base_address_ptr, region_size_ptr, free_type)
End Process

Process called "nt_delay_execution" takes alertable as Integer, delay_interval as Integer returns Integer:
    Note: NtDelayExecution - Sleep/delay execution
    Note: delay_interval: Pointer to LARGE_INTEGER (100-nanosecond units, negative = relative)
    Let syscall_num be NT_DELAY_EXECUTION()
    Return syscall_2(syscall_num, alertable, delay_interval)
End Process

Process called "nt_create_file" takes file_handle_ptr as Integer, desired_access as Integer, object_attributes as Integer, io_status_block as Integer, allocation_size as Integer, file_attributes as Integer, share_access as Integer, create_disposition as Integer, create_options as Integer, ea_buffer as Integer, ea_length as Integer returns Integer:
    Note: NtCreateFile - Create or open file
    Note: Full signature with all NT API parameters (11 total)
    Let syscall_num be NT_CREATE_FILE()
    Return syscall_11(syscall_num, file_handle_ptr, desired_access, object_attributes, io_status_block, allocation_size, file_attributes, share_access, create_disposition, create_options, ea_buffer, ea_length)
End Process

Note: ============================================================================
Note: WINDOWS CONSTANTS
Note: ============================================================================
Note: Common Windows constants for file operations, memory allocation, etc.

Process called "GENERIC_READ" returns Integer:
    Return -2147483648  Note: 0x80000000
End Process

Process called "GENERIC_WRITE" returns Integer:
    Return 1073741824  Note: 0x40000000
End Process

Process called "GENERIC_EXECUTE" returns Integer:
    Return 536870912  Note: 0x20000000
End Process

Process called "FILE_SHARE_READ" returns Integer:
    Return 1
End Process

Process called "FILE_SHARE_WRITE" returns Integer:
    Return 2
End Process

Process called "FILE_SHARE_DELETE" returns Integer:
    Return 4
End Process

Process called "CREATE_NEW" returns Integer:
    Return 1
End Process

Process called "CREATE_ALWAYS" returns Integer:
    Return 2
End Process

Process called "OPEN_EXISTING" returns Integer:
    Return 3
End Process

Process called "OPEN_ALWAYS" returns Integer:
    Return 4
End Process

Process called "TRUNCATE_EXISTING" returns Integer:
    Return 5
End Process

Process called "FILE_ATTRIBUTE_NORMAL" returns Integer:
    Return 128  Note: 0x80
End Process

Process called "FILE_ATTRIBUTE_READONLY" returns Integer:
    Return 1
End Process

Process called "FILE_ATTRIBUTE_HIDDEN" returns Integer:
    Return 2
End Process

Process called "FILE_ATTRIBUTE_SYSTEM" returns Integer:
    Return 4
End Process

Process called "MEM_COMMIT" returns Integer:
    Return 4096  Note: 0x1000
End Process

Process called "MEM_RESERVE" returns Integer:
    Return 8192  Note: 0x2000
End Process

Process called "MEM_RELEASE" returns Integer:
    Return 32768  Note: 0x8000
End Process

Process called "PAGE_NOACCESS" returns Integer:
    Return 1
End Process

Process called "PAGE_READONLY" returns Integer:
    Return 2
End Process

Process called "PAGE_READWRITE" returns Integer:
    Return 4
End Process

Process called "PAGE_EXECUTE" returns Integer:
    Return 16  Note: 0x10
End Process

Process called "PAGE_EXECUTE_READ" returns Integer:
    Return 32  Note: 0x20
End Process

Process called "PAGE_EXECUTE_READWRITE" returns Integer:
    Return 64  Note: 0x40
End Process

Process called "INVALID_HANDLE_VALUE" returns Integer:
    Return -1
End Process

Process called "STD_INPUT_HANDLE" returns Integer:
    Return -10
End Process

Process called "STD_OUTPUT_HANDLE" returns Integer:
    Return -11
End Process

Process called "STD_ERROR_HANDLE" returns Integer:
    Return -12
End Process

Process called "STATUS_SUCCESS" returns Integer:
    Return 0
End Process

Process called "STATUS_UNSUCCESSFUL" returns Integer:
    Return -1073741823  Note: 0xC0000001
End Process

Process called "STATUS_NOT_IMPLEMENTED" returns Integer:
    Return -1073741822  Note: 0xC0000002
End Process

Process called "STATUS_ACCESS_DENIED" returns Integer:
    Return -1073741790  Note: 0xC0000022
End Process

Process called "STATUS_OBJECT_NAME_NOT_FOUND" returns Integer:
    Return -1073741771  Note: 0xC0000034
End Process

Note: ============================================================================
Note: HELPER FUNCTIONS
Note: ============================================================================

Process called "is_nt_success" takes ntstatus as Integer returns Integer:
    Note: Check if NTSTATUS value indicates success
    Note: NTSTATUS >= 0 means success
    If ntstatus is greater than or equal to 0:
        Return 1
    End If
    Return 0
End Process

Process called "get_current_process_handle" returns Integer:
    Note: Pseudo-handle for current process
    Return -1  Note: Windows constant for current process
End Process

Process called "get_current_thread_handle" returns Integer:
    Note: Pseudo-handle for current thread
    Return -2  Note: Windows constant for current thread
End Process
