Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements x86-64 register definitions for Darwin (macOS).

Darwin x86-64 Register Architecture:
- RAX, RBX, RCX, RDX, RSI, RDI, RBP, RSP, R8-R15: 64-bit general-purpose registers
- EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP, R8D-R15D: 32-bit lower halves
- AX, BX, CX, DX, SI, DI, BP, SP, R8W-R15W: 16-bit lower halves
- AL, BL, CL, DL, SIL, DIL, BPL, SPL, R8B-R15B: 8-bit lower halves
- XMM0-XMM15: 128-bit SIMD/FP registers
- YMM0-YMM15: 256-bit extended SIMD registers (AVX)
- ZMM0-ZMM31: 512-bit extended SIMD registers (AVX-512)

Darwin x86-64 Calling Convention (System V AMD64 ABI):
- RDI, RSI, RDX, RCX, R8, R9: Integer parameter registers (6 parameters)
- RAX: Return value register (also used for variadic function count)
- RDX: Secondary return value register (128-bit returns use RDX:RAX)
- R10, R11: Caller-saved temporary registers
- RBX, R12-R15: Callee-saved registers
- RBP: Base/frame pointer (callee-saved, optional)
- RSP: Stack pointer
- XMM0-XMM7: FP parameter/return registers
- XMM8-XMM15: Caller-saved FP registers

Register Encoding:
- General-purpose registers: 0-15 (RAX-R15)
- SIMD/FP registers: 16-31 (encoding XMM0-XMM15 to avoid conflict with GPRs)

Platform: Darwin x86-64 - macOS on Intel/AMD
:End Note

Note: ============================================================================
Note: GENERAL-PURPOSE REGISTER CONSTANTS
Note: ============================================================================

Note: x86-64 System V ABI calling convention
Note: RDI, RSI, RDX, RCX, R8, R9 for first 6 integer parameters
Note: RAX for return value, RDX for secondary return
Note: RBX, R12-R15, RBP are callee-saved
Note: R10, R11 are caller-saved temporaries
Note: RSP is stack pointer

Process called "REG_RAX" returns Integer:
    Return 0  Note: Accumulator, return value register
End Process

Process called "REG_RCX" returns Integer:
    Return 1  Note: 4th parameter register
End Process

Process called "REG_RDX" returns Integer:
    Return 2  Note: 3rd parameter, secondary return value
End Process

Process called "REG_RBX" returns Integer:
    Return 3  Note: Callee-saved base register
End Process

Process called "REG_RSP" returns Integer:
    Return 4  Note: Stack pointer
End Process

Process called "REG_RBP" returns Integer:
    Return 5  Note: Base/frame pointer (callee-saved)
End Process

Process called "REG_RSI" returns Integer:
    Return 6  Note: 2nd parameter register (source index)
End Process

Process called "REG_RDI" returns Integer:
    Return 7  Note: 1st parameter register (destination index)
End Process

Process called "REG_R8" returns Integer:
    Return 8  Note: 5th parameter register
End Process

Process called "REG_R9" returns Integer:
    Return 9  Note: 6th parameter register
End Process

Process called "REG_R10" returns Integer:
    Return 10  Note: Caller-saved temporary
End Process

Process called "REG_R11" returns Integer:
    Return 11  Note: Caller-saved temporary
End Process

Process called "REG_R12" returns Integer:
    Return 12  Note: Callee-saved
End Process

Process called "REG_R13" returns Integer:
    Return 13  Note: Callee-saved
End Process

Process called "REG_R14" returns Integer:
    Return 14  Note: Callee-saved
End Process

Process called "REG_R15" returns Integer:
    Return 15  Note: Callee-saved
End Process

Note: ============================================================================
Note: SIMD/FP REGISTER CONSTANTS
Note: ============================================================================

Note: XMM0-XMM15 are 128-bit SSE registers
Note: Can be accessed as:
Note: - XMM registers (128-bit SIMD)
Note: - Used for scalar double/single precision operations
Note: XMM0-XMM7 used for FP parameters and return values
Note: XMM0-XMM15 are all caller-saved (no callee-saved FP registers)

Note: We encode SIMD/FP registers as 16-31 to avoid conflict with GPRs
Process called "REG_XMM0" returns Integer:
    Return 16  Note: 1st FP parameter, FP return value
End Process

Process called "REG_XMM1" returns Integer:
    Return 17  Note: 2nd FP parameter
End Process

Process called "REG_XMM2" returns Integer:
    Return 18  Note: 3rd FP parameter
End Process

Process called "REG_XMM3" returns Integer:
    Return 19  Note: 4th FP parameter
End Process

Process called "REG_XMM4" returns Integer:
    Return 20  Note: 5th FP parameter
End Process

Process called "REG_XMM5" returns Integer:
    Return 21  Note: 6th FP parameter
End Process

Process called "REG_XMM6" returns Integer:
    Return 22  Note: 7th FP parameter
End Process

Process called "REG_XMM7" returns Integer:
    Return 23  Note: 8th FP parameter
End Process

Process called "REG_XMM8" returns Integer:
    Return 24  Note: Caller-saved temporary
End Process

Process called "REG_XMM9" returns Integer:
    Return 25  Note: Caller-saved temporary
End Process

Process called "REG_XMM10" returns Integer:
    Return 26  Note: Caller-saved temporary
End Process

Process called "REG_XMM11" returns Integer:
    Return 27  Note: Caller-saved temporary
End Process

Process called "REG_XMM12" returns Integer:
    Return 28  Note: Caller-saved temporary
End Process

Process called "REG_XMM13" returns Integer:
    Return 29  Note: Caller-saved temporary
End Process

Process called "REG_XMM14" returns Integer:
    Return 30  Note: Caller-saved temporary
End Process

Process called "REG_XMM15" returns Integer:
    Return 31  Note: Caller-saved temporary
End Process

Note: ============================================================================
Note: REGISTER QUERY FUNCTIONS
Note: ============================================================================

Process called "get_param_register" takes param_index as Integer returns Integer:
    Note: Get register number for integer parameter
    Note: Darwin x86-64: RDI, RSI, RDX, RCX, R8, R9 for first 6 parameters

    If param_index is equal to 0:
        Return 7  Note: RDI
    End If

    If param_index is equal to 1:
        Return 6  Note: RSI
    End If

    If param_index is equal to 2:
        Return 2  Note: RDX
    End If

    If param_index is equal to 3:
        Return 1  Note: RCX
    End If

    If param_index is equal to 4:
        Return 8  Note: R8
    End If

    If param_index is equal to 5:
        Return 9  Note: R9
    End If

    Return -1  Note: Parameters 6+ are passed on stack
End Process

Process called "get_return_register" returns Integer:
    Note: Get register number for integer return value
    Note: Darwin x86-64: RAX for primary return value, RDX for secondary
    Return 0  Note: RAX
End Process

Process called "get_secondary_return_register" returns Integer:
    Note: Get register number for secondary return value (128-bit returns)
    Note: Darwin x86-64: RDX:RAX for 128-bit returns
    Return 2  Note: RDX
End Process

Process called "get_max_register_params" returns Integer:
    Note: Get maximum number of integer parameters in registers
    Note: Darwin x86-64: 6 registers (RDI, RSI, RDX, RCX, R8, R9)
    Return 6
End Process

Process called "get_frame_pointer_register" returns Integer:
    Note: Get frame pointer register number
    Return 5  Note: RBP
End Process

Process called "get_stack_pointer_register" returns Integer:
    Note: Get stack pointer register number
    Return 4  Note: RSP
End Process

Process called "get_register_name" takes reg_num as Integer returns String:
    Note: Convert register number to x86-64 register name

    If reg_num is equal to 0:
        Return "rax"
    End If

    If reg_num is equal to 1:
        Return "rcx"
    End If

    If reg_num is equal to 2:
        Return "rdx"
    End If

    If reg_num is equal to 3:
        Return "rbx"
    End If

    If reg_num is equal to 4:
        Return "rsp"
    End If

    If reg_num is equal to 5:
        Return "rbp"
    End If

    If reg_num is equal to 6:
        Return "rsi"
    End If

    If reg_num is equal to 7:
        Return "rdi"
    End If

    If reg_num is equal to 8:
        Return "r8"
    End If

    If reg_num is equal to 9:
        Return "r9"
    End If

    If reg_num is equal to 10:
        Return "r10"
    End If

    If reg_num is equal to 11:
        Return "r11"
    End If

    If reg_num is equal to 12:
        Return "r12"
    End If

    If reg_num is equal to 13:
        Return "r13"
    End If

    If reg_num is equal to 14:
        Return "r14"
    End If

    If reg_num is equal to 15:
        Return "r15"
    End If

    Note: SIMD/FP registers (16-31 map to XMM0-XMM15)
    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 31:
            Let xmm_num be reg_num minus 16

            If xmm_num is equal to 0:
                Return "xmm0"
            End If
            If xmm_num is equal to 1:
                Return "xmm1"
            End If
            If xmm_num is equal to 2:
                Return "xmm2"
            End If
            If xmm_num is equal to 3:
                Return "xmm3"
            End If
            If xmm_num is equal to 4:
                Return "xmm4"
            End If
            If xmm_num is equal to 5:
                Return "xmm5"
            End If
            If xmm_num is equal to 6:
                Return "xmm6"
            End If
            If xmm_num is equal to 7:
                Return "xmm7"
            End If
            If xmm_num is equal to 8:
                Return "xmm8"
            End If
            If xmm_num is equal to 9:
                Return "xmm9"
            End If
            If xmm_num is equal to 10:
                Return "xmm10"
            End If
            If xmm_num is equal to 11:
                Return "xmm11"
            End If
            If xmm_num is equal to 12:
                Return "xmm12"
            End If
            If xmm_num is equal to 13:
                Return "xmm13"
            End If
            If xmm_num is equal to 14:
                Return "xmm14"
            End If
            If xmm_num is equal to 15:
                Return "xmm15"
            End If
        End If
    End If

    Return "unknown"
End Process

Note: ============================================================================
Note: SIMD/FP REGISTER FUNCTIONS
Note: ============================================================================

Process called "get_fp_param_register" takes param_index as Integer returns Integer:
    Note: Get SIMD/FP register number for floating-point parameter
    Note: Darwin x86-64: XMM0-XMM7 for first 8 FP parameters
    Note: Returns register number in 16-31 range (XMM0-XMM15)

    If param_index is equal to 0:
        Return 16  Note: XMM0
    End If

    If param_index is equal to 1:
        Return 17  Note: XMM1
    End If

    If param_index is equal to 2:
        Return 18  Note: XMM2
    End If

    If param_index is equal to 3:
        Return 19  Note: XMM3
    End If

    If param_index is equal to 4:
        Return 20  Note: XMM4
    End If

    If param_index is equal to 5:
        Return 21  Note: XMM5
    End If

    If param_index is equal to 6:
        Return 22  Note: XMM6
    End If

    If param_index is equal to 7:
        Return 23  Note: XMM7
    End If

    Return -1  Note: Parameters 8+ are passed on stack
End Process

Process called "get_fp_return_register" returns Integer:
    Note: Get SIMD/FP register number for floating-point return value
    Note: Darwin x86-64: XMM0 for FP return value
    Return 16  Note: XMM0
End Process

Process called "get_max_fp_register_params" returns Integer:
    Note: Get maximum number of FP parameters in registers
    Note: Darwin x86-64: 8 registers (XMM0-XMM7)
    Return 8
End Process

Process called "is_fp_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is a SIMD/FP register
    Note: FP registers are encoded as 16-31

    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 31:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_callee_saved" takes reg_num as Integer returns Integer:
    Note: Check if register must be preserved by callee
    Note: Darwin x86-64: RBX, RBP, R12-R15 are callee-saved
    Note: All XMM registers are caller-saved

    Note: RBX (3)
    If reg_num is equal to 3:
        Return 1  Note: True
    End If

    Note: RBP (5)
    If reg_num is equal to 5:
        Return 1  Note: True
    End If

    Note: R12-R15 (12-15)
    If reg_num is greater than or equal to 12:
        If reg_num is less than or equal to 15:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False - caller-saved or FP register
End Process

Process called "is_caller_saved" takes reg_num as Integer returns Integer:
    Note: Check if register is caller-saved (callee can clobber)
    Note: Darwin x86-64: RAX, RCX, RDX, RSI, RDI, R8-R11, all XMM registers

    Note: RAX (0)
    If reg_num is equal to 0:
        Return 1  Note: True
    End If

    Note: RCX (1)
    If reg_num is equal to 1:
        Return 1  Note: True
    End If

    Note: RDX (2)
    If reg_num is equal to 2:
        Return 1  Note: True
    End If

    Note: RSI (6)
    If reg_num is equal to 6:
        Return 1  Note: True
    End If

    Note: RDI (7)
    If reg_num is equal to 7:
        Return 1  Note: True
    End If

    Note: R8-R11 (8-11)
    If reg_num is greater than or equal to 8:
        If reg_num is less than or equal to 11:
            Return 1  Note: True
        End If
    End If

    Note: All FP registers (16-31) are caller-saved
    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 31:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False - callee-saved
End Process

Process called "get_scratch_register" returns Integer:
    Note: Get a scratch register for temporary use
    Note: R10 is a good choice as it's caller-saved and not used for parameters
    Return 10  Note: R10
End Process

Process called "get_secondary_scratch_register" returns Integer:
    Note: Get a secondary scratch register
    Note: R11 is caller-saved and not used for parameters
    Return 11  Note: R11
End Process
