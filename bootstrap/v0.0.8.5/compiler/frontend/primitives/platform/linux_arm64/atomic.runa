Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions
Licensed under the Apache License, Version 2.0
:End Note

Note:
LINUX ARM64 ATOMIC OPERATIONS
Platform-specific atomic operations using ARMv8-A inline assembly.

ARM64 Memory Model: Weakly Ordered
- Loads and stores can be reordered aggressively
- Need explicit acquire/release semantics
- LDAXR/STLXR for load-exclusive/store-exclusive with ordering

Instructions:
- LDR/STR: Regular load/store (can be reordered)
- LDAXR: Load-acquire exclusive (prevents reordering after)
- STLXR: Store-release exclusive (prevents reordering before)
- DMB: Data memory barrier
- DSB: Data synchronization barrier
- ISB: Instruction synchronization barrier
:End Note

Process called "atomic_load_relaxed" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]   // Load ptr
        ldr x1, [x0]        // Relaxed load
        str x1, [fp, #-16]  // Store result
    End Assembly
    Return result
End Process

Process called "atomic_load_acquire" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldar x1, [x0]       // Load-acquire (prevents reordering after)
        str x1, [fp, #-16]
    End Assembly
    Return result
End Process

Process called "atomic_load_seq_cst" takes ptr as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldar x1, [x0]       // Load-acquire
        dmb ish             // Full barrier for seq_cst
        str x1, [fp, #-16]
    End Assembly
    Return result
End Process

Process called "atomic_store_relaxed" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ldr x0, [fp, #-8]   // ptr
        ldr x1, [fp, #-16]  // value
        str x1, [x0]        // Relaxed store
    End Assembly
    Return 0
End Process

Process called "atomic_store_release" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]
        stlr x1, [x0]       // Store-release (prevents reordering before)
    End Assembly
    Return 0
End Process

Process called "atomic_store_seq_cst" takes ptr as Integer, value as Integer returns Integer:
    Inline Assembly:
        dmb ish             // Full barrier before
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]
        stlr x1, [x0]       // Store-release
    End Assembly
    Return 0
End Process

Process called "atomic_fetch_add" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]   // ptr
        ldr x1, [fp, #-16]  // value

        .retry:
        ldaxr x2, [x0]      // Load-acquire exclusive
        add x3, x2, x1      // Add value
        stlxr w4, x3, [x0]  // Store-release exclusive
        cbnz w4, .retry     // Retry if store failed

        str x2, [fp, #-24]  // Return OLD value
    End Assembly
    Return result
End Process

Process called "atomic_fetch_sub" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]

        .retry:
        ldaxr x2, [x0]
        sub x3, x2, x1      // Subtract value
        stlxr w4, x3, [x0]
        cbnz w4, .retry

        str x2, [fp, #-24]
    End Assembly
    Return result
End Process

Process called "atomic_fetch_and" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]

        .retry:
        ldaxr x2, [x0]
        and x3, x2, x1
        stlxr w4, x3, [x0]
        cbnz w4, .retry

        str x2, [fp, #-24]
    End Assembly
    Return result
End Process

Process called "atomic_fetch_or" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]

        .retry:
        ldaxr x2, [x0]
        orr x3, x2, x1
        stlxr w4, x3, [x0]
        cbnz w4, .retry

        str x2, [fp, #-24]
    End Assembly
    Return result
End Process

Process called "atomic_fetch_xor" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]

        .retry:
        ldaxr x2, [x0]
        eor x3, x2, x1
        stlxr w4, x3, [x0]
        cbnz w4, .retry

        str x2, [fp, #-24]
    End Assembly
    Return result
End Process

Process called "atomic_compare_and_swap" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]   // ptr
        ldr x1, [fp, #-16]  // expected
        ldr x2, [fp, #-24]  // desired

        ldaxr x3, [x0]      // Load-acquire exclusive
        cmp x3, x1          // Compare with expected
        b.ne .failed        // Jump if not equal

        stlxr w4, x2, [x0]  // Try store-release exclusive
        cbnz w4, .failed    // Failed if w4 != 0

        mov x5, #1          // Success
        b .done

        .failed:
        clrex               // Clear exclusive monitor
        mov x5, #0          // Failure

        .done:
        str x5, [fp, #-32]
    End Assembly
    Return result
End Process

Process called "atomic_compare_and_swap_weak" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]
        ldr x2, [fp, #-24]

        ldaxr x3, [x0]
        cmp x3, x1
        b.ne .failed

        stlxr w4, x2, [x0]
        cbnz w4, .failed    // Weak CAS can fail spuriously

        mov x5, #1
        b .done

        .failed:
        clrex
        mov x5, #0

        .done:
        str x5, [fp, #-32]
    End Assembly
    Return result
End Process

Process called "atomic_exchange" takes ptr as Integer, value as Integer returns Integer:
    Let result be 0
    Inline Assembly:
        ldr x0, [fp, #-8]
        ldr x1, [fp, #-16]

        .retry:
        ldaxr x2, [x0]      // Load old value
        stlxr w3, x1, [x0]  // Store new value
        cbnz w3, .retry

        str x2, [fp, #-24]  // Return old value
    End Assembly
    Return result
End Process

Process called "memory_barrier_acquire" returns Integer:
    Inline Assembly:
        dmb ishld           // Inner shareable load barrier
    End Assembly
    Return 0
End Process

Process called "memory_barrier_release" returns Integer:
    Inline Assembly:
        dmb ish             // Inner shareable full barrier (release)
    End Assembly
    Return 0
End Process

Process called "memory_barrier_full" returns Integer:
    Inline Assembly:
        dmb ish             // Inner shareable full barrier
    End Assembly
    Return 0
End Process

Process called "memory_barrier_seq_cst" returns Integer:
    Inline Assembly:
        dmb ish             // Full barrier
    End Assembly
    Return 0
End Process
