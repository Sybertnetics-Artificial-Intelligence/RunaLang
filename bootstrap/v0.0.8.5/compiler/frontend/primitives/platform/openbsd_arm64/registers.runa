Note: 
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file implements ARM64 (AArch64) register definitions for OpenBSD.

OpenBSD ARM64 Register Architecture:
- X0-X30: 64-bit general-purpose registers
- W0-W30: 32-bit lower halves of X registers
- SP: Stack pointer (dedicated)
- LR (X30): Link register (stores return address)
- XZR/WZR: Zero register (reads as 0, writes discarded)
- V0-V31: 128-bit SIMD/FP registers
- D0-D31: 64-bit double-precision views of V registers
- S0-S31: 32-bit single-precision views of V registers

OpenBSD ARM64 Calling Convention (AAPCS64):
- X0-X7: Parameter registers
- X8: Indirect result location register
- X9-X15: Caller-saved temporary registers
- X16-X17: Intra-procedure-call scratch registers (IP0, IP1)
- X18: Platform register (reserved)
- X19-X28: Callee-saved registers
- X29 (FP): Frame pointer
- X30 (LR): Link register
- SP: Stack pointer
- V0-V7: Parameter/return registers
- V8-V15: Callee-saved (lower 64 bits only)
- V16-V31: Caller-saved

Register Encoding:
- General-purpose registers: 0-30 (X0-X30), 31 = SP or XZR depending on context
- SIMD/FP registers: 32-63 (encoding V0-V31 to avoid conflict with GPRs)

Platform: OpenBSD ARM64 (AArch64)
:End Note

Note: ============================================================================
Note: GENERAL-PURPOSE REGISTER CONSTANTS
Note: ============================================================================

Note: ARM64 calling convention uses X0-X7 for parameters, X0-X1 for return values
Note: X0-X15 are caller-saved (with X18 being platform register)
Note: X19-X28 are callee-saved
Note: X29 is frame pointer (FP), X30 is link register (LR), SP is stack pointer

Process called "REG_X0" returns Integer:
    Return 0
End Process

Process called "REG_X1" returns Integer:
    Return 1
End Process

Process called "REG_X2" returns Integer:
    Return 2
End Process

Process called "REG_X3" returns Integer:
    Return 3
End Process

Process called "REG_X4" returns Integer:
    Return 4
End Process

Process called "REG_X5" returns Integer:
    Return 5
End Process

Process called "REG_X6" returns Integer:
    Return 6
End Process

Process called "REG_X7" returns Integer:
    Return 7
End Process

Process called "REG_X8" returns Integer:
    Return 8  Note: Indirect result location register
End Process

Process called "REG_X9" returns Integer:
    Return 9
End Process

Process called "REG_X10" returns Integer:
    Return 10
End Process

Process called "REG_X11" returns Integer:
    Return 11
End Process

Process called "REG_X12" returns Integer:
    Return 12
End Process

Process called "REG_X13" returns Integer:
    Return 13
End Process

Process called "REG_X14" returns Integer:
    Return 14
End Process

Process called "REG_X15" returns Integer:
    Return 15
End Process

Process called "REG_X16" returns Integer:
    Return 16  Note: IP0 - Intra-procedure-call scratch register
End Process

Process called "REG_X17" returns Integer:
    Return 17  Note: IP1 - Intra-procedure-call scratch register
End Process

Process called "REG_X18" returns Integer:
    Return 18  Note: Platform register (reserved on OpenBSD)
End Process

Process called "REG_X19" returns Integer:
    Return 19  Note: Callee-saved
End Process

Process called "REG_X20" returns Integer:
    Return 20  Note: Callee-saved
End Process

Process called "REG_X21" returns Integer:
    Return 21  Note: Callee-saved
End Process

Process called "REG_X22" returns Integer:
    Return 22  Note: Callee-saved
End Process

Process called "REG_X23" returns Integer:
    Return 23  Note: Callee-saved
End Process

Process called "REG_X24" returns Integer:
    Return 24  Note: Callee-saved
End Process

Process called "REG_X25" returns Integer:
    Return 25  Note: Callee-saved
End Process

Process called "REG_X26" returns Integer:
    Return 26  Note: Callee-saved
End Process

Process called "REG_X27" returns Integer:
    Return 27  Note: Callee-saved
End Process

Process called "REG_X28" returns Integer:
    Return 28  Note: Callee-saved
End Process

Process called "REG_FP" returns Integer:
    Return 29  Note: X29 - Frame pointer
End Process

Process called "REG_LR" returns Integer:
    Return 30  Note: X30 - Link register (return address)
End Process

Process called "REG_SP" returns Integer:
    Return 31  Note: Stack pointer
End Process

Process called "REG_XZR" returns Integer:
    Return 31  Note: Zero register (context-dependent with SP)
End Process

Note: ============================================================================
Note: SIMD/FP REGISTER CONSTANTS
Note: ============================================================================

Note: V0-V31 are 128-bit registers, can be accessed as:
Note: - V registers (128-bit SIMD)
Note: - D registers (64-bit double-precision)
Note: - S registers (32-bit single-precision)
Note: V0-V7 used for parameters and return values
Note: V8-V15 are callee-saved (lower 64 bits only)
Note: V16-V31 are caller-saved

Note: We encode SIMD/FP registers as 32-63 to avoid conflict with GPRs
Process called "REG_V0" returns Integer:
    Return 32
End Process

Process called "REG_V1" returns Integer:
    Return 33
End Process

Process called "REG_V2" returns Integer:
    Return 34
End Process

Process called "REG_V3" returns Integer:
    Return 35
End Process

Process called "REG_V4" returns Integer:
    Return 36
End Process

Process called "REG_V5" returns Integer:
    Return 37
End Process

Process called "REG_V6" returns Integer:
    Return 38
End Process

Process called "REG_V7" returns Integer:
    Return 39
End Process

Note: ============================================================================
Note: REGISTER QUERY FUNCTIONS
Note: ============================================================================

Process called "get_param_register" takes param_index as Integer returns Integer:
    Note: Get register number for integer parameter
    Note: OpenBSD ARM64: X0-X7 for first 8 integer parameters (AAPCS64)

    If param_index is equal to 0:
        Return 0  Note: X0
    End If

    If param_index is equal to 1:
        Return 1  Note: X1
    End If

    If param_index is equal to 2:
        Return 2  Note: X2
    End If

    If param_index is equal to 3:
        Return 3  Note: X3
    End If

    If param_index is equal to 4:
        Return 4  Note: X4
    End If

    If param_index is equal to 5:
        Return 5  Note: X5
    End If

    If param_index is equal to 6:
        Return 6  Note: X6
    End If

    If param_index is equal to 7:
        Return 7  Note: X7
    End If

    Return -1  Note: Parameters 8+ are passed on stack
End Process

Process called "get_return_register" returns Integer:
    Note: Get register number for integer return value
    Note: OpenBSD ARM64: X0 for primary return value, X1 for secondary
    Return 0  Note: X0
End Process

Process called "get_max_register_params" returns Integer:
    Note: Get maximum number of integer parameters in registers
    Note: OpenBSD ARM64: 8 registers (X0-X7)
    Return 8
End Process

Process called "get_frame_pointer_register" returns Integer:
    Note: Get frame pointer register number
    Return 29  Note: X29 (FP)
End Process

Process called "get_stack_pointer_register" returns Integer:
    Note: Get stack pointer register number
    Return 31  Note: SP
End Process

Process called "get_link_register" returns Integer:
    Note: Get link register number (stores return address)
    Return 30  Note: X30 (LR)
End Process

Process called "get_register_name" takes reg_num as Integer returns String:
    Note: Convert register number to ARM64 register name

    If reg_num is equal to 0:
        Return "x0"
    End If

    If reg_num is equal to 1:
        Return "x1"
    End If

    If reg_num is equal to 2:
        Return "x2"
    End If

    If reg_num is equal to 3:
        Return "x3"
    End If

    If reg_num is equal to 4:
        Return "x4"
    End If

    If reg_num is equal to 5:
        Return "x5"
    End If

    If reg_num is equal to 6:
        Return "x6"
    End If

    If reg_num is equal to 7:
        Return "x7"
    End If

    If reg_num is equal to 8:
        Return "x8"
    End If

    If reg_num is equal to 9:
        Return "x9"
    End If

    If reg_num is equal to 10:
        Return "x10"
    End If

    If reg_num is equal to 11:
        Return "x11"
    End If

    If reg_num is equal to 12:
        Return "x12"
    End If

    If reg_num is equal to 13:
        Return "x13"
    End If

    If reg_num is equal to 14:
        Return "x14"
    End If

    If reg_num is equal to 15:
        Return "x15"
    End If

    If reg_num is equal to 16:
        Return "x16"
    End If

    If reg_num is equal to 17:
        Return "x17"
    End If

    If reg_num is equal to 18:
        Return "x18"  Note: Platform register (reserved on OpenBSD)
    End If

    If reg_num is equal to 19:
        Return "x19"
    End If

    If reg_num is equal to 20:
        Return "x20"
    End If

    If reg_num is equal to 21:
        Return "x21"
    End If

    If reg_num is equal to 22:
        Return "x22"
    End If

    If reg_num is equal to 23:
        Return "x23"
    End If

    If reg_num is equal to 24:
        Return "x24"
    End If

    If reg_num is equal to 25:
        Return "x25"
    End If

    If reg_num is equal to 26:
        Return "x26"
    End If

    If reg_num is equal to 27:
        Return "x27"
    End If

    If reg_num is equal to 28:
        Return "x28"
    End If

    If reg_num is equal to 29:
        Return "x29"  Note: FP
    End If

    If reg_num is equal to 30:
        Return "x30"  Note: LR
    End If

    If reg_num is equal to 31:
        Return "sp"  Note: SP (or xzr in some contexts)
    End If

    Note: SIMD/FP registers (32-63 map to V0-V31)
    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 63:
            Let v_num be reg_num minus 32

            If v_num is equal to 0:
                Return "v0"
            End If
            If v_num is equal to 1:
                Return "v1"
            End If
            If v_num is equal to 2:
                Return "v2"
            End If
            If v_num is equal to 3:
                Return "v3"
            End If
            If v_num is equal to 4:
                Return "v4"
            End If
            If v_num is equal to 5:
                Return "v5"
            End If
            If v_num is equal to 6:
                Return "v6"
            End If
            If v_num is equal to 7:
                Return "v7"
            End If

            Return "v?"  Note: Extended V registers not commonly named
        End If
    End If

    Return "unknown"
End Process

Note: ============================================================================
Note: SIMD/FP REGISTER FUNCTIONS
Note: ============================================================================

Process called "get_fp_param_register" takes param_index as Integer returns Integer:
    Note: Get SIMD/FP register number for floating-point parameter
    Note: OpenBSD ARM64: V0-V7 for first 8 FP parameters
    Note: Returns register number in 32-63 range (V0-V31)

    If param_index is equal to 0:
        Return 32  Note: V0
    End If

    If param_index is equal to 1:
        Return 33  Note: V1
    End If

    If param_index is equal to 2:
        Return 34  Note: V2
    End If

    If param_index is equal to 3:
        Return 35  Note: V3
    End If

    If param_index is equal to 4:
        Return 36  Note: V4
    End If

    If param_index is equal to 5:
        Return 37  Note: V5
    End If

    If param_index is equal to 6:
        Return 38  Note: V6
    End If

    If param_index is equal to 7:
        Return 39  Note: V7
    End If

    Return -1  Note: Parameters 8+ are passed on stack
End Process

Process called "get_fp_return_register" returns Integer:
    Note: Get SIMD/FP register number for floating-point return value
    Note: OpenBSD ARM64: V0 for FP return value
    Return 32  Note: V0
End Process

Process called "get_max_fp_register_params" returns Integer:
    Note: Get maximum number of FP parameters in registers
    Note: OpenBSD ARM64: 8 registers (V0-V7)
    Return 8
End Process

Process called "is_fp_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is a SIMD/FP register
    Note: FP registers are encoded as 32-63

    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 63:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_callee_saved" takes reg_num as Integer returns Integer:
    Note: Check if register must be preserved by callee
    Note: OpenBSD ARM64: X19-X28, FP (X29), V8-V15 (lower 64 bits)

    Note: Callee-saved GPRs: X19-X29
    If reg_num is greater than or equal to 19:
        If reg_num is less than or equal to 29:
            Return 1  Note: True
        End If
    End If

    Note: Callee-saved FP: V8-V15 (registers 40-47)
    If reg_num is greater than or equal to 40:
        If reg_num is less than or equal to 47:
            Return 1  Note: True (lower 64 bits must be preserved)
        End If
    End If

    Return 0  Note: False - caller-saved
End Process
