Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
MIPS32 Machine Code Generation

This file implements MIPS32 machine code generation for the Runa compiler.

Platform-specific details:
- Platform: Linux MIPS32 (little-endian)
- Instruction format: 32-bit fixed-length
- Byte order: Little-endian
- Encoding: Binary machine code

MIPS32 machine code encoding:
- All instructions are exactly 4 bytes
- Little-endian byte order (LSB first)
- No variable-length or prefix encoding
- Immediate values are sign-extended where applicable

Instruction emission:
- R-type: Register-register operations
- I-type: Immediate and load/store operations
- J-type: Jump operations
- Proper alignment required (4-byte boundaries)

Dependencies: compiler/frontend/primitives/core/memory_core.runa
:End Note

Import "compiler/frontend/primitives/core/memory_core.runa" as Memory

Process called "emit_word" takes buffer as Integer, offset as Integer, value as Integer returns Integer:
    Note: Emit 32-bit word in little-endian format
    Let byte0 be value bitwise_and 255
    Let byte1 be (value divided by 256) bitwise_and 255
    Let byte2 be (value divided by 65536) bitwise_and 255
    Let byte3 be (value divided by 16777216) bitwise_and 255
    Memory.memory_set_byte(buffer plus offset, byte0)
    Memory.memory_set_byte(buffer plus offset plus 1, byte1)
    Memory.memory_set_byte(buffer plus offset plus 2, byte2)
    Memory.memory_set_byte(buffer plus offset plus 3, byte3)
    Return offset plus 4
End Process

Note: R-type: opcode(6) | rs(5) | rt(5) | rd(5) | shamt(5) | funct(6)
Process called "emit_r_type" takes buffer as Integer, offset as Integer, rs as Integer, rt as Integer, rd as Integer, shamt as Integer, funct as Integer returns Integer:
    Let instruction be 0
    Set instruction to instruction bitwise_or (rs shifted left by 21)
    Set instruction to instruction bitwise_or (rt shifted left by 16)
    Set instruction to instruction bitwise_or (rd shifted left by 11)
    Set instruction to instruction bitwise_or (shamt shifted left by 6)
    Set instruction to instruction bitwise_or funct
    Return emit_word(buffer, offset, instruction)
End Process

Note: I-type: opcode(6) | rs(5) | rt(5) | immediate(16)
Process called "emit_i_type" takes buffer as Integer, offset as Integer, opcode as Integer, rs as Integer, rt as Integer, immediate as Integer returns Integer:
    Let instruction be opcode shifted left by 26
    Set instruction to instruction bitwise_or (rs shifted left by 21)
    Set instruction to instruction bitwise_or (rt shifted left by 16)
    Set instruction to instruction bitwise_or (immediate bitwise_and 65535)
    Return emit_word(buffer, offset, instruction)
End Process

Note: J-type: opcode(6) | address(26)
Process called "emit_j_type" takes buffer as Integer, offset as Integer, opcode as Integer, address as Integer returns Integer:
    Let instruction be opcode shifted left by 26
    Set instruction to instruction bitwise_or (address bitwise_and 67108863)
    Return emit_word(buffer, offset, instruction)
End Process

Process called "emit_add" takes buffer as Integer, offset as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, rt, rd, 0, 32)  Note: ADDU
End Process

Process called "emit_sub" takes buffer as Integer, offset as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, rt, rd, 0, 34)  Note: SUBU
End Process

Process called "emit_and" takes buffer as Integer, offset as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, rt, rd, 0, 36)
End Process

Process called "emit_or" takes buffer as Integer, offset as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, rt, rd, 0, 37)
End Process

Process called "emit_xor" takes buffer as Integer, offset as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, rt, rd, 0, 38)
End Process

Process called "emit_sll" takes buffer as Integer, offset as Integer, rd as Integer, rt as Integer, shamt as Integer returns Integer:
    Return emit_r_type(buffer, offset, 0, rt, rd, shamt, 0)
End Process

Process called "emit_srl" takes buffer as Integer, offset as Integer, rd as Integer, rt as Integer, shamt as Integer returns Integer:
    Return emit_r_type(buffer, offset, 0, rt, rd, shamt, 2)
End Process

Process called "emit_jr" takes buffer as Integer, offset as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, 0, 0, 0, 8)
End Process

Process called "emit_jalr" takes buffer as Integer, offset as Integer, rd as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset, rs, 0, rd, 0, 9)
End Process

Process called "emit_addi" takes buffer as Integer, offset as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset, 9, rs, rt, immediate)  Note: ADDIU
End Process

Process called "emit_ori" takes buffer as Integer, offset as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset, 13, rs, rt, immediate)
End Process

Process called "emit_lui" takes buffer as Integer, offset as Integer, rt as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset, 15, 0, rt, immediate)
End Process

Process called "emit_lw" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 35, rs, rt, immediate)
End Process

Process called "emit_sw" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 43, rs, rt, immediate)
End Process

Process called "emit_beq" takes buffer as Integer, offset_arg as Integer, rs as Integer, rt as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 4, rs, rt, branch_offset)
End Process

Process called "emit_bne" takes buffer as Integer, offset_arg as Integer, rs as Integer, rt as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 5, rs, rt, branch_offset)
End Process

Process called "emit_j" takes buffer as Integer, offset_arg as Integer, address as Integer returns Integer:
    Return emit_j_type(buffer, offset_arg, 2, address)
End Process

Process called "emit_jal" takes buffer as Integer, offset_arg as Integer, address as Integer returns Integer:
    Return emit_j_type(buffer, offset_arg, 3, address)
End Process

Process called "emit_syscall" takes buffer as Integer, offset_arg as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, 0, 0, 0, 0, 12)
End Process

Process called "emit_nop" takes buffer as Integer, offset_arg as Integer returns Integer:
    Return emit_word(buffer, offset_arg, 0)
End Process

Process called "emit_lb" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 32, rs, rt, immediate)
End Process

Process called "emit_lh" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 33, rs, rt, immediate)
End Process

Process called "emit_lbu" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 36, rs, rt, immediate)
End Process

Process called "emit_lhu" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 37, rs, rt, immediate)
End Process

Process called "emit_sb" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 40, rs, rt, immediate)
End Process

Process called "emit_sh" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 41, rs, rt, immediate)
End Process

Process called "emit_mult" takes buffer as Integer, offset_arg as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, 0, 0, 24)
End Process

Process called "emit_multu" takes buffer as Integer, offset_arg as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, 0, 0, 25)
End Process

Process called "emit_div" takes buffer as Integer, offset_arg as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, 0, 0, 26)
End Process

Process called "emit_divu" takes buffer as Integer, offset_arg as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, 0, 0, 27)
End Process

Process called "emit_mfhi" takes buffer as Integer, offset_arg as Integer, rd as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, 0, 0, rd, 0, 16)
End Process

Process called "emit_mflo" takes buffer as Integer, offset_arg as Integer, rd as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, 0, 0, rd, 0, 18)
End Process

Process called "emit_mthi" takes buffer as Integer, offset_arg as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, 0, 0, 0, 17)
End Process

Process called "emit_mtlo" takes buffer as Integer, offset_arg as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, 0, 0, 0, 19)
End Process

Process called "emit_slt" takes buffer as Integer, offset_arg as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, rd, 0, 42)
End Process

Process called "emit_sltu" takes buffer as Integer, offset_arg as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, rd, 0, 43)
End Process

Process called "emit_slti" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 10, rs, rt, immediate)
End Process

Process called "emit_sltiu" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 11, rs, rt, immediate)
End Process

Process called "emit_sllv" takes buffer as Integer, offset_arg as Integer, rd as Integer, rt as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, rd, 0, 4)
End Process

Process called "emit_srlv" takes buffer as Integer, offset_arg as Integer, rd as Integer, rt as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, rd, 0, 6)
End Process

Process called "emit_srav" takes buffer as Integer, offset_arg as Integer, rd as Integer, rt as Integer, rs as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, rd, 0, 7)
End Process

Process called "emit_nor" takes buffer as Integer, offset_arg as Integer, rd as Integer, rs as Integer, rt as Integer returns Integer:
    Return emit_r_type(buffer, offset_arg, rs, rt, rd, 0, 39)
End Process

Process called "emit_andi" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 12, rs, rt, immediate)
End Process

Process called "emit_xori" takes buffer as Integer, offset_arg as Integer, rt as Integer, rs as Integer, immediate as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 14, rs, rt, immediate)
End Process

Process called "emit_bgez" takes buffer as Integer, offset_arg as Integer, rs as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 1, rs, 1, branch_offset)
End Process

Process called "emit_bgtz" takes buffer as Integer, offset_arg as Integer, rs as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 7, rs, 0, branch_offset)
End Process

Process called "emit_blez" takes buffer as Integer, offset_arg as Integer, rs as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 6, rs, 0, branch_offset)
End Process

Process called "emit_bltz" takes buffer as Integer, offset_arg as Integer, rs as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 1, rs, 0, branch_offset)
End Process

Process called "emit_bgezal" takes buffer as Integer, offset_arg as Integer, rs as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 1, rs, 17, branch_offset)
End Process

Process called "emit_bltzal" takes buffer as Integer, offset_arg as Integer, rs as Integer, branch_offset as Integer returns Integer:
    Return emit_i_type(buffer, offset_arg, 1, rs, 16, branch_offset)
End Process

Process called "align_code" takes buffer as Integer, offset_arg as Integer, alignment as Integer returns Integer:
    Let remainder be offset_arg modulo alignment
    If remainder is equal to 0:
        Return offset_arg
    End If
    Let padding_needed be alignment minus remainder
    Let current_offset be offset_arg
    While padding_needed is greater than or equal to 4:
        Set current_offset to emit_nop(buffer, current_offset)
        Set padding_needed to padding_needed minus 4
    End While
    Return current_offset
End Process

