Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
MIPS32 Register Definitions for Linux

This file implements MIPS32 register architecture for the Runa compiler.

MIPS32 Register Architecture:
- 32 general-purpose registers ($0-$31), each 32 bits
- $0 ($zero): Always zero
- $1 ($at): Assembler temporary
- $2-$3 ($v0-$v1): Return values
- $4-$7 ($a0-$a3): Function arguments
- $8-$15 ($t0-$t7): Temporary registers (caller-saved)
- $16-$23 ($s0-$s7): Saved registers (callee-saved)
- $24-$25 ($t8-$t9): More temporaries
- $26-$27 ($k0-$k1): Kernel registers (reserved for OS)
- $28 ($gp): Global pointer
- $29 ($sp): Stack pointer
- $30 ($fp/$s8): Frame pointer
- $31 ($ra): Return address

MIPS32 FPU Registers (with FPU):
- 32 floating-point registers ($f0-$f31), each 32 bits
- Can be paired for 64-bit operations ($f0/$f1, $f2/$f3, etc.)
- $f0-$f3: Return values (single/double precision)
- $f4-$f11: Temporary registers
- $f12-$f15: Argument registers
- $f16-$f19: More temporaries
- $f20-$f31: Saved registers (callee-saved: $f20-$f30 even)

MIPS32 Special Registers:
- HI: High word of multiply/divide result
- LO: Low word of multiply/divide result
- PC: Program counter (not directly accessible)

MIPS32 Calling Convention (o32 ABI):
- Arguments: $a0-$a3 (up to 4), rest on stack
- Return: $v0-$v1
- Caller-saved: $t0-$t9, $v0-$v1, $a0-$a3
- Callee-saved: $s0-$s8, $fp, $ra

Platform: Linux MIPS32 (little-endian)
:End Note

Note: ============================================================================
Note: GENERAL-PURPOSE REGISTER CONSTANTS
Note: ============================================================================

Note: Special register $0 - always zero
Process called "REG_ZERO" returns Integer:
    Return 0  Note: $zero, $0
End Process

Note: Assembler temporary
Process called "REG_AT" returns Integer:
    Return 1  Note: $at, $1
End Process

Note: Return value registers
Process called "REG_V0" returns Integer:
    Return 2  Note: $v0, $2
End Process

Process called "REG_V1" returns Integer:
    Return 3  Note: $v1, $3
End Process

Note: Argument registers
Process called "REG_A0" returns Integer:
    Return 4  Note: $a0, $4
End Process

Process called "REG_A1" returns Integer:
    Return 5  Note: $a1, $5
End Process

Process called "REG_A2" returns Integer:
    Return 6  Note: $a2, $6
End Process

Process called "REG_A3" returns Integer:
    Return 7  Note: $a3, $7
End Process

Note: Temporary registers (caller-saved)
Process called "REG_T0" returns Integer:
    Return 8  Note: $t0, $8
End Process

Process called "REG_T1" returns Integer:
    Return 9  Note: $t1, $9
End Process

Process called "REG_T2" returns Integer:
    Return 10  Note: $t2, $10
End Process

Process called "REG_T3" returns Integer:
    Return 11  Note: $t3, $11
End Process

Process called "REG_T4" returns Integer:
    Return 12  Note: $t4, $12
End Process

Process called "REG_T5" returns Integer:
    Return 13  Note: $t5, $13
End Process

Process called "REG_T6" returns Integer:
    Return 14  Note: $t6, $14
End Process

Process called "REG_T7" returns Integer:
    Return 15  Note: $t7, $15
End Process

Note: Saved registers (callee-saved)
Process called "REG_S0" returns Integer:
    Return 16  Note: $s0, $16
End Process

Process called "REG_S1" returns Integer:
    Return 17  Note: $s1, $17
End Process

Process called "REG_S2" returns Integer:
    Return 18  Note: $s2, $18
End Process

Process called "REG_S3" returns Integer:
    Return 19  Note: $s3, $19
End Process

Process called "REG_S4" returns Integer:
    Return 20  Note: $s4, $20
End Process

Process called "REG_S5" returns Integer:
    Return 21  Note: $s5, $21
End Process

Process called "REG_S6" returns Integer:
    Return 22  Note: $s6, $22
End Process

Process called "REG_S7" returns Integer:
    Return 23  Note: $s7, $23
End Process

Note: More temporary registers
Process called "REG_T8" returns Integer:
    Return 24  Note: $t8, $24
End Process

Process called "REG_T9" returns Integer:
    Return 25  Note: $t9, $25
End Process

Note: Kernel registers (reserved for OS)
Process called "REG_K0" returns Integer:
    Return 26  Note: $k0, $26
End Process

Process called "REG_K1" returns Integer:
    Return 27  Note: $k1, $27
End Process

Note: Special purpose registers
Process called "REG_GP" returns Integer:
    Return 28  Note: $gp, $28 - Global pointer
End Process

Process called "REG_SP" returns Integer:
    Return 29  Note: $sp, $29 - Stack pointer
End Process

Process called "REG_FP" returns Integer:
    Return 30  Note: $fp, $30 - Frame pointer (also $s8)
End Process

Process called "REG_RA" returns Integer:
    Return 31  Note: $ra, $31 - Return address
End Process

Note: ============================================================================
Note: FLOATING-POINT REGISTER CONSTANTS
Note: ============================================================================

Note: FPU registers $f0-$f31
Note: Encoded as 32-63 to avoid conflict with GPRs

Note: Return value FP registers
Process called "REG_F0" returns Integer:
    Return 32  Note: $f0
End Process

Process called "REG_F1" returns Integer:
    Return 33  Note: $f1
End Process

Process called "REG_F2" returns Integer:
    Return 34  Note: $f2
End Process

Process called "REG_F3" returns Integer:
    Return 35  Note: $f3
End Process

Note: Temporary FP registers
Process called "REG_F4" returns Integer:
    Return 36  Note: $f4
End Process

Process called "REG_F5" returns Integer:
    Return 37  Note: $f5
End Process

Process called "REG_F6" returns Integer:
    Return 38  Note: $f6
End Process

Process called "REG_F7" returns Integer:
    Return 39  Note: $f7
End Process

Process called "REG_F8" returns Integer:
    Return 40  Note: $f8
End Process

Process called "REG_F9" returns Integer:
    Return 41  Note: $f9
End Process

Process called "REG_F10" returns Integer:
    Return 42  Note: $f10
End Process

Process called "REG_F11" returns Integer:
    Return 43  Note: $f11
End Process

Note: Argument FP registers
Process called "REG_F12" returns Integer:
    Return 44  Note: $f12
End Process

Process called "REG_F13" returns Integer:
    Return 45  Note: $f13
End Process

Process called "REG_F14" returns Integer:
    Return 46  Note: $f14
End Process

Process called "REG_F15" returns Integer:
    Return 47  Note: $f15
End Process

Note: More temporary FP registers
Process called "REG_F16" returns Integer:
    Return 48  Note: $f16
End Process

Process called "REG_F17" returns Integer:
    Return 49  Note: $f17
End Process

Process called "REG_F18" returns Integer:
    Return 50  Note: $f18
End Process

Process called "REG_F19" returns Integer:
    Return 51  Note: $f19
End Process

Note: Saved FP registers (callee-saved: even-numbered $f20-$f30)
Process called "REG_F20" returns Integer:
    Return 52  Note: $f20
End Process

Process called "REG_F21" returns Integer:
    Return 53  Note: $f21
End Process

Process called "REG_F22" returns Integer:
    Return 54  Note: $f22
End Process

Process called "REG_F23" returns Integer:
    Return 55  Note: $f23
End Process

Process called "REG_F24" returns Integer:
    Return 56  Note: $f24
End Process

Process called "REG_F25" returns Integer:
    Return 57  Note: $f25
End Process

Process called "REG_F26" returns Integer:
    Return 58  Note: $f26
End Process

Process called "REG_F27" returns Integer:
    Return 59  Note: $f27
End Process

Process called "REG_F28" returns Integer:
    Return 60  Note: $f28
End Process

Process called "REG_F29" returns Integer:
    Return 61  Note: $f29
End Process

Process called "REG_F30" returns Integer:
    Return 62  Note: $f30
End Process

Process called "REG_F31" returns Integer:
    Return 63  Note: $f31
End Process

Note: ============================================================================
Note: REGISTER QUERY FUNCTIONS
Note: ============================================================================

Process called "get_integer_param_register" takes param_index as Integer returns Integer:
    Note: Get register number for integer parameter
    Note: MIPS32 o32: $a0-$a3 for first 4 parameters

    If param_index is equal to 0:
        Return 4  Note: $a0
    End If

    If param_index is equal to 1:
        Return 5  Note: $a1
    End If

    If param_index is equal to 2:
        Return 6  Note: $a2
    End If

    If param_index is equal to 3:
        Return 7  Note: $a3
    End If

    Return -1  Note: Parameters 4+ are passed on stack
End Process

Process called "get_integer_return_register" returns Integer:
    Note: Get register number for integer return value
    Note: MIPS32 o32: $v0 for primary return value
    Return 2  Note: $v0
End Process

Process called "get_secondary_return_register" returns Integer:
    Note: Get register number for secondary return value (64-bit returns)
    Note: MIPS32 o32: $v1 for secondary return value
    Return 3  Note: $v1
End Process

Process called "get_max_integer_register_params" returns Integer:
    Note: Get maximum number of integer parameters in registers
    Note: MIPS32 o32: 4 registers ($a0-$a3)
    Return 4
End Process

Process called "get_stack_pointer_register" returns Integer:
    Note: Get stack pointer register number
    Return 29  Note: $sp
End Process

Process called "get_return_address_register" returns Integer:
    Note: Get return address register number
    Return 31  Note: $ra
End Process

Process called "get_global_pointer_register" returns Integer:
    Note: Get global pointer register number
    Return 28  Note: $gp
End Process

Process called "get_frame_pointer_register" returns Integer:
    Note: Get frame pointer register number
    Return 30  Note: $fp ($s8)
End Process

Process called "get_zero_register" returns Integer:
    Note: Get hardwired zero register
    Return 0  Note: $zero
End Process

Process called "get_register_name" takes reg_num as Integer returns String:
    Note: Convert register number to MIPS32 register name

    Note: Special registers
    If reg_num is equal to 0:
        Return "$zero"
    End If
    If reg_num is equal to 1:
        Return "$at"
    End If
    If reg_num is equal to 28:
        Return "$gp"
    End If
    If reg_num is equal to 29:
        Return "$sp"
    End If
    If reg_num is equal to 30:
        Return "$fp"
    End If
    If reg_num is equal to 31:
        Return "$ra"
    End If

    Note: Return value registers
    If reg_num is equal to 2:
        Return "$v0"
    End If
    If reg_num is equal to 3:
        Return "$v1"
    End If

    Note: Argument registers
    If reg_num is greater than or equal to 4:
        If reg_num is less than or equal to 7:
            Let offset be reg_num minus 4
            If offset is equal to 0:
                Return "$a0"
            End If
            If offset is equal to 1:
                Return "$a1"
            End If
            If offset is equal to 2:
                Return "$a2"
            End If
            If offset is equal to 3:
                Return "$a3"
            End If
        End If
    End If

    Note: Temporary registers $t0-$t7
    If reg_num is greater than or equal to 8:
        If reg_num is less than or equal to 15:
            Return "$t?"
        End If
    End If

    Note: Saved registers $s0-$s7
    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 23:
            Return "$s?"
        End If
    End If

    Note: More temporaries $t8-$t9
    If reg_num is equal to 24:
        Return "$t8"
    End If
    If reg_num is equal to 25:
        Return "$t9"
    End If

    Note: Kernel registers
    If reg_num is equal to 26:
        Return "$k0"
    End If
    If reg_num is equal to 27:
        Return "$k1"
    End If

    Note: FPU registers (32-63)
    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 63:
            Return "$f?"
        End If
    End If

    Return "unknown"
End Process

Process called "encode_register" takes reg_num as Integer returns Integer:
    Note: Encode register number for machine code
    Note: For GPRs (0-31), return as-is
    Note: For FP registers (32-63), subtract 32 to get $f0-$f31

    If reg_num is less than 32:
        Return reg_num  Note: GPR encoding
    End If

    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 63:
            Return reg_num minus 32  Note: FP register encoding
        End If
    End If

    Return 0  Note: Default to $zero if unknown
End Process

Note: ============================================================================
Note: FPU REGISTER FUNCTIONS
Note: ============================================================================

Process called "get_fp_param_register" takes param_index as Integer returns Integer:
    Note: Get FPU register number for floating-point parameter
    Note: MIPS32 o32: $f12-$f15 for FP parameters (2 registers for double)

    If param_index is equal to 0:
        Return 44  Note: $f12
    End If

    If param_index is equal to 1:
        Return 46  Note: $f14
    End If

    Return -1  Note: Additional FP parameters on stack
End Process

Process called "get_fp_return_register" returns Integer:
    Note: Get FPU register number for floating-point return value
    Note: MIPS32 o32: $f0 for single-precision, $f0/$f1 pair for double
    Return 32  Note: $f0
End Process

Process called "get_max_fp_register_params" returns Integer:
    Note: Get maximum number of FP parameters in registers
    Note: MIPS32 o32: 2 pairs ($f12/$f13, $f14/$f15)
    Return 2
End Process

Process called "is_gp_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is a general-purpose register
    Note: GPRs are 0-31

    If reg_num is greater than or equal to 0:
        If reg_num is less than or equal to 31:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_fp_register" takes reg_num as Integer returns Integer:
    Note: Check if register number is an FPU register
    Note: FP registers are encoded as 32-63

    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 63:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False
End Process

Process called "is_callee_saved" takes reg_num as Integer returns Integer:
    Note: Check if register must be preserved by callee
    Note: MIPS32 o32: $s0-$s8 ($16-$23, $30), $ra ($31), $gp ($28)

    Note: Saved registers $s0-$s7 ($16-$23)
    If reg_num is greater than or equal to 16:
        If reg_num is less than or equal to 23:
            Return 1  Note: True
        End If
    End If

    Note: Frame pointer $fp/$s8 ($30)
    If reg_num is equal to 30:
        Return 1  Note: True
    End If

    Note: Return address $ra ($31)
    If reg_num is equal to 31:
        Return 1  Note: True
    End If

    Note: Global pointer $gp ($28) - callee-saved
    If reg_num is equal to 28:
        Return 1  Note: True
    End If

    Note: Even-numbered FP registers $f20-$f30 are callee-saved
    If reg_num is greater than or equal to 52:  Note: $f20 = 52
        If reg_num is less than or equal to 62:  Note: $f30 = 62
            Let fp_num be reg_num minus 32
            If fp_num Modulo by 2 is equal to 0:
                Return 1  Note: True (even register)
            End If
        End If
    End If

    Return 0  Note: False - caller-saved
End Process

Process called "is_caller_saved" takes reg_num as Integer returns Integer:
    Note: Check if register is caller-saved (volatile)
    Note: MIPS32 o32: $t0-$t9 ($8-$15, $24-$25), $v0-$v1 ($2-$3), $a0-$a3 ($4-$7)

    Note: Return value registers $v0-$v1 ($2-$3)
    If reg_num is equal to 2:
        Return 1  Note: True
    End If
    If reg_num is equal to 3:
        Return 1  Note: True
    End If

    Note: Argument registers $a0-$a3 ($4-$7)
    If reg_num is greater than or equal to 4:
        If reg_num is less than or equal to 7:
            Return 1  Note: True
        End If
    End If

    Note: Temporary registers $t0-$t7 ($8-$15)
    If reg_num is greater than or equal to 8:
        If reg_num is less than or equal to 15:
            Return 1  Note: True
        End If
    End If

    Note: More temporaries $t8-$t9 ($24-$25)
    If reg_num is equal to 24:
        Return 1  Note: True
    End If
    If reg_num is equal to 25:
        Return 1  Note: True
    End If

    Note: FP registers $f0-$f19 are caller-saved
    If reg_num is greater than or equal to 32:
        If reg_num is less than or equal to 51:
            Return 1  Note: True
        End If
    End If

    Return 0  Note: False - callee-saved
End Process

Note: ============================================================================
Note: REGISTER ALLOCATION HELPERS
Note: ============================================================================

Process called "get_first_callee_saved_gpr" returns Integer:
    Note: Get first callee-saved general-purpose register
    Return 16  Note: $s0
End Process

Process called "get_last_callee_saved_gpr" returns Integer:
    Note: Get last callee-saved general-purpose register
    Return 23  Note: $s7
End Process

Process called "get_callee_saved_gpr_count" returns Integer:
    Note: Get number of callee-saved GPRs
    Note: $s0-$s7, $fp, $ra, $gp = 11 registers
    Return 11
End Process

Process called "get_first_caller_saved_gpr" returns Integer:
    Note: Get first caller-saved general-purpose register
    Return 8  Note: $t0
End Process

Process called "get_last_caller_saved_gpr" returns Integer:
    Note: Get last caller-saved general-purpose register
    Return 25  Note: $t9
End Process

Process called "get_caller_saved_gpr_count" returns Integer:
    Note: Get number of caller-saved GPRs
    Note: $t0-$t9, $v0-$v1, $a0-$a3 = 16 registers
    Return 16
End Process

Process called "is_special_register" takes reg_num as Integer returns Integer:
    Note: Check if register is special purpose (not for general allocation)
    Note: Special: $zero, $at, $k0, $k1, $gp, $sp, $fp, $ra

    If reg_num is equal to 0:  Note: $zero
        Return 1
    End If
    If reg_num is equal to 1:  Note: $at
        Return 1
    End If
    If reg_num is greater than or equal to 26:  Note: $k0, $k1, $gp, $sp, $fp, $ra
        If reg_num is less than or equal to 31:
            Return 1
        End If
    End If

    Return 0
End Process

Process called "is_allocatable_register" takes reg_num as Integer returns Integer:
    Note: Check if register can be used for general allocation
    Note: Allocatable: $v0-$v1, $a0-$a3, $t0-$t9, $s0-$s7

    Note: Return value registers
    If reg_num is equal to 2:
        Return 1
    End If
    If reg_num is equal to 3:
        Return 1
    End If

    Note: Argument registers
    If reg_num is greater than or equal to 4:
        If reg_num is less than or equal to 7:
            Return 1
        End If
    End If

    Note: Temporary and saved registers
    If reg_num is greater than or equal to 8:
        If reg_num is less than or equal to 25:
            Return 1
        End If
    End If

    Return 0
End Process

