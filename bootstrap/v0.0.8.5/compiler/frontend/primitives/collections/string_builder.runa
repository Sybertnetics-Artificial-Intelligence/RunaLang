Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
STRING BUILDER - Efficient Mutable String Buffer

This file implements a string builder for efficient string construction without
creating temporary string allocations on every concatenation.

Architecture:
- Dynamically growing character buffer
- Amortized O(1) append operations
- Null-terminated strings for C compatibility
- Single final allocation when converting to string

Features:
- Efficient string concatenation (no temp strings)
- Append strings, characters, integers
- Build final string in one allocation
- Clear and reuse buffer

Use Cases:
- Code generation in compiler
- Building error messages
- Concatenating many strings
- Format string construction

StringBuilder Structure (24 bytes):
  offset 0:  buffer (pointer to character array, 8 bytes)
  offset 8:  length (number of characters, 8 bytes)
  offset 16: capacity (allocated buffer size, 8 bytes)

Note: length does NOT include null terminator
Note: capacity INCLUDES space for null terminator
:End Note

Import "memory/layout.runa" as Layout
Import "core/memory_core.runa" as Memory
Import "core/string_core.runa" as String

Note: ============================================================================
Note: CONSTANTS
Note: ============================================================================

Let STRINGBUILDER_INITIAL_CAPACITY be 64
Let STRINGBUILDER_GROWTH_FACTOR be 2

Note: ============================================================================
Note: STRING BUILDER CREATION AND DESTRUCTION
Note: ============================================================================

Process called "stringbuilder_create" returns Integer:
    Note: Create new empty string builder
    Note: Returns pointer to StringBuilder structure (24 bytes), or 0 on failure

    Let sb be proc allocate from Layout with 24
    If sb is equal to 0:
        Return 0
    End If

    Note: Allocate initial buffer (includes space for null terminator)
    Let buffer be proc allocate from Layout with STRINGBUILDER_INITIAL_CAPACITY
    If buffer is equal to 0:
        proc deallocate from Layout with sb
        Return 0
    End If

    Note: Initialize with empty string (null terminator at position 0)
    proc memory_set_byte from Memory with buffer, 0, 0

    Note: Initialize fields
    proc memory_set_int64 from Memory with sb, 0, buffer
    proc memory_set_int64 from Memory with sb, 8, 0  Note: length = 0
    proc memory_set_int64 from Memory with sb, 16, STRINGBUILDER_INITIAL_CAPACITY

    Return sb
End Process

Process called "stringbuilder_create_with_capacity" takes capacity as Integer returns Integer:
    Note: Create string builder with specified initial capacity
    Note: Capacity should include space for null terminator

    If capacity is less than 1:
        Set capacity to STRINGBUILDER_INITIAL_CAPACITY
    End If

    Let sb be proc allocate from Layout with 24
    If sb is equal to 0:
        Return 0
    End If

    Let buffer be proc allocate from Layout with capacity
    If buffer is equal to 0:
        proc deallocate from Layout with sb
        Return 0
    End If

    proc memory_set_byte from Memory with buffer, 0, 0

    proc memory_set_int64 from Memory with sb, 0, buffer
    proc memory_set_int64 from Memory with sb, 8, 0
    proc memory_set_int64 from Memory with sb, 16, capacity

    Return sb
End Process

Process called "stringbuilder_destroy" takes sb as Integer returns Integer:
    Note: Destroy string builder and free buffer
    Note: Returns 1 on success

    If sb is equal to 0:
        Return 0
    End If

    Let buffer be proc memory_get_int64 from Memory with sb, 0
    If buffer is not equal to 0:
        proc deallocate from Layout with buffer
    End If

    proc deallocate from Layout with sb
    Return 1
End Process

Note: ============================================================================
Note: CAPACITY MANAGEMENT
Note: ============================================================================

Process called "stringbuilder_ensure_capacity" takes sb as Integer, min_capacity as Integer returns Integer:
    Note: Ensure buffer has at least min_capacity (including null terminator)
    Note: Grows capacity if needed
    Note: Returns 1 on success, 0 on failure

    If sb is equal to 0:
        Return 0
    End If

    Let current_capacity be proc memory_get_int64 from Memory with sb, 16

    If current_capacity is greater than or equal to min_capacity:
        Return 1  Note: Already have enough capacity
    End If

    Note: Calculate new capacity (double until we exceed min_capacity)
    Let new_capacity be current_capacity
    While new_capacity is less than min_capacity:
        Set new_capacity to new_capacity multiplied by STRINGBUILDER_GROWTH_FACTOR
    End While

    Note: Allocate new buffer
    Let new_buffer be proc allocate from Layout with new_capacity
    If new_buffer is equal to 0:
        Return 0
    End If

    Note: Copy existing content
    Let old_buffer be proc memory_get_int64 from Memory with sb, 0
    Let length be proc memory_get_int64 from Memory with sb, 8
    Let copy_size be length plus 1  Note: Include null terminator
    proc memory_copy from Memory with new_buffer, old_buffer, copy_size

    Note: Free old buffer and update
    proc deallocate from Layout with old_buffer
    proc memory_set_int64 from Memory with sb, 0, new_buffer
    proc memory_set_int64 from Memory with sb, 16, new_capacity

    Return 1
End Process

Note: ============================================================================
Note: APPEND OPERATIONS
Note: ============================================================================

Process called "stringbuilder_append_char" takes sb as Integer, ch as Integer returns Integer:
    Note: Append single character
    Note: ch is ASCII value (0-255)
    Note: Returns 1 on success, 0 on failure

    If sb is equal to 0:
        Return 0
    End If

    Let length be proc memory_get_int64 from Memory with sb, 8
    Let capacity be proc memory_get_int64 from Memory with sb, 16

    Note: Need space for: current length + new char + null terminator
    Let needed be length plus 2
    If needed is greater than capacity:
        Let new_capacity be capacity multiplied by STRINGBUILDER_GROWTH_FACTOR
        Let result be proc stringbuilder_ensure_capacity with sb, new_capacity
        If result is equal to 0:
            Return 0
        End If
    End If

    Note: Append character
    Let buffer be proc memory_get_int64 from Memory with sb, 0
    proc memory_set_byte from Memory with buffer, length, ch

    Note: Update length and add null terminator
    Set length to length plus 1
    proc memory_set_int64 from Memory with sb, 8, length
    proc memory_set_byte from Memory with buffer, length, 0

    Return 1
End Process

Process called "stringbuilder_append" takes sb as Integer, str as Integer returns Integer:
    Note: Append string
    Note: Returns 1 on success, 0 on failure

    If sb is equal to 0:
        Return 0
    End If

    If str is equal to 0:
        Return 1  Note: Appending null is no-op
    End If

    Let str_len be proc string_length from String with str
    If str_len is equal to 0:
        Return 1  Note: Appending empty string is no-op
    End If

    Let length be proc memory_get_int64 from Memory with sb, 8
    Let capacity be proc memory_get_int64 from Memory with sb, 16

    Note: Need space for: current length + new string + null terminator
    Let needed be length plus str_len
    Set needed to needed plus 1
    If needed is greater than capacity:
        Let result be proc stringbuilder_ensure_capacity with sb, needed
        If result is equal to 0:
            Return 0
        End If
    End If

    Note: Copy string to buffer
    Let buffer be proc memory_get_int64 from Memory with sb, 0
    Let dest be buffer plus length
    proc memory_copy from Memory with dest, str, str_len

    Note: Update length and add null terminator
    Set length to length plus str_len
    proc memory_set_int64 from Memory with sb, 8, length
    proc memory_set_byte from Memory with buffer, length, 0

    Return 1
End Process

Process called "stringbuilder_append_integer" takes sb as Integer, value as Integer returns Integer:
    Note: Append integer as string
    Note: Converts integer to decimal string representation
    Note: Returns 1 on success, 0 on failure

    If sb is equal to 0:
        Return 0
    End If

    Note: Convert integer to string (uses String.integer_to_string)
    Let str be proc integer_to_string from String with value
    If str is equal to 0:
        Return 0
    End If

    Note: Append the string
    Let result be proc stringbuilder_append with sb, str

    Note: Free temporary string
    proc deallocate from Layout with str

    Return result
End Process

Note: ============================================================================
Note: STRING EXTRACTION
Note: ============================================================================

Process called "stringbuilder_to_string" takes sb as Integer returns Integer:
    Note: Build final string from buffer
    Note: Returns newly allocated string (caller must free)
    Note: StringBuilder remains usable after this call

    If sb is equal to 0:
        Return 0
    End If

    Let length be proc memory_get_int64 from Memory with sb, 8

    Note: Allocate string (length + 1 for null terminator)
    Let size be length plus 1
    Let str be proc allocate from Layout with size
    If str is equal to 0:
        Return 0
    End If

    Note: Copy buffer to new string
    Let buffer be proc memory_get_int64 from Memory with sb, 0
    proc memory_copy from Memory with str, buffer, size

    Return str
End Process

Process called "stringbuilder_get_buffer" takes sb as Integer returns Integer:
    Note: Get direct pointer to internal buffer (null-terminated)
    Note: WARNING: Pointer becomes invalid if StringBuilder is modified!
    Note: Use only for reading, not modification
    Note: For a safe copy, use stringbuilder_to_string instead

    If sb is equal to 0:
        Return 0
    End If

    Return proc memory_get_int64 from Memory with sb, 0
End Process

Note: ============================================================================
Note: MODIFICATION
Note: ============================================================================

Process called "stringbuilder_clear" takes sb as Integer returns Integer:
    Note: Clear buffer (reset to empty string)
    Note: Keeps capacity, just resets length
    Note: Returns 1 on success

    If sb is equal to 0:
        Return 0
    End If

    Let buffer be proc memory_get_int64 from Memory with sb, 0
    proc memory_set_byte from Memory with buffer, 0, 0  Note: Null terminator at start

    proc memory_set_int64 from Memory with sb, 8, 0  Note: length = 0

    Return 1
End Process

Process called "stringbuilder_set_length" takes sb as Integer, new_length as Integer returns Integer:
    Note: Set length directly (truncate or pad with nulls)
    Note: If truncating, adds null terminator at new length
    Note: If growing, fills with null bytes
    Note: Returns 1 on success, 0 on failure

    If sb is equal to 0:
        Return 0
    End If

    If new_length is less than 0:
        Return 0
    End If

    Let current_length be proc memory_get_int64 from Memory with sb, 8
    Let capacity be proc memory_get_int64 from Memory with sb, 16

    Note: Ensure capacity for new length + null terminator
    Let needed be new_length plus 1
    If needed is greater than capacity:
        Let result be proc stringbuilder_ensure_capacity with sb, needed
        If result is equal to 0:
            Return 0
        End If
    End If

    Let buffer be proc memory_get_int64 from Memory with sb, 0

    Note: If growing, fill new space with null bytes
    If new_length is greater than current_length:
        Let fill_start be current_length
        Let fill_count be new_length minus current_length
        proc memory_fill from Memory with buffer plus fill_start, 0, fill_count
    End If

    Note: Set new length and null terminator
    proc memory_set_int64 from Memory with sb, 8, new_length
    proc memory_set_byte from Memory with buffer, new_length, 0

    Return 1
End Process

Note: ============================================================================
Note: QUERIES
Note: ============================================================================

Process called "stringbuilder_length" takes sb as Integer returns Integer:
    Note: Get current length (number of characters, excluding null terminator)
    If sb is equal to 0:
        Return 0
    End If
    Return proc memory_get_int64 from Memory with sb, 8
End Process

Process called "stringbuilder_capacity" takes sb as Integer returns Integer:
    Note: Get current capacity (including space for null terminator)
    If sb is equal to 0:
        Return 0
    End If
    Return proc memory_get_int64 from Memory with sb, 16
End Process

Process called "stringbuilder_is_empty" takes sb as Integer returns Integer:
    Note: Check if string builder is empty
    Note: Returns 1 if empty, 0 if not
    If sb is equal to 0:
        Return 1
    End If
    Let length be proc memory_get_int64 from Memory with sb, 8
    If length is equal to 0:
        Return 1
    End If
    Return 0
End Process
