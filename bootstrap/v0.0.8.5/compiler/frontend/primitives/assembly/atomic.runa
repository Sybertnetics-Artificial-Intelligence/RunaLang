Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: Atomic Operations

This file provides platform-agnostic atomic operation interface.
Delegates to platform-specific implementations with inline assembly.

All operations work on 64-bit integers stored in memory.
Atomicity and memory ordering are guaranteed by platform-specific code.

Supported platforms (18 total):
1=linux_x86_64, 2=linux_arm64, 3=linux_arm32, 4=mips32, 5=mips64
6=darwin_x86_64, 7=darwin_arm64, 8=freebsd_x64, 9=freebsd_arm64
10=netbsd_x64, 11=netbsd_arm64, 12=openbsd_x64, 13=openbsd_arm64
14=windows_x86_64, 15=windows_arm64, 16=powerpc, 17=riscv32, 18=riscv64
:End Note

Import "compiler/frontend/primitives/platform/linux_x86_64/atomic.runa" as LinuxX86_64
Import "compiler/frontend/primitives/platform/linux_arm64/atomic.runa" as LinuxARM64
Import "compiler/frontend/primitives/platform/linux_arm32/atomic.runa" as LinuxARM32
Import "compiler/frontend/primitives/platform/mips32/atomic.runa" as MIPS32
Import "compiler/frontend/primitives/platform/mips64/atomic.runa" as MIPS64
Import "compiler/frontend/primitives/platform/darwin_x86_64/atomic.runa" as DarwinX86_64
Import "compiler/frontend/primitives/platform/darwin_arm64/atomic.runa" as DarwinARM64
Import "compiler/frontend/primitives/platform/freebsd_x64/atomic.runa" as FreeBSDX64
Import "compiler/frontend/primitives/platform/freebsd_arm64/atomic.runa" as FreeBSDARM64
Import "compiler/frontend/primitives/platform/netbsd_x64/atomic.runa" as NetBSDX64
Import "compiler/frontend/primitives/platform/netbsd_arm64/atomic.runa" as NetBSDARM64
Import "compiler/frontend/primitives/platform/openbsd_x64/atomic.runa" as OpenBSDX64
Import "compiler/frontend/primitives/platform/openbsd_arm64/atomic.runa" as OpenBSDARM64
Import "compiler/frontend/primitives/platform/windows_x86_64/atomic.runa" as WindowsX86_64
Import "compiler/frontend/primitives/platform/windows_arm64/atomic.runa" as WindowsARM64
Import "compiler/frontend/primitives/platform/powerpc/atomic.runa" as PowerPC
Import "compiler/frontend/primitives/platform/riscv32/atomic.runa" as RISCV32
Import "compiler/frontend/primitives/platform/riscv64/atomic.runa" as RISCV64

Note: Get backend index (set by compiler at initialization)
Import "compiler/frontend/primitives/assembly/register_map.runa" as RegisterMap

Note: ============================================================================
Note: Atomic Load Operations
Note: ============================================================================

Process called "atomic_load_relaxed" takes ptr as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_load_relaxed from LinuxX86_64 with ptr End If
    If idx is equal to 2: Return proc atomic_load_relaxed from LinuxARM64 with ptr End If
    If idx is equal to 3: Return proc atomic_load_relaxed from LinuxARM32 with ptr End If
    If idx is equal to 4: Return proc atomic_load_relaxed from MIPS32 with ptr End If
    If idx is equal to 5: Return proc atomic_load_relaxed from MIPS64 with ptr End If
    If idx is equal to 6: Return proc atomic_load_relaxed from DarwinX86_64 with ptr End If
    If idx is equal to 7: Return proc atomic_load_relaxed from DarwinARM64 with ptr End If
    If idx is equal to 8: Return proc atomic_load_relaxed from FreeBSDX64 with ptr End If
    If idx is equal to 9: Return proc atomic_load_relaxed from FreeBSDARM64 with ptr End If
    If idx is equal to 10: Return proc atomic_load_relaxed from NetBSDX64 with ptr End If
    If idx is equal to 11: Return proc atomic_load_relaxed from NetBSDARM64 with ptr End If
    If idx is equal to 12: Return proc atomic_load_relaxed from OpenBSDX64 with ptr End If
    If idx is equal to 13: Return proc atomic_load_relaxed from OpenBSDARM64 with ptr End If
    If idx is equal to 14: Return proc atomic_load_relaxed from WindowsX86_64 with ptr End If
    If idx is equal to 15: Return proc atomic_load_relaxed from WindowsARM64 with ptr End If
    If idx is equal to 16: Return proc atomic_load_relaxed from PowerPC with ptr End If
    If idx is equal to 17: Return proc atomic_load_relaxed from RISCV32 with ptr End If
    If idx is equal to 18: Return proc atomic_load_relaxed from RISCV64 with ptr End If
    Return 0
End Process

Process called "atomic_load_acquire" takes ptr as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_load_acquire from LinuxX86_64 with ptr End If
    If idx is equal to 2: Return proc atomic_load_acquire from LinuxARM64 with ptr End If
    If idx is equal to 3: Return proc atomic_load_acquire from LinuxARM32 with ptr End If
    If idx is equal to 4: Return proc atomic_load_acquire from MIPS32 with ptr End If
    If idx is equal to 5: Return proc atomic_load_acquire from MIPS64 with ptr End If
    If idx is equal to 6: Return proc atomic_load_acquire from DarwinX86_64 with ptr End If
    If idx is equal to 7: Return proc atomic_load_acquire from DarwinARM64 with ptr End If
    If idx is equal to 8: Return proc atomic_load_acquire from FreeBSDX64 with ptr End If
    If idx is equal to 9: Return proc atomic_load_acquire from FreeBSDARM64 with ptr End If
    If idx is equal to 10: Return proc atomic_load_acquire from NetBSDX64 with ptr End If
    If idx is equal to 11: Return proc atomic_load_acquire from NetBSDARM64 with ptr End If
    If idx is equal to 12: Return proc atomic_load_acquire from OpenBSDX64 with ptr End If
    If idx is equal to 13: Return proc atomic_load_acquire from OpenBSDARM64 with ptr End If
    If idx is equal to 14: Return proc atomic_load_acquire from WindowsX86_64 with ptr End If
    If idx is equal to 15: Return proc atomic_load_acquire from WindowsARM64 with ptr End If
    If idx is equal to 16: Return proc atomic_load_acquire from PowerPC with ptr End If
    If idx is equal to 17: Return proc atomic_load_acquire from RISCV32 with ptr End If
    If idx is equal to 18: Return proc atomic_load_acquire from RISCV64 with ptr End If
    Return 0
End Process

Process called "atomic_load_seq_cst" takes ptr as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_load_seq_cst from LinuxX86_64 with ptr End If
    If idx is equal to 2: Return proc atomic_load_seq_cst from LinuxARM64 with ptr End If
    If idx is equal to 3: Return proc atomic_load_seq_cst from LinuxARM32 with ptr End If
    If idx is equal to 4: Return proc atomic_load_seq_cst from MIPS32 with ptr End If
    If idx is equal to 5: Return proc atomic_load_seq_cst from MIPS64 with ptr End If
    If idx is equal to 6: Return proc atomic_load_seq_cst from DarwinX86_64 with ptr End If
    If idx is equal to 7: Return proc atomic_load_seq_cst from DarwinARM64 with ptr End If
    If idx is equal to 8: Return proc atomic_load_seq_cst from FreeBSDX64 with ptr End If
    If idx is equal to 9: Return proc atomic_load_seq_cst from FreeBSDARM64 with ptr End If
    If idx is equal to 10: Return proc atomic_load_seq_cst from NetBSDX64 with ptr End If
    If idx is equal to 11: Return proc atomic_load_seq_cst from NetBSDARM64 with ptr End If
    If idx is equal to 12: Return proc atomic_load_seq_cst from OpenBSDX64 with ptr End If
    If idx is equal to 13: Return proc atomic_load_seq_cst from OpenBSDARM64 with ptr End If
    If idx is equal to 14: Return proc atomic_load_seq_cst from WindowsX86_64 with ptr End If
    If idx is equal to 15: Return proc atomic_load_seq_cst from WindowsARM64 with ptr End If
    If idx is equal to 16: Return proc atomic_load_seq_cst from PowerPC with ptr End If
    If idx is equal to 17: Return proc atomic_load_seq_cst from RISCV32 with ptr End If
    If idx is equal to 18: Return proc atomic_load_seq_cst from RISCV64 with ptr End If
    Return 0
End Process

Note: ============================================================================
Note: Atomic Store Operations
Note: ============================================================================

Process called "atomic_store_relaxed" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_store_relaxed from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_store_relaxed from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_store_relaxed from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_store_relaxed from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_store_relaxed from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_store_relaxed from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_store_relaxed from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_store_relaxed from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_store_relaxed from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_store_relaxed from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_store_relaxed from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_store_relaxed from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_store_relaxed from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_store_relaxed from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_store_relaxed from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_store_relaxed from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_store_relaxed from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_store_relaxed from RISCV64 with ptr, value End If
    Return 0
End Process

Process called "atomic_store_release" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_store_release from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_store_release from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_store_release from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_store_release from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_store_release from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_store_release from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_store_release from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_store_release from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_store_release from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_store_release from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_store_release from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_store_release from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_store_release from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_store_release from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_store_release from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_store_release from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_store_release from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_store_release from RISCV64 with ptr, value End If
    Return 0
End Process

Process called "atomic_store_seq_cst" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_store_seq_cst from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_store_seq_cst from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_store_seq_cst from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_store_seq_cst from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_store_seq_cst from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_store_seq_cst from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_store_seq_cst from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_store_seq_cst from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_store_seq_cst from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_store_seq_cst from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_store_seq_cst from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_store_seq_cst from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_store_seq_cst from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_store_seq_cst from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_store_seq_cst from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_store_seq_cst from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_store_seq_cst from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_store_seq_cst from RISCV64 with ptr, value End If
    Return 0
End Process

Note: ============================================================================
Note: Atomic Fetch-and-Modify Operations
Note: ============================================================================

Process called "atomic_fetch_add" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_fetch_add from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_fetch_add from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_fetch_add from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_fetch_add from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_fetch_add from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_fetch_add from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_fetch_add from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_fetch_add from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_fetch_add from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_fetch_add from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_fetch_add from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_fetch_add from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_fetch_add from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_fetch_add from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_fetch_add from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_fetch_add from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_fetch_add from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_fetch_add from RISCV64 with ptr, value End If
    Return 0
End Process

Process called "atomic_fetch_sub" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_fetch_sub from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_fetch_sub from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_fetch_sub from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_fetch_sub from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_fetch_sub from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_fetch_sub from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_fetch_sub from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_fetch_sub from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_fetch_sub from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_fetch_sub from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_fetch_sub from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_fetch_sub from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_fetch_sub from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_fetch_sub from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_fetch_sub from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_fetch_sub from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_fetch_sub from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_fetch_sub from RISCV64 with ptr, value End If
    Return 0
End Process

Process called "atomic_fetch_and" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_fetch_and from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_fetch_and from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_fetch_and from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_fetch_and from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_fetch_and from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_fetch_and from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_fetch_and from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_fetch_and from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_fetch_and from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_fetch_and from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_fetch_and from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_fetch_and from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_fetch_and from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_fetch_and from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_fetch_and from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_fetch_and from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_fetch_and from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_fetch_and from RISCV64 with ptr, value End If
    Return 0
End Process

Process called "atomic_fetch_or" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_fetch_or from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_fetch_or from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_fetch_or from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_fetch_or from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_fetch_or from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_fetch_or from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_fetch_or from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_fetch_or from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_fetch_or from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_fetch_or from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_fetch_or from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_fetch_or from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_fetch_or from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_fetch_or from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_fetch_or from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_fetch_or from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_fetch_or from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_fetch_or from RISCV64 with ptr, value End If
    Return 0
End Process

Process called "atomic_fetch_xor" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_fetch_xor from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_fetch_xor from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_fetch_xor from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_fetch_xor from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_fetch_xor from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_fetch_xor from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_fetch_xor from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_fetch_xor from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_fetch_xor from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_fetch_xor from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_fetch_xor from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_fetch_xor from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_fetch_xor from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_fetch_xor from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_fetch_xor from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_fetch_xor from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_fetch_xor from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_fetch_xor from RISCV64 with ptr, value End If
    Return 0
End Process

Note: ============================================================================
Note: Compare-and-Swap Operations
Note: ============================================================================

Process called "atomic_compare_and_swap" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_compare_and_swap from LinuxX86_64 with ptr, expected, desired End If
    If idx is equal to 2: Return proc atomic_compare_and_swap from LinuxARM64 with ptr, expected, desired End If
    If idx is equal to 3: Return proc atomic_compare_and_swap from LinuxARM32 with ptr, expected, desired End If
    If idx is equal to 4: Return proc atomic_compare_and_swap from MIPS32 with ptr, expected, desired End If
    If idx is equal to 5: Return proc atomic_compare_and_swap from MIPS64 with ptr, expected, desired End If
    If idx is equal to 6: Return proc atomic_compare_and_swap from DarwinX86_64 with ptr, expected, desired End If
    If idx is equal to 7: Return proc atomic_compare_and_swap from DarwinARM64 with ptr, expected, desired End If
    If idx is equal to 8: Return proc atomic_compare_and_swap from FreeBSDX64 with ptr, expected, desired End If
    If idx is equal to 9: Return proc atomic_compare_and_swap from FreeBSDARM64 with ptr, expected, desired End If
    If idx is equal to 10: Return proc atomic_compare_and_swap from NetBSDX64 with ptr, expected, desired End If
    If idx is equal to 11: Return proc atomic_compare_and_swap from NetBSDARM64 with ptr, expected, desired End If
    If idx is equal to 12: Return proc atomic_compare_and_swap from OpenBSDX64 with ptr, expected, desired End If
    If idx is equal to 13: Return proc atomic_compare_and_swap from OpenBSDARM64 with ptr, expected, desired End If
    If idx is equal to 14: Return proc atomic_compare_and_swap from WindowsX86_64 with ptr, expected, desired End If
    If idx is equal to 15: Return proc atomic_compare_and_swap from WindowsARM64 with ptr, expected, desired End If
    If idx is equal to 16: Return proc atomic_compare_and_swap from PowerPC with ptr, expected, desired End If
    If idx is equal to 17: Return proc atomic_compare_and_swap from RISCV32 with ptr, expected, desired End If
    If idx is equal to 18: Return proc atomic_compare_and_swap from RISCV64 with ptr, expected, desired End If
    Return 0
End Process

Process called "atomic_compare_and_swap_weak" takes ptr as Integer, expected as Integer, desired as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_compare_and_swap_weak from LinuxX86_64 with ptr, expected, desired End If
    If idx is equal to 2: Return proc atomic_compare_and_swap_weak from LinuxARM64 with ptr, expected, desired End If
    If idx is equal to 3: Return proc atomic_compare_and_swap_weak from LinuxARM32 with ptr, expected, desired End If
    If idx is equal to 4: Return proc atomic_compare_and_swap_weak from MIPS32 with ptr, expected, desired End If
    If idx is equal to 5: Return proc atomic_compare_and_swap_weak from MIPS64 with ptr, expected, desired End If
    If idx is equal to 6: Return proc atomic_compare_and_swap_weak from DarwinX86_64 with ptr, expected, desired End If
    If idx is equal to 7: Return proc atomic_compare_and_swap_weak from DarwinARM64 with ptr, expected, desired End If
    If idx is equal to 8: Return proc atomic_compare_and_swap_weak from FreeBSDX64 with ptr, expected, desired End If
    If idx is equal to 9: Return proc atomic_compare_and_swap_weak from FreeBSDARM64 with ptr, expected, desired End If
    If idx is equal to 10: Return proc atomic_compare_and_swap_weak from NetBSDX64 with ptr, expected, desired End If
    If idx is equal to 11: Return proc atomic_compare_and_swap_weak from NetBSDARM64 with ptr, expected, desired End If
    If idx is equal to 12: Return proc atomic_compare_and_swap_weak from OpenBSDX64 with ptr, expected, desired End If
    If idx is equal to 13: Return proc atomic_compare_and_swap_weak from OpenBSDARM64 with ptr, expected, desired End If
    If idx is equal to 14: Return proc atomic_compare_and_swap_weak from WindowsX86_64 with ptr, expected, desired End If
    If idx is equal to 15: Return proc atomic_compare_and_swap_weak from WindowsARM64 with ptr, expected, desired End If
    If idx is equal to 16: Return proc atomic_compare_and_swap_weak from PowerPC with ptr, expected, desired End If
    If idx is equal to 17: Return proc atomic_compare_and_swap_weak from RISCV32 with ptr, expected, desired End If
    If idx is equal to 18: Return proc atomic_compare_and_swap_weak from RISCV64 with ptr, expected, desired End If
    Return 0
End Process

Process called "atomic_exchange" takes ptr as Integer, value as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc atomic_exchange from LinuxX86_64 with ptr, value End If
    If idx is equal to 2: Return proc atomic_exchange from LinuxARM64 with ptr, value End If
    If idx is equal to 3: Return proc atomic_exchange from LinuxARM32 with ptr, value End If
    If idx is equal to 4: Return proc atomic_exchange from MIPS32 with ptr, value End If
    If idx is equal to 5: Return proc atomic_exchange from MIPS64 with ptr, value End If
    If idx is equal to 6: Return proc atomic_exchange from DarwinX86_64 with ptr, value End If
    If idx is equal to 7: Return proc atomic_exchange from DarwinARM64 with ptr, value End If
    If idx is equal to 8: Return proc atomic_exchange from FreeBSDX64 with ptr, value End If
    If idx is equal to 9: Return proc atomic_exchange from FreeBSDARM64 with ptr, value End If
    If idx is equal to 10: Return proc atomic_exchange from NetBSDX64 with ptr, value End If
    If idx is equal to 11: Return proc atomic_exchange from NetBSDARM64 with ptr, value End If
    If idx is equal to 12: Return proc atomic_exchange from OpenBSDX64 with ptr, value End If
    If idx is equal to 13: Return proc atomic_exchange from OpenBSDARM64 with ptr, value End If
    If idx is equal to 14: Return proc atomic_exchange from WindowsX86_64 with ptr, value End If
    If idx is equal to 15: Return proc atomic_exchange from WindowsARM64 with ptr, value End If
    If idx is equal to 16: Return proc atomic_exchange from PowerPC with ptr, value End If
    If idx is equal to 17: Return proc atomic_exchange from RISCV32 with ptr, value End If
    If idx is equal to 18: Return proc atomic_exchange from RISCV64 with ptr, value End If
    Return 0
End Process

Note: ============================================================================
Note: Memory Barrier Operations
Note: ============================================================================

Process called "memory_barrier_acquire" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc memory_barrier_acquire from LinuxX86_64 End If
    If idx is equal to 2: Return proc memory_barrier_acquire from LinuxARM64 End If
    If idx is equal to 3: Return proc memory_barrier_acquire from LinuxARM32 End If
    If idx is equal to 4: Return proc memory_barrier_acquire from MIPS32 End If
    If idx is equal to 5: Return proc memory_barrier_acquire from MIPS64 End If
    If idx is equal to 6: Return proc memory_barrier_acquire from DarwinX86_64 End If
    If idx is equal to 7: Return proc memory_barrier_acquire from DarwinARM64 End If
    If idx is equal to 8: Return proc memory_barrier_acquire from FreeBSDX64 End If
    If idx is equal to 9: Return proc memory_barrier_acquire from FreeBSDARM64 End If
    If idx is equal to 10: Return proc memory_barrier_acquire from NetBSDX64 End If
    If idx is equal to 11: Return proc memory_barrier_acquire from NetBSDARM64 End If
    If idx is equal to 12: Return proc memory_barrier_acquire from OpenBSDX64 End If
    If idx is equal to 13: Return proc memory_barrier_acquire from OpenBSDARM64 End If
    If idx is equal to 14: Return proc memory_barrier_acquire from WindowsX86_64 End If
    If idx is equal to 15: Return proc memory_barrier_acquire from WindowsARM64 End If
    If idx is equal to 16: Return proc memory_barrier_acquire from PowerPC End If
    If idx is equal to 17: Return proc memory_barrier_acquire from RISCV32 End If
    If idx is equal to 18: Return proc memory_barrier_acquire from RISCV64 End If
    Return 0
End Process

Process called "memory_barrier_release" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc memory_barrier_release from LinuxX86_64 End If
    If idx is equal to 2: Return proc memory_barrier_release from LinuxARM64 End If
    If idx is equal to 3: Return proc memory_barrier_release from LinuxARM32 End If
    If idx is equal to 4: Return proc memory_barrier_release from MIPS32 End If
    If idx is equal to 5: Return proc memory_barrier_release from MIPS64 End If
    If idx is equal to 6: Return proc memory_barrier_release from DarwinX86_64 End If
    If idx is equal to 7: Return proc memory_barrier_release from DarwinARM64 End If
    If idx is equal to 8: Return proc memory_barrier_release from FreeBSDX64 End If
    If idx is equal to 9: Return proc memory_barrier_release from FreeBSDARM64 End If
    If idx is equal to 10: Return proc memory_barrier_release from NetBSDX64 End If
    If idx is equal to 11: Return proc memory_barrier_release from NetBSDARM64 End If
    If idx is equal to 12: Return proc memory_barrier_release from OpenBSDX64 End If
    If idx is equal to 13: Return proc memory_barrier_release from OpenBSDARM64 End If
    If idx is equal to 14: Return proc memory_barrier_release from WindowsX86_64 End If
    If idx is equal to 15: Return proc memory_barrier_release from WindowsARM64 End If
    If idx is equal to 16: Return proc memory_barrier_release from PowerPC End If
    If idx is equal to 17: Return proc memory_barrier_release from RISCV32 End If
    If idx is equal to 18: Return proc memory_barrier_release from RISCV64 End If
    Return 0
End Process

Process called "memory_barrier_full" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc memory_barrier_full from LinuxX86_64 End If
    If idx is equal to 2: Return proc memory_barrier_full from LinuxARM64 End If
    If idx is equal to 3: Return proc memory_barrier_full from LinuxARM32 End If
    If idx is equal to 4: Return proc memory_barrier_full from MIPS32 End If
    If idx is equal to 5: Return proc memory_barrier_full from MIPS64 End If
    If idx is equal to 6: Return proc memory_barrier_full from DarwinX86_64 End If
    If idx is equal to 7: Return proc memory_barrier_full from DarwinARM64 End If
    If idx is equal to 8: Return proc memory_barrier_full from FreeBSDX64 End If
    If idx is equal to 9: Return proc memory_barrier_full from FreeBSDARM64 End If
    If idx is equal to 10: Return proc memory_barrier_full from NetBSDX64 End If
    If idx is equal to 11: Return proc memory_barrier_full from NetBSDARM64 End If
    If idx is equal to 12: Return proc memory_barrier_full from OpenBSDX64 End If
    If idx is equal to 13: Return proc memory_barrier_full from OpenBSDARM64 End If
    If idx is equal to 14: Return proc memory_barrier_full from WindowsX86_64 End If
    If idx is equal to 15: Return proc memory_barrier_full from WindowsARM64 End If
    If idx is equal to 16: Return proc memory_barrier_full from PowerPC End If
    If idx is equal to 17: Return proc memory_barrier_full from RISCV32 End If
    If idx is equal to 18: Return proc memory_barrier_full from RISCV64 End If
    Return 0
End Process

Process called "memory_barrier_seq_cst" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc memory_barrier_seq_cst from LinuxX86_64 End If
    If idx is equal to 2: Return proc memory_barrier_seq_cst from LinuxARM64 End If
    If idx is equal to 3: Return proc memory_barrier_seq_cst from LinuxARM32 End If
    If idx is equal to 4: Return proc memory_barrier_seq_cst from MIPS32 End If
    If idx is equal to 5: Return proc memory_barrier_seq_cst from MIPS64 End If
    If idx is equal to 6: Return proc memory_barrier_seq_cst from DarwinX86_64 End If
    If idx is equal to 7: Return proc memory_barrier_seq_cst from DarwinARM64 End If
    If idx is equal to 8: Return proc memory_barrier_seq_cst from FreeBSDX64 End If
    If idx is equal to 9: Return proc memory_barrier_seq_cst from FreeBSDARM64 End If
    If idx is equal to 10: Return proc memory_barrier_seq_cst from NetBSDX64 End If
    If idx is equal to 11: Return proc memory_barrier_seq_cst from NetBSDARM64 End If
    If idx is equal to 12: Return proc memory_barrier_seq_cst from OpenBSDX64 End If
    If idx is equal to 13: Return proc memory_barrier_seq_cst from OpenBSDARM64 End If
    If idx is equal to 14: Return proc memory_barrier_seq_cst from WindowsX86_64 End If
    If idx is equal to 15: Return proc memory_barrier_seq_cst from WindowsARM64 End If
    If idx is equal to 16: Return proc memory_barrier_seq_cst from PowerPC End If
    If idx is equal to 17: Return proc memory_barrier_seq_cst from RISCV32 End If
    If idx is equal to 18: Return proc memory_barrier_seq_cst from RISCV64 End If
    Return 0
End Process
