Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: System Call Interface

This file provides a platform-agnostic interface for system calls.
It imports the platform-specific syscall implementation based on the compile target.

Architecture:
- This file defines the common API that all Runa code uses
- Platform-specific implementations are in platform/{platform}/syscall.runa
- The compiler sets the target platform at compile time
- Imports delegate to the correct platform-specific implementation

Supported platforms:
- Linux (x86_64, ARM64, ARM32)
- Darwin/macOS (x86_64, ARM64)
- Windows (x86_64, ARM64)
- FreeBSD, OpenBSD, NetBSD (x86_64, ARM64)
- RISC-V, MIPS, PowerPC
- GPU platforms (CUDA, OpenCL, Metal)
- Embedded (DSP, FPGA)

Usage:
All code should call functions from this file (e.g., syscall_read, syscall_write).
The platform-specific implementation is automatically selected at compile time.
:End Note

Note: ============================================================================
Note: PLATFORM DETECTION AND IMPORT
Note: ============================================================================
Note: TODO: Compiler should set PLATFORM_TARGET at compile time
Note: For now, defaulting to linux_x86_64 (the only complete implementation)
Note: Examples of platform targets:
Note:   - linux_x86_64
Note:   - linux_arm64
Note:   - darwin_x86_64
Note:   - windows_x86_64
Note:   - freebsd_x64
Note:   - etc.

Import "compiler/frontend/primitives/platform/linux_x86_64/syscall.runa" as PlatformSyscall

Note: ============================================================================
Note: SYSCALL NUMBER CONSTANTS (Platform-Agnostic Interface)
Note: ============================================================================
Note: These delegate to platform-specific implementations

Process called "SYS_READ" returns Integer:
    Return PlatformSyscall.SYS_READ()
End Process

Process called "SYS_WRITE" returns Integer:
    Return PlatformSyscall.SYS_WRITE()
End Process

Process called "SYS_OPEN" returns Integer:
    Return PlatformSyscall.SYS_OPEN()
End Process

Process called "SYS_CLOSE" returns Integer:
    Return PlatformSyscall.SYS_CLOSE()
End Process

Process called "SYS_EXIT" returns Integer:
    Return PlatformSyscall.SYS_EXIT()
End Process

Process called "SYS_EXIT_GROUP" returns Integer:
    Return PlatformSyscall.SYS_EXIT_GROUP()
End Process

Process called "SYS_BRK" returns Integer:
    Return PlatformSyscall.SYS_BRK()
End Process

Process called "SYS_MMAP" returns Integer:
    Return PlatformSyscall.SYS_MMAP()
End Process

Process called "SYS_MUNMAP" returns Integer:
    Return PlatformSyscall.SYS_MUNMAP()
End Process

Process called "SYS_STAT" returns Integer:
    Return PlatformSyscall.SYS_STAT()
End Process

Process called "SYS_FSTAT" returns Integer:
    Return PlatformSyscall.SYS_FSTAT()
End Process

Process called "SYS_LSTAT" returns Integer:
    Return PlatformSyscall.SYS_LSTAT()
End Process

Process called "SYS_LSEEK" returns Integer:
    Return PlatformSyscall.SYS_LSEEK()
End Process

Process called "SYS_CREAT" returns Integer:
    Return PlatformSyscall.SYS_CREAT()
End Process

Process called "SYS_UNLINK" returns Integer:
    Return PlatformSyscall.SYS_UNLINK()
End Process

Process called "SYS_MKDIR" returns Integer:
    Return PlatformSyscall.SYS_MKDIR()
End Process

Process called "SYS_RMDIR" returns Integer:
    Return PlatformSyscall.SYS_RMDIR()
End Process

Note: ============================================================================
Note: GENERIC SYSCALL WRAPPERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "syscall_0" takes syscall_number as Integer returns Integer:
    Return PlatformSyscall.syscall_0(syscall_number)
End Process

Process called "syscall_1" takes syscall_number as Integer, arg1 as Integer returns Integer:
    Return PlatformSyscall.syscall_1(syscall_number, arg1)
End Process

Process called "syscall_2" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Return PlatformSyscall.syscall_2(syscall_number, arg1, arg2)
End Process

Process called "syscall_3" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer returns Integer:
    Return PlatformSyscall.syscall_3(syscall_number, arg1, arg2, arg3)
End Process

Process called "syscall_4" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer returns Integer:
    Return PlatformSyscall.syscall_4(syscall_number, arg1, arg2, arg3, arg4)
End Process

Process called "syscall_5" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer returns Integer:
    Return PlatformSyscall.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5)
End Process

Process called "syscall_6" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer returns Integer:
    Return PlatformSyscall.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6)
End Process

Note: ============================================================================
Note: HIGH-LEVEL SYSCALL WRAPPERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "syscall_read" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Return PlatformSyscall.syscall_read(fd, buffer, count)
End Process

Process called "syscall_write" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Return PlatformSyscall.syscall_write(fd, buffer, count)
End Process

Process called "syscall_open" takes filename as Integer, flags as Integer, mode as Integer returns Integer:
    Return PlatformSyscall.syscall_open(filename, flags, mode)
End Process

Process called "syscall_close" takes fd as Integer returns Integer:
    Return PlatformSyscall.syscall_close(fd)
End Process

Process called "syscall_exit" takes status as Integer returns Integer:
    Return PlatformSyscall.syscall_exit(status)
End Process

Process called "syscall_brk" takes addr as Integer returns Integer:
    Return PlatformSyscall.syscall_brk(addr)
End Process

Process called "syscall_mmap" takes addr as Integer, length as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Integer:
    Return PlatformSyscall.syscall_mmap(addr, length, prot, flags, fd, offset)
End Process

Process called "syscall_munmap" takes addr as Integer, length as Integer returns Integer:
    Return PlatformSyscall.syscall_munmap(addr, length)
End Process

Process called "syscall_fstat" takes fd as Integer, statbuf as Integer returns Integer:
    Return PlatformSyscall.syscall_fstat(fd, statbuf)
End Process

Process called "syscall_lseek" takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Return PlatformSyscall.syscall_lseek(fd, offset, whence)
End Process

Note: ============================================================================
Note: SYSCALL CONSTANTS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "O_RDONLY" returns Integer:
    Return PlatformSyscall.O_RDONLY()
End Process

Process called "O_WRONLY" returns Integer:
    Return PlatformSyscall.O_WRONLY()
End Process

Process called "O_RDWR" returns Integer:
    Return PlatformSyscall.O_RDWR()
End Process

Process called "O_CREAT" returns Integer:
    Return PlatformSyscall.O_CREAT()
End Process

Process called "O_TRUNC" returns Integer:
    Return PlatformSyscall.O_TRUNC()
End Process

Process called "O_APPEND" returns Integer:
    Return PlatformSyscall.O_APPEND()
End Process

Process called "MODE_0644" returns Integer:
    Return PlatformSyscall.MODE_0644()
End Process

Process called "MODE_0755" returns Integer:
    Return PlatformSyscall.MODE_0755()
End Process

Process called "PROT_NONE" returns Integer:
    Return PlatformSyscall.PROT_NONE()
End Process

Process called "PROT_READ" returns Integer:
    Return PlatformSyscall.PROT_READ()
End Process

Process called "PROT_WRITE" returns Integer:
    Return PlatformSyscall.PROT_WRITE()
End Process

Process called "PROT_EXEC" returns Integer:
    Return PlatformSyscall.PROT_EXEC()
End Process

Process called "MAP_SHARED" returns Integer:
    Return PlatformSyscall.MAP_SHARED()
End Process

Process called "MAP_PRIVATE" returns Integer:
    Return PlatformSyscall.MAP_PRIVATE()
End Process

Process called "MAP_FIXED" returns Integer:
    Return PlatformSyscall.MAP_FIXED()
End Process

Process called "MAP_ANONYMOUS" returns Integer:
    Return PlatformSyscall.MAP_ANONYMOUS()
End Process

Process called "SEEK_SET" returns Integer:
    Return PlatformSyscall.SEEK_SET()
End Process

Process called "SEEK_CUR" returns Integer:
    Return PlatformSyscall.SEEK_CUR()
End Process

Process called "SEEK_END" returns Integer:
    Return PlatformSyscall.SEEK_END()
End Process

Process called "STDIN_FILENO" returns Integer:
    Return PlatformSyscall.STDIN_FILENO()
End Process

Process called "STDOUT_FILENO" returns Integer:
    Return PlatformSyscall.STDOUT_FILENO()
End Process

Process called "STDERR_FILENO" returns Integer:
    Return PlatformSyscall.STDERR_FILENO()
End Process
