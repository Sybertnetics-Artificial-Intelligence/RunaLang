Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: System Call Interface

This file provides a platform-agnostic interface for system calls.
It imports the platform-specific syscall implementation based on the compile target.

Architecture:
- This file defines the common API that all Runa code uses
- Platform-specific implementations are in platform/{platform}/syscall.runa
- The compiler sets the target platform at compile time
- Imports delegate to the correct platform-specific implementation

Supported platforms:
- Linux (x86_64, ARM64, ARM32)
- Darwin/macOS (x86_64, ARM64)
- Windows (x86_64, ARM64)
- FreeBSD, OpenBSD, NetBSD (x86_64, ARM64)
- RISC-V, MIPS, PowerPC

Usage:
All code should call functions from this file (e.g., syscall_read, syscall_write).
The platform-specific implementation is automatically selected at compile time.
:End Note

Note: =========================================================================
Note: PLATFORM SELECTION AND BACKEND BINDING
Note: =========================================================================
Note: The compiler driver passes (os, arch). We use platform_selector to choose
Note: the backend. We import supported syscall backends and dispatch based on a
Note: small integer index set by select_syscall_backend(os, arch).

Import "compiler/frontend/primitives/platform/platform_selector.runa" as Selector

Import "compiler/frontend/primitives/platform/linux_x86_64/syscall.runa" as LinuxX86_64
Import "compiler/frontend/primitives/platform/linux_arm64/syscall.runa" as LinuxARM64
Import "compiler/frontend/primitives/platform/linux_arm32/syscall.runa" as LinuxARM32
Import "compiler/frontend/primitives/platform/mips32/syscall.runa" as MIPS32
Import "compiler/frontend/primitives/platform/mips64/syscall.runa" as MIPS64
Import "compiler/frontend/primitives/platform/darwin_x86_64/syscall.runa" as DarwinX86_64
Import "compiler/frontend/primitives/platform/darwin_arm64/syscall.runa" as DarwinARM64
Import "compiler/frontend/primitives/platform/freebsd_x64/syscall.runa" as FreeBSDX64
Import "compiler/frontend/primitives/platform/freebsd_arm64/syscall.runa" as FreeBSDARM64
Import "compiler/frontend/primitives/platform/netbsd_x64/syscall.runa" as NetBSDX64
Import "compiler/frontend/primitives/platform/netbsd_arm64/syscall.runa" as NetBSDARM64
Import "compiler/frontend/primitives/platform/openbsd_x64/syscall.runa" as OpenBSDX64
Import "compiler/frontend/primitives/platform/openbsd_arm64/syscall.runa" as OpenBSDARM64
Import "compiler/frontend/primitives/platform/windows_x86_64/syscall.runa" as WindowsX86_64
Import "compiler/frontend/primitives/platform/windows_arm64/syscall.runa" as WindowsARM64
Import "compiler/frontend/primitives/platform/powerpc/syscall.runa" as PowerPC
Import "compiler/frontend/primitives/platform/riscv32/syscall.runa" as RISCV32
Import "compiler/frontend/primitives/platform/riscv64/syscall.runa" as RISCV64

Note: Backend index mapping
Note: 0=unset, 1=linux_x86_64, 2=linux_arm64, 3=linux_arm32, 4=mips32, 5=mips64,
Note: 6=darwin_x86_64, 7=darwin_arm64, 8=freebsd_x64, 9=freebsd_arm64,
Note: 10=netbsd_x64, 11=netbsd_arm64, 12=openbsd_x64, 13=openbsd_arm64,
Note: 14=windows_x86_64, 15=windows_arm64, 16=powerpc, 17=riscv32, 18=riscv64

Process called "_get_backend_index_for_key" takes key as String returns Integer:
    If key is equal to "linux_x86_64": Return 1 End If
    If key is equal to "linux_arm64": Return 2 End If
    If key is equal to "linux_arm32": Return 3 End If
    If key is equal to "mips32": Return 4 End If
    If key is equal to "mips64": Return 5 End If
    If key is equal to "darwin_x86_64": Return 6 End If
    If key is equal to "darwin_arm64": Return 7 End If
    If key is equal to "freebsd_x64": Return 8 End If
    If key is equal to "freebsd_arm64": Return 9 End If
    If key is equal to "netbsd_x64": Return 10 End If
    If key is equal to "netbsd_arm64": Return 11 End If
    If key is equal to "openbsd_x64": Return 12 End If
    If key is equal to "openbsd_arm64": Return 13 End If
    If key is equal to "windows_x86_64": Return 14 End If
    If key is equal to "windows_arm64": Return 15 End If
    If key is equal to "powerpc": Return 16 End If
    If key is equal to "riscv32": Return 17 End If
    If key is equal to "riscv64": Return 18 End If
    Return 0
End Process

Let _current_backend_index be 0

Process called "select_syscall_backend" takes os_name as String, arch_name as String returns Integer:
    Let key be proc get platform key from Selector with os_name, arch_name
    Let idx be _get_backend_index_for_key(key)
    If idx is equal to 0:
        Return 0
    End If
    Set _current_backend_index to idx
    Return 1
End Process

Process called "_ensure_backend_selected" returns Integer:
    If _current_backend_index is equal to 0:
        Set _current_backend_index to 1  Note: default linux_x86_64
    End If
    Return _current_backend_index
End Process

Note: ============================================================================
Note: SYSCALL NUMBER CONSTANTS (Platform-Agnostic Interface)
Note: ============================================================================
Note: These delegate to platform-specific implementations

Process called "SYS_READ" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_READ from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_READ from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_READ from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_READ from MIPS32 End If
    If idx is equal to 5: Return proc SYS_READ from MIPS64 End If
    If idx is equal to 6: Return proc SYS_READ from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_READ from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_READ from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_READ from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_READ from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_READ from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_READ from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_READ from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_READ from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_READ from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_READ from PowerPC End If
    If idx is equal to 17: Return proc SYS_READ from RISCV32 End If
    If idx is equal to 18: Return proc SYS_READ from RISCV64 End If
    Return proc SYS_READ from LinuxX86_64
End Process

Process called "SYS_WRITE" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_WRITE from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_WRITE from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_WRITE from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_WRITE from MIPS32 End If
    If idx is equal to 5: Return proc SYS_WRITE from MIPS64 End If
    If idx is equal to 6: Return proc SYS_WRITE from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_WRITE from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_WRITE from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_WRITE from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_WRITE from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_WRITE from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_WRITE from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_WRITE from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_WRITE from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_WRITE from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_WRITE from PowerPC End If
    If idx is equal to 17: Return proc SYS_WRITE from RISCV32 End If
    If idx is equal to 18: Return proc SYS_WRITE from RISCV64 End If
    Return proc SYS_WRITE from LinuxX86_64
End Process

Process called "SYS_OPEN" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_OPEN from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_OPEN from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_OPEN from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_OPEN from MIPS32 End If
    If idx is equal to 5: Return proc SYS_OPEN from MIPS64 End If
    If idx is equal to 6: Return proc SYS_OPEN from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_OPEN from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_OPEN from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_OPEN from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_OPEN from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_OPEN from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_OPEN from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_OPEN from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_OPEN from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_OPEN from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_OPEN from PowerPC End If
    If idx is equal to 17: Return proc SYS_OPEN from RISCV32 End If
    If idx is equal to 18: Return proc SYS_OPEN from RISCV64 End If
    Return 0
End Process

Process called "SYS_CLOSE" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_CLOSE from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_CLOSE from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_CLOSE from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_CLOSE from MIPS32 End If
    If idx is equal to 5: Return proc SYS_CLOSE from MIPS64 End If
    If idx is equal to 6: Return proc SYS_CLOSE from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_CLOSE from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_CLOSE from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_CLOSE from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_CLOSE from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_CLOSE from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_CLOSE from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_CLOSE from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_CLOSE from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_CLOSE from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_CLOSE from PowerPC End If
    If idx is equal to 17: Return proc SYS_CLOSE from RISCV32 End If
    If idx is equal to 18: Return proc SYS_CLOSE from RISCV64 End If
    Return 0
End Process

Process called "SYS_EXIT" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_EXIT from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_EXIT from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_EXIT from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_EXIT from MIPS32 End If
    If idx is equal to 5: Return proc SYS_EXIT from MIPS64 End If
    If idx is equal to 6: Return proc SYS_EXIT from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_EXIT from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_EXIT from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_EXIT from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_EXIT from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_EXIT from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_EXIT from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_EXIT from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_EXIT from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_EXIT from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_EXIT from PowerPC End If
    If idx is equal to 17: Return proc SYS_EXIT from RISCV32 End If
    If idx is equal to 18: Return proc SYS_EXIT from RISCV64 End If
    Return 0
End Process

Process called "SYS_EXIT_GROUP" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_EXIT_GROUP from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_EXIT_GROUP from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_EXIT_GROUP from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_EXIT_GROUP from MIPS32 End If
    If idx is equal to 5: Return proc SYS_EXIT_GROUP from MIPS64 End If
    If idx is equal to 6: Return proc SYS_EXIT_GROUP from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_EXIT_GROUP from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_EXIT_GROUP from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_EXIT_GROUP from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_EXIT_GROUP from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_EXIT_GROUP from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_EXIT_GROUP from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_EXIT_GROUP from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_EXIT_GROUP from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_EXIT_GROUP from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_EXIT_GROUP from PowerPC End If
    If idx is equal to 17: Return proc SYS_EXIT_GROUP from RISCV32 End If
    If idx is equal to 18: Return proc SYS_EXIT_GROUP from RISCV64 End If
    Return 0
End Process

Process called "SYS_BRK" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_BRK from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_BRK from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_BRK from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_BRK from MIPS32 End If
    If idx is equal to 5: Return proc SYS_BRK from MIPS64 End If
    If idx is equal to 6: Return proc SYS_BRK from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_BRK from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_BRK from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_BRK from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_BRK from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_BRK from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_BRK from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_BRK from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_BRK from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_BRK from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_BRK from PowerPC End If
    If idx is equal to 17: Return proc SYS_BRK from RISCV32 End If
    If idx is equal to 18: Return proc SYS_BRK from RISCV64 End If
    Return 0
End Process

Process called "SYS_MMAP" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_MMAP from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_MMAP from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_MMAP from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_MMAP from MIPS32 End If
    If idx is equal to 5: Return proc SYS_MMAP from MIPS64 End If
    If idx is equal to 6: Return proc SYS_MMAP from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_MMAP from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_MMAP from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_MMAP from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_MMAP from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_MMAP from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_MMAP from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_MMAP from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_MMAP from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_MMAP from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_MMAP from PowerPC End If
    If idx is equal to 17: Return proc SYS_MMAP from RISCV32 End If
    If idx is equal to 18: Return proc SYS_MMAP from RISCV64 End If
    Return 0
End Process

Process called "SYS_MUNMAP" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_MUNMAP from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_MUNMAP from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_MUNMAP from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_MUNMAP from MIPS32 End If
    If idx is equal to 5: Return proc SYS_MUNMAP from MIPS64 End If
    If idx is equal to 6: Return proc SYS_MUNMAP from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_MUNMAP from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_MUNMAP from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_MUNMAP from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_MUNMAP from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_MUNMAP from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_MUNMAP from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_MUNMAP from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_MUNMAP from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_MUNMAP from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_MUNMAP from PowerPC End If
    If idx is equal to 17: Return proc SYS_MUNMAP from RISCV32 End If
    If idx is equal to 18: Return proc SYS_MUNMAP from RISCV64 End If
    Return 0
End Process

Process called "SYS_STAT" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_STAT from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_STAT from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_STAT from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_STAT from MIPS32 End If
    If idx is equal to 5: Return proc SYS_STAT from MIPS64 End If
    If idx is equal to 6: Return proc SYS_STAT from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_STAT from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_STAT from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_STAT from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_STAT from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_STAT from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_STAT from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_STAT from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_STAT from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_STAT from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_STAT from PowerPC End If
    If idx is equal to 17: Return proc SYS_STAT from RISCV32 End If
    If idx is equal to 18: Return proc SYS_STAT from RISCV64 End If
    Return 0
End Process

Process called "SYS_FSTAT" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_FSTAT from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_FSTAT from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_FSTAT from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_FSTAT from MIPS32 End If
    If idx is equal to 5: Return proc SYS_FSTAT from MIPS64 End If
    If idx is equal to 6: Return proc SYS_FSTAT from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_FSTAT from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_FSTAT from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_FSTAT from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_FSTAT from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_FSTAT from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_FSTAT from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_FSTAT from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_FSTAT from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_FSTAT from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_FSTAT from PowerPC End If
    If idx is equal to 17: Return proc SYS_FSTAT from RISCV32 End If
    If idx is equal to 18: Return proc SYS_FSTAT from RISCV64 End If
    Return 0
End Process

Process called "SYS_LSTAT" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_LSTAT from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_LSTAT from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_LSTAT from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_LSTAT from MIPS32 End If
    If idx is equal to 5: Return proc SYS_LSTAT from MIPS64 End If
    If idx is equal to 6: Return proc SYS_LSTAT from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_LSTAT from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_LSTAT from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_LSTAT from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_LSTAT from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_LSTAT from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_LSTAT from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_LSTAT from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_LSTAT from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_LSTAT from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_LSTAT from PowerPC End If
    If idx is equal to 17: Return proc SYS_LSTAT from RISCV32 End If
    If idx is equal to 18: Return proc SYS_LSTAT from RISCV64 End If
    Return 0
End Process

Process called "SYS_LSEEK" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_LSEEK from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_LSEEK from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_LSEEK from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_LSEEK from MIPS32 End If
    If idx is equal to 5: Return proc SYS_LSEEK from MIPS64 End If
    If idx is equal to 6: Return proc SYS_LSEEK from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_LSEEK from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_LSEEK from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_LSEEK from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_LSEEK from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_LSEEK from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_LSEEK from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_LSEEK from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_LSEEK from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_LSEEK from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_LSEEK from PowerPC End If
    If idx is equal to 17: Return proc SYS_LSEEK from RISCV32 End If
    If idx is equal to 18: Return proc SYS_LSEEK from RISCV64 End If
    Return 0
End Process

Process called "SYS_CREAT" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_CREAT from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_CREAT from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_CREAT from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_CREAT from MIPS32 End If
    If idx is equal to 5: Return proc SYS_CREAT from MIPS64 End If
    If idx is equal to 6: Return proc SYS_CREAT from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_CREAT from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_CREAT from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_CREAT from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_CREAT from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_CREAT from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_CREAT from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_CREAT from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_CREAT from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_CREAT from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_CREAT from PowerPC End If
    If idx is equal to 17: Return proc SYS_CREAT from RISCV32 End If
    If idx is equal to 18: Return proc SYS_CREAT from RISCV64 End If
    Return 0
End Process

Process called "SYS_UNLINK" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_UNLINK from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_UNLINK from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_UNLINK from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_UNLINK from MIPS32 End If
    If idx is equal to 5: Return proc SYS_UNLINK from MIPS64 End If
    If idx is equal to 6: Return proc SYS_UNLINK from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_UNLINK from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_UNLINK from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_UNLINK from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_UNLINK from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_UNLINK from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_UNLINK from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_UNLINK from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_UNLINK from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_UNLINK from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_UNLINK from PowerPC End If
    If idx is equal to 17: Return proc SYS_UNLINK from RISCV32 End If
    If idx is equal to 18: Return proc SYS_UNLINK from RISCV64 End If
    Return 0
End Process

Process called "SYS_MKDIR" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_MKDIR from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_MKDIR from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_MKDIR from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_MKDIR from MIPS32 End If
    If idx is equal to 5: Return proc SYS_MKDIR from MIPS64 End If
    If idx is equal to 6: Return proc SYS_MKDIR from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_MKDIR from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_MKDIR from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_MKDIR from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_MKDIR from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_MKDIR from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_MKDIR from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_MKDIR from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_MKDIR from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_MKDIR from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_MKDIR from PowerPC End If
    If idx is equal to 17: Return proc SYS_MKDIR from RISCV32 End If
    If idx is equal to 18: Return proc SYS_MKDIR from RISCV64 End If
    Return 0
End Process

Process called "SYS_RMDIR" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc SYS_RMDIR from LinuxX86_64 End If
    If idx is equal to 2: Return proc SYS_RMDIR from LinuxARM64 End If
    If idx is equal to 3: Return proc SYS_RMDIR from LinuxARM32 End If
    If idx is equal to 4: Return proc SYS_RMDIR from MIPS32 End If
    If idx is equal to 5: Return proc SYS_RMDIR from MIPS64 End If
    If idx is equal to 6: Return proc SYS_RMDIR from DarwinX86_64 End If
    If idx is equal to 7: Return proc SYS_RMDIR from DarwinARM64 End If
    If idx is equal to 8: Return proc SYS_RMDIR from FreeBSDX64 End If
    If idx is equal to 9: Return proc SYS_RMDIR from FreeBSDARM64 End If
    If idx is equal to 10: Return proc SYS_RMDIR from NetBSDX64 End If
    If idx is equal to 11: Return proc SYS_RMDIR from NetBSDARM64 End If
    If idx is equal to 12: Return proc SYS_RMDIR from OpenBSDX64 End If
    If idx is equal to 13: Return proc SYS_RMDIR from OpenBSDARM64 End If
    If idx is equal to 14: Return proc SYS_RMDIR from WindowsX86_64 End If
    If idx is equal to 15: Return proc SYS_RMDIR from WindowsARM64 End If
    If idx is equal to 16: Return proc SYS_RMDIR from PowerPC End If
    If idx is equal to 17: Return proc SYS_RMDIR from RISCV32 End If
    If idx is equal to 18: Return proc SYS_RMDIR from RISCV64 End If
    Return 0
End Process

Note: ============================================================================
Note: GENERIC SYSCALL WRAPPERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "syscall_0" takes syscall_number as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_0 from LinuxX86_64 with syscall_number End If
    If idx is equal to 2: Return proc syscall_0 from LinuxARM64 with syscall_number End If
    If idx is equal to 3: Return proc syscall_0 from LinuxARM32 with syscall_number End If
    If idx is equal to 4: Return proc syscall_0 from MIPS32 with syscall_number End If
    If idx is equal to 5: Return proc syscall_0 from MIPS64 with syscall_number End If
    If idx is equal to 6: Return proc syscall_0 from DarwinX86_64 with syscall_number End If
    If idx is equal to 7: Return proc syscall_0 from DarwinARM64 with syscall_number End If
    If idx is equal to 8: Return proc syscall_0 from FreeBSDX64 with syscall_number End If
    If idx is equal to 9: Return proc syscall_0 from FreeBSDARM64 with syscall_number End If
    If idx is equal to 10: Return proc syscall_0 from NetBSDX64 with syscall_number End If
    If idx is equal to 11: Return proc syscall_0 from NetBSDARM64 with syscall_number End If
    If idx is equal to 12: Return proc syscall_0 from OpenBSDX64 with syscall_number End If
    If idx is equal to 13: Return proc syscall_0 from OpenBSDARM64 with syscall_number End If
    If idx is equal to 14: Return proc syscall_0 from WindowsX86_64 with syscall_number End If
    If idx is equal to 15: Return proc syscall_0 from WindowsARM64 with syscall_number End If
    If idx is equal to 16: Return proc syscall_0 from PowerPC with syscall_number End If
    If idx is equal to 17: Return proc syscall_0 from RISCV32 with syscall_number End If
    If idx is equal to 18: Return proc syscall_0 from RISCV64 with syscall_number End If
    Return 0
End Process

Process called "syscall_1" takes syscall_number as Integer, arg1 as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_1 from LinuxX86_64 with syscall_number, arg1 End If
    If idx is equal to 2: Return proc syscall_1 from LinuxARM64 with syscall_number, arg1 End If
    If idx is equal to 3: Return proc syscall_1 from LinuxARM32 with syscall_number, arg1 End If
    If idx is equal to 4: Return proc syscall_1 from MIPS32 with syscall_number, arg1 End If
    If idx is equal to 5: Return proc syscall_1 from MIPS64 with syscall_number, arg1 End If
    If idx is equal to 6: Return proc syscall_1 from DarwinX86_64 with syscall_number, arg1 End If
    If idx is equal to 7: Return proc syscall_1 from DarwinARM64 with syscall_number, arg1 End If
    If idx is equal to 8: Return proc syscall_1 from FreeBSDX64 with syscall_number, arg1 End If
    If idx is equal to 9: Return proc syscall_1 from FreeBSDARM64 with syscall_number, arg1 End If
    If idx is equal to 10: Return proc syscall_1 from NetBSDX64 with syscall_number, arg1 End If
    If idx is equal to 11: Return proc syscall_1 from NetBSDARM64 with syscall_number, arg1 End If
    If idx is equal to 12: Return proc syscall_1 from OpenBSDX64 with syscall_number, arg1 End If
    If idx is equal to 13: Return proc syscall_1 from OpenBSDARM64 with syscall_number, arg1 End If
    If idx is equal to 14: Return proc syscall_1 from WindowsX86_64 with syscall_number, arg1 End If
    If idx is equal to 15: Return proc syscall_1 from WindowsARM64 with syscall_number, arg1 End If
    If idx is equal to 16: Return proc syscall_1 from PowerPC with syscall_number, arg1 End If
    If idx is equal to 17: Return proc syscall_1 from RISCV32 with syscall_number, arg1 End If
    If idx is equal to 18: Return proc syscall_1 from RISCV64 with syscall_number, arg1 End If
    Return 0
End Process

Process called "syscall_2" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_2 from LinuxX86_64 with syscall_number, arg1, arg2 End If
    If idx is equal to 2: Return proc syscall_2 from LinuxARM64 with syscall_number, arg1, arg2 End If
    If idx is equal to 3: Return proc syscall_2 from LinuxARM32 with syscall_number, arg1, arg2 End If
    If idx is equal to 4: Return proc syscall_2 from MIPS32 with syscall_number, arg1, arg2 End If
    If idx is equal to 5: Return proc syscall_2 from MIPS64 with syscall_number, arg1, arg2 End If
    If idx is equal to 6: Return proc syscall_2 from DarwinX86_64 with syscall_number, arg1, arg2 End If
    If idx is equal to 7: Return proc syscall_2 from DarwinARM64 with syscall_number, arg1, arg2 End If
    If idx is equal to 8: Return proc syscall_2 from FreeBSDX64 with syscall_number, arg1, arg2 End If
    If idx is equal to 9: Return proc syscall_2 from FreeBSDARM64 with syscall_number, arg1, arg2 End If
    If idx is equal to 10: Return proc syscall_2 from NetBSDX64 with syscall_number, arg1, arg2 End If
    If idx is equal to 11: Return proc syscall_2 from NetBSDARM64 with syscall_number, arg1, arg2 End If
    If idx is equal to 12: Return proc syscall_2 from OpenBSDX64 with syscall_number, arg1, arg2 End If
    If idx is equal to 13: Return proc syscall_2 from OpenBSDARM64 with syscall_number, arg1, arg2 End If
    If idx is equal to 14: Return proc syscall_2 from WindowsX86_64 with syscall_number, arg1, arg2 End If
    If idx is equal to 15: Return proc syscall_2 from WindowsARM64 with syscall_number, arg1, arg2 End If
    If idx is equal to 16: Return proc syscall_2 from PowerPC with syscall_number, arg1, arg2 End If
    If idx is equal to 17: Return proc syscall_2 from RISCV32 with syscall_number, arg1, arg2 End If
    If idx is equal to 18: Return proc syscall_2 from RISCV64 with syscall_number, arg1, arg2 End If
    Return 0
End Process

Process called "syscall_3" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_3 from LinuxX86_64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 2: Return proc syscall_3 from LinuxARM64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 3: Return proc syscall_3 from LinuxARM32 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 4: Return proc syscall_3 from MIPS32 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 5: Return proc syscall_3 from MIPS64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 6: Return proc syscall_3 from DarwinX86_64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 7: Return proc syscall_3 from DarwinARM64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 8: Return proc syscall_3 from FreeBSDX64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 9: Return proc syscall_3 from FreeBSDARM64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 10: Return proc syscall_3 from NetBSDX64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 11: Return proc syscall_3 from NetBSDARM64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 12: Return proc syscall_3 from OpenBSDX64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 13: Return proc syscall_3 from OpenBSDARM64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 14: Return proc syscall_3 from WindowsX86_64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 15: Return proc syscall_3 from WindowsARM64 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 16: Return proc syscall_3 from PowerPC with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 17: Return proc syscall_3 from RISCV32 with syscall_number, arg1, arg2, arg3 End If
    If idx is equal to 18: Return proc syscall_3 from RISCV64 with syscall_number, arg1, arg2, arg3 End If
    Return 0
End Process

Process called "syscall_4" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_4 from LinuxX86_64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 2: Return proc syscall_4 from LinuxARM64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 3: Return proc syscall_4 from LinuxARM32 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 4: Return proc syscall_4 from MIPS32 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 5: Return proc syscall_4 from MIPS64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 6: Return proc syscall_4 from DarwinX86_64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 7: Return proc syscall_4 from DarwinARM64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 8: Return proc syscall_4 from FreeBSDX64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 9: Return proc syscall_4 from FreeBSDARM64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 10: Return proc syscall_4 from NetBSDX64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 11: Return proc syscall_4 from NetBSDARM64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 12: Return proc syscall_4 from OpenBSDX64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 13: Return proc syscall_4 from OpenBSDARM64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 14: Return proc syscall_4 from WindowsX86_64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 15: Return proc syscall_4 from WindowsARM64 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 16: Return proc syscall_4 from PowerPC with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 17: Return proc syscall_4 from RISCV32 with syscall_number, arg1, arg2, arg3, arg4 End If
    If idx is equal to 18: Return proc syscall_4 from RISCV64 with syscall_number, arg1, arg2, arg3, arg4 End If
    Return 0
End Process

Process called "syscall_5" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_5 from LinuxX86_64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 2: Return proc syscall_5 from LinuxARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 3: Return proc syscall_5 from LinuxARM32 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 4: Return proc syscall_5 from MIPS32 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 5: Return proc syscall_5 from MIPS64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 6: Return proc syscall_5 from DarwinX86_64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 7: Return proc syscall_5 from DarwinARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 8: Return proc syscall_5 from FreeBSDX64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 9: Return proc syscall_5 from FreeBSDARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 10: Return proc syscall_5 from NetBSDX64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 11: Return proc syscall_5 from NetBSDARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 12: Return proc syscall_5 from OpenBSDX64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 13: Return proc syscall_5 from OpenBSDARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 14: Return proc syscall_5 from WindowsX86_64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 15: Return proc syscall_5 from WindowsARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 16: Return proc syscall_5 from PowerPC with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 17: Return proc syscall_5 from RISCV32 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    If idx is equal to 18: Return proc syscall_5 from RISCV64 with syscall_number, arg1, arg2, arg3, arg4, arg5 End If
    Return 0
End Process

Process called "syscall_6" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc syscall_6 from LinuxX86_64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 2: Return proc syscall_6 from LinuxARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 3: Return proc syscall_6 from LinuxARM32 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 4: Return proc syscall_6 from MIPS32 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 5: Return proc syscall_6 from MIPS64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 6: Return proc syscall_6 from DarwinX86_64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 7: Return proc syscall_6 from DarwinARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 8: Return proc syscall_6 from FreeBSDX64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 9: Return proc syscall_6 from FreeBSDARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 10: Return proc syscall_6 from NetBSDX64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 11: Return proc syscall_6 from NetBSDARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 12: Return proc syscall_6 from OpenBSDX64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 13: Return proc syscall_6 from OpenBSDARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 14: Return proc syscall_6 from WindowsX86_64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 15: Return proc syscall_6 from WindowsARM64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 16: Return proc syscall_6 from PowerPC with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 17: Return proc syscall_6 from RISCV32 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    If idx is equal to 18: Return proc syscall_6 from RISCV64 with syscall_number, arg1, arg2, arg3, arg4, arg5, arg6 End If
    Return 0
End Process

Note: ============================================================================
Note: HIGH-LEVEL SYSCALL WRAPPERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "syscall_read" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_read from LinuxX86_64 with fd, buffer, count End If
    If idx is equal to 2: Return proc syscall_read from LinuxARM64 with fd, buffer, count End If
    If idx is equal to 3: Return proc syscall_read from LinuxARM32 with fd, buffer, count End If
    If idx is equal to 4: Return proc syscall_read from MIPS32 with fd, buffer, count End If
    If idx is equal to 5: Return proc syscall_read from MIPS64 with fd, buffer, count End If
    If idx is equal to 6: Return syscall_read from DarwinX86_64 with fd, buffer, count End If
    If idx is equal to 7: Return proc syscall_read from DarwinARM64 with fd, buffer, count End If
    If idx is equal to 8: Return proc syscall_read from FreeBSDX64 with fd, buffer, count End If
    If idx is equal to 9: Return proc syscall_read from FreeBSDARM64 with fd, buffer, count End If
    If idx is equal to 10: Return proc syscall_read from NetBSDX64 with fd, buffer, count End If
    If idx is equal to 11: Return proc syscall_read from NetBSDARM64 with fd, buffer, count End If
    If idx is equal to 12: Return proc syscall_read from OpenBSDX64 with fd, buffer, count End If
    If idx is equal to 13: Return proc syscall_read from OpenBSDARM64 with fd, buffer, count End If
    If idx is equal to 14: Return syscall_read from WindowsX86_64 with fd, buffer, count End If
    If idx is equal to 15: Return proc syscall_read from WindowsARM64 with fd, buffer, count End If
    If idx is equal to 16: Return proc syscall_read from PowerPC with fd, buffer, count End If
    If idx is equal to 17: Return proc syscall_read from RISCV32 with fd, buffer, count End If
    If idx is equal to 18: Return proc syscall_read from RISCV64 with fd, buffer, count End If
    Return -1
End Process

Process called "syscall_write" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_write from LinuxX86_64 with fd, buffer, count End If
    If idx is equal to 2: Return proc syscall_write from LinuxARM64 with fd, buffer, count End If
    If idx is equal to 3: Return proc syscall_write from LinuxARM32 with fd, buffer, count End If
    If idx is equal to 4: Return proc syscall_write from MIPS32 with fd, buffer, count End If
    If idx is equal to 5: Return proc syscall_write from MIPS64 with fd, buffer, count End If
    If idx is equal to 6: Return syscall_write from DarwinX86_64 with fd, buffer, count End If
    If idx is equal to 7: Return proc syscall_write from DarwinARM64 with fd, buffer, count End If
    If idx is equal to 8: Return proc syscall_write from FreeBSDX64 with fd, buffer, count End If
    If idx is equal to 9: Return proc syscall_write from FreeBSDARM64 with fd, buffer, count End If
    If idx is equal to 10: Return proc syscall_write from NetBSDX64 with fd, buffer, count End If
    If idx is equal to 11: Return proc syscall_write from NetBSDARM64 with fd, buffer, count End If
    If idx is equal to 12: Return proc syscall_write from OpenBSDX64 with fd, buffer, count End If
    If idx is equal to 13: Return proc syscall_write from OpenBSDARM64 with fd, buffer, count End If
    If idx is equal to 14: Return syscall_write from WindowsX86_64 with fd, buffer, count End If
    If idx is equal to 15: Return proc syscall_write from WindowsARM64 with fd, buffer, count End If
    If idx is equal to 16: Return proc syscall_write from PowerPC with fd, buffer, count End If
    If idx is equal to 17: Return proc syscall_write from RISCV32 with fd, buffer, count End If
    If idx is equal to 18: Return proc syscall_write from RISCV64 with fd, buffer, count End If
    Return -1
End Process

Process called "syscall_open" takes filename as Integer, flags as Integer, mode as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_open from LinuxX86_64 with filename, flags, mode End If
    If idx is equal to 2: Return proc syscall_open from LinuxARM64 with filename, flags, mode End If
    If idx is equal to 3: Return proc syscall_open from LinuxARM32 with filename, flags, mode End If
    If idx is equal to 4: Return proc syscall_open from MIPS32 with filename, flags, mode End If
    If idx is equal to 5: Return proc syscall_open from MIPS64 with filename, flags, mode End If
    If idx is equal to 6: Return syscall_open from DarwinX86_64 with filename, flags, mode End If
    If idx is equal to 7: Return proc syscall_open from DarwinARM64 with filename, flags, mode End If
    If idx is equal to 8: Return proc syscall_open from FreeBSDX64 with filename, flags, mode End If
    If idx is equal to 9: Return proc syscall_open from FreeBSDARM64 with filename, flags, mode End If
    If idx is equal to 10: Return proc syscall_open from NetBSDX64 with filename, flags, mode End If
    If idx is equal to 11: Return proc syscall_open from NetBSDARM64 with filename, flags, mode End If
    If idx is equal to 12: Return proc syscall_open from OpenBSDX64 with filename, flags, mode End If
    If idx is equal to 13: Return proc syscall_open from OpenBSDARM64 with filename, flags, mode End If
    If idx is equal to 14: Return syscall_open from WindowsX86_64 with filename, flags, mode End If
    If idx is equal to 15: Return proc syscall_open from WindowsARM64 with filename, flags, mode End If
    If idx is equal to 16: Return proc syscall_open from PowerPC with filename, flags, mode End If
    If idx is equal to 17: Return proc syscall_open from RISCV32 with filename, flags, mode End If
    If idx is equal to 18: Return proc syscall_open from RISCV64 with filename, flags, mode End If
    Return -1
End Process

Process called "syscall_close" takes fd as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_close from LinuxX86_64 with fd End If
    If idx is equal to 2: Return proc syscall_close from LinuxARM64 with fd End If
    If idx is equal to 3: Return proc syscall_close from LinuxARM32 with fd End If
    If idx is equal to 4: Return proc syscall_close from MIPS32 with fd End If
    If idx is equal to 5: Return proc syscall_close from MIPS64 with fd End If
    If idx is equal to 6: Return syscall_close from DarwinX86_64 with fd End If
    If idx is equal to 7: Return proc syscall_close from DarwinARM64 with fd End If
    If idx is equal to 8: Return proc syscall_close from FreeBSDX64 with fd End If
    If idx is equal to 9: Return proc syscall_close from FreeBSDARM64 with fd End If
    If idx is equal to 10: Return proc syscall_close from NetBSDX64 with fd End If
    If idx is equal to 11: Return proc syscall_close from NetBSDARM64 with fd End If
    If idx is equal to 12: Return proc syscall_close from OpenBSDX64 with fd End If
    If idx is equal to 13: Return proc syscall_close from OpenBSDARM64 with fd End If
    If idx is equal to 14: Return syscall_close from WindowsX86_64 with fd End If
    If idx is equal to 15: Return proc syscall_close from WindowsARM64 with fd End If
    If idx is equal to 16: Return proc syscall_close from PowerPC with fd End If
    If idx is equal to 17: Return proc syscall_close from RISCV32 with fd End If
    If idx is equal to 18: Return proc syscall_close from RISCV64 with fd End If
    Return -1
End Process

Process called "syscall_exit" takes status as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_exit from LinuxX86_64 with status End If
    If idx is equal to 2: Return proc syscall_exit from LinuxARM64 with status End If
    If idx is equal to 3: Return proc syscall_exit from LinuxARM32 with status End If
    If idx is equal to 4: Return proc syscall_exit from MIPS32 with status End If
    If idx is equal to 5: Return proc syscall_exit from MIPS64 with status End If
    If idx is equal to 6: Return syscall_exit from DarwinX86_64 with status End If
    If idx is equal to 7: Return proc syscall_exit from DarwinARM64 with status End If
    If idx is equal to 8: Return proc syscall_exit from FreeBSDX64 with status End If
    If idx is equal to 9: Return proc syscall_exit from FreeBSDARM64 with status End If
    If idx is equal to 10: Return proc syscall_exit from NetBSDX64 with status End If
    If idx is equal to 11: Return proc syscall_exit from NetBSDARM64 with status End If
    If idx is equal to 12: Return proc syscall_exit from OpenBSDX64 with status End If
    If idx is equal to 13: Return proc syscall_exit from OpenBSDARM64 with status End If
    If idx is equal to 14: Return syscall_exit from WindowsX86_64 with status End If
    If idx is equal to 15: Return proc syscall_exit from WindowsARM64 with status End If
    If idx is equal to 16: Return proc syscall_exit from PowerPC with status End If
    If idx is equal to 17: Return proc syscall_exit from RISCV32 with status End If
    If idx is equal to 18: Return proc syscall_exit from RISCV64 with status End If
    Return -1
End Process

Process called "syscall_brk" takes addr as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_brk from LinuxX86_64 with addr End If
    If idx is equal to 2: Return proc syscall_brk from LinuxARM64 with addr End If
    If idx is equal to 3: Return proc syscall_brk from LinuxARM32 with addr End If
    If idx is equal to 4: Return proc syscall_brk from MIPS32 with addr End If
    If idx is equal to 5: Return proc syscall_brk from MIPS64 with addr End If
    If idx is equal to 6: Return syscall_brk from DarwinX86_64 with addr End If
    If idx is equal to 7: Return proc syscall_brk from DarwinARM64 with addr End If
    If idx is equal to 8: Return proc syscall_brk from FreeBSDX64 with addr End If
    If idx is equal to 9: Return proc syscall_brk from FreeBSDARM64 with addr End If
    If idx is equal to 10: Return proc syscall_brk from NetBSDX64 with addr End If
    If idx is equal to 11: Return proc syscall_brk from NetBSDARM64 with addr End If
    If idx is equal to 12: Return proc syscall_brk from OpenBSDX64 with addr End If
    If idx is equal to 13: Return proc syscall_brk from OpenBSDARM64 with addr End If
    If idx is equal to 14: Return syscall_brk from WindowsX86_64 with addr End If
    If idx is equal to 15: Return proc syscall_brk from WindowsARM64 with addr End If
    If idx is equal to 16: Return proc syscall_brk from PowerPC with addr End If
    If idx is equal to 17: Return proc syscall_brk from RISCV32 with addr End If
    If idx is equal to 18: Return proc syscall_brk from RISCV64 with addr End If
    Return -1
End Process

Process called "syscall_mmap" takes addr as Integer, length as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_mmap from LinuxX86_64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 2: Return proc syscall_mmap from LinuxARM64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 3: Return proc syscall_mmap from LinuxARM32 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 4: Return proc syscall_mmap from MIPS32 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 5: Return proc syscall_mmap from MIPS64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 6: Return syscall_mmap from DarwinX86_64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 7: Return proc syscall_mmap from DarwinARM64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 8: Return proc syscall_mmap from FreeBSDX64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 9: Return proc syscall_mmap from FreeBSDARM64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 10: Return proc syscall_mmap from NetBSDX64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 11: Return proc syscall_mmap from NetBSDARM64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 12: Return proc syscall_mmap from OpenBSDX64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 13: Return proc syscall_mmap from OpenBSDARM64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 14: Return syscall_mmap from WindowsX86_64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 15: Return proc syscall_mmap from WindowsARM64 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 16: Return proc syscall_mmap from PowerPC with addr, length, prot, flags, fd, offset End If
    If idx is equal to 17: Return proc syscall_mmap from RISCV32 with addr, length, prot, flags, fd, offset End If
    If idx is equal to 18: Return proc syscall_mmap from RISCV64 with addr, length, prot, flags, fd, offset End If
    Return -1
End Process

Process called "syscall_munmap" takes addr as Integer, length as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_munmap from LinuxX86_64 with addr, length End If
    If idx is equal to 2: Return proc syscall_munmap from LinuxARM64 with addr, length End If
    If idx is equal to 3: Return proc syscall_munmap from LinuxARM32 with addr, length End If
    If idx is equal to 4: Return proc syscall_munmap from MIPS32 with addr, length End If
    If idx is equal to 5: Return proc syscall_munmap from MIPS64 with addr, length End If
    If idx is equal to 6: Return syscall_munmap from DarwinX86_64 with addr, length End If
    If idx is equal to 7: Return proc syscall_munmap from DarwinARM64 with addr, length End If
    If idx is equal to 8: Return proc syscall_munmap from FreeBSDX64 with addr, length End If
    If idx is equal to 9: Return proc syscall_munmap from FreeBSDARM64 with addr, length End If
    If idx is equal to 10: Return proc syscall_munmap from NetBSDX64 with addr, length End If
    If idx is equal to 11: Return proc syscall_munmap from NetBSDARM64 with addr, length End If
    If idx is equal to 12: Return proc syscall_munmap from OpenBSDX64 with addr, length End If
    If idx is equal to 13: Return proc syscall_munmap from OpenBSDARM64 with addr, length End If
    If idx is equal to 14: Return syscall_munmap from WindowsX86_64 with addr, length End If
    If idx is equal to 15: Return proc syscall_munmap from WindowsARM64 with addr, length End If
    If idx is equal to 16: Return proc syscall_munmap from PowerPC with addr, length End If
    If idx is equal to 17: Return proc syscall_munmap from RISCV32 with addr, length End If
    If idx is equal to 18: Return proc syscall_munmap from RISCV64 with addr, length End If
    Return -1
End Process

Process called "syscall_fstat" takes fd as Integer, statbuf as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_fstat from LinuxX86_64 with fd, statbuf End If
    If idx is equal to 2: Return proc syscall_fstat from LinuxARM64 with fd, statbuf End If
    If idx is equal to 3: Return proc syscall_fstat from LinuxARM32 with fd, statbuf End If
    If idx is equal to 4: Return proc syscall_fstat from MIPS32 with fd, statbuf End If
    If idx is equal to 5: Return proc syscall_fstat from MIPS64 with fd, statbuf End If
    If idx is equal to 6: Return syscall_fstat from DarwinX86_64 with fd, statbuf End If
    If idx is equal to 7: Return proc syscall_fstat from DarwinARM64 with fd, statbuf End If
    If idx is equal to 8: Return proc syscall_fstat from FreeBSDX64 with fd, statbuf End If
    If idx is equal to 9: Return proc syscall_fstat from FreeBSDARM64 with fd, statbuf End If
    If idx is equal to 10: Return proc syscall_fstat from NetBSDX64 with fd, statbuf End If
    If idx is equal to 11: Return proc syscall_fstat from NetBSDARM64 with fd, statbuf End If
    If idx is equal to 12: Return proc syscall_fstat from OpenBSDX64 with fd, statbuf End If
    If idx is equal to 13: Return proc syscall_fstat from OpenBSDARM64 with fd, statbuf End If
    If idx is equal to 14: Return syscall_fstat from WindowsX86_64 with fd, statbuf End If
    If idx is equal to 15: Return proc syscall_fstat from WindowsARM64 with fd, statbuf End If
    If idx is equal to 16: Return proc syscall_fstat from PowerPC with fd, statbuf End If
    If idx is equal to 17: Return proc syscall_fstat from RISCV32 with fd, statbuf End If
    If idx is equal to 18: Return proc syscall_fstat from RISCV64 with fd, statbuf End If
    Return -1
End Process

Process called "syscall_lseek" takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return syscall_lseek from LinuxX86_64 with fd, offset, whence End If
    If idx is equal to 2: Return proc syscall_lseek from LinuxARM64 with fd, offset, whence End If
    If idx is equal to 3: Return proc syscall_lseek from LinuxARM32 with fd, offset, whence End If
    If idx is equal to 4: Return proc syscall_lseek from MIPS32 with fd, offset, whence End If
    If idx is equal to 5: Return proc syscall_lseek from MIPS64 with fd, offset, whence End If
    If idx is equal to 6: Return syscall_lseek from DarwinX86_64 with fd, offset, whence End If
    If idx is equal to 7: Return proc syscall_lseek from DarwinARM64 with fd, offset, whence End If
    If idx is equal to 8: Return proc syscall_lseek from FreeBSDX64 with fd, offset, whence End If
    If idx is equal to 9: Return proc syscall_lseek from FreeBSDARM64 with fd, offset, whence End If
    If idx is equal to 10: Return proc syscall_lseek from NetBSDX64 with fd, offset, whence End If
    If idx is equal to 11: Return proc syscall_lseek from NetBSDARM64 with fd, offset, whence End If
    If idx is equal to 12: Return proc syscall_lseek from OpenBSDX64 with fd, offset, whence End If
    If idx is equal to 13: Return proc syscall_lseek from OpenBSDARM64 with fd, offset, whence End If
    If idx is equal to 14: Return syscall_lseek from WindowsX86_64 with fd, offset, whence End If
    If idx is equal to 15: Return proc syscall_lseek from WindowsARM64 with fd, offset, whence End If
    If idx is equal to 16: Return proc syscall_lseek from PowerPC with fd, offset, whence End If
    If idx is equal to 17: Return proc syscall_lseek from RISCV32 with fd, offset, whence End If
    If idx is equal to 18: Return proc syscall_lseek from RISCV64 with fd, offset, whence End If
    Return -1
End Process

Note: ============================================================================
Note: SYSCALL CONSTANTS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "O_RDONLY" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return O_RDONLY from LinuxX86_64 with  End If
    If idx is equal to 2: Return O_RDONLY from LinuxARM64 with  End If
    If idx is equal to 3: Return O_RDONLY from LinuxARM32 with  End If
    If idx is equal to 4: Return O_RDONLY from MIPS32 with  End If
    If idx is equal to 5: Return O_RDONLY from MIPS64 with  End If
    If idx is equal to 6: Return O_RDONLY from DarwinX86_64 with  End If
    If idx is equal to 7: Return O_RDONLY from DarwinARM64 with  End If
    If idx is equal to 8: Return O_RDONLY from FreeBSDX64 with  End If
    If idx is equal to 9: Return O_RDONLY from FreeBSDARM64 with  End If
    If idx is equal to 10: Return O_RDONLY from NetBSDX64 with  End If
    If idx is equal to 11: Return O_RDONLY from NetBSDARM64 with  End If
    If idx is equal to 12: Return O_RDONLY from OpenBSDX64 with  End If
    If idx is equal to 13: Return O_RDONLY from OpenBSDARM64 with  End If
    If idx is equal to 14: Return O_RDONLY from WindowsX86_64 with  End If
    If idx is equal to 15: Return O_RDONLY from WindowsARM64 with  End If
    If idx is equal to 16: Return O_RDONLY from PowerPC with  End If
    If idx is equal to 17: Return O_RDONLY from RISCV32 with  End If
    If idx is equal to 18: Return O_RDONLY from RISCV64 with  End If
    Return 0
End Process

Process called "O_WRONLY" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return O_WRONLY from LinuxX86_64 with  End If
    If idx is equal to 2: Return O_WRONLY from LinuxARM64 with  End If
    If idx is equal to 3: Return O_WRONLY from LinuxARM32 with  End If
    If idx is equal to 4: Return O_WRONLY from MIPS32 with  End If
    If idx is equal to 5: Return O_WRONLY from MIPS64 with  End If
    If idx is equal to 6: Return O_WRONLY from DarwinX86_64 with  End If
    If idx is equal to 7: Return O_WRONLY from DarwinARM64 with  End If
    If idx is equal to 8: Return O_WRONLY from FreeBSDX64 with  End If
    If idx is equal to 9: Return O_WRONLY from FreeBSDARM64 with  End If
    If idx is equal to 10: Return O_WRONLY from NetBSDX64 with  End If
    If idx is equal to 11: Return O_WRONLY from NetBSDARM64 with  End If
    If idx is equal to 12: Return O_WRONLY from OpenBSDX64 with  End If
    If idx is equal to 13: Return O_WRONLY from OpenBSDARM64 with  End If
    If idx is equal to 14: Return O_WRONLY from WindowsX86_64 with  End If
    If idx is equal to 15: Return O_WRONLY from WindowsARM64 with  End If
    If idx is equal to 16: Return O_WRONLY from PowerPC with  End If
    If idx is equal to 17: Return O_WRONLY from RISCV32 with  End If
    If idx is equal to 18: Return O_WRONLY from RISCV64 with  End If
    Return 0
End Process

Process called "O_RDWR" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return O_RDWR from LinuxX86_64 with  End If
    If idx is equal to 2: Return O_RDWR from LinuxARM64 with  End If
    If idx is equal to 3: Return O_RDWR from LinuxARM32 with  End If
    If idx is equal to 4: Return O_RDWR from MIPS32 with  End If
    If idx is equal to 5: Return O_RDWR from MIPS64 with  End If
    If idx is equal to 6: Return O_RDWR from DarwinX86_64 with  End If
    If idx is equal to 7: Return O_RDWR from DarwinARM64 with  End If
    If idx is equal to 8: Return O_RDWR from FreeBSDX64 with  End If
    If idx is equal to 9: Return O_RDWR from FreeBSDARM64 with  End If
    If idx is equal to 10: Return O_RDWR from NetBSDX64 with  End If
    If idx is equal to 11: Return O_RDWR from NetBSDARM64 with  End If
    If idx is equal to 12: Return O_RDWR from OpenBSDX64 with  End If
    If idx is equal to 13: Return O_RDWR from OpenBSDARM64 with  End If
    If idx is equal to 14: Return O_RDWR from WindowsX86_64 with  End If
    If idx is equal to 15: Return O_RDWR from WindowsARM64 with  End If
    If idx is equal to 16: Return O_RDWR from PowerPC with  End If
    If idx is equal to 17: Return O_RDWR from RISCV32 with  End If
    If idx is equal to 18: Return O_RDWR from RISCV64 with  End If
    Return 0
End Process

Process called "O_CREAT" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return O_CREAT from LinuxX86_64 with  End If
    If idx is equal to 2: Return O_CREAT from LinuxARM64 with  End If
    If idx is equal to 3: Return O_CREAT from LinuxARM32 with  End If
    If idx is equal to 4: Return O_CREAT from MIPS32 with  End If
    If idx is equal to 5: Return O_CREAT from MIPS64 with  End If
    If idx is equal to 6: Return O_CREAT from DarwinX86_64 with  End If
    If idx is equal to 7: Return O_CREAT from DarwinARM64 with  End If
    If idx is equal to 8: Return O_CREAT from FreeBSDX64 with  End If
    If idx is equal to 9: Return O_CREAT from FreeBSDARM64 with  End If
    If idx is equal to 10: Return O_CREAT from NetBSDX64 with  End If
    If idx is equal to 11: Return O_CREAT from NetBSDARM64 with  End If
    If idx is equal to 12: Return O_CREAT from OpenBSDX64 with  End If
    If idx is equal to 13: Return O_CREAT from OpenBSDARM64 with  End If
    If idx is equal to 14: Return O_CREAT from WindowsX86_64 with  End If
    If idx is equal to 15: Return O_CREAT from WindowsARM64 with  End If
    If idx is equal to 16: Return O_CREAT from PowerPC with  End If
    If idx is equal to 17: Return O_CREAT from RISCV32 with  End If
    If idx is equal to 18: Return O_CREAT from RISCV64 with  End If
    Return 0
End Process

Process called "O_TRUNC" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return O_TRUNC from LinuxX86_64 with  End If
    If idx is equal to 2: Return O_TRUNC from LinuxARM64 with  End If
    If idx is equal to 3: Return O_TRUNC from LinuxARM32 with  End If
    If idx is equal to 4: Return O_TRUNC from MIPS32 with  End If
    If idx is equal to 5: Return O_TRUNC from MIPS64 with  End If
    If idx is equal to 6: Return O_TRUNC from DarwinX86_64 with  End If
    If idx is equal to 7: Return O_TRUNC from DarwinARM64 with  End If
    If idx is equal to 8: Return O_TRUNC from FreeBSDX64 with  End If
    If idx is equal to 9: Return O_TRUNC from FreeBSDARM64 with  End If
    If idx is equal to 10: Return O_TRUNC from NetBSDX64 with  End If
    If idx is equal to 11: Return O_TRUNC from NetBSDARM64 with  End If
    If idx is equal to 12: Return O_TRUNC from OpenBSDX64 with  End If
    If idx is equal to 13: Return O_TRUNC from OpenBSDARM64 with  End If
    If idx is equal to 14: Return O_TRUNC from WindowsX86_64 with  End If
    If idx is equal to 15: Return O_TRUNC from WindowsARM64 with  End If
    If idx is equal to 16: Return O_TRUNC from PowerPC with  End If
    If idx is equal to 17: Return O_TRUNC from RISCV32 with  End If
    If idx is equal to 18: Return O_TRUNC from RISCV64 with  End If
    Return 0
End Process

Process called "O_APPEND" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return O_APPEND from LinuxX86_64 with  End If
    If idx is equal to 2: Return O_APPEND from LinuxARM64 with  End If
    If idx is equal to 3: Return O_APPEND from LinuxARM32 with  End If
    If idx is equal to 4: Return O_APPEND from MIPS32 with  End If
    If idx is equal to 5: Return O_APPEND from MIPS64 with  End If
    If idx is equal to 6: Return O_APPEND from DarwinX86_64 with  End If
    If idx is equal to 7: Return O_APPEND from DarwinARM64 with  End If
    If idx is equal to 8: Return O_APPEND from FreeBSDX64 with  End If
    If idx is equal to 9: Return O_APPEND from FreeBSDARM64 with  End If
    If idx is equal to 10: Return O_APPEND from NetBSDX64 with  End If
    If idx is equal to 11: Return O_APPEND from NetBSDARM64 with  End If
    If idx is equal to 12: Return O_APPEND from OpenBSDX64 with  End If
    If idx is equal to 13: Return O_APPEND from OpenBSDARM64 with  End If
    If idx is equal to 14: Return O_APPEND from WindowsX86_64 with  End If
    If idx is equal to 15: Return O_APPEND from WindowsARM64 with  End If
    If idx is equal to 16: Return O_APPEND from PowerPC with  End If
    If idx is equal to 17: Return O_APPEND from RISCV32 with  End If
    If idx is equal to 18: Return O_APPEND from RISCV64 with  End If
    Return 0
End Process

Process called "MODE_0644" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return MODE_0644 from LinuxX86_64 with  End If
    If idx is equal to 2: Return MODE_0644 from LinuxARM64 with  End If
    If idx is equal to 3: Return MODE_0644 from LinuxARM32 with  End If
    If idx is equal to 4: Return MODE_0644 from MIPS32 with  End If
    If idx is equal to 5: Return MODE_0644 from MIPS64 with  End If
    If idx is equal to 6: Return MODE_0644 from DarwinX86_64 with  End If
    If idx is equal to 7: Return MODE_0644 from DarwinARM64 with  End If
    If idx is equal to 8: Return MODE_0644 from FreeBSDX64 with  End If
    If idx is equal to 9: Return MODE_0644 from FreeBSDARM64 with  End If
    If idx is equal to 10: Return MODE_0644 from NetBSDX64 with  End If
    If idx is equal to 11: Return MODE_0644 from NetBSDARM64 with  End If
    If idx is equal to 12: Return MODE_0644 from OpenBSDX64 with  End If
    If idx is equal to 13: Return MODE_0644 from OpenBSDARM64 with  End If
    If idx is equal to 14: Return MODE_0644 from WindowsX86_64 with  End If
    If idx is equal to 15: Return MODE_0644 from WindowsARM64 with  End If
    If idx is equal to 16: Return MODE_0644 from PowerPC with  End If
    If idx is equal to 17: Return MODE_0644 from RISCV32 with  End If
    If idx is equal to 18: Return MODE_0644 from RISCV64 with  End If
    Return 420  Note: 0644
End Process

Process called "MODE_0755" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return MODE_0755 from LinuxX86_64 with  End If
    If idx is equal to 2: Return MODE_0755 from LinuxARM64 with  End If
    If idx is equal to 3: Return MODE_0755 from LinuxARM32 with  End If
    If idx is equal to 4: Return MODE_0755 from MIPS32 with  End If
    If idx is equal to 5: Return MODE_0755 from MIPS64 with  End If
    If idx is equal to 6: Return MODE_0755 from DarwinX86_64 with  End If
    If idx is equal to 7: Return MODE_0755 from DarwinARM64 with  End If
    If idx is equal to 8: Return MODE_0755 from FreeBSDX64 with  End If
    If idx is equal to 9: Return MODE_0755 from FreeBSDARM64 with  End If
    If idx is equal to 10: Return MODE_0755 from NetBSDX64 with  End If
    If idx is equal to 11: Return MODE_0755 from NetBSDARM64 with  End If
    If idx is equal to 12: Return MODE_0755 from OpenBSDX64 with  End If
    If idx is equal to 13: Return MODE_0755 from OpenBSDARM64 with  End If
    If idx is equal to 14: Return MODE_0755 from WindowsX86_64 with  End If
    If idx is equal to 15: Return MODE_0755 from WindowsARM64 with  End If
    If idx is equal to 16: Return MODE_0755 from PowerPC with  End If
    If idx is equal to 17: Return MODE_0755 from RISCV32 with  End If
    If idx is equal to 18: Return MODE_0755 from RISCV64 with  End If
    Return 493  Note: 0755
End Process

Process called "PROT_NONE" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return PROT_NONE from LinuxX86_64 with  End If
    If idx is equal to 2: Return PROT_NONE from LinuxARM64 with  End If
    If idx is equal to 3: Return PROT_NONE from LinuxARM32 with  End If
    If idx is equal to 4: Return PROT_NONE from MIPS32 with  End If
    If idx is equal to 5: Return PROT_NONE from MIPS64 with  End If
    If idx is equal to 6: Return PROT_NONE from DarwinX86_64 with  End If
    If idx is equal to 7: Return PROT_NONE from DarwinARM64 with  End If
    If idx is equal to 8: Return PROT_NONE from FreeBSDX64 with  End If
    If idx is equal to 9: Return PROT_NONE from FreeBSDARM64 with  End If
    If idx is equal to 10: Return PROT_NONE from NetBSDX64 with  End If
    If idx is equal to 11: Return PROT_NONE from NetBSDARM64 with  End If
    If idx is equal to 12: Return PROT_NONE from OpenBSDX64 with  End If
    If idx is equal to 13: Return PROT_NONE from OpenBSDARM64 with  End If
    If idx is equal to 14: Return PROT_NONE from WindowsX86_64 with  End If
    If idx is equal to 15: Return PROT_NONE from WindowsARM64 with  End If
    If idx is equal to 16: Return PROT_NONE from PowerPC with  End If
    If idx is equal to 17: Return PROT_NONE from RISCV32 with  End If
    If idx is equal to 18: Return PROT_NONE from RISCV64 with  End If
    Return 0
End Process

Process called "PROT_READ" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return PROT_READ from LinuxX86_64 with  End If
    If idx is equal to 2: Return PROT_READ from LinuxARM64 with  End If
    If idx is equal to 3: Return PROT_READ from LinuxARM32 with  End If
    If idx is equal to 4: Return PROT_READ from MIPS32 with  End If
    If idx is equal to 5: Return PROT_READ from MIPS64 with  End If
    If idx is equal to 6: Return PROT_READ from DarwinX86_64 with  End If
    If idx is equal to 7: Return PROT_READ from DarwinARM64 with  End If
    If idx is equal to 8: Return PROT_READ from FreeBSDX64 with  End If
    If idx is equal to 9: Return PROT_READ from FreeBSDARM64 with  End If
    If idx is equal to 10: Return PROT_READ from NetBSDX64 with  End If
    If idx is equal to 11: Return PROT_READ from NetBSDARM64 with  End If
    If idx is equal to 12: Return PROT_READ from OpenBSDX64 with  End If
    If idx is equal to 13: Return PROT_READ from OpenBSDARM64 with  End If
    If idx is equal to 14: Return PROT_READ from WindowsX86_64 with  End If
    If idx is equal to 15: Return PROT_READ from WindowsARM64 with  End If
    If idx is equal to 16: Return PROT_READ from PowerPC with  End If
    If idx is equal to 17: Return PROT_READ from RISCV32 with  End If
    If idx is equal to 18: Return PROT_READ from RISCV64 with  End If
    Return 1
End Process

Process called "PROT_WRITE" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return PROT_WRITE from LinuxX86_64 with  End If
    If idx is equal to 2: Return PROT_WRITE from LinuxARM64 with  End If
    If idx is equal to 3: Return PROT_WRITE from LinuxARM32 with  End If
    If idx is equal to 4: Return PROT_WRITE from MIPS32 with  End If
    If idx is equal to 5: Return PROT_WRITE from MIPS64 with  End If
    If idx is equal to 6: Return PROT_WRITE from DarwinX86_64 with  End If
    If idx is equal to 7: Return PROT_WRITE from DarwinARM64 with  End If
    If idx is equal to 8: Return PROT_WRITE from FreeBSDX64 with  End If
    If idx is equal to 9: Return PROT_WRITE from FreeBSDARM64 with  End If
    If idx is equal to 10: Return PROT_WRITE from NetBSDX64 with  End If
    If idx is equal to 11: Return PROT_WRITE from NetBSDARM64 with  End If
    If idx is equal to 12: Return PROT_WRITE from OpenBSDX64 with  End If
    If idx is equal to 13: Return PROT_WRITE from OpenBSDARM64 with  End If
    If idx is equal to 14: Return PROT_WRITE from WindowsX86_64 with  End If
    If idx is equal to 15: Return PROT_WRITE from WindowsARM64 with  End If
    If idx is equal to 16: Return PROT_WRITE from PowerPC with  End If
    If idx is equal to 17: Return PROT_WRITE from RISCV32 with  End If
    If idx is equal to 18: Return PROT_WRITE from RISCV64 with  End If
    Return 2
End Process

Process called "PROT_EXEC" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return PROT_EXEC from LinuxX86_64 with  End If
    If idx is equal to 2: Return PROT_EXEC from LinuxARM64 with  End If
    If idx is equal to 3: Return PROT_EXEC from LinuxARM32 with  End If
    If idx is equal to 4: Return PROT_EXEC from MIPS32 with  End If
    If idx is equal to 5: Return PROT_EXEC from MIPS64 with  End If
    If idx is equal to 6: Return PROT_EXEC from DarwinX86_64 with  End If
    If idx is equal to 7: Return PROT_EXEC from DarwinARM64 with  End If
    If idx is equal to 8: Return PROT_EXEC from FreeBSDX64 with  End If
    If idx is equal to 9: Return PROT_EXEC from FreeBSDARM64 with  End If
    If idx is equal to 10: Return PROT_EXEC from NetBSDX64 with  End If
    If idx is equal to 11: Return PROT_EXEC from NetBSDARM64 with  End If
    If idx is equal to 12: Return PROT_EXEC from OpenBSDX64 with  End If
    If idx is equal to 13: Return PROT_EXEC from OpenBSDARM64 with  End If
    If idx is equal to 14: Return PROT_EXEC from WindowsX86_64 with  End If
    If idx is equal to 15: Return PROT_EXEC from WindowsARM64 with  End If
    If idx is equal to 16: Return PROT_EXEC from PowerPC with  End If
    If idx is equal to 17: Return PROT_EXEC from RISCV32 with  End If
    If idx is equal to 18: Return PROT_EXEC from RISCV64 with  End If
    Return 4
End Process

Process called "MAP_SHARED" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return MAP_SHARED from LinuxX86_64 with  End If
    If idx is equal to 2: Return MAP_SHARED from LinuxARM64 with  End If
    If idx is equal to 3: Return MAP_SHARED from LinuxARM32 with  End If
    If idx is equal to 4: Return MAP_SHARED from MIPS32 with  End If
    If idx is equal to 5: Return MAP_SHARED from MIPS64 with  End If
    If idx is equal to 6: Return MAP_SHARED from DarwinX86_64 with  End If
    If idx is equal to 7: Return MAP_SHARED from DarwinARM64 with  End If
    If idx is equal to 8: Return MAP_SHARED from FreeBSDX64 with  End If
    If idx is equal to 9: Return MAP_SHARED from FreeBSDARM64 with  End If
    If idx is equal to 10: Return MAP_SHARED from NetBSDX64 with  End If
    If idx is equal to 11: Return MAP_SHARED from NetBSDARM64 with  End If
    If idx is equal to 12: Return MAP_SHARED from OpenBSDX64 with  End If
    If idx is equal to 13: Return MAP_SHARED from OpenBSDARM64 with  End If
    If idx is equal to 14: Return MAP_SHARED from WindowsX86_64 with  End If
    If idx is equal to 15: Return MAP_SHARED from WindowsARM64 with  End If
    If idx is equal to 16: Return MAP_SHARED from PowerPC with  End If
    If idx is equal to 17: Return MAP_SHARED from RISCV32 with  End If
    If idx is equal to 18: Return MAP_SHARED from RISCV64 with  End If
    Return 1
End Process

Process called "MAP_PRIVATE" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return MAP_PRIVATE from LinuxX86_64 with  End If
    If idx is equal to 2: Return MAP_PRIVATE from LinuxARM64 with  End If
    If idx is equal to 3: Return MAP_PRIVATE from LinuxARM32 with  End If
    If idx is equal to 4: Return MAP_PRIVATE from MIPS32 with  End If
    If idx is equal to 5: Return MAP_PRIVATE from MIPS64 with  End If
    If idx is equal to 6: Return MAP_PRIVATE from DarwinX86_64 with  End If
    If idx is equal to 7: Return MAP_PRIVATE from DarwinARM64 with  End If
    If idx is equal to 8: Return MAP_PRIVATE from FreeBSDX64 with  End If
    If idx is equal to 9: Return MAP_PRIVATE from FreeBSDARM64 with  End If
    If idx is equal to 10: Return MAP_PRIVATE from NetBSDX64 with  End If
    If idx is equal to 11: Return MAP_PRIVATE from NetBSDARM64 with  End If
    If idx is equal to 12: Return MAP_PRIVATE from OpenBSDX64 with  End If
    If idx is equal to 13: Return MAP_PRIVATE from OpenBSDARM64 with  End If
    If idx is equal to 14: Return MAP_PRIVATE from WindowsX86_64 with  End If
    If idx is equal to 15: Return MAP_PRIVATE from WindowsARM64 with  End If
    If idx is equal to 16: Return MAP_PRIVATE from PowerPC with  End If
    If idx is equal to 17: Return MAP_PRIVATE from RISCV32 with  End If
    If idx is equal to 18: Return MAP_PRIVATE from RISCV64 with  End If
    Return 2
End Process

Process called "MAP_FIXED" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return MAP_FIXED from LinuxX86_64 with  End If
    If idx is equal to 2: Return MAP_FIXED from LinuxARM64 with  End If
    If idx is equal to 3: Return MAP_FIXED from LinuxARM32 with  End If
    If idx is equal to 4: Return MAP_FIXED from MIPS32 with  End If
    If idx is equal to 5: Return MAP_FIXED from MIPS64 with  End If
    If idx is equal to 6: Return MAP_FIXED from DarwinX86_64 with  End If
    If idx is equal to 7: Return MAP_FIXED from DarwinARM64 with  End If
    If idx is equal to 8: Return MAP_FIXED from FreeBSDX64 with  End If
    If idx is equal to 9: Return MAP_FIXED from FreeBSDARM64 with  End If
    If idx is equal to 10: Return MAP_FIXED from NetBSDX64 with  End If
    If idx is equal to 11: Return MAP_FIXED from NetBSDARM64 with  End If
    If idx is equal to 12: Return MAP_FIXED from OpenBSDX64 with  End If
    If idx is equal to 13: Return MAP_FIXED from OpenBSDARM64 with  End If
    If idx is equal to 14: Return MAP_FIXED from WindowsX86_64 with  End If
    If idx is equal to 15: Return MAP_FIXED from WindowsARM64 with  End If
    If idx is equal to 16: Return MAP_FIXED from PowerPC with  End If
    If idx is equal to 17: Return MAP_FIXED from RISCV32 with  End If
    If idx is equal to 18: Return MAP_FIXED from RISCV64 with  End If
    Return 16
End Process

Process called "MAP_ANONYMOUS" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return MAP_ANONYMOUS from LinuxX86_64 with  End If
    If idx is equal to 2: Return MAP_ANONYMOUS from LinuxARM64 with  End If
    If idx is equal to 3: Return MAP_ANONYMOUS from LinuxARM32 with  End If
    If idx is equal to 4: Return MAP_ANONYMOUS from MIPS32 with  End If
    If idx is equal to 5: Return MAP_ANONYMOUS from MIPS64 with  End If
    If idx is equal to 6: Return MAP_ANONYMOUS from DarwinX86_64 with  End If
    If idx is equal to 7: Return MAP_ANONYMOUS from DarwinARM64 with  End If
    If idx is equal to 8: Return MAP_ANONYMOUS from FreeBSDX64 with  End If
    If idx is equal to 9: Return MAP_ANONYMOUS from FreeBSDARM64 with  End If
    If idx is equal to 10: Return MAP_ANONYMOUS from NetBSDX64 with  End If
    If idx is equal to 11: Return MAP_ANONYMOUS from NetBSDARM64 with  End If
    If idx is equal to 12: Return MAP_ANONYMOUS from OpenBSDX64 with  End If
    If idx is equal to 13: Return MAP_ANONYMOUS from OpenBSDARM64 with  End If
    If idx is equal to 14: Return MAP_ANONYMOUS from WindowsX86_64 with  End If
    If idx is equal to 15: Return MAP_ANONYMOUS from WindowsARM64 with  End If
    If idx is equal to 16: Return MAP_ANONYMOUS from PowerPC with  End If
    If idx is equal to 17: Return MAP_ANONYMOUS from RISCV32 with  End If
    If idx is equal to 18: Return MAP_ANONYMOUS from RISCV64 with  End If
    Return 32
End Process

Process called "SEEK_SET" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return SEEK_SET from LinuxX86_64 with  End If
    If idx is equal to 2: Return SEEK_SET from LinuxARM64 with  End If
    If idx is equal to 3: Return SEEK_SET from LinuxARM32 with  End If
    If idx is equal to 4: Return SEEK_SET from MIPS32 with  End If
    If idx is equal to 5: Return SEEK_SET from MIPS64 with  End If
    If idx is equal to 6: Return SEEK_SET from DarwinX86_64 with  End If
    If idx is equal to 7: Return SEEK_SET from DarwinARM64 with  End If
    If idx is equal to 8: Return SEEK_SET from FreeBSDX64 with  End If
    If idx is equal to 9: Return SEEK_SET from FreeBSDARM64 with  End If
    If idx is equal to 10: Return SEEK_SET from NetBSDX64 with  End If
    If idx is equal to 11: Return SEEK_SET from NetBSDARM64 with  End If
    If idx is equal to 12: Return SEEK_SET from OpenBSDX64 with  End If
    If idx is equal to 13: Return SEEK_SET from OpenBSDARM64 with  End If
    If idx is equal to 14: Return SEEK_SET from WindowsX86_64 with  End If
    If idx is equal to 15: Return SEEK_SET from WindowsARM64 with  End If
    If idx is equal to 16: Return SEEK_SET from PowerPC with  End If
    If idx is equal to 17: Return SEEK_SET from RISCV32 with  End If
    If idx is equal to 18: Return SEEK_SET from RISCV64 with  End If
    Return 0
End Process

Process called "SEEK_CUR" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return SEEK_CUR from LinuxX86_64 with  End If
    If idx is equal to 2: Return SEEK_CUR from LinuxARM64 with  End If
    If idx is equal to 3: Return SEEK_CUR from LinuxARM32 with  End If
    If idx is equal to 4: Return SEEK_CUR from MIPS32 with  End If
    If idx is equal to 5: Return SEEK_CUR from MIPS64 with  End If
    If idx is equal to 6: Return SEEK_CUR from DarwinX86_64 with  End If
    If idx is equal to 7: Return SEEK_CUR from DarwinARM64 with  End If
    If idx is equal to 8: Return SEEK_CUR from FreeBSDX64 with  End If
    If idx is equal to 9: Return SEEK_CUR from FreeBSDARM64 with  End If
    If idx is equal to 10: Return SEEK_CUR from NetBSDX64 with  End If
    If idx is equal to 11: Return SEEK_CUR from NetBSDARM64 with  End If
    If idx is equal to 12: Return SEEK_CUR from OpenBSDX64 with  End If
    If idx is equal to 13: Return SEEK_CUR from OpenBSDARM64 with  End If
    If idx is equal to 14: Return SEEK_CUR from WindowsX86_64 with  End If
    If idx is equal to 15: Return SEEK_CUR from WindowsARM64 with  End If
    If idx is equal to 16: Return SEEK_CUR from PowerPC with  End If
    If idx is equal to 17: Return SEEK_CUR from RISCV32 with  End If
    If idx is equal to 18: Return SEEK_CUR from RISCV64 with  End If
    Return 1
End Process

Process called "SEEK_END" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return SEEK_END from LinuxX86_64 with  End If
    If idx is equal to 2: Return SEEK_END from LinuxARM64 with  End If
    If idx is equal to 3: Return SEEK_END from LinuxARM32 with  End If
    If idx is equal to 4: Return SEEK_END from MIPS32 with  End If
    If idx is equal to 5: Return SEEK_END from MIPS64 with  End If
    If idx is equal to 6: Return SEEK_END from DarwinX86_64 with  End If
    If idx is equal to 7: Return SEEK_END from DarwinARM64 with  End If
    If idx is equal to 8: Return SEEK_END from FreeBSDX64 with  End If
    If idx is equal to 9: Return SEEK_END from FreeBSDARM64 with  End If
    If idx is equal to 10: Return SEEK_END from NetBSDX64 with  End If
    If idx is equal to 11: Return SEEK_END from NetBSDARM64 with  End If
    If idx is equal to 12: Return SEEK_END from OpenBSDX64 with  End If
    If idx is equal to 13: Return SEEK_END from OpenBSDARM64 with  End If
    If idx is equal to 14: Return SEEK_END from WindowsX86_64 with  End If
    If idx is equal to 15: Return SEEK_END from WindowsARM64 with  End If
    If idx is equal to 16: Return SEEK_END from PowerPC with  End If
    If idx is equal to 17: Return SEEK_END from RISCV32 with  End If
    If idx is equal to 18: Return SEEK_END from RISCV64 with  End If
    Return 2
End Process

Process called "STDIN_FILENO" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return STDIN_FILENO from LinuxX86_64 End If
    If idx is equal to 2: Return STDIN_FILENO from LinuxARM64 End If
    If idx is equal to 3: Return STDIN_FILENO from LinuxARM32 End If
    If idx is equal to 4: Return STDIN_FILENO from MIPS32 End If
    If idx is equal to 5: Return STDIN_FILENO from MIPS64 End If
    If idx is equal to 6: Return STDIN_FILENO from DarwinX86_64 End If
    If idx is equal to 7: Return STDIN_FILENO from DarwinARM64 End If
    If idx is equal to 8: Return STDIN_FILENO from FreeBSDX64 End If
    If idx is equal to 9: Return STDIN_FILENO from FreeBSDARM64 End If
    If idx is equal to 10: Return STDIN_FILENO from NetBSDX64 End If
    If idx is equal to 11: Return STDIN_FILENO from NetBSDARM64 End If
    If idx is equal to 12: Return STDIN_FILENO from OpenBSDX64 End If
    If idx is equal to 13: Return STDIN_FILENO from OpenBSDARM64 End If
    If idx is equal to 14: Return STDIN_FILENO from WindowsX86_64 End If
    If idx is equal to 15: Return STDIN_FILENO from WindowsARM64 End If
    If idx is equal to 16: Return STDIN_FILENO from PowerPC End If
    If idx is equal to 17: Return STDIN_FILENO from RISCV32 End If
    If idx is equal to 18: Return STDIN_FILENO from RISCV64 End If
    Return 0
End Process

Process called "STDOUT_FILENO" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return STDOUT_FILENO from LinuxX86_64 End If
    If idx is equal to 2: Return STDOUT_FILENO from LinuxARM64 End If
    If idx is equal to 3: Return STDOUT_FILENO from LinuxARM32 End If
    If idx is equal to 4: Return STDOUT_FILENO from MIPS32 End If
    If idx is equal to 5: Return STDOUT_FILENO from MIPS64 End If
    If idx is equal to 6: Return STDOUT_FILENO from DarwinX86_64 End If
    If idx is equal to 7: Return STDOUT_FILENO from DarwinARM64 End If
    If idx is equal to 8: Return STDOUT_FILENO from FreeBSDX64 End If
    If idx is equal to 9: Return STDOUT_FILENO from FreeBSDARM64 End If
    If idx is equal to 10: Return STDOUT_FILENO from NetBSDX64 End If
    If idx is equal to 11: Return STDOUT_FILENO from NetBSDARM64 End If
    If idx is equal to 12: Return STDOUT_FILENO from OpenBSDX64 End If
    If idx is equal to 13: Return STDOUT_FILENO from OpenBSDARM64 End If
    If idx is equal to 14: Return STDOUT_FILENO from WindowsX86_64 End If
    If idx is equal to 15: Return STDOUT_FILENO from WindowsARM64 End If
    If idx is equal to 16: Return STDOUT_FILENO from PowerPC End If
    If idx is equal to 17: Return STDOUT_FILENO from RISCV32 End If
    If idx is equal to 18: Return STDOUT_FILENO from RISCV64 End If
    Return 1
End Process

Process called "STDERR_FILENO" returns Integer:
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return STDERR_FILENO from LinuxX86_64 End If
    If idx is equal to 2: Return STDERR_FILENO from LinuxARM64 End If
    If idx is equal to 3: Return STDERR_FILENO from LinuxARM32 End If
    If idx is equal to 4: Return STDERR_FILENO from MIPS32 End If
    If idx is equal to 5: Return STDERR_FILENO from MIPS64 End If
    If idx is equal to 6: Return STDERR_FILENO from DarwinX86_64 End If
    If idx is equal to 7: Return STDERR_FILENO from DarwinARM64 End If
    If idx is equal to 8: Return STDERR_FILENO from FreeBSDX64 End If
    If idx is equal to 9: Return STDERR_FILENO from FreeBSDARM64 End If
    If idx is equal to 10: Return STDERR_FILENO from NetBSDX64 End If
    If idx is equal to 11: Return STDERR_FILENO from NetBSDARM64 End If
    If idx is equal to 12: Return STDERR_FILENO from OpenBSDX64 End If
    If idx is equal to 13: Return STDERR_FILENO from OpenBSDARM64 End If
    If idx is equal to 14: Return STDERR_FILENO from WindowsX86_64 End If
    If idx is equal to 15: Return STDERR_FILENO from WindowsARM64 End If
    If idx is equal to 16: Return STDERR_FILENO from PowerPC End If
    If idx is equal to 17: Return STDERR_FILENO from RISCV32 End If
    If idx is equal to 18: Return STDERR_FILENO from RISCV64 End If
    Return 2
End Process
