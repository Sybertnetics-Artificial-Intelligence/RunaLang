Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: System Call Interface

This file provides a platform-agnostic interface for system calls.
It imports the platform-specific syscall implementation based on the compile target.

Architecture:
- This file defines the common API that all Runa code uses
- Platform-specific implementations are in platform/{platform}/syscall.runa
- The compiler sets the target platform at compile time
- Imports delegate to the correct platform-specific implementation

Supported platforms:
- Linux (x86_64, ARM64, ARM32)
- Darwin/macOS (x86_64, ARM64)
- Windows (x86_64, ARM64)
- FreeBSD, OpenBSD, NetBSD (x86_64, ARM64)
- RISC-V, MIPS, PowerPC

Usage:
All code should call functions from this file (e.g., syscall_read, syscall_write).
The platform-specific implementation is automatically selected at compile time.
:End Note

Note: =========================================================================
Note: PLATFORM SELECTION AND BACKEND BINDING
Note: =========================================================================
Note: The compiler driver passes (os, arch). We use platform_selector to choose
Note: the backend. We import supported syscall backends and dispatch based on a
Note: small integer index set by select_syscall_backend(os, arch).

Import "compiler/frontend/primitives/platform/platform_selector.runa" as Selector

Import "compiler/frontend/primitives/platform/linux_x86_64/syscall.runa" as LinuxX86_64
Import "compiler/frontend/primitives/platform/linux_arm64/syscall.runa" as LinuxARM64
Import "compiler/frontend/primitives/platform/linux_arm32/syscall.runa" as LinuxARM32
Import "compiler/frontend/primitives/platform/mips32/syscall.runa" as MIPS32
Import "compiler/frontend/primitives/platform/mips64/syscall.runa" as MIPS64
Import "compiler/frontend/primitives/platform/darwin_x86_64/syscall.runa" as DarwinX86_64
Import "compiler/frontend/primitives/platform/darwin_arm64/syscall.runa" as DarwinARM64
Import "compiler/frontend/primitives/platform/freebsd_x64/syscall.runa" as FreeBSDX64
Import "compiler/frontend/primitives/platform/freebsd_arm64/syscall.runa" as FreeBSDARM64
Import "compiler/frontend/primitives/platform/netbsd_x64/syscall.runa" as NetBSDX64
Import "compiler/frontend/primitives/platform/netbsd_arm64/syscall.runa" as NetBSDARM64
Import "compiler/frontend/primitives/platform/openbsd_x64/syscall.runa" as OpenBSDX64
Import "compiler/frontend/primitives/platform/openbsd_arm64/syscall.runa" as OpenBSDARM64
Import "compiler/frontend/primitives/platform/windows_x86_64/syscall.runa" as WindowsX86_64
Import "compiler/frontend/primitives/platform/windows_arm64/syscall.runa" as WindowsARM64
Import "compiler/frontend/primitives/platform/powerpc/syscall.runa" as PowerPC
Import "compiler/frontend/primitives/platform/riscv32/syscall.runa" as RISCV32
Import "compiler/frontend/primitives/platform/riscv64/syscall.runa" as RISCV64

Note: Backend index mapping
Note: 0=unset, 1=linux_x86_64, 2=linux_arm64, 3=linux_arm32, 4=mips32, 5=mips64,
Note: 6=darwin_x86_64, 7=darwin_arm64, 8=freebsd_x64, 9=freebsd_arm64,
Note: 10=netbsd_x64, 11=netbsd_arm64, 12=openbsd_x64, 13=openbsd_arm64,
Note: 14=windows_x86_64, 15=windows_arm64, 16=powerpc, 17=riscv32, 18=riscv64

Process called "_get_backend_index_for_key" takes key as String returns Integer:
    If key is equal to "linux_x86_64": Return 1 End If
    If key is equal to "linux_arm64": Return 2 End If
    If key is equal to "linux_arm32": Return 3 End If
    If key is equal to "mips32": Return 4 End If
    If key is equal to "mips64": Return 5 End If
    If key is equal to "darwin_x86_64": Return 6 End If
    If key is equal to "darwin_arm64": Return 7 End If
    If key is equal to "freebsd_x64": Return 8 End If
    If key is equal to "freebsd_arm64": Return 9 End If
    If key is equal to "netbsd_x64": Return 10 End If
    If key is equal to "netbsd_arm64": Return 11 End If
    If key is equal to "openbsd_x64": Return 12 End If
    If key is equal to "openbsd_arm64": Return 13 End If
    If key is equal to "windows_x86_64": Return 14 End If
    If key is equal to "windows_arm64": Return 15 End If
    If key is equal to "powerpc": Return 16 End If
    If key is equal to "riscv32": Return 17 End If
    If key is equal to "riscv64": Return 18 End If
    Return 0
End Process

Let _current_backend_index be 0

Process called "select_syscall_backend" takes os_name as String, arch_name as String returns Integer:
    Let key be Selector.get_platform_key(os_name, arch_name)
    Let idx be _get_backend_index_for_key(key)
    If idx is equal to 0:
        Return 0
    End If
    Set _current_backend_index to idx
    Return 1
End Process

Process called "_ensure_backend_selected" returns Integer:
    If _current_backend_index is equal to 0:
        Set _current_backend_index to 1  Note: default linux_x86_64
    End If
    Return _current_backend_index
End Process

Note: ============================================================================
Note: SYSCALL NUMBER CONSTANTS (Platform-Agnostic Interface)
Note: ============================================================================
Note: These delegate to platform-specific implementations

Process called "SYS_READ" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_READ() End If
    If idx is equal to 2: Return LinuxARM64.SYS_READ() End If
    If idx is equal to 3: Return LinuxARM32.SYS_READ() End If
    If idx is equal to 4: Return MIPS32.SYS_READ() End If
    If idx is equal to 5: Return MIPS64.SYS_READ() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_READ() End If
    If idx is equal to 7: Return DarwinARM64.SYS_READ() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_READ() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_READ() End If
    If idx is equal to 10: Return NetBSDX64.SYS_READ() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_READ() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_READ() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_READ() End If
    If idx is equal to 14: Return WindowsX86_64.SYS_READ() End If
    If idx is equal to 15: Return WindowsARM64.SYS_READ() End If
    If idx is equal to 16: Return PowerPC.SYS_READ() End If
    If idx is equal to 17: Return RISCV32.SYS_READ() End If
    If idx is equal to 18: Return RISCV64.SYS_READ() End If
    Return LinuxX86_64.SYS_READ()
End Process

Process called "SYS_WRITE" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_WRITE() End If
    If idx is equal to 2: Return LinuxARM64.SYS_WRITE() End If
    If idx is equal to 3: Return LinuxARM32.SYS_WRITE() End If
    If idx is equal to 4: Return MIPS32.SYS_WRITE() End If
    If idx is equal to 5: Return MIPS64.SYS_WRITE() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_WRITE() End If
    If idx is equal to 7: Return DarwinARM64.SYS_WRITE() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_WRITE() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_WRITE() End If
    If idx is equal to 10: Return NetBSDX64.SYS_WRITE() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_WRITE() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_WRITE() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_WRITE() End If
    If idx is equal to 14: Return WindowsX86_64.SYS_WRITE() End If
    If idx is equal to 15: Return WindowsARM64.SYS_WRITE() End If
    If idx is equal to 16: Return PowerPC.SYS_WRITE() End If
    If idx is equal to 17: Return RISCV32.SYS_WRITE() End If
    If idx is equal to 18: Return RISCV64.SYS_WRITE() End If
    Return LinuxX86_64.SYS_WRITE()
End Process

Process called "SYS_OPEN" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_OPEN() End If
    If idx is equal to 2: Return LinuxARM64.SYS_OPEN() End If
    If idx is equal to 3: Return LinuxARM32.SYS_OPEN() End If
    If idx is equal to 4: Return MIPS32.SYS_OPEN() End If
    If idx is equal to 5: Return MIPS64.SYS_OPEN() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_OPEN() End If
    If idx is equal to 7: Return DarwinARM64.SYS_OPEN() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_OPEN() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_OPEN() End If
    If idx is equal to 10: Return NetBSDX64.SYS_OPEN() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_OPEN() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_OPEN() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_OPEN() End If
    If idx is equal to 16: Return PowerPC.SYS_OPEN() End If
    If idx is equal to 17: Return RISCV32.SYS_OPEN() End If
    If idx is equal to 18: Return RISCV64.SYS_OPEN() End If
    Return 0
End Process

Process called "SYS_CLOSE" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_CLOSE() End If
    If idx is equal to 2: Return LinuxARM64.SYS_CLOSE() End If
    If idx is equal to 3: Return LinuxARM32.SYS_CLOSE() End If
    If idx is equal to 4: Return MIPS32.SYS_CLOSE() End If
    If idx is equal to 5: Return MIPS64.SYS_CLOSE() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_CLOSE() End If
    If idx is equal to 7: Return DarwinARM64.SYS_CLOSE() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_CLOSE() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_CLOSE() End If
    If idx is equal to 10: Return NetBSDX64.SYS_CLOSE() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_CLOSE() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_CLOSE() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_CLOSE() End If
    If idx is equal to 16: Return PowerPC.SYS_CLOSE() End If
    If idx is equal to 17: Return RISCV32.SYS_CLOSE() End If
    If idx is equal to 18: Return RISCV64.SYS_CLOSE() End If
    Return 0
End Process

Process called "SYS_EXIT" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_EXIT() End If
    If idx is equal to 2: Return LinuxARM64.SYS_EXIT() End If
    If idx is equal to 3: Return LinuxARM32.SYS_EXIT() End If
    If idx is equal to 4: Return MIPS32.SYS_EXIT() End If
    If idx is equal to 5: Return MIPS64.SYS_EXIT() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_EXIT() End If
    If idx is equal to 7: Return DarwinARM64.SYS_EXIT() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_EXIT() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_EXIT() End If
    If idx is equal to 10: Return NetBSDX64.SYS_EXIT() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_EXIT() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_EXIT() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_EXIT() End If
    If idx is equal to 16: Return PowerPC.SYS_EXIT() End If
    If idx is equal to 17: Return RISCV32.SYS_EXIT() End If
    If idx is equal to 18: Return RISCV64.SYS_EXIT() End If
    Return 0
End Process

Process called "SYS_EXIT_GROUP" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_EXIT_GROUP() End If
    If idx is equal to 2: Return LinuxARM64.SYS_EXIT_GROUP() End If
    If idx is equal to 3: Return LinuxARM32.SYS_EXIT_GROUP() End If
    If idx is equal to 4: Return MIPS32.SYS_EXIT_GROUP() End If
    If idx is equal to 5: Return MIPS64.SYS_EXIT_GROUP() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_EXIT_GROUP() End If
    If idx is equal to 7: Return DarwinARM64.SYS_EXIT_GROUP() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_EXIT_GROUP() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_EXIT_GROUP() End If
    If idx is equal to 10: Return NetBSDX64.SYS_EXIT_GROUP() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_EXIT_GROUP() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_EXIT_GROUP() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_EXIT_GROUP() End If
    If idx is equal to 16: Return PowerPC.SYS_EXIT_GROUP() End If
    If idx is equal to 17: Return RISCV32.SYS_EXIT_GROUP() End If
    If idx is equal to 18: Return RISCV64.SYS_EXIT_GROUP() End If
    Return 0
End Process

Process called "SYS_BRK" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_BRK() End If
    If idx is equal to 2: Return LinuxARM64.SYS_BRK() End If
    If idx is equal to 3: Return LinuxARM32.SYS_BRK() End If
    If idx is equal to 4: Return MIPS32.SYS_BRK() End If
    If idx is equal to 5: Return MIPS64.SYS_BRK() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_BRK() End If
    If idx is equal to 7: Return DarwinARM64.SYS_BRK() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_BRK() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_BRK() End If
    If idx is equal to 10: Return NetBSDX64.SYS_BRK() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_BRK() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_BRK() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_BRK() End If
    If idx is equal to 16: Return PowerPC.SYS_BRK() End If
    If idx is equal to 17: Return RISCV32.SYS_BRK() End If
    If idx is equal to 18: Return RISCV64.SYS_BRK() End If
    Return 0
End Process

Process called "SYS_MMAP" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_MMAP() End If
    If idx is equal to 2: Return LinuxARM64.SYS_MMAP() End If
    If idx is equal to 3: Return LinuxARM32.SYS_MMAP() End If
    If idx is equal to 4: Return MIPS32.SYS_MMAP() End If
    If idx is equal to 5: Return MIPS64.SYS_MMAP() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_MMAP() End If
    If idx is equal to 7: Return DarwinARM64.SYS_MMAP() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_MMAP() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_MMAP() End If
    If idx is equal to 10: Return NetBSDX64.SYS_MMAP() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_MMAP() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_MMAP() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_MMAP() End If
    If idx is equal to 16: Return PowerPC.SYS_MMAP() End If
    If idx is equal to 17: Return RISCV32.SYS_MMAP() End If
    If idx is equal to 18: Return RISCV64.SYS_MMAP() End If
    Return 0
End Process

Process called "SYS_MUNMAP" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_MUNMAP() End If
    If idx is equal to 2: Return LinuxARM64.SYS_MUNMAP() End If
    If idx is equal to 3: Return LinuxARM32.SYS_MUNMAP() End If
    If idx is equal to 4: Return MIPS32.SYS_MUNMAP() End If
    If idx is equal to 5: Return MIPS64.SYS_MUNMAP() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_MUNMAP() End If
    If idx is equal to 7: Return DarwinARM64.SYS_MUNMAP() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_MUNMAP() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_MUNMAP() End If
    If idx is equal to 10: Return NetBSDX64.SYS_MUNMAP() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_MUNMAP() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_MUNMAP() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_MUNMAP() End If
    If idx is equal to 16: Return PowerPC.SYS_MUNMAP() End If
    If idx is equal to 17: Return RISCV32.SYS_MUNMAP() End If
    If idx is equal to 18: Return RISCV64.SYS_MUNMAP() End If
    Return 0
End Process

Process called "SYS_STAT" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_STAT() End If
    If idx is equal to 2: Return LinuxARM64.SYS_STAT() End If
    If idx is equal to 3: Return LinuxARM32.SYS_STAT() End If
    If idx is equal to 4: Return MIPS32.SYS_STAT() End If
    If idx is equal to 5: Return MIPS64.SYS_STAT() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_STAT() End If
    If idx is equal to 7: Return DarwinARM64.SYS_STAT() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_STAT() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_STAT() End If
    If idx is equal to 10: Return NetBSDX64.SYS_STAT() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_STAT() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_STAT() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_STAT() End If
    If idx is equal to 16: Return PowerPC.SYS_STAT() End If
    If idx is equal to 17: Return RISCV32.SYS_STAT() End If
    If idx is equal to 18: Return RISCV64.SYS_STAT() End If
    Return 0
End Process

Process called "SYS_FSTAT" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_FSTAT() End If
    If idx is equal to 2: Return LinuxARM64.SYS_FSTAT() End If
    If idx is equal to 3: Return LinuxARM32.SYS_FSTAT() End If
    If idx is equal to 4: Return MIPS32.SYS_FSTAT() End If
    If idx is equal to 5: Return MIPS64.SYS_FSTAT() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_FSTAT() End If
    If idx is equal to 7: Return DarwinARM64.SYS_FSTAT() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_FSTAT() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_FSTAT() End If
    If idx is equal to 10: Return NetBSDX64.SYS_FSTAT() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_FSTAT() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_FSTAT() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_FSTAT() End If
    If idx is equal to 16: Return PowerPC.SYS_FSTAT() End If
    If idx is equal to 17: Return RISCV32.SYS_FSTAT() End If
    If idx is equal to 18: Return RISCV64.SYS_FSTAT() End If
    Return 0
End Process

Process called "SYS_LSTAT" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_LSTAT() End If
    If idx is equal to 2: Return LinuxARM64.SYS_LSTAT() End If
    If idx is equal to 3: Return LinuxARM32.SYS_LSTAT() End If
    If idx is equal to 4: Return MIPS32.SYS_LSTAT() End If
    If idx is equal to 5: Return MIPS64.SYS_LSTAT() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_LSTAT() End If
    If idx is equal to 7: Return DarwinARM64.SYS_LSTAT() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_LSTAT() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_LSTAT() End If
    If idx is equal to 10: Return NetBSDX64.SYS_LSTAT() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_LSTAT() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_LSTAT() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_LSTAT() End If
    If idx is equal to 16: Return PowerPC.SYS_LSTAT() End If
    If idx is equal to 17: Return RISCV32.SYS_LSTAT() End If
    If idx is equal to 18: Return RISCV64.SYS_LSTAT() End If
    Return 0
End Process

Process called "SYS_LSEEK" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_LSEEK() End If
    If idx is equal to 2: Return LinuxARM64.SYS_LSEEK() End If
    If idx is equal to 3: Return LinuxARM32.SYS_LSEEK() End If
    If idx is equal to 4: Return MIPS32.SYS_LSEEK() End If
    If idx is equal to 5: Return MIPS64.SYS_LSEEK() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_LSEEK() End If
    If idx is equal to 7: Return DarwinARM64.SYS_LSEEK() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_LSEEK() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_LSEEK() End If
    If idx is equal to 10: Return NetBSDX64.SYS_LSEEK() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_LSEEK() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_LSEEK() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_LSEEK() End If
    If idx is equal to 16: Return PowerPC.SYS_LSEEK() End If
    If idx is equal to 17: Return RISCV32.SYS_LSEEK() End If
    If idx is equal to 18: Return RISCV64.SYS_LSEEK() End If
    Return 0
End Process

Process called "SYS_CREAT" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_CREAT() End If
    If idx is equal to 2: Return LinuxARM64.SYS_CREAT() End If
    If idx is equal to 3: Return LinuxARM32.SYS_CREAT() End If
    If idx is equal to 4: Return MIPS32.SYS_CREAT() End If
    If idx is equal to 5: Return MIPS64.SYS_CREAT() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_CREAT() End If
    If idx is equal to 7: Return DarwinARM64.SYS_CREAT() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_CREAT() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_CREAT() End If
    If idx is equal to 10: Return NetBSDX64.SYS_CREAT() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_CREAT() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_CREAT() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_CREAT() End If
    If idx is equal to 16: Return PowerPC.SYS_CREAT() End If
    If idx is equal to 17: Return RISCV32.SYS_CREAT() End If
    If idx is equal to 18: Return RISCV64.SYS_CREAT() End If
    Return 0
End Process

Process called "SYS_UNLINK" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_UNLINK() End If
    If idx is equal to 2: Return LinuxARM64.SYS_UNLINK() End If
    If idx is equal to 3: Return LinuxARM32.SYS_UNLINK() End If
    If idx is equal to 4: Return MIPS32.SYS_UNLINK() End If
    If idx is equal to 5: Return MIPS64.SYS_UNLINK() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_UNLINK() End If
    If idx is equal to 7: Return DarwinARM64.SYS_UNLINK() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_UNLINK() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_UNLINK() End If
    If idx is equal to 10: Return NetBSDX64.SYS_UNLINK() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_UNLINK() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_UNLINK() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_UNLINK() End If
    If idx is equal to 16: Return PowerPC.SYS_UNLINK() End If
    If idx is equal to 17: Return RISCV32.SYS_UNLINK() End If
    If idx is equal to 18: Return RISCV64.SYS_UNLINK() End If
    Return 0
End Process

Process called "SYS_MKDIR" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_MKDIR() End If
    If idx is equal to 2: Return LinuxARM64.SYS_MKDIR() End If
    If idx is equal to 3: Return LinuxARM32.SYS_MKDIR() End If
    If idx is equal to 4: Return MIPS32.SYS_MKDIR() End If
    If idx is equal to 5: Return MIPS64.SYS_MKDIR() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_MKDIR() End If
    If idx is equal to 7: Return DarwinARM64.SYS_MKDIR() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_MKDIR() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_MKDIR() End If
    If idx is equal to 10: Return NetBSDX64.SYS_MKDIR() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_MKDIR() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_MKDIR() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_MKDIR() End If
    If idx is equal to 16: Return PowerPC.SYS_MKDIR() End If
    If idx is equal to 17: Return RISCV32.SYS_MKDIR() End If
    If idx is equal to 18: Return RISCV64.SYS_MKDIR() End If
    Return 0
End Process

Process called "SYS_RMDIR" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SYS_RMDIR() End If
    If idx is equal to 2: Return LinuxARM64.SYS_RMDIR() End If
    If idx is equal to 3: Return LinuxARM32.SYS_RMDIR() End If
    If idx is equal to 4: Return MIPS32.SYS_RMDIR() End If
    If idx is equal to 5: Return MIPS64.SYS_RMDIR() End If
    If idx is equal to 6: Return DarwinX86_64.SYS_RMDIR() End If
    If idx is equal to 7: Return DarwinARM64.SYS_RMDIR() End If
    If idx is equal to 8: Return FreeBSDX64.SYS_RMDIR() End If
    If idx is equal to 9: Return FreeBSDARM64.SYS_RMDIR() End If
    If idx is equal to 10: Return NetBSDX64.SYS_RMDIR() End If
    If idx is equal to 11: Return NetBSDARM64.SYS_RMDIR() End If
    If idx is equal to 12: Return OpenBSDX64.SYS_RMDIR() End If
    If idx is equal to 13: Return OpenBSDARM64.SYS_RMDIR() End If
    If idx is equal to 16: Return PowerPC.SYS_RMDIR() End If
    If idx is equal to 17: Return RISCV32.SYS_RMDIR() End If
    If idx is equal to 18: Return RISCV64.SYS_RMDIR() End If
    Return 0
End Process

Note: ============================================================================
Note: GENERIC SYSCALL WRAPPERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "syscall_0" takes syscall_number as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_0(syscall_number) End If
    If idx is equal to 2: Return LinuxARM64.syscall_0(syscall_number) End If
    If idx is equal to 3: Return LinuxARM32.syscall_0(syscall_number) End If
    If idx is equal to 4: Return MIPS32.syscall_0(syscall_number) End If
    If idx is equal to 5: Return MIPS64.syscall_0(syscall_number) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_0(syscall_number) End If
    If idx is equal to 7: Return DarwinARM64.syscall_0(syscall_number) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_0(syscall_number) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_0(syscall_number) End If
    If idx is equal to 10: Return NetBSDX64.syscall_0(syscall_number) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_0(syscall_number) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_0(syscall_number) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_0(syscall_number) End If
    If idx is equal to 16: Return PowerPC.syscall_0(syscall_number) End If
    If idx is equal to 17: Return RISCV32.syscall_0(syscall_number) End If
    If idx is equal to 18: Return RISCV64.syscall_0(syscall_number) End If
    Return 0
End Process

Process called "syscall_1" takes syscall_number as Integer, arg1 as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 2: Return LinuxARM64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 3: Return LinuxARM32.syscall_1(syscall_number, arg1) End If
    If idx is equal to 4: Return MIPS32.syscall_1(syscall_number, arg1) End If
    If idx is equal to 5: Return MIPS64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 7: Return DarwinARM64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 10: Return NetBSDX64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_1(syscall_number, arg1) End If
    If idx is equal to 16: Return PowerPC.syscall_1(syscall_number, arg1) End If
    If idx is equal to 17: Return RISCV32.syscall_1(syscall_number, arg1) End If
    If idx is equal to 18: Return RISCV64.syscall_1(syscall_number, arg1) End If
    Return 0
End Process

Process called "syscall_2" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 2: Return LinuxARM64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 3: Return LinuxARM32.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 4: Return MIPS32.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 5: Return MIPS64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 7: Return DarwinARM64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 10: Return NetBSDX64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 16: Return PowerPC.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 17: Return RISCV32.syscall_2(syscall_number, arg1, arg2) End If
    If idx is equal to 18: Return RISCV64.syscall_2(syscall_number, arg1, arg2) End If
    Return 0
End Process

Process called "syscall_3" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 2: Return LinuxARM64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 3: Return LinuxARM32.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 4: Return MIPS32.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 5: Return MIPS64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 7: Return DarwinARM64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 10: Return NetBSDX64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 16: Return PowerPC.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 17: Return RISCV32.syscall_3(syscall_number, arg1, arg2, arg3) End If
    If idx is equal to 18: Return RISCV64.syscall_3(syscall_number, arg1, arg2, arg3) End If
    Return 0
End Process

Process called "syscall_4" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 2: Return LinuxARM64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 3: Return LinuxARM32.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 4: Return MIPS32.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 5: Return MIPS64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 7: Return DarwinARM64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 10: Return NetBSDX64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 16: Return PowerPC.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 17: Return RISCV32.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    If idx is equal to 18: Return RISCV64.syscall_4(syscall_number, arg1, arg2, arg3, arg4) End If
    Return 0
End Process

Process called "syscall_5" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 2: Return LinuxARM64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 3: Return LinuxARM32.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 4: Return MIPS32.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 5: Return MIPS64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 7: Return DarwinARM64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 10: Return NetBSDX64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 16: Return PowerPC.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 17: Return RISCV32.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    If idx is equal to 18: Return RISCV64.syscall_5(syscall_number, arg1, arg2, arg3, arg4, arg5) End If
    Return 0
End Process

Process called "syscall_6" takes syscall_number as Integer, arg1 as Integer, arg2 as Integer, arg3 as Integer, arg4 as Integer, arg5 as Integer, arg6 as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 2: Return LinuxARM64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 3: Return LinuxARM32.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 4: Return MIPS32.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 5: Return MIPS64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 7: Return DarwinARM64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 10: Return NetBSDX64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 16: Return PowerPC.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 17: Return RISCV32.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    If idx is equal to 18: Return RISCV64.syscall_6(syscall_number, arg1, arg2, arg3, arg4, arg5, arg6) End If
    Return 0
End Process

Note: ============================================================================
Note: HIGH-LEVEL SYSCALL WRAPPERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "syscall_read" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_read(fd, buffer, count) End If
    If idx is equal to 2: Return LinuxARM64.syscall_read(fd, buffer, count) End If
    If idx is equal to 3: Return LinuxARM32.syscall_read(fd, buffer, count) End If
    If idx is equal to 4: Return MIPS32.syscall_read(fd, buffer, count) End If
    If idx is equal to 5: Return MIPS64.syscall_read(fd, buffer, count) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_read(fd, buffer, count) End If
    If idx is equal to 7: Return DarwinARM64.syscall_read(fd, buffer, count) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_read(fd, buffer, count) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_read(fd, buffer, count) End If
    If idx is equal to 10: Return NetBSDX64.syscall_read(fd, buffer, count) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_read(fd, buffer, count) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_read(fd, buffer, count) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_read(fd, buffer, count) End If
    If idx is equal to 14: Return WindowsX86_64.syscall_read(fd, buffer, count) End If
    If idx is equal to 15: Return WindowsARM64.syscall_read(fd, buffer, count) End If
    If idx is equal to 16: Return PowerPC.syscall_read(fd, buffer, count) End If
    If idx is equal to 17: Return RISCV32.syscall_read(fd, buffer, count) End If
    If idx is equal to 18: Return RISCV64.syscall_read(fd, buffer, count) End If
    Return -1
End Process

Process called "syscall_write" takes fd as Integer, buffer as Integer, count as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_write(fd, buffer, count) End If
    If idx is equal to 2: Return LinuxARM64.syscall_write(fd, buffer, count) End If
    If idx is equal to 3: Return LinuxARM32.syscall_write(fd, buffer, count) End If
    If idx is equal to 4: Return MIPS32.syscall_write(fd, buffer, count) End If
    If idx is equal to 5: Return MIPS64.syscall_write(fd, buffer, count) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_write(fd, buffer, count) End If
    If idx is equal to 7: Return DarwinARM64.syscall_write(fd, buffer, count) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_write(fd, buffer, count) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_write(fd, buffer, count) End If
    If idx is equal to 10: Return NetBSDX64.syscall_write(fd, buffer, count) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_write(fd, buffer, count) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_write(fd, buffer, count) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_write(fd, buffer, count) End If
    If idx is equal to 14: Return WindowsX86_64.syscall_write(fd, buffer, count) End If
    If idx is equal to 15: Return WindowsARM64.syscall_write(fd, buffer, count) End If
    If idx is equal to 16: Return PowerPC.syscall_write(fd, buffer, count) End If
    If idx is equal to 17: Return RISCV32.syscall_write(fd, buffer, count) End If
    If idx is equal to 18: Return RISCV64.syscall_write(fd, buffer, count) End If
    Return -1
End Process

Process called "syscall_open" takes filename as Integer, flags as Integer, mode as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_open(filename, flags, mode) End If
    If idx is equal to 2: Return LinuxARM64.syscall_open(filename, flags, mode) End If
    If idx is equal to 3: Return LinuxARM32.syscall_open(filename, flags, mode) End If
    If idx is equal to 4: Return MIPS32.syscall_open(filename, flags, mode) End If
    If idx is equal to 5: Return MIPS64.syscall_open(filename, flags, mode) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_open(filename, flags, mode) End If
    If idx is equal to 7: Return DarwinARM64.syscall_open(filename, flags, mode) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_open(filename, flags, mode) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_open(filename, flags, mode) End If
    If idx is equal to 10: Return NetBSDX64.syscall_open(filename, flags, mode) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_open(filename, flags, mode) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_open(filename, flags, mode) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_open(filename, flags, mode) End If
    If idx is equal to 16: Return PowerPC.syscall_open(filename, flags, mode) End If
    If idx is equal to 17: Return RISCV32.syscall_open(filename, flags, mode) End If
    If idx is equal to 18: Return RISCV64.syscall_open(filename, flags, mode) End If
    Return -1
End Process

Process called "syscall_close" takes fd as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_close(fd) End If
    If idx is equal to 2: Return LinuxARM64.syscall_close(fd) End If
    If idx is equal to 3: Return LinuxARM32.syscall_close(fd) End If
    If idx is equal to 4: Return MIPS32.syscall_close(fd) End If
    If idx is equal to 5: Return MIPS64.syscall_close(fd) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_close(fd) End If
    If idx is equal to 7: Return DarwinARM64.syscall_close(fd) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_close(fd) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_close(fd) End If
    If idx is equal to 10: Return NetBSDX64.syscall_close(fd) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_close(fd) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_close(fd) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_close(fd) End If
    If idx is equal to 14: Return WindowsX86_64.syscall_close(fd) End If
    If idx is equal to 15: Return WindowsARM64.syscall_close(fd) End If
    If idx is equal to 16: Return PowerPC.syscall_close(fd) End If
    If idx is equal to 17: Return RISCV32.syscall_close(fd) End If
    If idx is equal to 18: Return RISCV64.syscall_close(fd) End If
    Return -1
End Process

Process called "syscall_exit" takes status as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_exit(status) End If
    If idx is equal to 2: Return LinuxARM64.syscall_exit(status) End If
    If idx is equal to 3: Return LinuxARM32.syscall_exit(status) End If
    If idx is equal to 4: Return MIPS32.syscall_exit(status) End If
    If idx is equal to 5: Return MIPS64.syscall_exit(status) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_exit(status) End If
    If idx is equal to 7: Return DarwinARM64.syscall_exit(status) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_exit(status) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_exit(status) End If
    If idx is equal to 10: Return NetBSDX64.syscall_exit(status) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_exit(status) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_exit(status) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_exit(status) End If
    If idx is equal to 16: Return PowerPC.syscall_exit(status) End If
    If idx is equal to 17: Return RISCV32.syscall_exit(status) End If
    If idx is equal to 18: Return RISCV64.syscall_exit(status) End If
    Return -1
End Process

Process called "syscall_brk" takes addr as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_brk(addr) End If
    If idx is equal to 2: Return LinuxARM64.syscall_brk(addr) End If
    If idx is equal to 3: Return LinuxARM32.syscall_brk(addr) End If
    If idx is equal to 4: Return MIPS32.syscall_brk(addr) End If
    If idx is equal to 5: Return MIPS64.syscall_brk(addr) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_brk(addr) End If
    If idx is equal to 7: Return DarwinARM64.syscall_brk(addr) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_brk(addr) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_brk(addr) End If
    If idx is equal to 10: Return NetBSDX64.syscall_brk(addr) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_brk(addr) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_brk(addr) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_brk(addr) End If
    If idx is equal to 16: Return PowerPC.syscall_brk(addr) End If
    If idx is equal to 17: Return RISCV32.syscall_brk(addr) End If
    If idx is equal to 18: Return RISCV64.syscall_brk(addr) End If
    Return -1
End Process

Process called "syscall_mmap" takes addr as Integer, length as Integer, prot as Integer, flags as Integer, fd as Integer, offset as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 2: Return LinuxARM64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 3: Return LinuxARM32.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 4: Return MIPS32.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 5: Return MIPS64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 7: Return DarwinARM64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 10: Return NetBSDX64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 16: Return PowerPC.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 17: Return RISCV32.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    If idx is equal to 18: Return RISCV64.syscall_mmap(addr, length, prot, flags, fd, offset) End If
    Return -1
End Process

Process called "syscall_munmap" takes addr as Integer, length as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_munmap(addr, length) End If
    If idx is equal to 2: Return LinuxARM64.syscall_munmap(addr, length) End If
    If idx is equal to 3: Return LinuxARM32.syscall_munmap(addr, length) End If
    If idx is equal to 4: Return MIPS32.syscall_munmap(addr, length) End If
    If idx is equal to 5: Return MIPS64.syscall_munmap(addr, length) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_munmap(addr, length) End If
    If idx is equal to 7: Return DarwinARM64.syscall_munmap(addr, length) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_munmap(addr, length) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_munmap(addr, length) End If
    If idx is equal to 10: Return NetBSDX64.syscall_munmap(addr, length) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_munmap(addr, length) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_munmap(addr, length) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_munmap(addr, length) End If
    If idx is equal to 16: Return PowerPC.syscall_munmap(addr, length) End If
    If idx is equal to 17: Return RISCV32.syscall_munmap(addr, length) End If
    If idx is equal to 18: Return RISCV64.syscall_munmap(addr, length) End If
    Return -1
End Process

Process called "syscall_fstat" takes fd as Integer, statbuf as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 2: Return LinuxARM64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 3: Return LinuxARM32.syscall_fstat(fd, statbuf) End If
    If idx is equal to 4: Return MIPS32.syscall_fstat(fd, statbuf) End If
    If idx is equal to 5: Return MIPS64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 7: Return DarwinARM64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 10: Return NetBSDX64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_fstat(fd, statbuf) End If
    If idx is equal to 16: Return PowerPC.syscall_fstat(fd, statbuf) End If
    If idx is equal to 17: Return RISCV32.syscall_fstat(fd, statbuf) End If
    If idx is equal to 18: Return RISCV64.syscall_fstat(fd, statbuf) End If
    Return -1
End Process

Process called "syscall_lseek" takes fd as Integer, offset as Integer, whence as Integer returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 2: Return LinuxARM64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 3: Return LinuxARM32.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 4: Return MIPS32.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 5: Return MIPS64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 6: Return DarwinX86_64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 7: Return DarwinARM64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 8: Return FreeBSDX64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 9: Return FreeBSDARM64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 10: Return NetBSDX64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 11: Return NetBSDARM64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 12: Return OpenBSDX64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 13: Return OpenBSDARM64.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 16: Return PowerPC.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 17: Return RISCV32.syscall_lseek(fd, offset, whence) End If
    If idx is equal to 18: Return RISCV64.syscall_lseek(fd, offset, whence) End If
    Return -1
End Process

Note: ============================================================================
Note: SYSCALL CONSTANTS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "O_RDONLY" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.O_RDONLY() End If
    If idx is equal to 2: Return LinuxARM64.O_RDONLY() End If
    If idx is equal to 3: Return LinuxARM32.O_RDONLY() End If
    If idx is equal to 4: Return MIPS32.O_RDONLY() End If
    If idx is equal to 5: Return MIPS64.O_RDONLY() End If
    If idx is equal to 6: Return DarwinX86_64.O_RDONLY() End If
    If idx is equal to 7: Return DarwinARM64.O_RDONLY() End If
    If idx is equal to 8: Return FreeBSDX64.O_RDONLY() End If
    If idx is equal to 9: Return FreeBSDARM64.O_RDONLY() End If
    If idx is equal to 10: Return NetBSDX64.O_RDONLY() End If
    If idx is equal to 11: Return NetBSDARM64.O_RDONLY() End If
    If idx is equal to 12: Return OpenBSDX64.O_RDONLY() End If
    If idx is equal to 13: Return OpenBSDARM64.O_RDONLY() End If
    If idx is equal to 16: Return PowerPC.O_RDONLY() End If
    If idx is equal to 17: Return RISCV32.O_RDONLY() End If
    If idx is equal to 18: Return RISCV64.O_RDONLY() End If
    Return 0
End Process

Process called "O_WRONLY" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.O_WRONLY() End If
    If idx is equal to 2: Return LinuxARM64.O_WRONLY() End If
    If idx is equal to 3: Return LinuxARM32.O_WRONLY() End If
    If idx is equal to 4: Return MIPS32.O_WRONLY() End If
    If idx is equal to 5: Return MIPS64.O_WRONLY() End If
    If idx is equal to 6: Return DarwinX86_64.O_WRONLY() End If
    If idx is equal to 7: Return DarwinARM64.O_WRONLY() End If
    If idx is equal to 8: Return FreeBSDX64.O_WRONLY() End If
    If idx is equal to 9: Return FreeBSDARM64.O_WRONLY() End If
    If idx is equal to 10: Return NetBSDX64.O_WRONLY() End If
    If idx is equal to 11: Return NetBSDARM64.O_WRONLY() End If
    If idx is equal to 12: Return OpenBSDX64.O_WRONLY() End If
    If idx is equal to 13: Return OpenBSDARM64.O_WRONLY() End If
    If idx is equal to 16: Return PowerPC.O_WRONLY() End If
    If idx is equal to 17: Return RISCV32.O_WRONLY() End If
    If idx is equal to 18: Return RISCV64.O_WRONLY() End If
    Return 0
End Process

Process called "O_RDWR" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.O_RDWR() End If
    If idx is equal to 2: Return LinuxARM64.O_RDWR() End If
    If idx is equal to 3: Return LinuxARM32.O_RDWR() End If
    If idx is equal to 4: Return MIPS32.O_RDWR() End If
    If idx is equal to 5: Return MIPS64.O_RDWR() End If
    If idx is equal to 6: Return DarwinX86_64.O_RDWR() End If
    If idx is equal to 7: Return DarwinARM64.O_RDWR() End If
    If idx is equal to 8: Return FreeBSDX64.O_RDWR() End If
    If idx is equal to 9: Return FreeBSDARM64.O_RDWR() End If
    If idx is equal to 10: Return NetBSDX64.O_RDWR() End If
    If idx is equal to 11: Return NetBSDARM64.O_RDWR() End If
    If idx is equal to 12: Return OpenBSDX64.O_RDWR() End If
    If idx is equal to 13: Return OpenBSDARM64.O_RDWR() End If
    If idx is equal to 16: Return PowerPC.O_RDWR() End If
    If idx is equal to 17: Return RISCV32.O_RDWR() End If
    If idx is equal to 18: Return RISCV64.O_RDWR() End If
    Return 0
End Process

Process called "O_CREAT" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.O_CREAT() End If
    If idx is equal to 2: Return LinuxARM64.O_CREAT() End If
    If idx is equal to 3: Return LinuxARM32.O_CREAT() End If
    If idx is equal to 4: Return MIPS32.O_CREAT() End If
    If idx is equal to 5: Return MIPS64.O_CREAT() End If
    If idx is equal to 6: Return DarwinX86_64.O_CREAT() End If
    If idx is equal to 7: Return DarwinARM64.O_CREAT() End If
    If idx is equal to 8: Return FreeBSDX64.O_CREAT() End If
    If idx is equal to 9: Return FreeBSDARM64.O_CREAT() End If
    If idx is equal to 10: Return NetBSDX64.O_CREAT() End If
    If idx is equal to 11: Return NetBSDARM64.O_CREAT() End If
    If idx is equal to 12: Return OpenBSDX64.O_CREAT() End If
    If idx is equal to 13: Return OpenBSDARM64.O_CREAT() End If
    If idx is equal to 16: Return PowerPC.O_CREAT() End If
    If idx is equal to 17: Return RISCV32.O_CREAT() End If
    If idx is equal to 18: Return RISCV64.O_CREAT() End If
    Return 0
End Process

Process called "O_TRUNC" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.O_TRUNC() End If
    If idx is equal to 2: Return LinuxARM64.O_TRUNC() End If
    If idx is equal to 3: Return LinuxARM32.O_TRUNC() End If
    If idx is equal to 4: Return MIPS32.O_TRUNC() End If
    If idx is equal to 5: Return MIPS64.O_TRUNC() End If
    If idx is equal to 6: Return DarwinX86_64.O_TRUNC() End If
    If idx is equal to 7: Return DarwinARM64.O_TRUNC() End If
    If idx is equal to 8: Return FreeBSDX64.O_TRUNC() End If
    If idx is equal to 9: Return FreeBSDARM64.O_TRUNC() End If
    If idx is equal to 10: Return NetBSDX64.O_TRUNC() End If
    If idx is equal to 11: Return NetBSDARM64.O_TRUNC() End If
    If idx is equal to 12: Return OpenBSDX64.O_TRUNC() End If
    If idx is equal to 13: Return OpenBSDARM64.O_TRUNC() End If
    If idx is equal to 16: Return PowerPC.O_TRUNC() End If
    If idx is equal to 17: Return RISCV32.O_TRUNC() End If
    If idx is equal to 18: Return RISCV64.O_TRUNC() End If
    Return 0
End Process

Process called "O_APPEND" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.O_APPEND() End If
    If idx is equal to 2: Return LinuxARM64.O_APPEND() End If
    If idx is equal to 3: Return LinuxARM32.O_APPEND() End If
    If idx is equal to 4: Return MIPS32.O_APPEND() End If
    If idx is equal to 5: Return MIPS64.O_APPEND() End If
    If idx is equal to 6: Return DarwinX86_64.O_APPEND() End If
    If idx is equal to 7: Return DarwinARM64.O_APPEND() End If
    If idx is equal to 8: Return FreeBSDX64.O_APPEND() End If
    If idx is equal to 9: Return FreeBSDARM64.O_APPEND() End If
    If idx is equal to 10: Return NetBSDX64.O_APPEND() End If
    If idx is equal to 11: Return NetBSDARM64.O_APPEND() End If
    If idx is equal to 12: Return OpenBSDX64.O_APPEND() End If
    If idx is equal to 13: Return OpenBSDARM64.O_APPEND() End If
    If idx is equal to 16: Return PowerPC.O_APPEND() End If
    If idx is equal to 17: Return RISCV32.O_APPEND() End If
    If idx is equal to 18: Return RISCV64.O_APPEND() End If
    Return 0
End Process

Process called "MODE_0644" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.MODE_0644() End If
    If idx is equal to 2: Return LinuxARM64.MODE_0644() End If
    If idx is equal to 3: Return LinuxARM32.MODE_0644() End If
    If idx is equal to 4: Return MIPS32.MODE_0644() End If
    If idx is equal to 5: Return MIPS64.MODE_0644() End If
    If idx is equal to 6: Return DarwinX86_64.MODE_0644() End If
    If idx is equal to 7: Return DarwinARM64.MODE_0644() End If
    If idx is equal to 8: Return FreeBSDX64.MODE_0644() End If
    If idx is equal to 9: Return FreeBSDARM64.MODE_0644() End If
    If idx is equal to 10: Return NetBSDX64.MODE_0644() End If
    If idx is equal to 11: Return NetBSDARM64.MODE_0644() End If
    If idx is equal to 12: Return OpenBSDX64.MODE_0644() End If
    If idx is equal to 13: Return OpenBSDARM64.MODE_0644() End If
    If idx is equal to 16: Return PowerPC.MODE_0644() End If
    If idx is equal to 17: Return RISCV32.MODE_0644() End If
    If idx is equal to 18: Return RISCV64.MODE_0644() End If
    Return 420  Note: 0644
End Process

Process called "MODE_0755" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.MODE_0755() End If
    If idx is equal to 2: Return LinuxARM64.MODE_0755() End If
    If idx is equal to 3: Return LinuxARM32.MODE_0755() End If
    If idx is equal to 4: Return MIPS32.MODE_0755() End If
    If idx is equal to 5: Return MIPS64.MODE_0755() End If
    If idx is equal to 6: Return DarwinX86_64.MODE_0755() End If
    If idx is equal to 7: Return DarwinARM64.MODE_0755() End If
    If idx is equal to 8: Return FreeBSDX64.MODE_0755() End If
    If idx is equal to 9: Return FreeBSDARM64.MODE_0755() End If
    If idx is equal to 10: Return NetBSDX64.MODE_0755() End If
    If idx is equal to 11: Return NetBSDARM64.MODE_0755() End If
    If idx is equal to 12: Return OpenBSDX64.MODE_0755() End If
    If idx is equal to 13: Return OpenBSDARM64.MODE_0755() End If
    If idx is equal to 16: Return PowerPC.MODE_0755() End If
    If idx is equal to 17: Return RISCV32.MODE_0755() End If
    If idx is equal to 18: Return RISCV64.MODE_0755() End If
    Return 493  Note: 0755
End Process

Process called "PROT_NONE" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.PROT_NONE() End If
    If idx is equal to 2: Return LinuxARM64.PROT_NONE() End If
    If idx is equal to 3: Return LinuxARM32.PROT_NONE() End If
    If idx is equal to 4: Return MIPS32.PROT_NONE() End If
    If idx is equal to 5: Return MIPS64.PROT_NONE() End If
    If idx is equal to 6: Return DarwinX86_64.PROT_NONE() End If
    If idx is equal to 7: Return DarwinARM64.PROT_NONE() End If
    If idx is equal to 8: Return FreeBSDX64.PROT_NONE() End If
    If idx is equal to 9: Return FreeBSDARM64.PROT_NONE() End If
    If idx is equal to 10: Return NetBSDX64.PROT_NONE() End If
    If idx is equal to 11: Return NetBSDARM64.PROT_NONE() End If
    If idx is equal to 12: Return OpenBSDX64.PROT_NONE() End If
    If idx is equal to 13: Return OpenBSDARM64.PROT_NONE() End If
    If idx is equal to 16: Return PowerPC.PROT_NONE() End If
    If idx is equal to 17: Return RISCV32.PROT_NONE() End If
    If idx is equal to 18: Return RISCV64.PROT_NONE() End If
    Return 0
End Process

Process called "PROT_READ" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.PROT_READ() End If
    If idx is equal to 2: Return LinuxARM64.PROT_READ() End If
    If idx is equal to 3: Return LinuxARM32.PROT_READ() End If
    If idx is equal to 4: Return MIPS32.PROT_READ() End If
    If idx is equal to 5: Return MIPS64.PROT_READ() End If
    If idx is equal to 6: Return DarwinX86_64.PROT_READ() End If
    If idx is equal to 7: Return DarwinARM64.PROT_READ() End If
    If idx is equal to 8: Return FreeBSDX64.PROT_READ() End If
    If idx is equal to 9: Return FreeBSDARM64.PROT_READ() End If
    If idx is equal to 10: Return NetBSDX64.PROT_READ() End If
    If idx is equal to 11: Return NetBSDARM64.PROT_READ() End If
    If idx is equal to 12: Return OpenBSDX64.PROT_READ() End If
    If idx is equal to 13: Return OpenBSDARM64.PROT_READ() End If
    If idx is equal to 16: Return PowerPC.PROT_READ() End If
    If idx is equal to 17: Return RISCV32.PROT_READ() End If
    If idx is equal to 18: Return RISCV64.PROT_READ() End If
    Return 1
End Process

Process called "PROT_WRITE" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.PROT_WRITE() End If
    If idx is equal to 2: Return LinuxARM64.PROT_WRITE() End If
    If idx is equal to 3: Return LinuxARM32.PROT_WRITE() End If
    If idx is equal to 4: Return MIPS32.PROT_WRITE() End If
    If idx is equal to 5: Return MIPS64.PROT_WRITE() End If
    If idx is equal to 6: Return DarwinX86_64.PROT_WRITE() End If
    If idx is equal to 7: Return DarwinARM64.PROT_WRITE() End If
    If idx is equal to 8: Return FreeBSDX64.PROT_WRITE() End If
    If idx is equal to 9: Return FreeBSDARM64.PROT_WRITE() End If
    If idx is equal to 10: Return NetBSDX64.PROT_WRITE() End If
    If idx is equal to 11: Return NetBSDARM64.PROT_WRITE() End If
    If idx is equal to 12: Return OpenBSDX64.PROT_WRITE() End If
    If idx is equal to 13: Return OpenBSDARM64.PROT_WRITE() End If
    If idx is equal to 16: Return PowerPC.PROT_WRITE() End If
    If idx is equal to 17: Return RISCV32.PROT_WRITE() End If
    If idx is equal to 18: Return RISCV64.PROT_WRITE() End If
    Return 2
End Process

Process called "PROT_EXEC" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.PROT_EXEC() End If
    If idx is equal to 2: Return LinuxARM64.PROT_EXEC() End If
    If idx is equal to 3: Return LinuxARM32.PROT_EXEC() End If
    If idx is equal to 4: Return MIPS32.PROT_EXEC() End If
    If idx is equal to 5: Return MIPS64.PROT_EXEC() End If
    If idx is equal to 6: Return DarwinX86_64.PROT_EXEC() End If
    If idx is equal to 7: Return DarwinARM64.PROT_EXEC() End If
    If idx is equal to 8: Return FreeBSDX64.PROT_EXEC() End If
    If idx is equal to 9: Return FreeBSDARM64.PROT_EXEC() End If
    If idx is equal to 10: Return NetBSDX64.PROT_EXEC() End If
    If idx is equal to 11: Return NetBSDARM64.PROT_EXEC() End If
    If idx is equal to 12: Return OpenBSDX64.PROT_EXEC() End If
    If idx is equal to 13: Return OpenBSDARM64.PROT_EXEC() End If
    If idx is equal to 16: Return PowerPC.PROT_EXEC() End If
    If idx is equal to 17: Return RISCV32.PROT_EXEC() End If
    If idx is equal to 18: Return RISCV64.PROT_EXEC() End If
    Return 4
End Process

Process called "MAP_SHARED" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.MAP_SHARED() End If
    If idx is equal to 2: Return LinuxARM64.MAP_SHARED() End If
    If idx is equal to 3: Return LinuxARM32.MAP_SHARED() End If
    If idx is equal to 4: Return MIPS32.MAP_SHARED() End If
    If idx is equal to 5: Return MIPS64.MAP_SHARED() End If
    If idx is equal to 6: Return DarwinX86_64.MAP_SHARED() End If
    If idx is equal to 7: Return DarwinARM64.MAP_SHARED() End If
    If idx is equal to 8: Return FreeBSDX64.MAP_SHARED() End If
    If idx is equal to 9: Return FreeBSDARM64.MAP_SHARED() End If
    If idx is equal to 10: Return NetBSDX64.MAP_SHARED() End If
    If idx is equal to 11: Return NetBSDARM64.MAP_SHARED() End If
    If idx is equal to 12: Return OpenBSDX64.MAP_SHARED() End If
    If idx is equal to 13: Return OpenBSDARM64.MAP_SHARED() End If
    If idx is equal to 16: Return PowerPC.MAP_SHARED() End If
    If idx is equal to 17: Return RISCV32.MAP_SHARED() End If
    If idx is equal to 18: Return RISCV64.MAP_SHARED() End If
    Return 1
End Process

Process called "MAP_PRIVATE" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.MAP_PRIVATE() End If
    If idx is equal to 2: Return LinuxARM64.MAP_PRIVATE() End If
    If idx is equal to 3: Return LinuxARM32.MAP_PRIVATE() End If
    If idx is equal to 4: Return MIPS32.MAP_PRIVATE() End If
    If idx is equal to 5: Return MIPS64.MAP_PRIVATE() End If
    If idx is equal to 6: Return DarwinX86_64.MAP_PRIVATE() End If
    If idx is equal to 7: Return DarwinARM64.MAP_PRIVATE() End If
    If idx is equal to 8: Return FreeBSDX64.MAP_PRIVATE() End If
    If idx is equal to 9: Return FreeBSDARM64.MAP_PRIVATE() End If
    If idx is equal to 10: Return NetBSDX64.MAP_PRIVATE() End If
    If idx is equal to 11: Return NetBSDARM64.MAP_PRIVATE() End If
    If idx is equal to 12: Return OpenBSDX64.MAP_PRIVATE() End If
    If idx is equal to 13: Return OpenBSDARM64.MAP_PRIVATE() End If
    If idx is equal to 16: Return PowerPC.MAP_PRIVATE() End If
    If idx is equal to 17: Return RISCV32.MAP_PRIVATE() End If
    If idx is equal to 18: Return RISCV64.MAP_PRIVATE() End If
    Return 2
End Process

Process called "MAP_FIXED" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.MAP_FIXED() End If
    If idx is equal to 2: Return LinuxARM64.MAP_FIXED() End If
    If idx is equal to 3: Return LinuxARM32.MAP_FIXED() End If
    If idx is equal to 4: Return MIPS32.MAP_FIXED() End If
    If idx is equal to 5: Return MIPS64.MAP_FIXED() End If
    If idx is equal to 6: Return DarwinX86_64.MAP_FIXED() End If
    If idx is equal to 7: Return DarwinARM64.MAP_FIXED() End If
    If idx is equal to 8: Return FreeBSDX64.MAP_FIXED() End If
    If idx is equal to 9: Return FreeBSDARM64.MAP_FIXED() End If
    If idx is equal to 10: Return NetBSDX64.MAP_FIXED() End If
    If idx is equal to 11: Return NetBSDARM64.MAP_FIXED() End If
    If idx is equal to 12: Return OpenBSDX64.MAP_FIXED() End If
    If idx is equal to 13: Return OpenBSDARM64.MAP_FIXED() End If
    If idx is equal to 16: Return PowerPC.MAP_FIXED() End If
    If idx is equal to 17: Return RISCV32.MAP_FIXED() End If
    If idx is equal to 18: Return RISCV64.MAP_FIXED() End If
    Return 16
End Process

Process called "MAP_ANONYMOUS" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.MAP_ANONYMOUS() End If
    If idx is equal to 2: Return LinuxARM64.MAP_ANONYMOUS() End If
    If idx is equal to 3: Return LinuxARM32.MAP_ANONYMOUS() End If
    If idx is equal to 4: Return MIPS32.MAP_ANONYMOUS() End If
    If idx is equal to 5: Return MIPS64.MAP_ANONYMOUS() End If
    If idx is equal to 6: Return DarwinX86_64.MAP_ANONYMOUS() End If
    If idx is equal to 7: Return DarwinARM64.MAP_ANONYMOUS() End If
    If idx is equal to 8: Return FreeBSDX64.MAP_ANONYMOUS() End If
    If idx is equal to 9: Return FreeBSDARM64.MAP_ANONYMOUS() End If
    If idx is equal to 10: Return NetBSDX64.MAP_ANONYMOUS() End If
    If idx is equal to 11: Return NetBSDARM64.MAP_ANONYMOUS() End If
    If idx is equal to 12: Return OpenBSDX64.MAP_ANONYMOUS() End If
    If idx is equal to 13: Return OpenBSDARM64.MAP_ANONYMOUS() End If
    If idx is equal to 16: Return PowerPC.MAP_ANONYMOUS() End If
    If idx is equal to 17: Return RISCV32.MAP_ANONYMOUS() End If
    If idx is equal to 18: Return RISCV64.MAP_ANONYMOUS() End If
    Return 32
End Process

Process called "SEEK_SET" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SEEK_SET() End If
    If idx is equal to 2: Return LinuxARM64.SEEK_SET() End If
    If idx is equal to 3: Return LinuxARM32.SEEK_SET() End If
    If idx is equal to 4: Return MIPS32.SEEK_SET() End If
    If idx is equal to 5: Return MIPS64.SEEK_SET() End If
    If idx is equal to 6: Return DarwinX86_64.SEEK_SET() End If
    If idx is equal to 7: Return DarwinARM64.SEEK_SET() End If
    If idx is equal to 8: Return FreeBSDX64.SEEK_SET() End If
    If idx is equal to 9: Return FreeBSDARM64.SEEK_SET() End If
    If idx is equal to 10: Return NetBSDX64.SEEK_SET() End If
    If idx is equal to 11: Return NetBSDARM64.SEEK_SET() End If
    If idx is equal to 12: Return OpenBSDX64.SEEK_SET() End If
    If idx is equal to 13: Return OpenBSDARM64.SEEK_SET() End If
    If idx is equal to 16: Return PowerPC.SEEK_SET() End If
    If idx is equal to 17: Return RISCV32.SEEK_SET() End If
    If idx is equal to 18: Return RISCV64.SEEK_SET() End If
    Return 0
End Process

Process called "SEEK_CUR" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SEEK_CUR() End If
    If idx is equal to 2: Return LinuxARM64.SEEK_CUR() End If
    If idx is equal to 3: Return LinuxARM32.SEEK_CUR() End If
    If idx is equal to 4: Return MIPS32.SEEK_CUR() End If
    If idx is equal to 5: Return MIPS64.SEEK_CUR() End If
    If idx is equal to 6: Return DarwinX86_64.SEEK_CUR() End If
    If idx is equal to 7: Return DarwinARM64.SEEK_CUR() End If
    If idx is equal to 8: Return FreeBSDX64.SEEK_CUR() End If
    If idx is equal to 9: Return FreeBSDARM64.SEEK_CUR() End If
    If idx is equal to 10: Return NetBSDX64.SEEK_CUR() End If
    If idx is equal to 11: Return NetBSDARM64.SEEK_CUR() End If
    If idx is equal to 12: Return OpenBSDX64.SEEK_CUR() End If
    If idx is equal to 13: Return OpenBSDARM64.SEEK_CUR() End If
    If idx is equal to 16: Return PowerPC.SEEK_CUR() End If
    If idx is equal to 17: Return RISCV32.SEEK_CUR() End If
    If idx is equal to 18: Return RISCV64.SEEK_CUR() End If
    Return 1
End Process

Process called "SEEK_END" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.SEEK_END() End If
    If idx is equal to 2: Return LinuxARM64.SEEK_END() End If
    If idx is equal to 3: Return LinuxARM32.SEEK_END() End If
    If idx is equal to 4: Return MIPS32.SEEK_END() End If
    If idx is equal to 5: Return MIPS64.SEEK_END() End If
    If idx is equal to 6: Return DarwinX86_64.SEEK_END() End If
    If idx is equal to 7: Return DarwinARM64.SEEK_END() End If
    If idx is equal to 8: Return FreeBSDX64.SEEK_END() End If
    If idx is equal to 9: Return FreeBSDARM64.SEEK_END() End If
    If idx is equal to 10: Return NetBSDX64.SEEK_END() End If
    If idx is equal to 11: Return NetBSDARM64.SEEK_END() End If
    If idx is equal to 12: Return OpenBSDX64.SEEK_END() End If
    If idx is equal to 13: Return OpenBSDARM64.SEEK_END() End If
    If idx is equal to 16: Return PowerPC.SEEK_END() End If
    If idx is equal to 17: Return RISCV32.SEEK_END() End If
    If idx is equal to 18: Return RISCV64.SEEK_END() End If
    Return 2
End Process

Process called "STDIN_FILENO" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.STDIN_FILENO() End If
    If idx is equal to 2: Return LinuxARM64.STDIN_FILENO() End If
    If idx is equal to 3: Return LinuxARM32.STDIN_FILENO() End If
    If idx is equal to 4: Return MIPS32.STDIN_FILENO() End If
    If idx is equal to 5: Return MIPS64.STDIN_FILENO() End If
    If idx is equal to 6: Return DarwinX86_64.STDIN_FILENO() End If
    If idx is equal to 7: Return DarwinARM64.STDIN_FILENO() End If
    If idx is equal to 8: Return FreeBSDX64.STDIN_FILENO() End If
    If idx is equal to 9: Return FreeBSDARM64.STDIN_FILENO() End If
    If idx is equal to 10: Return NetBSDX64.STDIN_FILENO() End If
    If idx is equal to 11: Return NetBSDARM64.STDIN_FILENO() End If
    If idx is equal to 12: Return OpenBSDX64.STDIN_FILENO() End If
    If idx is equal to 13: Return OpenBSDARM64.STDIN_FILENO() End If
    If idx is equal to 16: Return PowerPC.STDIN_FILENO() End If
    If idx is equal to 17: Return RISCV32.STDIN_FILENO() End If
    If idx is equal to 18: Return RISCV64.STDIN_FILENO() End If
    Return 0
End Process

Process called "STDOUT_FILENO" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.STDOUT_FILENO() End If
    If idx is equal to 2: Return LinuxARM64.STDOUT_FILENO() End If
    If idx is equal to 3: Return LinuxARM32.STDOUT_FILENO() End If
    If idx is equal to 4: Return MIPS32.STDOUT_FILENO() End If
    If idx is equal to 5: Return MIPS64.STDOUT_FILENO() End If
    If idx is equal to 6: Return DarwinX86_64.STDOUT_FILENO() End If
    If idx is equal to 7: Return DarwinARM64.STDOUT_FILENO() End If
    If idx is equal to 8: Return FreeBSDX64.STDOUT_FILENO() End If
    If idx is equal to 9: Return FreeBSDARM64.STDOUT_FILENO() End If
    If idx is equal to 10: Return NetBSDX64.STDOUT_FILENO() End If
    If idx is equal to 11: Return NetBSDARM64.STDOUT_FILENO() End If
    If idx is equal to 12: Return OpenBSDX64.STDOUT_FILENO() End If
    If idx is equal to 13: Return OpenBSDARM64.STDOUT_FILENO() End If
    If idx is equal to 16: Return PowerPC.STDOUT_FILENO() End If
    If idx is equal to 17: Return RISCV32.STDOUT_FILENO() End If
    If idx is equal to 18: Return RISCV64.STDOUT_FILENO() End If
    Return 1
End Process

Process called "STDERR_FILENO" returns Integer:
    Let idx be _ensure_backend_selected()
    If idx is equal to 1: Return LinuxX86_64.STDERR_FILENO() End If
    If idx is equal to 2: Return LinuxARM64.STDERR_FILENO() End If
    If idx is equal to 3: Return LinuxARM32.STDERR_FILENO() End If
    If idx is equal to 4: Return MIPS32.STDERR_FILENO() End If
    If idx is equal to 5: Return MIPS64.STDERR_FILENO() End If
    If idx is equal to 6: Return DarwinX86_64.STDERR_FILENO() End If
    If idx is equal to 7: Return DarwinARM64.STDERR_FILENO() End If
    If idx is equal to 8: Return FreeBSDX64.STDERR_FILENO() End If
    If idx is equal to 9: Return FreeBSDARM64.STDERR_FILENO() End If
    If idx is equal to 10: Return NetBSDX64.STDERR_FILENO() End If
    If idx is equal to 11: Return NetBSDARM64.STDERR_FILENO() End If
    If idx is equal to 12: Return OpenBSDX64.STDERR_FILENO() End If
    If idx is equal to 13: Return OpenBSDARM64.STDERR_FILENO() End If
    If idx is equal to 16: Return PowerPC.STDERR_FILENO() End If
    If idx is equal to 17: Return RISCV32.STDERR_FILENO() End If
    If idx is equal to 18: Return RISCV64.STDERR_FILENO() End If
    Return 2
End Process
