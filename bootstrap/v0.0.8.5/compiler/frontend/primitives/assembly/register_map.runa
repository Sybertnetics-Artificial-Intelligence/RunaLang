Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file provides CPU register definitions and mappings for x86_64 architecture.

For code generation, we need to know:
- Which registers are used for function parameters (System V ABI)
- Register names for inline assembly generation
- Special purpose registers (stack pointer, frame pointer, return value)

This is a foundation primitive with NO dependencies.
:End Note

Note: ============================================================================
Note: System V ABI x86_64 Calling Convention
Note: ============================================================================
Note: Function parameters are passed in registers in this order:
Note:   1st parameter: RDI
Note:   2nd parameter: RSI
Note:   3rd parameter: RDX
Note:   4th parameter: RCX
Note:   5th parameter: R8
Note:   6th parameter: R9
Note:   7th+ parameters: Stack (right-to-left)

Note: Return value: RAX
Note: Frame pointer: RBP
Note: Stack pointer: RSP

Process called "get_param_register" takes param_index as Integer returns String:
    Note: Get parameter register name for System V ABI
    Note: param_index: 0-5 for first 6 parameters
    Note: Returns register name with % prefix (e.g., "%rdi")

    If param_index is equal to 0:
        Return "%rdi"
    End If

    If param_index is equal to 1:
        Return "%rsi"
    End If

    If param_index is equal to 2:
        Return "%rdx"
    End If

    If param_index is equal to 3:
        Return "%rcx"
    End If

    If param_index is equal to 4:
        Return "%r8"
    End If

    If param_index is equal to 5:
        Return "%r9"
    End If

    Note: Parameters 6+ go on the stack
    Return ""
End Process

Process called "get_max_register_params" returns Integer:
    Note: Maximum number of parameters passed in registers
    Note: System V ABI x86_64: 6 parameters
    Return 6
End Process

Process called "get_return_register" returns String:
    Note: Return value register for System V ABI x86_64
    Return "%rax"
End Process

Process called "get_frame_pointer_register" returns String:
    Note: Frame pointer register for x86_64
    Return "%rbp"
End Process

Process called "get_stack_pointer_register" returns String:
    Note: Stack pointer register for x86_64
    Return "%rsp"
End Process

Note: ============================================================================
Note: Register Name Lookups
Note: ============================================================================

Process called "get_register_name" takes register_number as Integer returns String:
    Note: Convert register number to name
    Note: Uses x86_64 register encoding

    If register_number is equal to 0:
        Return "%rax"
    End If

    If register_number is equal to 1:
        Return "%rcx"
    End If

    If register_number is equal to 2:
        Return "%rdx"
    End If

    If register_number is equal to 3:
        Return "%rbx"
    End If

    If register_number is equal to 4:
        Return "%rsp"
    End If

    If register_number is equal to 5:
        Return "%rbp"
    End If

    If register_number is equal to 6:
        Return "%rsi"
    End If

    If register_number is equal to 7:
        Return "%rdi"
    End If

    If register_number is equal to 8:
        Return "%r8"
    End If

    If register_number is equal to 9:
        Return "%r9"
    End If

    If register_number is equal to 10:
        Return "%r10"
    End If

    If register_number is equal to 11:
        Return "%r11"
    End If

    If register_number is equal to 12:
        Return "%r12"
    End If

    If register_number is equal to 13:
        Return "%r13"
    End If

    If register_number is equal to 14:
        Return "%r14"
    End If

    If register_number is equal to 15:
        Return "%r15"
    End If

    Return "%rax"  Note: Default to RAX for invalid numbers
End Process

Process called "get_register_number" takes register_name as String returns Integer:
    Note: Convert register name to number
    Note: Returns -1 for invalid register names

    If string_equals(register_name, "rax") is equal to 1:
        Return 0
    End If

    If string_equals(register_name, "rcx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rdx") is equal to 1:
        Return 2
    End If

    If string_equals(register_name, "rbx") is equal to 1:
        Return 3
    End If

    If string_equals(register_name, "rsp") is equal to 1:
        Return 4
    End If

    If string_equals(register_name, "rbp") is equal to 1:
        Return 5
    End If

    If string_equals(register_name, "rsi") is equal to 1:
        Return 6
    End If

    If string_equals(register_name, "rdi") is equal to 1:
        Return 7
    End If

    If string_equals(register_name, "r8") is equal to 1:
        Return 8
    End If

    If string_equals(register_name, "r9") is equal to 1:
        Return 9
    End If

    If string_equals(register_name, "r10") is equal to 1:
        Return 10
    End If

    If string_equals(register_name, "r11") is equal to 1:
        Return 11
    End If

    If string_equals(register_name, "r12") is equal to 1:
        Return 12
    End If

    If string_equals(register_name, "r13") is equal to 1:
        Return 13
    End If

    If string_equals(register_name, "r14") is equal to 1:
        Return 14
    End If

    If string_equals(register_name, "r15") is equal to 1:
        Return 15
    End If

    Return -1  Note: Invalid register
End Process

Note: ============================================================================
Note: Register Classification
Note: ============================================================================

Process called "is_caller_saved" takes register_name as String returns Integer:
    Note: Check if register is caller-saved (volatile)
    Note: Caller-saved registers: RAX, RCX, RDX, RSI, RDI, R8-R11
    Note: Returns 1 if caller-saved, 0 if callee-saved

    If string_equals(register_name, "rax") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rcx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rdx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rsi") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rdi") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r8") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r9") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r10") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r11") is equal to 1:
        Return 1
    End If

    Return 0  Note: Callee-saved or invalid
End Process

Process called "is_callee_saved" takes register_name as String returns Integer:
    Note: Check if register is callee-saved (non-volatile)
    Note: Callee-saved registers: RBX, RBP, R12-R15
    Note: Returns 1 if callee-saved, 0 if caller-saved

    If string_equals(register_name, "rbx") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "rbp") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r12") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r13") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r14") is equal to 1:
        Return 1
    End If

    If string_equals(register_name, "r15") is equal to 1:
        Return 1
    End If

    Return 0  Note: Caller-saved or invalid
End Process
