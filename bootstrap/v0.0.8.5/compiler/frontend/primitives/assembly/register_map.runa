Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: CPU Register Definitions

This file provides a platform-agnostic interface for CPU register operations.
It imports the platform-specific register implementation based on the compile target.

Architecture:
- This file defines the common API that all Runa code uses
- Platform-specific implementations are in platform/{platform}/registers.runa
- The compiler sets the target platform at compile time
- Imports delegate to the correct platform-specific implementation

Supported platforms:
- x86_64: RAX, RBX, RCX, RDX, RSI, RDI, R8-R15, RBP, RSP
- ARM64: X0-X30, SP, LR, PC
- MIPS: $0-$31
- RISC-V: x0-x31
- And more...

Usage:
All code should call functions from this file (e.g., get_param_register, get_return_register).
The platform-specific implementation is automatically selected at compile time.
:End Note

Note: =========================================================================
Note: PLATFORM SELECTION AND BACKEND BINDING
Note: =========================================================================
Note: The compiler driver passes (os, arch). We use platform_selector to choose
Note: the backend. We import supported register backends and dispatch based on
Note: a small integer index set by select_register_backend(os, arch).

Import "compiler/frontend/primitives/platform/platform_selector.runa" as Selector

Import "compiler/frontend/primitives/platform/linux_x86_64/registers.runa" as LinuxX86_64
Import "compiler/frontend/primitives/platform/linux_arm64/registers.runa" as LinuxARM64
Import "compiler/frontend/primitives/platform/linux_arm32/registers.runa" as LinuxARM32
Import "compiler/frontend/primitives/platform/mips32/registers.runa" as MIPS32
Import "compiler/frontend/primitives/platform/mips64/registers.runa" as MIPS64
Import "compiler/frontend/primitives/platform/darwin_x86_64/registers.runa" as DarwinX86_64
Import "compiler/frontend/primitives/platform/darwin_arm64/registers.runa" as DarwinARM64
Import "compiler/frontend/primitives/platform/freebsd_x64/registers.runa" as FreeBSDX64
Import "compiler/frontend/primitives/platform/freebsd_arm64/registers.runa" as FreeBSDARM64
Import "compiler/frontend/primitives/platform/netbsd_x64/registers.runa" as NetBSDX64
Import "compiler/frontend/primitives/platform/netbsd_arm64/registers.runa" as NetBSDARM64
Import "compiler/frontend/primitives/platform/openbsd_x64/registers.runa" as OpenBSDX64
Import "compiler/frontend/primitives/platform/openbsd_arm64/registers.runa" as OpenBSDARM64
Import "compiler/frontend/primitives/platform/windows_x86_64/registers.runa" as WindowsX86_64
Import "compiler/frontend/primitives/platform/windows_arm64/registers.runa" as WindowsARM64
Import "compiler/frontend/primitives/platform/powerpc/registers.runa" as PowerPC
Import "compiler/frontend/primitives/platform/riscv32/registers.runa" as RISCV32
Import "compiler/frontend/primitives/platform/riscv64/registers.runa" as RISCV64

Note: Backend index mapping
Note: 0=unset, 1=linux_x86_64, 2=linux_arm64, 3=linux_arm32, 4=mips32, 5=mips64,
Note: 6=darwin_x86_64, 7=darwin_arm64, 8=freebsd_x64, 9=freebsd_arm64,
Note: 10=netbsd_x64, 11=netbsd_arm64, 12=openbsd_x64, 13=openbsd_arm64,
Note: 14=windows_x86_64, 15=windows_arm64, 16=powerpc, 17=riscv32, 18=riscv64

Process called "_get_backend_index_for_key" takes key as String returns Integer:
    If key is equal to "linux_x86_64": Return 1 End If
    If key is equal to "linux_arm64": Return 2 End If
    If key is equal to "linux_arm32": Return 3 End If
    If key is equal to "mips32": Return 4 End If
    If key is equal to "mips64": Return 5 End If
    If key is equal to "darwin_x86_64": Return 6 End If
    If key is equal to "darwin_arm64": Return 7 End If
    If key is equal to "freebsd_x64": Return 8 End If
    If key is equal to "freebsd_arm64": Return 9 End If
    If key is equal to "netbsd_x64": Return 10 End If
    If key is equal to "netbsd_arm64": Return 11 End If
    If key is equal to "openbsd_x64": Return 12 End If
    If key is equal to "openbsd_arm64": Return 13 End If
    If key is equal to "windows_x86_64": Return 14 End If
    If key is equal to "windows_arm64": Return 15 End If
    If key is equal to "powerpc": Return 16 End If
    If key is equal to "riscv32": Return 17 End If
    If key is equal to "riscv64": Return 18 End If
    Return 0
End Process

Let _current_backend_index be 0

Process called "select_register_backend" takes os_name as String, arch_name as String returns Integer:
    Let key be proc get_platform_key from Selector with os_name, arch_name
    Let idx be proc _get_backend_index_for_key with key
    If idx is equal to 0:
        Return 0
    End If
    Set _current_backend_index to idx
    Return 1
End Process

Process called "_ensure_backend_selected" returns Integer:
    If _current_backend_index is equal to 0:
        Set _current_backend_index to 1  Note: default linux_x86_64
    End If
    Return _current_backend_index
End Process

Note: ============================================================================
Note: CALLING CONVENTION (Platform-Agnostic Interface)
Note: ============================================================================

Process called "get_param_register" takes param_index as Integer returns String:
    Note: Get parameter register name for platform calling convention
    Note: param_index: 0-based parameter index
    Note: Returns register name with platform-specific prefix
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get param register from LinuxX86_64 with param_index End If
    If idx is equal to 2: Return proc get param register from LinuxARM64 with param_index End If
    If idx is equal to 3: Return proc get param register from LinuxARM32 with param_index End If
    If idx is equal to 4: Return proc get param register from MIPS32 with param_index End If
    If idx is equal to 5: Return proc get param register from MIPS64 with param_index End If
    If idx is equal to 6: Return proc get param register from DarwinX86_64 with param_index End If
    If idx is equal to 7: Return proc get param register from DarwinARM64 with param_index End If
    If idx is equal to 8: Return proc get param register from FreeBSDX64 with param_index End If
    If idx is equal to 9: Return proc get param register from FreeBSDARM64 with param_index End If
    If idx is equal to 10: Return proc get param register from NetBSDX64 with param_index End If
    If idx is equal to 11: Return proc get param register from NetBSDARM64 with param_index End If
    If idx is equal to 12: Return proc get param register from OpenBSDX64 with param_index End If
    If idx is equal to 13: Return proc get param register from OpenBSDARM64 with param_index End If
    If idx is equal to 14: Return proc get param register from WindowsX86_64 with param_index End If
    If idx is equal to 15: Return proc get param register from WindowsARM64 with param_index End If
    If idx is equal to 16: Return proc get param register from PowerPC with param_index End If
    If idx is equal to 17: Return proc get param register from RISCV32 with param_index End If
    If idx is equal to 18: Return proc get param register from RISCV64 with param_index End If
    Return "rax"
End Process

Process called "get_max_register_params" returns Integer:
    Note: Maximum number of parameters passed in registers
    Note: Platform-specific (x86_64: 6, ARM64: 8, etc.)
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get_max_register_params from LinuxX86_64 End If
    If idx is equal to 2: Return proc get_max_register_params from LinuxARM64 End If
    If idx is equal to 3: Return proc get_max_register_params from LinuxARM32 End If
    If idx is equal to 4: Return proc get_max_register_params from MIPS32 End If
    If idx is equal to 5: Return proc get_max_register_params from MIPS64 End If
    If idx is equal to 6: Return proc get_max_register_params from DarwinX86_64 End If
    If idx is equal to 7: Return proc get_max_register_params from DarwinARM64 End If
    If idx is equal to 8: Return proc get_max_register_params from FreeBSDX64 End If
    If idx is equal to 9: Return proc get_max_register_params from FreeBSDARM64 End If
    If idx is equal to 10: Return proc get_max_register_params from NetBSDX64 End If
    If idx is equal to 11: Return proc get_max_register_params from NetBSDARM64 End If
    If idx is equal to 12: Return proc get_max_register_params from OpenBSDX64 End If
    If idx is equal to 13: Return proc get_max_register_params from OpenBSDARM64 End If
    If idx is equal to 14: Return proc get_max_register_params from WindowsX86_64 End If
    If idx is equal to 15: Return proc get_max_register_params from WindowsARM64 End If
    If idx is equal to 16: Return proc get_max_register_params from PowerPC End If
    If idx is equal to 17: Return proc get_max_register_params from RISCV32 End If
    If idx is equal to 18: Return proc get_max_register_params from RISCV64 End If
    Return 6
End Process

Process called "get_return_register" returns String:
    Note: Return value register for platform calling convention
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get_return_register from LinuxX86_64 End If
    If idx is equal to 2: Return proc get_return_register from LinuxARM64 End If
    If idx is equal to 3: Return proc get_return_register from LinuxARM32 End If
    If idx is equal to 4: Return proc get_return_register from MIPS32 End If
    If idx is equal to 5: Return proc get_return_register from MIPS64 End If
    If idx is equal to 6: Return proc get_return_register from DarwinX86_64 End If
    If idx is equal to 7: Return proc get_return_register from DarwinARM64 End If
    If idx is equal to 8: Return proc get_return_register from FreeBSDX64 End If
    If idx is equal to 9: Return proc get_return_register from FreeBSDARM64 End If
    If idx is equal to 10: Return proc get_return_register from NetBSDX64 End If
    If idx is equal to 11: Return proc get_return_register from NetBSDARM64 End If
    If idx is equal to 12: Return proc get_return_register from OpenBSDX64 End If
    If idx is equal to 13: Return proc get_return_register from OpenBSDARM64 End If
    If idx is equal to 14: Return proc get_return_register from WindowsX86_64 End If
    If idx is equal to 15: Return proc get_return_register from WindowsARM64 End If
    If idx is equal to 16: Return proc get_return_register from PowerPC End If
    If idx is equal to 17: Return proc get_return_register from RISCV32 End If
    If idx is equal to 18: Return proc get_return_register from RISCV64 End If
    Return "rax"
End Process

Process called "get_frame_pointer_register" returns String:
    Note: Frame pointer register for platform
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get_frame_pointer_register from LinuxX86_64 End If
    If idx is equal to 2: Return proc get_frame_pointer_register from LinuxARM64 End If
    If idx is equal to 3: Return proc get_frame_pointer_register from LinuxARM32 End If
    If idx is equal to 4: Return proc get_frame_pointer_register from MIPS32 End If
    If idx is equal to 5: Return proc get_frame_pointer_register from MIPS64 End If
    If idx is equal to 6: Return proc get_frame_pointer_register from DarwinX86_64 End If
    If idx is equal to 7: Return proc get_frame_pointer_register from DarwinARM64 End If
    If idx is equal to 8: Return proc get_frame_pointer_register from FreeBSDX64 End If
    If idx is equal to 9: Return proc get_frame_pointer_register from FreeBSDARM64 End If
    If idx is equal to 10: Return proc get_frame_pointer_register from NetBSDX64 End If
    If idx is equal to 11: Return proc get_frame_pointer_register from NetBSDARM64 End If
    If idx is equal to 12: Return proc get_frame_pointer_register from OpenBSDX64 End If
    If idx is equal to 13: Return proc get_frame_pointer_register from OpenBSDARM64 End If
    If idx is equal to 14: Return proc get_frame_pointer_register from WindowsX86_64 End If
    If idx is equal to 15: Return proc get_frame_pointer_register from WindowsARM64 End If
    If idx is equal to 16: Return proc get_frame_pointer_register from PowerPC End If
    If idx is equal to 17: Return proc get_frame_pointer_register from RISCV32 End If
    If idx is equal to 18: Return proc get_frame_pointer_register from RISCV64 End If
    Return "rbp"
End Process

Process called "get_stack_pointer_register" returns String:
    Note: Stack pointer register for platform
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get_stack_pointer_register from LinuxX86_64 End If
    If idx is equal to 2: Return proc get_stack_pointer_register from LinuxARM64 End If
    If idx is equal to 3: Return proc get_stack_pointer_register from LinuxARM32 End If
    If idx is equal to 4: Return proc get_stack_pointer_register from MIPS32 End If
    If idx is equal to 5: Return proc get_stack_pointer_register from MIPS64 End If
    If idx is equal to 6: Return proc get_stack_pointer_register from DarwinX86_64 End If
    If idx is equal to 7: Return proc get_stack_pointer_register from DarwinARM64 End If
    If idx is equal to 8: Return proc get_stack_pointer_register from FreeBSDX64 End If
    If idx is equal to 9: Return proc get_stack_pointer_register from FreeBSDARM64 End If
    If idx is equal to 10: Return proc get_stack_pointer_register from NetBSDX64 End If
    If idx is equal to 11: Return proc get_stack_pointer_register from NetBSDARM64 End If
    If idx is equal to 12: Return proc get_stack_pointer_register from OpenBSDX64 End If
    If idx is equal to 13: Return proc get_stack_pointer_register from OpenBSDARM64 End If
    If idx is equal to 14: Return proc get_stack_pointer_register from WindowsX86_64 End If
    If idx is equal to 15: Return proc get_stack_pointer_register from WindowsARM64 End If
    If idx is equal to 16: Return proc get_stack_pointer_register from PowerPC End If
    If idx is equal to 17: Return proc get_stack_pointer_register from RISCV32 End If
    If idx is equal to 18: Return proc get_stack_pointer_register from RISCV64 End If
    Return "rsp"
End Process

Note: ============================================================================
Note: REGISTER NAME LOOKUPS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "get_register_name" takes register_number as Integer returns String:
    Note: Convert register number to name
    Note: Uses platform-specific register encoding
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get register name from LinuxX86_64 with register_number End If
    If idx is equal to 2: Return proc get register name from LinuxARM64 with register_number End If
    If idx is equal to 3: Return proc get register name from LinuxARM32 with register_number End If
    If idx is equal to 4: Return proc get register name from MIPS32 with register_number End If
    If idx is equal to 5: Return proc get register name from MIPS64 with register_number End If
    If idx is equal to 6: Return proc get register name from DarwinX86_64 with register_number End If
    If idx is equal to 7: Return proc get register name from DarwinARM64 with register_number End If
    If idx is equal to 8: Return proc get register name from FreeBSDX64 with register_number End If
    If idx is equal to 9: Return proc get register name from FreeBSDARM64 with register_number End If
    If idx is equal to 10: Return proc get register name from NetBSDX64 with register_number End If
    If idx is equal to 11: Return proc get register name from NetBSDARM64 with register_number End If
    If idx is equal to 12: Return proc get register name from OpenBSDX64 with register_number End If
    If idx is equal to 13: Return proc get register name from OpenBSDARM64 with register_number End If
    If idx is equal to 14: Return proc get register name from WindowsX86_64 with register_number End If
    If idx is equal to 15: Return proc get register name from WindowsARM64 with register_number End If
    If idx is equal to 16: Return proc get register name from PowerPC with register_number End If
    If idx is equal to 17: Return proc get register name from RISCV32 with register_number End If
    If idx is equal to 18: Return proc get register name from RISCV64 with register_number End If
    Return "rax"
End Process

Process called "get_register_number" takes register_name as String returns Integer:
    Note: Convert register name to number
    Note: Returns -1 for invalid register names
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return proc get register number from LinuxX86_64 with register_name End If
    If idx is equal to 2: Return proc get register number from LinuxARM64 with register_name End If
    If idx is equal to 3: Return proc get register number from LinuxARM32 with register_name End If
    If idx is equal to 4: Return proc get register number from MIPS32 with register_name End If
    If idx is equal to 5: Return proc get register number from MIPS64 with register_name End If
    If idx is equal to 6: Return proc get register number from DarwinX86_64 with register_name End If
    If idx is equal to 7: Return proc get register number from DarwinARM64 with register_name End If
    If idx is equal to 8: Return proc get register number from FreeBSDX64 with register_name End If
    If idx is equal to 9: Return proc get register number from FreeBSDARM64 with register_name End If
    If idx is equal to 10: Return proc get register number from NetBSDX64 with register_name End If
    If idx is equal to 11: Return proc get register number from NetBSDARM64 with register_name End If
    If idx is equal to 12: Return proc get register number from OpenBSDX64 with register_name End If
    If idx is equal to 13: Return proc get register number from OpenBSDARM64 with register_name End If
    If idx is equal to 14: Return proc get register number from WindowsX86_64 with register_name End If
    If idx is equal to 15: Return proc get register number from WindowsARM64 with register_name End If
    If idx is equal to 16: Return proc get register number from PowerPC with register_name End If
    If idx is equal to 17: Return proc get register number from RISCV32 with register_name End If
    If idx is equal to 18: Return proc get register number from RISCV64 with register_name End If
    Return -1
End Process

Note: ============================================================================
Note: REGISTER CLASSIFICATION (Platform-Agnostic Interface)
Note: ============================================================================

Process called "is_caller_saved" takes register_name as String returns Integer:
    Note: Check if register is caller-saved (volatile)
    Note: Platform-specific definition
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return is caller saved from LinuxX86_64 with register_name End If
    If idx is equal to 2: Return is caller saved from LinuxARM64 with register_name End If
    If idx is equal to 3: Return is caller saved from LinuxARM32 with register_name End If
    If idx is equal to 4: Return is caller saved from MIPS32 with register_name End If
    If idx is equal to 5: Return is caller saved from MIPS64 with register_name End If
    If idx is equal to 6: Return is caller saved from DarwinX86_64 with register_name End If
    If idx is equal to 7: Return is caller saved from DarwinARM64 with register_name End If
    If idx is equal to 8: Return is caller saved from FreeBSDX64 with register_name End If
    If idx is equal to 9: Return is caller saved from FreeBSDARM64 with register_name End If
    If idx is equal to 10: Return is caller saved from NetBSDX64 with register_name End If
    If idx is equal to 11: Return is caller saved from NetBSDARM64 with register_name End If
    If idx is equal to 12: Return is caller saved from OpenBSDX64 with register_name End If
    If idx is equal to 13: Return is caller saved from OpenBSDARM64 with register_name End If
    If idx is equal to 14: Return is caller saved from WindowsX86_64 with register_name End If
    If idx is equal to 15: Return is caller saved from WindowsARM64 with register_name End If
    If idx is equal to 16: Return is caller saved from PowerPC with register_name End If
    If idx is equal to 17: Return is caller saved from RISCV32 with register_name End If
    If idx is equal to 18: Return is caller saved from RISCV64 with register_name End If
    Return 1
End Process

Process called "is_callee_saved" takes register_name as String returns Integer:
    Note: Check if register is callee-saved (non-volatile)
    Note: Platform-specific definition
    Let idx be proc _ensure_backend_selected
    If idx is equal to 1: Return is callee saved from LinuxX86_64 with register_name End If
    If idx is equal to 2: Return is callee saved from LinuxARM64 with register_name End If
    If idx is equal to 3: Return is callee saved from LinuxARM32 with register_name End If
    If idx is equal to 4: Return is callee saved from MIPS32 with register_name End If
    If idx is equal to 5: Return is callee saved from MIPS64 with register_name End If
    If idx is equal to 6: Return is callee saved from DarwinX86_64 with register_name End If
    If idx is equal to 7: Return is callee saved from DarwinARM64 with register_name End If
    If idx is equal to 8: Return is callee saved from FreeBSDX64 with register_name End If
    If idx is equal to 9: Return is callee saved from FreeBSDARM64 with register_name End If
    If idx is equal to 10: Return is callee saved from NetBSDX64 with register_name End If
    If idx is equal to 11: Return is callee saved from NetBSDARM64 with register_name End If
    If idx is equal to 12: Return is callee saved from OpenBSDX64 with register_name End If
    If idx is equal to 13: Return is callee saved from OpenBSDARM64 with register_name End If
    If idx is equal to 14: Return is callee saved from WindowsX86_64 with register_name End If
    If idx is equal to 15: Return is callee saved from WindowsARM64 with register_name End If
    If idx is equal to 16: Return is callee saved from PowerPC with register_name End If
    If idx is equal to 17: Return is callee saved from RISCV32 with register_name End If
    If idx is equal to 18: Return is callee saved from RISCV64 with register_name End If
    Return 0
End Process
