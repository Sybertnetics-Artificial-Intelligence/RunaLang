Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: CPU Register Definitions

This file provides a platform-agnostic interface for CPU register operations.
It imports the platform-specific register implementation based on the compile target.

Architecture:
- This file defines the common API that all Runa code uses
- Platform-specific implementations are in platform/{platform}/registers.runa
- The compiler sets the target platform at compile time
- Imports delegate to the correct platform-specific implementation

Supported platforms:
- x86_64: RAX, RBX, RCX, RDX, RSI, RDI, R8-R15, RBP, RSP
- ARM64: X0-X30, SP, LR, PC
- MIPS: $0-$31
- RISC-V: x0-x31
- And more...

Usage:
All code should call functions from this file (e.g., get_param_register, get_return_register).
The platform-specific implementation is automatically selected at compile time.
:End Note

Note: ============================================================================
Note: PLATFORM DETECTION AND IMPORT
Note: ============================================================================
Note: TODO: Compiler should set PLATFORM_TARGET at compile time
Note: For now, defaulting to linux_x86_64 (the only complete implementation)

Import "compiler/frontend/primitives/platform/linux_x86_64/registers.runa" as PlatformRegisters

Note: ============================================================================
Note: CALLING CONVENTION (Platform-Agnostic Interface)
Note: ============================================================================

Process called "get_param_register" takes param_index as Integer returns String:
    Note: Get parameter register name for platform calling convention
    Note: param_index: 0-based parameter index
    Note: Returns register name with platform-specific prefix
    Return PlatformRegisters.get_param_register(param_index)
End Process

Process called "get_max_register_params" returns Integer:
    Note: Maximum number of parameters passed in registers
    Note: Platform-specific (x86_64: 6, ARM64: 8, etc.)
    Return PlatformRegisters.get_max_register_params()
End Process

Process called "get_return_register" returns String:
    Note: Return value register for platform calling convention
    Return PlatformRegisters.get_return_register()
End Process

Process called "get_frame_pointer_register" returns String:
    Note: Frame pointer register for platform
    Return PlatformRegisters.get_frame_pointer_register()
End Process

Process called "get_stack_pointer_register" returns String:
    Note: Stack pointer register for platform
    Return PlatformRegisters.get_stack_pointer_register()
End Process

Note: ============================================================================
Note: REGISTER NAME LOOKUPS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "get_register_name" takes register_number as Integer returns String:
    Note: Convert register number to name
    Note: Uses platform-specific register encoding
    Return PlatformRegisters.get_register_name(register_number)
End Process

Process called "get_register_number" takes register_name as String returns Integer:
    Note: Convert register name to number
    Note: Returns -1 for invalid register names
    Return PlatformRegisters.get_register_number(register_name)
End Process

Note: ============================================================================
Note: REGISTER CLASSIFICATION (Platform-Agnostic Interface)
Note: ============================================================================

Process called "is_caller_saved" takes register_name as String returns Integer:
    Note: Check if register is caller-saved (volatile)
    Note: Platform-specific definition
    Return PlatformRegisters.is_caller_saved(register_name)
End Process

Process called "is_callee_saved" takes register_name as String returns Integer:
    Note: Check if register is callee-saved (non-volatile)
    Note: Platform-specific definition
    Return PlatformRegisters.is_callee_saved(register_name)
End Process
