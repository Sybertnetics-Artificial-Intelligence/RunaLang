Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
PLATFORM ABSTRACTION LAYER: Machine Code Generation

This file provides a platform-agnostic interface for machine code generation.
It imports all platform-specific machine code implementations and dispatches
to the correct one based on the target platform selected at compile time.

Architecture:
- This file defines the common API that all Runa code uses
- Platform-specific implementations are in platform/{platform}/machine_code.runa
- The compiler driver passes (os, arch) to select the target platform
- Imports delegate to the correct platform-specific implementation

Machine code encoding is 100% platform-specific:
- x86_64: Variable-length instructions with ModR/M, SIB, REX prefixes
- ARM64: Fixed 32-bit instructions
- MIPS: Fixed 32-bit MIPS instruction format
- RISC-V: Variable-length compressed/uncompressed instructions
- Each platform has completely different encoding schemes

Example x86_64:
  MOV RAX, RBX → 48 89 D8 (3 bytes: REX.W + opcode + ModR/M)

Example ARM64:
  MOV X0, X1 → AA0103E0 (4 bytes: fixed format)

Usage:
All code should call functions from this file (e.g., encode_instruction, encode_mov).
The platform-specific implementation is automatically selected based on the
platform selected by the compiler driver.
:End Note

Note: ============================================================================
Note: PLATFORM IMPORTS
Note: ============================================================================

Import "compiler/frontend/primitives/assembly/register_map.runa" as RegisterMap
Import "compiler/frontend/primitives/platform/linux_x86_64/machine_code.runa" as LinuxX86_64
Import "compiler/frontend/primitives/platform/linux_arm64/machine_code.runa" as LinuxARM64
Import "compiler/frontend/primitives/platform/linux_arm32/machine_code.runa" as LinuxARM32
Import "compiler/frontend/primitives/platform/mips32/machine_code.runa" as MIPS32
Import "compiler/frontend/primitives/platform/mips64/machine_code.runa" as MIPS64
Import "compiler/frontend/primitives/platform/darwin_x86_64/machine_code.runa" as DarwinX86_64
Import "compiler/frontend/primitives/platform/darwin_arm64/machine_code.runa" as DarwinARM64
Import "compiler/frontend/primitives/platform/freebsd_x64/machine_code.runa" as FreeBSDX64
Import "compiler/frontend/primitives/platform/freebsd_arm64/machine_code.runa" as FreeBSDARM64
Import "compiler/frontend/primitives/platform/netbsd_x64/machine_code.runa" as NetBSDX64
Import "compiler/frontend/primitives/platform/netbsd_arm64/machine_code.runa" as NetBSDARM64
Import "compiler/frontend/primitives/platform/openbsd_x64/machine_code.runa" as OpenBSDX64
Import "compiler/frontend/primitives/platform/openbsd_arm64/machine_code.runa" as OpenBSDARM64
Import "compiler/frontend/primitives/platform/windows_x86_64/machine_code.runa" as WindowsX86_64
Import "compiler/frontend/primitives/platform/windows_arm64/machine_code.runa" as WindowsARM64
Import "compiler/frontend/primitives/platform/powerpc/machine_code.runa" as PowerPC
Import "compiler/frontend/primitives/platform/riscv32/machine_code.runa" as RISCV32
Import "compiler/frontend/primitives/platform/riscv64/machine_code.runa" as RISCV64

Note: ============================================================================
Note: GENERIC INSTRUCTION ENCODING (Platform-Agnostic Interface)
Note: ============================================================================

Process called "encode_instruction" takes instruction_ptr as Integer returns Integer:
    Note: Encode instruction to machine code bytes
    Note: Returns pointer to encoded bytes, or 0 on error
    Note: Delegates to platform-specific encoder
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_instruction from LinuxX86_64 with instruction_ptr End If
    If idx is equal to 2: Return proc encode_instruction from LinuxARM64 with instruction_ptr End If
    If idx is equal to 3: Return proc encode_instruction from LinuxARM32 with instruction_ptr End If
    If idx is equal to 4: Return proc encode_instruction from MIPS32 with instruction_ptr End If
    If idx is equal to 5: Return proc encode_instruction from MIPS64 with instruction_ptr End If
    If idx is equal to 6: Return proc encode_instruction from DarwinX86_64 with instruction_ptr End If
    If idx is equal to 7: Return proc encode_instruction from DarwinARM64 with instruction_ptr End If
    If idx is equal to 8: Return proc encode_instruction from FreeBSDX64 with instruction_ptr End If
    If idx is equal to 9: Return proc encode_instruction from FreeBSDARM64 with instruction_ptr End If
    If idx is equal to 10: Return proc encode_instruction from NetBSDX64 with instruction_ptr End If
    If idx is equal to 11: Return proc encode_instruction from NetBSDARM64 with instruction_ptr End If
    If idx is equal to 12: Return proc encode_instruction from OpenBSDX64 with instruction_ptr End If
    If idx is equal to 13: Return proc encode_instruction from OpenBSDARM64 with instruction_ptr End If
    If idx is equal to 14: Return proc encode_instruction from WindowsX86_64 with instruction_ptr End If
    If idx is equal to 15: Return proc encode_instruction from WindowsARM64 with instruction_ptr End If
    If idx is equal to 16: Return proc encode_instruction from PowerPC with instruction_ptr End If
    If idx is equal to 17: Return proc encode_instruction from RISCV32 with instruction_ptr End If
    If idx is equal to 18: Return proc encode_instruction from RISCV64 with instruction_ptr End If
    Return 0
End Process

Process called "get_instruction_length" takes instruction_ptr as Integer returns Integer:
    Note: Get encoded length in bytes for instruction
    Note: Platform-specific (x86_64: variable, ARM64: fixed 4 bytes)
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc get_instruction_length from LinuxX86_64 with instruction_ptr End If
    If idx is equal to 2: Return proc get_instruction_length from LinuxARM64 with instruction_ptr End If
    If idx is equal to 3: Return proc get_instruction_length from LinuxARM32 with instruction_ptr End If
    If idx is equal to 4: Return proc get_instruction_length from MIPS32 with instruction_ptr End If
    If idx is equal to 5: Return proc get_instruction_length from MIPS64 with instruction_ptr End If
    If idx is equal to 6: Return proc get_instruction_length from DarwinX86_64 with instruction_ptr End If
    If idx is equal to 7: Return proc get_instruction_length from DarwinARM64 with instruction_ptr End If
    If idx is equal to 8: Return proc get_instruction_length from FreeBSDX64 with instruction_ptr End If
    If idx is equal to 9: Return proc get_instruction_length from FreeBSDARM64 with instruction_ptr End If
    If idx is equal to 10: Return proc get_instruction_length from NetBSDX64 with instruction_ptr End If
    If idx is equal to 11: Return proc get_instruction_length from NetBSDARM64 with instruction_ptr End If
    If idx is equal to 12: Return proc get_instruction_length from OpenBSDX64 with instruction_ptr End If
    If idx is equal to 13: Return proc get_instruction_length from OpenBSDARM64 with instruction_ptr End If
    If idx is equal to 14: Return proc get_instruction_length from WindowsX86_64 with instruction_ptr End If
    If idx is equal to 15: Return proc get_instruction_length from WindowsARM64 with instruction_ptr End If
    If idx is equal to 16: Return proc get_instruction_length from PowerPC with instruction_ptr End If
    If idx is equal to 17: Return proc get_instruction_length from RISCV32 with instruction_ptr End If
    If idx is equal to 18: Return proc get_instruction_length from RISCV64 with instruction_ptr End If
    Return 0
End Process

Note: ============================================================================
Note: COMMON INSTRUCTION ENCODERS (Platform-Agnostic Interface)
Note: ============================================================================

Process called "encode_mov" takes dest_reg as Integer, src_reg as Integer returns Integer:
    Note: Encode MOV/ORR instruction (register to register)
    Note: x86_64: MOV dest, src
    Note: ARM64: ORR Xd, XZR, Xm (MOV is alias)
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_mov from LinuxX86_64 with dest_reg, src_reg End If
    If idx is equal to 2: Return proc encode_mov from LinuxARM64 with dest_reg, src_reg End If
    If idx is equal to 3: Return proc encode_mov from LinuxARM32 with dest_reg, src_reg End If
    If idx is equal to 4: Return proc encode_mov from MIPS32 with dest_reg, src_reg End If
    If idx is equal to 5: Return proc encode_mov from MIPS64 with dest_reg, src_reg End If
    If idx is equal to 6: Return proc encode_mov from DarwinX86_64 with dest_reg, src_reg End If
    If idx is equal to 7: Return proc encode_mov from DarwinARM64 with dest_reg, src_reg End If
    If idx is equal to 8: Return proc encode_mov from FreeBSDX64 with dest_reg, src_reg End If
    If idx is equal to 9: Return proc encode_mov from FreeBSDARM64 with dest_reg, src_reg End If
    If idx is equal to 10: Return proc encode_mov from NetBSDX64 with dest_reg, src_reg End If
    If idx is equal to 11: Return proc encode_mov from NetBSDARM64 with dest_reg, src_reg End If
    If idx is equal to 12: Return proc encode_mov from OpenBSDX64 with dest_reg, src_reg End If
    If idx is equal to 13: Return proc encode_mov from OpenBSDARM64 with dest_reg, src_reg End If
    If idx is equal to 14: Return proc encode_mov from WindowsX86_64 with dest_reg, src_reg End If
    If idx is equal to 15: Return proc encode_mov from WindowsARM64 with dest_reg, src_reg End If
    If idx is equal to 16: Return proc encode_mov from PowerPC with dest_reg, src_reg End If
    If idx is equal to 17: Return proc encode_mov from RISCV32 with dest_reg, src_reg End If
    If idx is equal to 18: Return proc encode_mov from RISCV64 with dest_reg, src_reg End If
    Return 0
End Process

Process called "encode_add" takes dest_reg as Integer, src_reg as Integer, value as Integer returns Integer:
    Note: Encode ADD instruction
    Note: Delegates to platform-specific implementation
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_add from LinuxX86_64 with dest_reg, src_reg, value End If
    If idx is equal to 2: Return proc encode_add from LinuxARM64 with dest_reg, src_reg, value End If
    If idx is equal to 3: Return proc encode_add from LinuxARM32 with dest_reg, src_reg, value End If
    If idx is equal to 4: Return proc encode_add from MIPS32 with dest_reg, src_reg, value End If
    If idx is equal to 5: Return proc encode_add from MIPS64 with dest_reg, src_reg, value End If
    If idx is equal to 6: Return proc encode_add from DarwinX86_64 with dest_reg, src_reg, value End If
    If idx is equal to 7: Return proc encode_add from DarwinARM64 with dest_reg, src_reg, value End If
    If idx is equal to 8: Return proc encode_add from FreeBSDX64 with dest_reg, src_reg, value End If
    If idx is equal to 9: Return proc encode_add from FreeBSDARM64 with dest_reg, src_reg, value End If
    If idx is equal to 10: Return proc encode_add from NetBSDX64 with dest_reg, src_reg, value End If
    If idx is equal to 11: Return proc encode_add from NetBSDARM64 with dest_reg, src_reg, value End If
    If idx is equal to 12: Return proc encode_add from OpenBSDX64 with dest_reg, src_reg, value End If
    If idx is equal to 13: Return proc encode_add from OpenBSDARM64 with dest_reg, src_reg, value End If
    If idx is equal to 14: Return proc encode_add from WindowsX86_64 with dest_reg, src_reg, value End If
    If idx is equal to 15: Return proc encode_add from WindowsARM64 with dest_reg, src_reg, value End If
    If idx is equal to 16: Return proc encode_add from PowerPC with dest_reg, src_reg, value End If
    If idx is equal to 17: Return proc encode_add from RISCV32 with dest_reg, src_reg, value End If
    If idx is equal to 18: Return proc encode_add from RISCV64 with dest_reg, src_reg, value End If
    Return 0
End Process

Process called "encode_sub" takes dest_reg as Integer, src_reg as Integer, value as Integer returns Integer:
    Note: Encode SUB instruction
    Note: Delegates to platform-specific implementation
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_sub from LinuxX86_64 with dest_reg, src_reg, value End If
    If idx is equal to 2: Return proc encode_sub from LinuxARM64 with dest_reg, src_reg, value End If
    If idx is equal to 3: Return proc encode_sub from LinuxARM32 with dest_reg, src_reg, value End If
    If idx is equal to 4: Return proc encode_sub from MIPS32 with dest_reg, src_reg, value End If
    If idx is equal to 5: Return proc encode_sub from MIPS64 with dest_reg, src_reg, value End If
    If idx is equal to 6: Return proc encode_sub from DarwinX86_64 with dest_reg, src_reg, value End If
    If idx is equal to 7: Return proc encode_sub from DarwinARM64 with dest_reg, src_reg, value End If
    If idx is equal to 8: Return proc encode_sub from FreeBSDX64 with dest_reg, src_reg, value End If
    If idx is equal to 9: Return proc encode_sub from FreeBSDARM64 with dest_reg, src_reg, value End If
    If idx is equal to 10: Return proc encode_sub from NetBSDX64 with dest_reg, src_reg, value End If
    If idx is equal to 11: Return proc encode_sub from NetBSDARM64 with dest_reg, src_reg, value End If
    If idx is equal to 12: Return proc encode_sub from OpenBSDX64 with dest_reg, src_reg, value End If
    If idx is equal to 13: Return proc encode_sub from OpenBSDARM64 with dest_reg, src_reg, value End If
    If idx is equal to 14: Return proc encode_sub from WindowsX86_64 with dest_reg, src_reg, value End If
    If idx is equal to 15: Return proc encode_sub from WindowsARM64 with dest_reg, src_reg, value End If
    If idx is equal to 16: Return proc encode_sub from PowerPC with dest_reg, src_reg, value End If
    If idx is equal to 17: Return proc encode_sub from RISCV32 with dest_reg, src_reg, value End If
    If idx is equal to 18: Return proc encode_sub from RISCV64 with dest_reg, src_reg, value End If
    Return 0
End Process

Process called "encode_load" takes dest_reg as Integer, memory_addr as Integer returns Integer:
    Note: Encode LOAD/MOV from memory instruction
    Note: x86_64: MOV dest, [addr]
    Note: ARM64: LDR Xd, [addr]
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_load from LinuxX86_64 with dest_reg, memory_addr End If
    If idx is equal to 2: Return proc encode_load from LinuxARM64 with dest_reg, memory_addr End If
    If idx is equal to 3: Return proc encode_load from LinuxARM32 with dest_reg, memory_addr End If
    If idx is equal to 4: Return proc encode_load from MIPS32 with dest_reg, memory_addr End If
    If idx is equal to 5: Return proc encode_load from MIPS64 with dest_reg, memory_addr End If
    If idx is equal to 6: Return proc encode_load from DarwinX86_64 with dest_reg, memory_addr End If
    If idx is equal to 7: Return proc encode_load from DarwinARM64 with dest_reg, memory_addr End If
    If idx is equal to 8: Return proc encode_load from FreeBSDX64 with dest_reg, memory_addr End If
    If idx is equal to 9: Return proc encode_load from FreeBSDARM64 with dest_reg, memory_addr End If
    If idx is equal to 10: Return proc encode_load from NetBSDX64 with dest_reg, memory_addr End If
    If idx is equal to 11: Return proc encode_load from NetBSDARM64 with dest_reg, memory_addr End If
    If idx is equal to 12: Return proc encode_load from OpenBSDX64 with dest_reg, memory_addr End If
    If idx is equal to 13: Return proc encode_load from OpenBSDARM64 with dest_reg, memory_addr End If
    If idx is equal to 14: Return proc encode_load from WindowsX86_64 with dest_reg, memory_addr End If
    If idx is equal to 15: Return proc encode_load from WindowsARM64 with dest_reg, memory_addr End If
    If idx is equal to 16: Return proc encode_load from PowerPC with dest_reg, memory_addr End If
    If idx is equal to 17: Return proc encode_load from RISCV32 with dest_reg, memory_addr End If
    If idx is equal to 18: Return proc encode_load from RISCV64 with dest_reg, memory_addr End If
    Return 0
End Process

Process called "encode_store" takes src_reg as Integer, memory_addr as Integer returns Integer:
    Note: Encode STORE/MOV to memory instruction
    Note: x86_64: MOV [addr], src
    Note: ARM64: STR Xs, [addr]
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_store from LinuxX86_64 with src_reg, memory_addr End If
    If idx is equal to 2: Return proc encode_store from LinuxARM64 with src_reg, memory_addr End If
    If idx is equal to 3: Return proc encode_store from LinuxARM32 with src_reg, memory_addr End If
    If idx is equal to 4: Return proc encode_store from MIPS32 with src_reg, memory_addr End If
    If idx is equal to 5: Return proc encode_store from MIPS64 with src_reg, memory_addr End If
    If idx is equal to 6: Return proc encode_store from DarwinX86_64 with src_reg, memory_addr End If
    If idx is equal to 7: Return proc encode_store from DarwinARM64 with src_reg, memory_addr End If
    If idx is equal to 8: Return proc encode_store from FreeBSDX64 with src_reg, memory_addr End If
    If idx is equal to 9: Return proc encode_store from FreeBSDARM64 with src_reg, memory_addr End If
    If idx is equal to 10: Return proc encode_store from NetBSDX64 with src_reg, memory_addr End If
    If idx is equal to 11: Return proc encode_store from NetBSDARM64 with src_reg, memory_addr End If
    If idx is equal to 12: Return proc encode_store from OpenBSDX64 with src_reg, memory_addr End If
    If idx is equal to 13: Return proc encode_store from OpenBSDARM64 with src_reg, memory_addr End If
    If idx is equal to 14: Return proc encode_store from WindowsX86_64 with src_reg, memory_addr End If
    If idx is equal to 15: Return proc encode_store from WindowsARM64 with src_reg, memory_addr End If
    If idx is equal to 16: Return proc encode_store from PowerPC with src_reg, memory_addr End If
    If idx is equal to 17: Return proc encode_store from RISCV32 with src_reg, memory_addr End If
    If idx is equal to 18: Return proc encode_store from RISCV64 with src_reg, memory_addr End If
    Return 0
End Process

Process called "encode_jump" takes target_addr as Integer returns Integer:
    Note: Encode unconditional jump instruction
    Note: x86_64: JMP target
    Note: ARM64: B target
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_jump from LinuxX86_64 with target_addr End If
    If idx is equal to 2: Return proc encode_jump from LinuxARM64 with target_addr End If
    If idx is equal to 3: Return proc encode_jump from LinuxARM32 with target_addr End If
    If idx is equal to 4: Return proc encode_jump from MIPS32 with target_addr End If
    If idx is equal to 5: Return proc encode_jump from MIPS64 with target_addr End If
    If idx is equal to 6: Return proc encode_jump from DarwinX86_64 with target_addr End If
    If idx is equal to 7: Return proc encode_jump from DarwinARM64 with target_addr End If
    If idx is equal to 8: Return proc encode_jump from FreeBSDX64 with target_addr End If
    If idx is equal to 9: Return proc encode_jump from FreeBSDARM64 with target_addr End If
    If idx is equal to 10: Return proc encode_jump from NetBSDX64 with target_addr End If
    If idx is equal to 11: Return proc encode_jump from NetBSDARM64 with target_addr End If
    If idx is equal to 12: Return proc encode_jump from OpenBSDX64 with target_addr End If
    If idx is equal to 13: Return proc encode_jump from OpenBSDARM64 with target_addr End If
    If idx is equal to 14: Return proc encode_jump from WindowsX86_64 with target_addr End If
    If idx is equal to 15: Return proc encode_jump from WindowsARM64 with target_addr End If
    If idx is equal to 16: Return proc encode_jump from PowerPC with target_addr End If
    If idx is equal to 17: Return proc encode_jump from RISCV32 with target_addr End If
    If idx is equal to 18: Return proc encode_jump from RISCV64 with target_addr End If
    Return 0
End Process

Process called "encode_call" takes target_addr as Integer returns Integer:
    Note: Encode function call instruction
    Note: x86_64: CALL target
    Note: ARM64: BL target
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_call from LinuxX86_64 with target_addr End If
    If idx is equal to 2: Return proc encode_call from LinuxARM64 with target_addr End If
    If idx is equal to 3: Return proc encode_call from LinuxARM32 with target_addr End If
    If idx is equal to 4: Return proc encode_call from MIPS32 with target_addr End If
    If idx is equal to 5: Return proc encode_call from MIPS64 with target_addr End If
    If idx is equal to 6: Return proc encode_call from DarwinX86_64 with target_addr End If
    If idx is equal to 7: Return proc encode_call from DarwinARM64 with target_addr End If
    If idx is equal to 8: Return proc encode_call from FreeBSDX64 with target_addr End If
    If idx is equal to 9: Return proc encode_call from FreeBSDARM64 with target_addr End If
    If idx is equal to 10: Return proc encode_call from NetBSDX64 with target_addr End If
    If idx is equal to 11: Return proc encode_call from NetBSDARM64 with target_addr End If
    If idx is equal to 12: Return proc encode_call from OpenBSDX64 with target_addr End If
    If idx is equal to 13: Return proc encode_call from OpenBSDARM64 with target_addr End If
    If idx is equal to 14: Return proc encode_call from WindowsX86_64 with target_addr End If
    If idx is equal to 15: Return proc encode_call from WindowsARM64 with target_addr End If
    If idx is equal to 16: Return proc encode_call from PowerPC with target_addr End If
    If idx is equal to 17: Return proc encode_call from RISCV32 with target_addr End If
    If idx is equal to 18: Return proc encode_call from RISCV64 with target_addr End If
    Return 0
End Process

Process called "encode_return" returns Integer:
    Note: Encode function return instruction
    Note: x86_64: RET
    Note: ARM64: RET
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc encode_return from LinuxX86_64 End If
    If idx is equal to 2: Return proc encode_return from LinuxARM64 End If
    If idx is equal to 3: Return proc encode_return from LinuxARM32 End If
    If idx is equal to 4: Return proc encode_return from MIPS32 End If
    If idx is equal to 5: Return proc encode_return from MIPS64 End If
    If idx is equal to 6: Return proc encode_return from DarwinX86_64 End If
    If idx is equal to 7: Return proc encode_return from DarwinARM64 End If
    If idx is equal to 8: Return proc encode_return from FreeBSDX64 End If
    If idx is equal to 9: Return proc encode_return from FreeBSDARM64 End If
    If idx is equal to 10: Return proc encode_return from NetBSDX64 End If
    If idx is equal to 11: Return proc encode_return from NetBSDARM64 End If
    If idx is equal to 12: Return proc encode_return from OpenBSDX64 End If
    If idx is equal to 13: Return proc encode_return from OpenBSDARM64 End If
    If idx is equal to 14: Return proc encode_return from WindowsX86_64 End If
    If idx is equal to 15: Return proc encode_return from WindowsARM64 End If
    If idx is equal to 16: Return proc encode_return from PowerPC End If
    If idx is equal to 17: Return proc encode_return from RISCV32 End If
    If idx is equal to 18: Return proc encode_return from RISCV64 End If
    Return 0
End Process

Note: ============================================================================
Note: INSTRUCTION OPTIMIZATION (Platform-Agnostic Interface)
Note: ============================================================================

Process called "optimize_instruction_sequence" takes instructions_ptr as Integer, count as Integer returns Integer:
    Note: Optimize sequence of instructions for target platform
    Note: Platform-specific optimizations (e.g., peephole optimization)
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc optimize_instruction_sequence from LinuxX86_64 with instructions_ptr, count End If
    If idx is equal to 2: Return proc optimize_instruction_sequence from LinuxARM64 with instructions_ptr, count End If
    If idx is equal to 3: Return proc optimize_instruction_sequence from LinuxARM32 with instructions_ptr, count End If
    If idx is equal to 4: Return proc optimize_instruction_sequence from MIPS32 with instructions_ptr, count End If
    If idx is equal to 5: Return proc optimize_instruction_sequence from MIPS64 with instructions_ptr, count End If
    If idx is equal to 6: Return proc optimize_instruction_sequence from DarwinX86_64 with instructions_ptr, count End If
    If idx is equal to 7: Return proc optimize_instruction_sequence from DarwinARM64 with instructions_ptr, count End If
    If idx is equal to 8: Return proc optimize_instruction_sequence from FreeBSDX64 with instructions_ptr, count End If
    If idx is equal to 9: Return proc optimize_instruction_sequence from FreeBSDARM64 with instructions_ptr, count End If
    If idx is equal to 10: Return proc optimize_instruction_sequence from NetBSDX64 with instructions_ptr, count End If
    If idx is equal to 11: Return proc optimize_instruction_sequence from NetBSDARM64 with instructions_ptr, count End If
    If idx is equal to 12: Return proc optimize_instruction_sequence from OpenBSDX64 with instructions_ptr, count End If
    If idx is equal to 13: Return proc optimize_instruction_sequence from OpenBSDARM64 with instructions_ptr, count End If
    If idx is equal to 14: Return proc optimize_instruction_sequence from WindowsX86_64 with instructions_ptr, count End If
    If idx is equal to 15: Return proc optimize_instruction_sequence from WindowsARM64 with instructions_ptr, count End If
    If idx is equal to 16: Return proc optimize_instruction_sequence from PowerPC with instructions_ptr, count End If
    If idx is equal to 17: Return proc optimize_instruction_sequence from RISCV32 with instructions_ptr, count End If
    If idx is equal to 18: Return proc optimize_instruction_sequence from RISCV64 with instructions_ptr, count End If
    Return 0
End Process

Process called "get_nop_instruction" returns Integer:
    Note: Get NOP (no-operation) instruction for padding
    Note: x86_64: 0x90 (NOP)
    Note: ARM64: 0xD503201F (NOP)
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc get_nop_instruction from LinuxX86_64 End If
    If idx is equal to 2: Return proc get_nop_instruction from LinuxARM64 End If
    If idx is equal to 3: Return proc get_nop_instruction from LinuxARM32 End If
    If idx is equal to 4: Return proc get_nop_instruction from MIPS32 End If
    If idx is equal to 5: Return proc get_nop_instruction from MIPS64 End If
    If idx is equal to 6: Return proc get_nop_instruction from DarwinX86_64 End If
    If idx is equal to 7: Return proc get_nop_instruction from DarwinARM64 End If
    If idx is equal to 8: Return proc get_nop_instruction from FreeBSDX64 End If
    If idx is equal to 9: Return proc get_nop_instruction from FreeBSDARM64 End If
    If idx is equal to 10: Return proc get_nop_instruction from NetBSDX64 End If
    If idx is equal to 11: Return proc get_nop_instruction from NetBSDARM64 End If
    If idx is equal to 12: Return proc get_nop_instruction from OpenBSDX64 End If
    If idx is equal to 13: Return proc get_nop_instruction from OpenBSDARM64 End If
    If idx is equal to 14: Return proc get_nop_instruction from WindowsX86_64 End If
    If idx is equal to 15: Return proc get_nop_instruction from WindowsARM64 End If
    If idx is equal to 16: Return proc get_nop_instruction from PowerPC End If
    If idx is equal to 17: Return proc get_nop_instruction from RISCV32 End If
    If idx is equal to 18: Return proc get_nop_instruction from RISCV64 End If
    Return 0
End Process
