Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions
Licensed under the Apache License, Version 2.0
:End Note

Note:
PLATFORM ABSTRACTION LAYER: Threading Operations
Delegates all threading operations to platform-specific implementations.
:End Note

Import "compiler/frontend/primitives/platform/linux_x86_64/threading.runa" as LinuxX86_64
Import "compiler/frontend/primitives/platform/linux_arm64/threading.runa" as LinuxARM64
Import "compiler/frontend/primitives/platform/linux_arm32/threading.runa" as LinuxARM32
Import "compiler/frontend/primitives/platform/mips32/threading.runa" as MIPS32
Import "compiler/frontend/primitives/platform/mips64/threading.runa" as MIPS64
Import "compiler/frontend/primitives/platform/darwin_x86_64/threading.runa" as DarwinX86_64
Import "compiler/frontend/primitives/platform/darwin_arm64/threading.runa" as DarwinARM64
Import "compiler/frontend/primitives/platform/freebsd_x64/threading.runa" as FreeBSDX64
Import "compiler/frontend/primitives/platform/freebsd_arm64/threading.runa" as FreeBSDARM64
Import "compiler/frontend/primitives/platform/netbsd_x64/threading.runa" as NetBSDX64
Import "compiler/frontend/primitives/platform/netbsd_arm64/threading.runa" as NetBSDARM64
Import "compiler/frontend/primitives/platform/openbsd_x64/threading.runa" as OpenBSDX64
Import "compiler/frontend/primitives/platform/openbsd_arm64/threading.runa" as OpenBSDARM64
Import "compiler/frontend/primitives/platform/windows_x86_64/threading.runa" as WindowsX86_64
Import "compiler/frontend/primitives/platform/windows_arm64/threading.runa" as WindowsARM64
Import "compiler/frontend/primitives/platform/powerpc/threading.runa" as PowerPC
Import "compiler/frontend/primitives/platform/riscv32/threading.runa" as RISCV32
Import "compiler/frontend/primitives/platform/riscv64/threading.runa" as RISCV64
Import "compiler/frontend/primitives/assembly/register_map.runa" as RegisterMap


Process called "platform_thread_create" takes function_ptr as Integer,arg_ptr as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc thread_create from LinuxX86_64 with function_ptr,arg_ptr End If
    If idx is equal to 2: Return proc thread_create from LinuxARM64 with function_ptr,arg_ptr End If
    If idx is equal to 3: Return proc thread_create from LinuxARM32 with function_ptr,arg_ptr End If
    If idx is equal to 4: Return proc thread_create from MIPS32 with function_ptr,arg_ptr End If
    If idx is equal to 5: Return proc thread_create from MIPS64 with function_ptr,arg_ptr End If
    If idx is equal to 6: Return proc thread_create from DarwinX86_64 with function_ptr,arg_ptr End If
    If idx is equal to 7: Return proc thread_create from DarwinARM64 with function_ptr,arg_ptr End If
    If idx is equal to 8: Return proc thread_create from FreeBSDX64 with function_ptr,arg_ptr End If
    If idx is equal to 9: Return proc thread_create from FreeBSDARM64 with function_ptr,arg_ptr End If
    If idx is equal to 10: Return proc thread_create from NetBSDX64 with function_ptr,arg_ptr End If
    If idx is equal to 11: Return proc thread_create from NetBSDARM64 with function_ptr,arg_ptr End If
    If idx is equal to 12: Return proc thread_create from OpenBSDX64 with function_ptr,arg_ptr End If
    If idx is equal to 13: Return proc thread_create from OpenBSDARM64 with function_ptr,arg_ptr End If
    If idx is equal to 14: Return proc thread_create from WindowsX86_64 with function_ptr,arg_ptr End If
    If idx is equal to 15: Return proc thread_create from WindowsARM64 with function_ptr,arg_ptr End If
    If idx is equal to 16: Return proc thread_create from PowerPC with function_ptr,arg_ptr End If
    If idx is equal to 17: Return proc thread_create from RISCV32 with function_ptr,arg_ptr End If
    If idx is equal to 18: Return proc thread_create from RISCV64 with function_ptr,arg_ptr End If
    Return 0
End Process

Process called "platform_thread_join" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc thread_join from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc thread_join from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc thread_join from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc thread_join from MIPS32 with handle End If
    If idx is equal to 5: Return proc thread_join from MIPS64 with handle End If
    If idx is equal to 6: Return proc thread_join from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc thread_join from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc thread_join from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc thread_join from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc thread_join from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc thread_join from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc thread_join from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc thread_join from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc thread_join from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc thread_join from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc thread_join from PowerPC with handle End If
    If idx is equal to 17: Return proc thread_join from RISCV32 with handle End If
    If idx is equal to 18: Return proc thread_join from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_thread_detach" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc thread_detach from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc thread_detach from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc thread_detach from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc thread_detach from MIPS32 with handle End If
    If idx is equal to 5: Return proc thread_detach from MIPS64 with handle End If
    If idx is equal to 6: Return proc thread_detach from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc thread_detach from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc thread_detach from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc thread_detach from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc thread_detach from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc thread_detach from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc thread_detach from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc thread_detach from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc thread_detach from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc thread_detach from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc thread_detach from PowerPC with handle End If
    If idx is equal to 17: Return proc thread_detach from RISCV32 with handle End If
    If idx is equal to 18: Return proc thread_detach from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_thread_exit" takes exit_code as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc thread_exit from LinuxX86_64 with exit_code End If
    If idx is equal to 2: Return proc thread_exit from LinuxARM64 with exit_code End If
    If idx is equal to 3: Return proc thread_exit from LinuxARM32 with exit_code End If
    If idx is equal to 4: Return proc thread_exit from MIPS32 with exit_code End If
    If idx is equal to 5: Return proc thread_exit from MIPS64 with exit_code End If
    If idx is equal to 6: Return proc thread_exit from DarwinX86_64 with exit_code End If
    If idx is equal to 7: Return proc thread_exit from DarwinARM64 with exit_code End If
    If idx is equal to 8: Return proc thread_exit from FreeBSDX64 with exit_code End If
    If idx is equal to 9: Return proc thread_exit from FreeBSDARM64 with exit_code End If
    If idx is equal to 10: Return proc thread_exit from NetBSDX64 with exit_code End If
    If idx is equal to 11: Return proc thread_exit from NetBSDARM64 with exit_code End If
    If idx is equal to 12: Return proc thread_exit from OpenBSDX64 with exit_code End If
    If idx is equal to 13: Return proc thread_exit from OpenBSDARM64 with exit_code End If
    If idx is equal to 14: Return proc thread_exit from WindowsX86_64 with exit_code End If
    If idx is equal to 15: Return proc thread_exit from WindowsARM64 with exit_code End If
    If idx is equal to 16: Return proc thread_exit from PowerPC with exit_code End If
    If idx is equal to 17: Return proc thread_exit from RISCV32 with exit_code End If
    If idx is equal to 18: Return proc thread_exit from RISCV64 with exit_code End If
    Return 0
End Process

Process called "platform_thread_current_id" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return thread_current_id from LinuxX86_64 End If
    If idx is equal to 2: Return thread_current_id from LinuxARM64 End If
    If idx is equal to 3: Return thread_current_id from LinuxARM32 End If
    If idx is equal to 4: Return thread_current_id from MIPS32 End If
    If idx is equal to 5: Return thread_current_id from MIPS64 End If
    If idx is equal to 6: Return thread_current_id from DarwinX86_64 End If
    If idx is equal to 7: Return thread_current_id from DarwinARM64 End If
    If idx is equal to 8: Return thread_current_id from FreeBSDX64 End If
    If idx is equal to 9: Return thread_current_id from FreeBSDARM64 End If
    If idx is equal to 10: Return thread_current_id from NetBSDX64 End If
    If idx is equal to 11: Return thread_current_id from NetBSDARM64 End If
    If idx is equal to 12: Return thread_current_id from OpenBSDX64 End If
    If idx is equal to 13: Return thread_current_id from OpenBSDARM64 End If
    If idx is equal to 14: Return thread_current_id from WindowsX86_64 End If
    If idx is equal to 15: Return thread_current_id from WindowsARM64 End If
    If idx is equal to 16: Return thread_current_id from PowerPC End If
    If idx is equal to 17: Return thread_current_id from RISCV32 End If
    If idx is equal to 18: Return thread_current_id from RISCV64 End If
    Return 0
End Process

Process called "platform_thread_yield" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return thread_yield from LinuxX86_64 End If
    If idx is equal to 2: Return thread_yield from LinuxARM64 End If
    If idx is equal to 3: Return thread_yield from LinuxARM32 End If
    If idx is equal to 4: Return thread_yield from MIPS32 End If
    If idx is equal to 5: Return thread_yield from MIPS64 End If
    If idx is equal to 6: Return thread_yield from DarwinX86_64 End If
    If idx is equal to 7: Return thread_yield from DarwinARM64 End If
    If idx is equal to 8: Return thread_yield from FreeBSDX64 End If
    If idx is equal to 9: Return thread_yield from FreeBSDARM64 End If
    If idx is equal to 10: Return thread_yield from NetBSDX64 End If
    If idx is equal to 11: Return thread_yield from NetBSDARM64 End If
    If idx is equal to 12: Return thread_yield from OpenBSDX64 End If
    If idx is equal to 13: Return thread_yield from OpenBSDARM64 End If
    If idx is equal to 14: Return thread_yield from WindowsX86_64 End If
    If idx is equal to 15: Return thread_yield from WindowsARM64 End If
    If idx is equal to 16: Return thread_yield from PowerPC End If
    If idx is equal to 17: Return thread_yield from RISCV32 End If
    If idx is equal to 18: Return thread_yield from RISCV64 End If
    Return 0
End Process

Process called "platform_thread_sleep" takes microseconds as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc thread_sleep from LinuxX86_64 with microseconds End If
    If idx is equal to 2: Return proc thread_sleep from LinuxARM64 with microseconds End If
    If idx is equal to 3: Return proc thread_sleep from LinuxARM32 with microseconds End If
    If idx is equal to 4: Return proc thread_sleep from MIPS32 with microseconds End If
    If idx is equal to 5: Return proc thread_sleep from MIPS64 with microseconds End If
    If idx is equal to 6: Return proc thread_sleep from DarwinX86_64 with microseconds End If
    If idx is equal to 7: Return proc thread_sleep from DarwinARM64 with microseconds End If
    If idx is equal to 8: Return proc thread_sleep from FreeBSDX64 with microseconds End If
    If idx is equal to 9: Return proc thread_sleep from FreeBSDARM64 with microseconds End If
    If idx is equal to 10: Return proc thread_sleep from NetBSDX64 with microseconds End If
    If idx is equal to 11: Return proc thread_sleep from NetBSDARM64 with microseconds End If
    If idx is equal to 12: Return proc thread_sleep from OpenBSDX64 with microseconds End If
    If idx is equal to 13: Return proc thread_sleep from OpenBSDARM64 with microseconds End If
    If idx is equal to 14: Return proc thread_sleep from WindowsX86_64 with microseconds End If
    If idx is equal to 15: Return proc thread_sleep from WindowsARM64 with microseconds End If
    If idx is equal to 16: Return proc thread_sleep from PowerPC with microseconds End If
    If idx is equal to 17: Return proc thread_sleep from RISCV32 with microseconds End If
    If idx is equal to 18: Return proc thread_sleep from RISCV64 with microseconds End If
    Return 0
End Process

Process called "platform_thread_set_name" takes name as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc thread_set_name from LinuxX86_64 with name End If
    If idx is equal to 2: Return proc thread_set_name from LinuxARM64 with name End If
    If idx is equal to 3: Return proc thread_set_name from LinuxARM32 with name End If
    If idx is equal to 4: Return proc thread_set_name from MIPS32 with name End If
    If idx is equal to 5: Return proc thread_set_name from MIPS64 with name End If
    If idx is equal to 6: Return proc thread_set_name from DarwinX86_64 with name End If
    If idx is equal to 7: Return proc thread_set_name from DarwinARM64 with name End If
    If idx is equal to 8: Return proc thread_set_name from FreeBSDX64 with name End If
    If idx is equal to 9: Return proc thread_set_name from FreeBSDARM64 with name End If
    If idx is equal to 10: Return proc thread_set_name from NetBSDX64 with name End If
    If idx is equal to 11: Return proc thread_set_name from NetBSDARM64 with name End If
    If idx is equal to 12: Return proc thread_set_name from OpenBSDX64 with name End If
    If idx is equal to 13: Return proc thread_set_name from OpenBSDARM64 with name End If
    If idx is equal to 14: Return proc thread_set_name from WindowsX86_64 with name End If
    If idx is equal to 15: Return proc thread_set_name from WindowsARM64 with name End If
    If idx is equal to 16: Return proc thread_set_name from PowerPC with name End If
    If idx is equal to 17: Return proc thread_set_name from RISCV32 with name End If
    If idx is equal to 18: Return proc thread_set_name from RISCV64 with name End If
    Return 0
End Process

Process called "platform_thread_get_name" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return thread_get_name from LinuxX86_64 End If
    If idx is equal to 2: Return thread_get_name from LinuxARM64 End If
    If idx is equal to 3: Return thread_get_name from LinuxARM32 End If
    If idx is equal to 4: Return thread_get_name from MIPS32 End If
    If idx is equal to 5: Return thread_get_name from MIPS64 End If
    If idx is equal to 6: Return thread_get_name from DarwinX86_64 End If
    If idx is equal to 7: Return thread_get_name from DarwinARM64 End If
    If idx is equal to 8: Return thread_get_name from FreeBSDX64 End If
    If idx is equal to 9: Return thread_get_name from FreeBSDARM64 End If
    If idx is equal to 10: Return thread_get_name from NetBSDX64 End If
    If idx is equal to 11: Return thread_get_name from NetBSDARM64 End If
    If idx is equal to 12: Return thread_get_name from OpenBSDX64 End If
    If idx is equal to 13: Return thread_get_name from OpenBSDARM64 End If
    If idx is equal to 14: Return thread_get_name from WindowsX86_64 End If
    If idx is equal to 15: Return thread_get_name from WindowsARM64 End If
    If idx is equal to 16: Return thread_get_name from PowerPC End If
    If idx is equal to 17: Return thread_get_name from RISCV32 End If
    If idx is equal to 18: Return thread_get_name from RISCV64 End If
    Return 0
End Process

Process called "platform_mutex_create" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return mutex_create from LinuxX86_64 End If
    If idx is equal to 2: Return mutex_create from LinuxARM64 End If
    If idx is equal to 3: Return mutex_create from LinuxARM32 End If
    If idx is equal to 4: Return mutex_create from MIPS32 End If
    If idx is equal to 5: Return mutex_create from MIPS64 End If
    If idx is equal to 6: Return mutex_create from DarwinX86_64 End If
    If idx is equal to 7: Return mutex_create from DarwinARM64 End If
    If idx is equal to 8: Return mutex_create from FreeBSDX64 End If
    If idx is equal to 9: Return mutex_create from FreeBSDARM64 End If
    If idx is equal to 10: Return mutex_create from NetBSDX64 End If
    If idx is equal to 11: Return mutex_create from NetBSDARM64 End If
    If idx is equal to 12: Return mutex_create from OpenBSDX64 End If
    If idx is equal to 13: Return mutex_create from OpenBSDARM64 End If
    If idx is equal to 14: Return mutex_create from WindowsX86_64 End If
    If idx is equal to 15: Return mutex_create from WindowsARM64 End If
    If idx is equal to 16: Return mutex_create from PowerPC End If
    If idx is equal to 17: Return mutex_create from RISCV32 End If
    If idx is equal to 18: Return mutex_create from RISCV64 End If
    Return 0
End Process

Process called "platform_mutex_destroy" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc mutex_destroy from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc mutex_destroy from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc mutex_destroy from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc mutex_destroy from MIPS32 with handle End If
    If idx is equal to 5: Return proc mutex_destroy from MIPS64 with handle End If
    If idx is equal to 6: Return proc mutex_destroy from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc mutex_destroy from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc mutex_destroy from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc mutex_destroy from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc mutex_destroy from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc mutex_destroy from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc mutex_destroy from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc mutex_destroy from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc mutex_destroy from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc mutex_destroy from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc mutex_destroy from PowerPC with handle End If
    If idx is equal to 17: Return proc mutex_destroy from RISCV32 with handle End If
    If idx is equal to 18: Return proc mutex_destroy from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_mutex_lock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc mutex_lock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc mutex_lock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc mutex_lock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc mutex_lock from MIPS32 with handle End If
    If idx is equal to 5: Return proc mutex_lock from MIPS64 with handle End If
    If idx is equal to 6: Return proc mutex_lock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc mutex_lock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc mutex_lock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc mutex_lock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc mutex_lock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc mutex_lock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc mutex_lock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc mutex_lock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc mutex_lock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc mutex_lock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc mutex_lock from PowerPC with handle End If
    If idx is equal to 17: Return proc mutex_lock from RISCV32 with handle End If
    If idx is equal to 18: Return proc mutex_lock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_mutex_unlock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc mutex_unlock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc mutex_unlock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc mutex_unlock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc mutex_unlock from MIPS32 with handle End If
    If idx is equal to 5: Return proc mutex_unlock from MIPS64 with handle End If
    If idx is equal to 6: Return proc mutex_unlock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc mutex_unlock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc mutex_unlock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc mutex_unlock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc mutex_unlock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc mutex_unlock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc mutex_unlock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc mutex_unlock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc mutex_unlock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc mutex_unlock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc mutex_unlock from PowerPC with handle End If
    If idx is equal to 17: Return proc mutex_unlock from RISCV32 with handle End If
    If idx is equal to 18: Return proc mutex_unlock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_mutex_try_lock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc mutex_try_lock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc mutex_try_lock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc mutex_try_lock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc mutex_try_lock from MIPS32 with handle End If
    If idx is equal to 5: Return proc mutex_try_lock from MIPS64 with handle End If
    If idx is equal to 6: Return proc mutex_try_lock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc mutex_try_lock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc mutex_try_lock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc mutex_try_lock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc mutex_try_lock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc mutex_try_lock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc mutex_try_lock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc mutex_try_lock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc mutex_try_lock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc mutex_try_lock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc mutex_try_lock from PowerPC with handle End If
    If idx is equal to 17: Return proc mutex_try_lock from RISCV32 with handle End If
    If idx is equal to 18: Return proc mutex_try_lock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_semaphore_create" takes initial_count as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc semaphore_create from LinuxX86_64 with initial_count End If
    If idx is equal to 2: Return proc semaphore_create from LinuxARM64 with initial_count End If
    If idx is equal to 3: Return proc semaphore_create from LinuxARM32 with initial_count End If
    If idx is equal to 4: Return proc semaphore_create from MIPS32 with initial_count End If
    If idx is equal to 5: Return proc semaphore_create from MIPS64 with initial_count End If
    If idx is equal to 6: Return proc semaphore_create from DarwinX86_64 with initial_count End If
    If idx is equal to 7: Return proc semaphore_create from DarwinARM64 with initial_count End If
    If idx is equal to 8: Return proc semaphore_create from FreeBSDX64 with initial_count End If
    If idx is equal to 9: Return proc semaphore_create from FreeBSDARM64 with initial_count End If
    If idx is equal to 10: Return proc semaphore_create from NetBSDX64 with initial_count End If
    If idx is equal to 11: Return proc semaphore_create from NetBSDARM64 with initial_count End If
    If idx is equal to 12: Return proc semaphore_create from OpenBSDX64 with initial_count End If
    If idx is equal to 13: Return proc semaphore_create from OpenBSDARM64 with initial_count End If
    If idx is equal to 14: Return proc semaphore_create from WindowsX86_64 with initial_count End If
    If idx is equal to 15: Return proc semaphore_create from WindowsARM64 with initial_count End If
    If idx is equal to 16: Return proc semaphore_create from PowerPC with initial_count End If
    If idx is equal to 17: Return proc semaphore_create from RISCV32 with initial_count End If
    If idx is equal to 18: Return proc semaphore_create from RISCV64 with initial_count End If
    Return 0
End Process

Process called "platform_semaphore_destroy" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc semaphore_destroy from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc semaphore_destroy from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc semaphore_destroy from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc semaphore_destroy from MIPS32 with handle End If
    If idx is equal to 5: Return proc semaphore_destroy from MIPS64 with handle End If
    If idx is equal to 6: Return proc semaphore_destroy from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc semaphore_destroy from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc semaphore_destroy from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc semaphore_destroy from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc semaphore_destroy from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc semaphore_destroy from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc semaphore_destroy from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc semaphore_destroy from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc semaphore_destroy from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc semaphore_destroy from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc semaphore_destroy from PowerPC with handle End If
    If idx is equal to 17: Return proc semaphore_destroy from RISCV32 with handle End If
    If idx is equal to 18: Return proc semaphore_destroy from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_semaphore_wait" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc semaphore_wait from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc semaphore_wait from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc semaphore_wait from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc semaphore_wait from MIPS32 with handle End If
    If idx is equal to 5: Return proc semaphore_wait from MIPS64 with handle End If
    If idx is equal to 6: Return proc semaphore_wait from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc semaphore_wait from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc semaphore_wait from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc semaphore_wait from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc semaphore_wait from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc semaphore_wait from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc semaphore_wait from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc semaphore_wait from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc semaphore_wait from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc semaphore_wait from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc semaphore_wait from PowerPC with handle End If
    If idx is equal to 17: Return proc semaphore_wait from RISCV32 with handle End If
    If idx is equal to 18: Return proc semaphore_wait from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_semaphore_signal" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc semaphore_signal from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc semaphore_signal from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc semaphore_signal from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc semaphore_signal from MIPS32 with handle End If
    If idx is equal to 5: Return proc semaphore_signal from MIPS64 with handle End If
    If idx is equal to 6: Return proc semaphore_signal from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc semaphore_signal from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc semaphore_signal from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc semaphore_signal from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc semaphore_signal from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc semaphore_signal from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc semaphore_signal from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc semaphore_signal from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc semaphore_signal from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc semaphore_signal from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc semaphore_signal from PowerPC with handle End If
    If idx is equal to 17: Return proc semaphore_signal from RISCV32 with handle End If
    If idx is equal to 18: Return proc semaphore_signal from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_semaphore_try_wait" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc semaphore_try_wait from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc semaphore_try_wait from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc semaphore_try_wait from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc semaphore_try_wait from MIPS32 with handle End If
    If idx is equal to 5: Return proc semaphore_try_wait from MIPS64 with handle End If
    If idx is equal to 6: Return proc semaphore_try_wait from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc semaphore_try_wait from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc semaphore_try_wait from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc semaphore_try_wait from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc semaphore_try_wait from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc semaphore_try_wait from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc semaphore_try_wait from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc semaphore_try_wait from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc semaphore_try_wait from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc semaphore_try_wait from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc semaphore_try_wait from PowerPC with handle End If
    If idx is equal to 17: Return proc semaphore_try_wait from RISCV32 with handle End If
    If idx is equal to 18: Return proc semaphore_try_wait from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_condvar_create" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return condvar_create from LinuxX86_64 End If
    If idx is equal to 2: Return condvar_create from LinuxARM64 End If
    If idx is equal to 3: Return condvar_create from LinuxARM32 End If
    If idx is equal to 4: Return condvar_create from MIPS32 End If
    If idx is equal to 5: Return condvar_create from MIPS64 End If
    If idx is equal to 6: Return condvar_create from DarwinX86_64 End If
    If idx is equal to 7: Return condvar_create from DarwinARM64 End If
    If idx is equal to 8: Return condvar_create from FreeBSDX64 End If
    If idx is equal to 9: Return condvar_create from FreeBSDARM64 End If
    If idx is equal to 10: Return condvar_create from NetBSDX64 End If
    If idx is equal to 11: Return condvar_create from NetBSDARM64 End If
    If idx is equal to 12: Return condvar_create from OpenBSDX64 End If
    If idx is equal to 13: Return condvar_create from OpenBSDARM64 End If
    If idx is equal to 14: Return condvar_create from WindowsX86_64 End If
    If idx is equal to 15: Return condvar_create from WindowsARM64 End If
    If idx is equal to 16: Return condvar_create from PowerPC End If
    If idx is equal to 17: Return condvar_create from RISCV32 End If
    If idx is equal to 18: Return condvar_create from RISCV64 End If
    Return 0
End Process

Process called "platform_condvar_destroy" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc condvar_destroy from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc condvar_destroy from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc condvar_destroy from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc condvar_destroy from MIPS32 with handle End If
    If idx is equal to 5: Return proc condvar_destroy from MIPS64 with handle End If
    If idx is equal to 6: Return proc condvar_destroy from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc condvar_destroy from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc condvar_destroy from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc condvar_destroy from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc condvar_destroy from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc condvar_destroy from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc condvar_destroy from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc condvar_destroy from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc condvar_destroy from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc condvar_destroy from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc condvar_destroy from PowerPC with handle End If
    If idx is equal to 17: Return proc condvar_destroy from RISCV32 with handle End If
    If idx is equal to 18: Return proc condvar_destroy from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_condvar_wait" takes cv_handle as Integer,mutex_handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc condvar_wait from LinuxX86_64 with cv_handle,mutex_handle End If
    If idx is equal to 2: Return proc condvar_wait from LinuxARM64 with cv_handle,mutex_handle End If
    If idx is equal to 3: Return proc condvar_wait from LinuxARM32 with cv_handle,mutex_handle End If
    If idx is equal to 4: Return proc condvar_wait from MIPS32 with cv_handle,mutex_handle End If
    If idx is equal to 5: Return proc condvar_wait from MIPS64 with cv_handle,mutex_handle End If
    If idx is equal to 6: Return proc condvar_wait from DarwinX86_64 with cv_handle,mutex_handle End If
    If idx is equal to 7: Return proc condvar_wait from DarwinARM64 with cv_handle,mutex_handle End If
    If idx is equal to 8: Return proc condvar_wait from FreeBSDX64 with cv_handle,mutex_handle End If
    If idx is equal to 9: Return proc condvar_wait from FreeBSDARM64 with cv_handle,mutex_handle End If
    If idx is equal to 10: Return proc condvar_wait from NetBSDX64 with cv_handle,mutex_handle End If
    If idx is equal to 11: Return proc condvar_wait from NetBSDARM64 with cv_handle,mutex_handle End If
    If idx is equal to 12: Return proc condvar_wait from OpenBSDX64 with cv_handle,mutex_handle End If
    If idx is equal to 13: Return proc condvar_wait from OpenBSDARM64 with cv_handle,mutex_handle End If
    If idx is equal to 14: Return proc condvar_wait from WindowsX86_64 with cv_handle,mutex_handle End If
    If idx is equal to 15: Return proc condvar_wait from WindowsARM64 with cv_handle,mutex_handle End If
    If idx is equal to 16: Return proc condvar_wait from PowerPC with cv_handle,mutex_handle End If
    If idx is equal to 17: Return proc condvar_wait from RISCV32 with cv_handle,mutex_handle End If
    If idx is equal to 18: Return proc condvar_wait from RISCV64 with cv_handle,mutex_handle End If
    Return 0
End Process

Process called "platform_condvar_timed_wait" takes cv_handle as Integer,mutex_handle as Integer,timeout_us as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc condvar_timed_wait from LinuxX86_64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 2: Return proc condvar_timed_wait from LinuxARM64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 3: Return proc condvar_timed_wait from LinuxARM32 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 4: Return proc condvar_timed_wait from MIPS32 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 5: Return proc condvar_timed_wait from MIPS64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 6: Return proc condvar_timed_wait from DarwinX86_64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 7: Return proc condvar_timed_wait from DarwinARM64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 8: Return proc condvar_timed_wait from FreeBSDX64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 9: Return proc condvar_timed_wait from FreeBSDARM64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 10: Return proc condvar_timed_wait from NetBSDX64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 11: Return proc condvar_timed_wait from NetBSDARM64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 12: Return proc condvar_timed_wait from OpenBSDX64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 13: Return proc condvar_timed_wait from OpenBSDARM64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 14: Return proc condvar_timed_wait from WindowsX86_64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 15: Return proc condvar_timed_wait from WindowsARM64 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 16: Return proc condvar_timed_wait from PowerPC with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 17: Return proc condvar_timed_wait from RISCV32 with cv_handle,mutex_handle,timeout_us End If
    If idx is equal to 18: Return proc condvar_timed_wait from RISCV64 with cv_handle,mutex_handle,timeout_us End If
    Return 0
End Process

Process called "platform_condvar_signal" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc condvar_signal from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc condvar_signal from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc condvar_signal from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc condvar_signal from MIPS32 with handle End If
    If idx is equal to 5: Return proc condvar_signal from MIPS64 with handle End If
    If idx is equal to 6: Return proc condvar_signal from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc condvar_signal from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc condvar_signal from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc condvar_signal from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc condvar_signal from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc condvar_signal from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc condvar_signal from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc condvar_signal from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc condvar_signal from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc condvar_signal from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc condvar_signal from PowerPC with handle End If
    If idx is equal to 17: Return proc condvar_signal from RISCV32 with handle End If
    If idx is equal to 18: Return proc condvar_signal from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_condvar_broadcast" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc condvar_broadcast from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc condvar_broadcast from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc condvar_broadcast from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc condvar_broadcast from MIPS32 with handle End If
    If idx is equal to 5: Return proc condvar_broadcast from MIPS64 with handle End If
    If idx is equal to 6: Return proc condvar_broadcast from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc condvar_broadcast from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc condvar_broadcast from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc condvar_broadcast from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc condvar_broadcast from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc condvar_broadcast from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc condvar_broadcast from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc condvar_broadcast from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc condvar_broadcast from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc condvar_broadcast from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc condvar_broadcast from PowerPC with handle End If
    If idx is equal to 17: Return proc condvar_broadcast from RISCV32 with handle End If
    If idx is equal to 18: Return proc condvar_broadcast from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_rwlock_create" returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return rwlock_create from LinuxX86_64 End If
    If idx is equal to 2: Return rwlock_create from LinuxARM64 End If
    If idx is equal to 3: Return rwlock_create from LinuxARM32 End If
    If idx is equal to 4: Return rwlock_create from MIPS32 End If
    If idx is equal to 5: Return rwlock_create from MIPS64 End If
    If idx is equal to 6: Return rwlock_create from DarwinX86_64 End If
    If idx is equal to 7: Return rwlock_create from DarwinARM64 End If
    If idx is equal to 8: Return rwlock_create from FreeBSDX64 End If
    If idx is equal to 9: Return rwlock_create from FreeBSDARM64 End If
    If idx is equal to 10: Return rwlock_create from NetBSDX64 End If
    If idx is equal to 11: Return rwlock_create from NetBSDARM64 End If
    If idx is equal to 12: Return rwlock_create from OpenBSDX64 End If
    If idx is equal to 13: Return rwlock_create from OpenBSDARM64 End If
    If idx is equal to 14: Return rwlock_create from WindowsX86_64 End If
    If idx is equal to 15: Return rwlock_create from WindowsARM64 End If
    If idx is equal to 16: Return rwlock_create from PowerPC End If
    If idx is equal to 17: Return rwlock_create from RISCV32 End If
    If idx is equal to 18: Return rwlock_create from RISCV64 End If
    Return 0
End Process

Process called "platform_rwlock_destroy" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc rwlock_destroy from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc rwlock_destroy from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc rwlock_destroy from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc rwlock_destroy from MIPS32 with handle End If
    If idx is equal to 5: Return proc rwlock_destroy from MIPS64 with handle End If
    If idx is equal to 6: Return proc rwlock_destroy from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc rwlock_destroy from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc rwlock_destroy from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc rwlock_destroy from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc rwlock_destroy from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc rwlock_destroy from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc rwlock_destroy from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc rwlock_destroy from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc rwlock_destroy from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc rwlock_destroy from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc rwlock_destroy from PowerPC with handle End If
    If idx is equal to 17: Return proc rwlock_destroy from RISCV32 with handle End If
    If idx is equal to 18: Return proc rwlock_destroy from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_rwlock_read_lock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc rwlock_read_lock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc rwlock_read_lock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc rwlock_read_lock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc rwlock_read_lock from MIPS32 with handle End If
    If idx is equal to 5: Return proc rwlock_read_lock from MIPS64 with handle End If
    If idx is equal to 6: Return proc rwlock_read_lock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc rwlock_read_lock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc rwlock_read_lock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc rwlock_read_lock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc rwlock_read_lock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc rwlock_read_lock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc rwlock_read_lock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc rwlock_read_lock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc rwlock_read_lock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc rwlock_read_lock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc rwlock_read_lock from PowerPC with handle End If
    If idx is equal to 17: Return proc rwlock_read_lock from RISCV32 with handle End If
    If idx is equal to 18: Return proc rwlock_read_lock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_rwlock_write_lock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc rwlock_write_lock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc rwlock_write_lock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc rwlock_write_lock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc rwlock_write_lock from MIPS32 with handle End If
    If idx is equal to 5: Return proc rwlock_write_lock from MIPS64 with handle End If
    If idx is equal to 6: Return proc rwlock_write_lock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc rwlock_write_lock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc rwlock_write_lock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc rwlock_write_lock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc rwlock_write_lock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc rwlock_write_lock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc rwlock_write_lock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc rwlock_write_lock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc rwlock_write_lock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc rwlock_write_lock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc rwlock_write_lock from PowerPC with handle End If
    If idx is equal to 17: Return proc rwlock_write_lock from RISCV32 with handle End If
    If idx is equal to 18: Return proc rwlock_write_lock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_rwlock_unlock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc rwlock_unlock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc rwlock_unlock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc rwlock_unlock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc rwlock_unlock from MIPS32 with handle End If
    If idx is equal to 5: Return proc rwlock_unlock from MIPS64 with handle End If
    If idx is equal to 6: Return proc rwlock_unlock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc rwlock_unlock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc rwlock_unlock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc rwlock_unlock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc rwlock_unlock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc rwlock_unlock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc rwlock_unlock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc rwlock_unlock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc rwlock_unlock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc rwlock_unlock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc rwlock_unlock from PowerPC with handle End If
    If idx is equal to 17: Return proc rwlock_unlock from RISCV32 with handle End If
    If idx is equal to 18: Return proc rwlock_unlock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_rwlock_try_read_lock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc rwlock_try_read_lock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc rwlock_try_read_lock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc rwlock_try_read_lock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc rwlock_try_read_lock from MIPS32 with handle End If
    If idx is equal to 5: Return proc rwlock_try_read_lock from MIPS64 with handle End If
    If idx is equal to 6: Return proc rwlock_try_read_lock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc rwlock_try_read_lock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc rwlock_try_read_lock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc rwlock_try_read_lock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc rwlock_try_read_lock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc rwlock_try_read_lock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc rwlock_try_read_lock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc rwlock_try_read_lock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc rwlock_try_read_lock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc rwlock_try_read_lock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc rwlock_try_read_lock from PowerPC with handle End If
    If idx is equal to 17: Return proc rwlock_try_read_lock from RISCV32 with handle End If
    If idx is equal to 18: Return proc rwlock_try_read_lock from RISCV64 with handle End If
    Return 0
End Process

Process called "platform_rwlock_try_write_lock" takes handle as Integer returns Integer:
    Let idx be proc _ensure_backend_selected from RegisterMap
    If idx is equal to 1: Return proc rwlock_try_write_lock from LinuxX86_64 with handle End If
    If idx is equal to 2: Return proc rwlock_try_write_lock from LinuxARM64 with handle End If
    If idx is equal to 3: Return proc rwlock_try_write_lock from LinuxARM32 with handle End If
    If idx is equal to 4: Return proc rwlock_try_write_lock from MIPS32 with handle End If
    If idx is equal to 5: Return proc rwlock_try_write_lock from MIPS64 with handle End If
    If idx is equal to 6: Return proc rwlock_try_write_lock from DarwinX86_64 with handle End If
    If idx is equal to 7: Return proc rwlock_try_write_lock from DarwinARM64 with handle End If
    If idx is equal to 8: Return proc rwlock_try_write_lock from FreeBSDX64 with handle End If
    If idx is equal to 9: Return proc rwlock_try_write_lock from FreeBSDARM64 with handle End If
    If idx is equal to 10: Return proc rwlock_try_write_lock from NetBSDX64 with handle End If
    If idx is equal to 11: Return proc rwlock_try_write_lock from NetBSDARM64 with handle End If
    If idx is equal to 12: Return proc rwlock_try_write_lock from OpenBSDX64 with handle End If
    If idx is equal to 13: Return proc rwlock_try_write_lock from OpenBSDARM64 with handle End If
    If idx is equal to 14: Return proc rwlock_try_write_lock from WindowsX86_64 with handle End If
    If idx is equal to 15: Return proc rwlock_try_write_lock from WindowsARM64 with handle End If
    If idx is equal to 16: Return proc rwlock_try_write_lock from PowerPC with handle End If
    If idx is equal to 17: Return proc rwlock_try_write_lock from RISCV32 with handle End If
    If idx is equal to 18: Return proc rwlock_try_write_lock from RISCV64 with handle End If
    Return 0
End Process
