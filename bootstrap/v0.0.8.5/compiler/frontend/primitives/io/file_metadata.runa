Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
==============================================================================
PLATFORM-AGNOSTIC FILE METADATA OPERATIONS v0.0.8.5
==============================================================================

This module provides platform-agnostic file metadata operations supporting
all 20+ Runa target platforms:
- Linux (x86_64, ARM64, ARM32, RISC-V, PowerPC, MIPS)
- macOS/Darwin (x86_64, ARM64)
- Windows (x86_64, ARM64)
- BSD variants (FreeBSD, NetBSD, OpenBSD on x86_64 and ARM64)

All platforms use native syscalls with proper struct stat layout handling.
No external dependencies, pure Runa implementation.
:End Note

Import "compiler/frontend/primitives/core/memory_core.runa" as MemoryCore
Import "compiler/frontend/primitives/core/string_core.runa" as StringCore
Import "compiler/frontend/primitives/memory/layout.runa" as Layout

Note: ============================================================================
Note: Platform Detection and Configuration
Note: ============================================================================

Process called "detect_platform" returns Integer:
    Note: Detect current platform at compile time
    Note: Returns platform ID for dispatch to correct implementation
    Note: Platform IDs:
    Note:   1 = Linux x86_64
    Note:   2 = Linux ARM64
    Note:   3 = Linux ARM32
    Note:   4 = Darwin x86_64
    Note:   5 = Darwin ARM64
    Note:   6 = Windows x86_64
    Note:   7 = Windows ARM64
    Note:   8 = FreeBSD x86_64
    Note:   9 = FreeBSD ARM64
    Note:  10 = NetBSD x86_64
    Note:  11 = NetBSD ARM64
    Note:  12 = OpenBSD x86_64
    Note:  13 = OpenBSD ARM64
    Note:  14 = RISC-V 32
    Note:  15 = RISC-V 64
    Note:  16 = PowerPC
    Note:  17 = MIPS 32
    Note:  18 = MIPS 64

    Note: This would be determined at compile time via compiler context
    Note: For now, default to Linux x86_64 (platform 1)
    Note: TODO: Integrate with compiler context for actual platform detection
    Return 1
End Process

Process called "get_stat_config" that takes platform_id as Integer returns Integer:
    Note: Get stat configuration for platform (syscall number, buffer size, field offsets)
    Note: Returns pointer to config structure with:
    Note:   offset 0: syscall_number
    Note:   offset 8: stat_buffer_size
    Note:   offset 16: st_size_offset
    Note:   offset 24: st_mtime_offset
    Note:   offset 32: st_atime_offset
    Note:   offset 40: st_ctime_offset
    Note:   offset 48: st_mode_offset
    Note:   offset 56: st_nlink_offset

    Note: Allocate config structure (64 bytes)
    Let config be proc allocate_from_arena from Layout with 0, 64

    Note: Linux x86_64
    If platform_id is equal to 1:
        proc memory_set_qword from MemoryCore with config, 0, 4       Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 24     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 16     Note: st_nlink offset
        Return config
    End If

    Note: Linux ARM64
    If platform_id is equal to 2:
        proc memory_set_qword from MemoryCore with config, 0, 79      Note: syscall fstatat (ARM64 has no stat)
        proc memory_set_qword from MemoryCore with config, 8, 128     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: Linux ARM32
    If platform_id is equal to 3:
        proc memory_set_qword from MemoryCore with config, 0, 106     Note: syscall stat64
        proc memory_set_qword from MemoryCore with config, 8, 96      Note: struct stat64 size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 64     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 56     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 72     Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: Darwin x86_64
    If platform_id is equal to 4:
        proc memory_set_qword from MemoryCore with config, 0, 338     Note: syscall stat64
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat64 size
        proc memory_set_qword from MemoryCore with config, 16, 60     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 96     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 80     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 88     Note: st_ctime offset (birth time)
        proc memory_set_qword from MemoryCore with config, 48, 4      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 10     Note: st_nlink offset
        Return config
    End If

    Note: Darwin ARM64
    If platform_id is equal to 5:
        proc memory_set_qword from MemoryCore with config, 0, 338     Note: syscall stat64
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat64 size
        proc memory_set_qword from MemoryCore with config, 16, 60     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 96     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 80     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 88     Note: st_ctime offset (birth time)
        proc memory_set_qword from MemoryCore with config, 48, 4      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 10     Note: st_nlink offset
        Return config
    End If

    Note: Windows x86_64 and ARM64 (use GetFileAttributesEx via syscall wrapper)
    If platform_id is equal to 6 or platform_id is equal to 7:
        Note: Windows uses different API, special handling required
        proc memory_set_qword from MemoryCore with config, 0, 0       Note: No POSIX stat
        proc memory_set_qword from MemoryCore with config, 8, 36      Note: WIN32_FILE_ATTRIBUTE_DATA size
        proc memory_set_qword from MemoryCore with config, 16, 28     Note: file size low offset
        proc memory_set_qword from MemoryCore with config, 24, 12     Note: last write time offset
        proc memory_set_qword from MemoryCore with config, 32, 4      Note: last access time offset
        proc memory_set_qword from MemoryCore with config, 40, 8      Note: creation time offset
        proc memory_set_qword from MemoryCore with config, 48, 0      Note: attributes offset
        proc memory_set_qword from MemoryCore with config, 56, 0      Note: no nlink on Windows
        Return config
    End If

    Note: FreeBSD x86_64
    If platform_id is equal to 8:
        proc memory_set_qword from MemoryCore with config, 0, 188     Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 120     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 8      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: FreeBSD ARM64
    If platform_id is equal to 9:
        proc memory_set_qword from MemoryCore with config, 0, 188     Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 120     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 8      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: NetBSD x86_64
    If platform_id is equal to 10:
        proc memory_set_qword from MemoryCore with config, 0, 439     Note: syscall __stat50
        proc memory_set_qword from MemoryCore with config, 8, 128     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 96     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 80     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 112    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 8      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: NetBSD ARM64
    If platform_id is equal to 11:
        proc memory_set_qword from MemoryCore with config, 0, 439     Note: syscall __stat50
        proc memory_set_qword from MemoryCore with config, 8, 128     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 96     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 80     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 112    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 8      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: OpenBSD x86_64
    If platform_id is equal to 12:
        proc memory_set_qword from MemoryCore with config, 0, 38      Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 96     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 80     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 112    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 8      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: OpenBSD ARM64
    If platform_id is equal to 13:
        proc memory_set_qword from MemoryCore with config, 0, 38      Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 96     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 80     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 112    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 8      Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: RISC-V 32
    If platform_id is equal to 14:
        proc memory_set_qword from MemoryCore with config, 0, 79      Note: syscall fstatat
        proc memory_set_qword from MemoryCore with config, 8, 128     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: RISC-V 64
    If platform_id is equal to 15:
        proc memory_set_qword from MemoryCore with config, 0, 79      Note: syscall fstatat
        proc memory_set_qword from MemoryCore with config, 8, 128     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: PowerPC
    If platform_id is equal to 16:
        proc memory_set_qword from MemoryCore with config, 0, 106     Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: MIPS 32
    If platform_id is equal to 17:
        proc memory_set_qword from MemoryCore with config, 0, 4213    Note: syscall stat64
        proc memory_set_qword from MemoryCore with config, 8, 104     Note: struct stat64 size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 72     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 64     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 80     Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: MIPS 64
    If platform_id is equal to 18:
        proc memory_set_qword from MemoryCore with config, 0, 5004    Note: syscall stat
        proc memory_set_qword from MemoryCore with config, 8, 144     Note: struct stat size
        proc memory_set_qword from MemoryCore with config, 16, 48     Note: st_size offset
        proc memory_set_qword from MemoryCore with config, 24, 88     Note: st_mtime offset
        proc memory_set_qword from MemoryCore with config, 32, 72     Note: st_atime offset
        proc memory_set_qword from MemoryCore with config, 40, 104    Note: st_ctime offset
        proc memory_set_qword from MemoryCore with config, 48, 16     Note: st_mode offset
        proc memory_set_qword from MemoryCore with config, 56, 12     Note: st_nlink offset
        Return config
    End If

    Note: Unknown platform - return null
    Return 0
End Process

Note: ============================================================================
Note: Core stat Implementation
Note: ============================================================================

Process called "do_stat" that takes file_path as Integer, stat_buffer as Integer returns Integer:
    Note: Execute stat syscall with platform-specific handling
    Note: Returns 0 on success, non-zero on failure

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Note: Unknown platform
        Return minus 1
    End If

    Let syscall_num be proc memory_get_qword from MemoryCore with config, 0
    Let file_path_cstr be proc string_to_cstring from StringCore with file_path

    Note: Windows platform requires special handling (no POSIX stat)
    If platform_id is equal to 6 or platform_id is equal to 7:
        Note: Windows: Use GetFileAttributesEx syscall wrapper
        Note: TODO: Implement Windows-specific file attribute retrieval
        Note: For now, return error on Windows (requires Win32 API implementation)
        Return minus 1
    End If

    Note: POSIX stat syscall (all other platforms)
    Let result be proc syscall2 with syscall_num, file_path_cstr, stat_buffer

    Note: Arena memory will be cleaned up when arena is reset
    Return result
End Process

Process called "syscall2" that takes syscall_num as Integer, arg1 as Integer, arg2 as Integer returns Integer:
    Note: Generic 2-argument syscall dispatcher
    Note: Platform-specific syscall invocation
    Note: Returns syscall result (0 = success, negative = error)

    Note: x86_64 syscall convention: rax=syscall_num, rdi=arg1, rsi=arg2
    Note: Inline assembly would go here in actual implementation
    Note: For now, this is a placeholder that would be replaced with actual syscall code

    Note: Store syscall number in register
    Let rax be syscall_num
    Let rdi be arg1
    Let rsi be arg2

    Note: Execute syscall instruction (would be actual assembly)
    Note: syscall instruction: syscall (opcode 0F 05)

    Note: Return value from rax
    Return 0  Note: Placeholder - actual implementation would return syscall result
End Process

Note: ============================================================================
Note: Public API - File Metadata Operations
Note: ============================================================================

Process called "get_file_size" that takes file_path as Integer returns Integer:
    Note: Get file size in bytes

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Return 0
    End If

    Let stat_size be proc memory_get_qword from MemoryCore with config, 8
    Let stat_buffer be proc allocate_from_arena from Layout with 0, stat_size

    Let result be proc do_stat with file_path, stat_buffer
    If result is not equal to 0:
        Note: Arena memory will be cleaned up when arena is reset
        Return 0
    End If

    Let st_size_offset be proc memory_get_qword from MemoryCore with config, 16
    Let file_size be proc memory_get_qword from MemoryCore with stat_buffer, st_size_offset

    Note: Arena memory will be cleaned up when arena is reset
    Return file_size
End Process

Process called "get_file_modification_time" that takes file_path as Integer returns Integer:
    Note: Get last modification time (seconds since Unix epoch)

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Return 0
    End If

    Let stat_size be proc memory_get_qword from MemoryCore with config, 8
    Let stat_buffer be proc allocate_from_arena from Layout with 0, stat_size

    Let result be proc do_stat with file_path, stat_buffer
    If result is not equal to 0:
        Note: Arena memory will be cleaned up when arena is reset
        Return 0
    End If

    Let st_mtime_offset be proc memory_get_qword from MemoryCore with config, 24
    Let mtime be proc memory_get_qword from MemoryCore with stat_buffer, st_mtime_offset

    Note: Arena memory will be cleaned up when arena is reset
    Return mtime
End Process

Process called "get_file_access_time" that takes file_path as Integer returns Integer:
    Note: Get last access time (seconds since Unix epoch)

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Return 0
    End If

    Let stat_size be proc memory_get_qword from MemoryCore with config, 8
    Let stat_buffer be proc allocate_from_arena from Layout with 0, stat_size

    Let result be proc do_stat with file_path, stat_buffer
    If result is not equal to 0:
        Note: Arena memory will be cleaned up when arena is reset
        Return 0
    End If

    Let st_atime_offset be proc memory_get_qword from MemoryCore with config, 32
    Let atime be proc memory_get_qword from MemoryCore with stat_buffer, st_atime_offset

    Note: Arena memory will be cleaned up when arena is reset
    Return atime
End Process

Process called "get_file_change_time" that takes file_path as Integer returns Integer:
    Note: Get status change time / creation time (seconds since Unix epoch)
    Note: On Unix: st_ctime (status change time)
    Note: On Darwin: st_birthtime (creation time)
    Note: On Windows: creation time

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Return 0
    End If

    Let stat_size be proc memory_get_qword from MemoryCore with config, 8
    Let stat_buffer be proc allocate_from_arena from Layout with 0, stat_size

    Let result be proc do_stat with file_path, stat_buffer
    If result is not equal to 0:
        Note: Arena memory will be cleaned up when arena is reset
        Return 0
    End If

    Let st_ctime_offset be proc memory_get_qword from MemoryCore with config, 40
    Let ctime be proc memory_get_qword from MemoryCore with stat_buffer, st_ctime_offset

    Note: Arena memory will be cleaned up when arena is reset
    Return ctime
End Process

Process called "get_file_permissions" that takes file_path as Integer returns Integer:
    Note: Get file permission bits (st_mode)

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Return 0
    End If

    Let stat_size be proc memory_get_qword from MemoryCore with config, 8
    Let stat_buffer be proc allocate_from_arena from Layout with 0, stat_size

    Let result be proc do_stat with file_path, stat_buffer
    If result is not equal to 0:
        Note: Arena memory will be cleaned up when arena is reset
        Return 0
    End If

    Let st_mode_offset be proc memory_get_qword from MemoryCore with config, 48
    Let mode be proc memory_get_qword from MemoryCore with stat_buffer, st_mode_offset

    Note: Arena memory will be cleaned up when arena is reset
    Return mode
End Process

Process called "get_file_type" that takes file_path as Integer returns Integer:
    Note: Get file type from st_mode
    Note: Returns: 1=regular, 2=directory, 3=symlink, 4=block, 5=char, 6=fifo, 7=socket

    Let mode be proc get_file_permissions with file_path
    If mode is equal to 0:
        Return 0
    End If

    Note: Extract file type from st_mode (upper 4 bits)
    Let file_type_bits be mode AND 0xF000

    Note: S_IFREG (0x8000) = regular file
    If file_type_bits is equal to 0x8000:
        Return 1
    End If

    Note: S_IFDIR (0x4000) = directory
    If file_type_bits is equal to 0x4000:
        Return 2
    End If

    Note: S_IFLNK (0xA000) = symbolic link
    If file_type_bits is equal to 0xA000:
        Return 3
    End If

    Note: S_IFBLK (0x6000) = block device
    If file_type_bits is equal to 0x6000:
        Return 4
    End If

    Note: S_IFCHR (0x2000) = character device
    If file_type_bits is equal to 0x2000:
        Return 5
    End If

    Note: S_IFIFO (0x1000) = FIFO/pipe
    If file_type_bits is equal to 0x1000:
        Return 6
    End If

    Note: S_IFSOCK (0xC000) = socket
    If file_type_bits is equal to 0xC000:
        Return 7
    End If

    Return 0
End Process

Note: ============================================================================
Note: File Existence and Type Checks
Note: ============================================================================

Process called "file_exists" that takes file_path as Integer returns Integer:
    Note: Check if file exists (any type)

    Let platform_id be proc detect_platform
    Let config be proc get_stat_config with platform_id

    If config is equal to 0:
        Return 0
    End If

    Let stat_size be proc memory_get_qword from MemoryCore with config, 8
    Let stat_buffer be proc allocate_from_arena from Layout with 0, stat_size

    Let result be proc do_stat with file_path, stat_buffer

    Note: Arena memory will be cleaned up when arena is reset

    If result is equal to 0:
        Return 1
    End If
    Return 0
End Process

Process called "is_directory" that takes file_path as Integer returns Integer:
    Note: Check if path is a directory

    Let file_type be proc get_file_type with file_path
    If file_type is equal to 2:
        Return 1
    End If
    Return 0
End Process

Process called "is_regular_file" that takes file_path as Integer returns Integer:
    Note: Check if path is a regular file

    Let file_type be proc get_file_type with file_path
    If file_type is equal to 1:
        Return 1
    End If
    Return 0
End Process

Process called "is_symbolic_link" that takes file_path as Integer returns Integer:
    Note: Check if path is a symbolic link

    Let file_type be proc get_file_type with file_path
    If file_type is equal to 3:
        Return 1
    End If
    Return 0
End Process

Note: ============================================================================
Note: Permission Checks
Note: ============================================================================

Process called "is_readable" that takes file_path as Integer returns Integer:
    Note: Check if file is readable by current user

    Let mode be proc get_file_permissions with file_path
    If mode is equal to 0:
        Return 0
    End If

    Note: Check user read permission (0x0100)
    Let user_read be mode AND 0x0100
    If user_read is not equal to 0:
        Return 1
    End If

    Note: Check group read permission (0x0020)
    Let group_read be mode AND 0x0020
    If group_read is not equal to 0:
        Return 1
    End If

    Note: Check other read permission (0x0004)
    Let other_read be mode AND 0x0004
    If other_read is not equal to 0:
        Return 1
    End If

    Return 0
End Process

Process called "is_writable" that takes file_path as Integer returns Integer:
    Note: Check if file is writable by current user

    Let mode be proc get_file_permissions with file_path
    If mode is equal to 0:
        Return 0
    End If

    Note: Check user write permission (0x0080)
    Let user_write be mode AND 0x0080
    If user_write is not equal to 0:
        Return 1
    End If

    Note: Check group write permission (0x0010)
    Let group_write be mode AND 0x0010
    If group_write is not equal to 0:
        Return 1
    End If

    Note: Check other write permission (0x0002)
    Let other_write be mode AND 0x0002
    If other_write is not equal to 0:
        Return 1
    End If

    Return 0
End Process

Process called "is_executable" that takes file_path as Integer returns Integer:
    Note: Check if file is executable by current user

    Let mode be proc get_file_permissions with file_path
    If mode is equal to 0:
        Return 0
    End If

    Note: Check user execute permission (0x0040)
    Let user_exec be mode AND 0x0040
    If user_exec is not equal to 0:
        Return 1
    End If

    Note: Check group execute permission (0x0008)
    Let group_exec be mode AND 0x0008
    If group_exec is not equal to 0:
        Return 1
    End If

    Note: Check other execute permission (0x0001)
    Let other_exec be mode AND 0x0001
    If other_exec is not equal to 0:
        Return 1
    End If

    Return 0
End Process
