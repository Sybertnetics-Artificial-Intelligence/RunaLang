Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file handles logical operations and logical instruction processing.

This file performs the following tasks:
- Process logical operations (AND, OR, NOT, short-circuit evaluation)
- Handle logical optimization and logical constant folding
- Manage logical type handling and logical conversion
- Process logical result processing and logical optimization

This file is essential because of the following reasons:
- Logical operations are fundamental to boolean logic and conditional programming
- Proper logical handling ensures correct logical computation and control flow
- Logical optimization improves performance for logical operations and short-circuit evaluation

This file consists of the following functions/features/operation types:
- Logical operation processing and logical instruction handling
- Logical optimization and logical constant folding
- Logical type handling and logical conversion processing
- Logical result processing and logical optimization

Dependencies:
- NONE (logical operations use native language constructs)
:End Note

Note: ============================================================================
Note: Core Logical Operations (Layer 2)
Note: ============================================================================

Note: Logical operations work on boolean values (0 = false, non-zero = true).
Note: Runa natively supports these with "and", "or", "not" keywords.
Note: ============================================================================

Process called "logical_and" takes a as Integer, b as Integer returns Integer:
    Note: Logical AND operation
    Note: Returns 1 if both a AND b are non-zero, 0 otherwise
    If a is not equal to 0:
        If b is not equal to 0:
            Return 1
        End If
    End If
    Return 0
End Process

Process called "logical_or" takes a as Integer, b as Integer returns Integer:
    Note: Logical OR operation
    Note: Returns 1 if either a OR b is non-zero, 0 otherwise
    If a is not equal to 0:
        Return 1
    End If
    If b is not equal to 0:
        Return 1
    End If
    Return 0
End Process

Process called "logical_not" takes a as Integer returns Integer:
    Note: Logical NOT operation
    Note: Returns 1 if a is zero, 0 if a is non-zero
    If a is equal to 0:
        Return 1
    End If
    Return 0
End Process

Process called "logical_xor" takes a as Integer, b as Integer returns Integer:
    Note: Logical XOR operation
    Note: Returns 1 if exactly one of a or b is non-zero
    Let a_bool be 0
    Let b_bool be 0

    If a is not equal to 0:
        Set a_bool to 1
    End If

    If b is not equal to 0:
        Set b_bool to 1
    End If

    If a_bool is not equal to b_bool:
        Return 1
    End If
    Return 0
End Process

Process called "to_bool" takes value as Integer returns Integer:
    Note: Convert any integer to boolean (0 or 1)
    Note: Returns 1 if value is non-zero, 0 if value is zero
    If value is not equal to 0:
        Return 1
    End If
    Return 0
End Process

Note: ============================================================================
Note: Future: Short-Circuit Evaluation Optimization
Note: ============================================================================

Note: When the compiler supports lazy evaluation, these operations can be
Note: optimized to short-circuit (skip evaluation of second argument when
Note: the result is already determined).

Note: Example: logical_and(expensive_check(), another_check())
Note: If expensive_check() returns 0, another_check() is never called.
Note: ============================================================================
