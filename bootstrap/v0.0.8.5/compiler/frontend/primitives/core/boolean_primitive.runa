Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file handles boolean primitive type and boolean operations.

This file performs the following tasks:
- Process boolean values and boolean type handling
- Handle boolean operations and boolean logic processing
- Manage boolean optimization and boolean constant folding
- Process boolean conversion and boolean type promotion

This file is essential because of the following reasons:
- Boolean primitives are fundamental to logical programming and control flow
- Proper boolean handling ensures correct logical computation and decision making
- Boolean optimization improves performance for logical operations

This file consists of the following functions/features/operation types:
- Boolean value processing and boolean type handling
- Boolean operations and boolean logic processing
- Boolean optimization and boolean constant folding
- Boolean conversion and boolean type promotion

Dependencies:
- NONE (boolean is represented as Integer: 0 = false, 1 = true)
:End Note

Note: ============================================================================
Note: Boolean Type Primitives (Layer 2)
Note: ============================================================================

Note: Runa represents booleans as integers: 0 = false, any non-zero = true
Note: By convention, we use 1 for true.

Note: Future: Native Boolean type may be added for type safety and clarity.
Note: ============================================================================

Let FALSE be 0
Let TRUE be 1

Process called "boolean_true" returns Integer:
    Note: Return the boolean true value (1)
    Return 1
End Process

Process called "boolean_false" returns Integer:
    Note: Return the boolean false value (0)
    Return 0
End Process

Process called "boolean_from_int" takes value as Integer returns Integer:
    Note: Convert integer to boolean
    Note: Returns 1 if value is non-zero, 0 otherwise
    If value is not equal to 0:
        Return 1
    End If
    Return 0
End Process

Process called "boolean_to_string" takes value as Integer returns Integer:
    Note: Convert boolean to string representation
    Note: Returns pointer to "true" or "false" string
    Note: TODO: Implement string literals when string system is complete
    If value is not equal to 0:
        Return 0  Note: Placeholder for "true"
    End If
    Return 0  Note: Placeholder for "false"
End Process

Note: ============================================================================
Note: Future: Native Boolean Type
Note: ============================================================================

Note: When native Boolean type is added:
Note: - Type safety: cannot accidentally use integer where boolean expected
Note: - Smaller storage: 1 byte instead of 8 bytes
Note: - Clearer semantics: true/false keywords instead of 0/1

Note: Syntax:
Note:   Let is_valid as Boolean be true
Note:   Let is_empty as Boolean be false
Note: ============================================================================
