Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file provides pointer arithmetic operations.

Pointers in Runa are 64-bit integers representing memory addresses.
These functions provide basic pointer manipulation:
- pointer_add - add offset to pointer
- pointer_subtract - subtract offset from pointer
- pointer_difference - calculate distance between two pointers
- pointer_is_null - check if pointer is NULL (0)
- pointer_is_aligned - check if pointer is aligned to boundary

This is a foundation primitive with NO dependencies.
:End Note

Note: ============================================================================
Note: Pointer Arithmetic
Note: ============================================================================

Process called "pointer_add" takes ptr as Integer, offset as Integer returns Integer:
    Note: Add offset to pointer
    Note: Returns ptr + offset
    Let result be ptr plus offset
    Return result
End Process

Process called "pointer_subtract" takes ptr as Integer, offset as Integer returns Integer:
    Note: Subtract offset from pointer
    Note: Returns ptr - offset
    Let result be ptr minus offset
    Return result
End Process

Process called "pointer_difference" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Calculate difference between two pointers
    Note: Returns ptr1 - ptr2 (can be negative)
    Let result be ptr1 minus ptr2
    Return result
End Process

Note: ============================================================================
Note: Pointer Validation
Note: ============================================================================

Process called "pointer_is_null" takes ptr as Integer returns Integer:
    Note: Check if pointer is NULL (0)
    Note: Returns 1 if NULL, 0 otherwise

    If ptr is equal to 0:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_is_not_null" takes ptr as Integer returns Integer:
    Note: Check if pointer is not NULL
    Note: Returns 1 if not NULL, 0 if NULL

    If ptr is not equal to 0:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_is_aligned" takes ptr as Integer, alignment as Integer returns Integer:
    Note: Check if pointer is aligned to alignment boundary
    Note: alignment must be power of 2 (1, 2, 4, 8, 16, etc.)
    Note: Returns 1 if aligned, 0 if not aligned

    Let remainder be ptr modulo by alignment

    If remainder is equal to 0:
        Return 1
    End If

    Return 0
End Process

Note: ============================================================================
Note: Pointer Alignment Operations
Note: ============================================================================

Process called "pointer_align_up" takes ptr as Integer, alignment as Integer returns Integer:
    Note: Round pointer up to next alignment boundary
    Note: alignment must be power of 2
    Note: If already aligned, returns ptr unchanged

    Let remainder be ptr modulo by alignment

    If remainder is equal to 0:
        Return ptr  Note: Already aligned
    End If

    Let padding be alignment minus remainder
    Let result be ptr plus padding
    Return result
End Process

Process called "pointer_align_down" takes ptr as Integer, alignment as Integer returns Integer:
    Note: Round pointer down to previous alignment boundary
    Note: alignment must be power of 2
    Note: If already aligned, returns ptr unchanged

    Let remainder be ptr modulo by alignment
    Let result be ptr minus remainder
    Return result
End Process

Note: ============================================================================
Note: Pointer Comparison
Note: ============================================================================

Process called "pointer_equals" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Check if two pointers are equal
    Note: Returns 1 if equal, 0 otherwise

    If ptr1 is equal to ptr2:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_not_equals" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Check if two pointers are not equal
    Note: Returns 1 if not equal, 0 if equal

    If ptr1 is not equal to ptr2:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_less_than" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Check if ptr1 < ptr2
    Note: Returns 1 if less than, 0 otherwise

    If ptr1 is less than ptr2:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_greater_than" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Check if ptr1 > ptr2
    Note: Returns 1 if greater than, 0 otherwise

    If ptr1 is greater than ptr2:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_less_or_equal" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Check if ptr1 <= ptr2
    Note: Returns 1 if less than or equal, 0 otherwise

    If ptr1 is less than or equal to ptr2:
        Return 1
    End If

    Return 0
End Process

Process called "pointer_greater_or_equal" takes ptr1 as Integer, ptr2 as Integer returns Integer:
    Note: Check if ptr1 >= ptr2
    Note: Returns 1 if greater than or equal, 0 otherwise

    If ptr1 is greater than or equal to ptr2:
        Return 1
    End If

    Return 0
End Process

Note: ============================================================================
Note: NULL Pointer Constant
Note: ============================================================================

Process called "NULL" returns Integer:
    Note: Return NULL pointer constant (0)
    Return 0
End Process
