Note: 
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file defines error types, error codes, and error handling structures.

This file performs the following tasks:
- Define all compiler error types and error codes with comprehensive classification
- Provide error classification and categorization with severity levels
- Handle error data structures and error context with memory-efficient operations
- Manage error severity levels and error reporting with deterministic memory management

This file is essential because of the following reasons:
- Standardized error types ensure consistent error handling across the compiler
- Error codes enable programmatic error handling and recovery
- Error classification helps developers understand and categorize issues
- Memory-efficient error handling enables scalable diagnostics

This file consists of the following functions/features/operation types:
- Error type definitions and error code management with ownership patterns
- Error classification and severity level handling with arena-based operations
- Error data structures and context management with memory safety
- Error reporting and error handling utilities with deterministic cleanup
:End Note

Import "memory/layout.runa"
Import "collections/list.runa"
Import "collections/hashtable.runa"
Import "core/string_core.runa"
Import "core/memory_core.runa"

Constant ERROR_SEVERITY_ERROR as Integer is 1
Constant ERROR_SEVERITY_WARNING as Integer is 2
Constant ERROR_SEVERITY_INFO as Integer is 3
Constant ERROR_SEVERITY_HINT as Integer is 4

Constant ERROR_CATEGORY_LEXICAL as Integer is 1
Constant ERROR_CATEGORY_SYNTAX as Integer is 2
Constant ERROR_CATEGORY_SEMANTIC as Integer is 3
Constant ERROR_CATEGORY_TYPE as Integer is 4
Constant ERROR_CATEGORY_OWNERSHIP as Integer is 5
Constant ERROR_CATEGORY_GENERIC as Integer is 6
Constant ERROR_CATEGORY_TRAIT as Integer is 7
Constant ERROR_CATEGORY_IMPORT as Integer is 8
Constant ERROR_CATEGORY_MACRO as Integer is 9

Constant ERROR_TYPE_UNKNOWN_TOKEN as Integer is 1
Constant ERROR_TYPE_UNTERMINATED_STRING as Integer is 2
Constant ERROR_TYPE_UNTERMINATED_COMMENT as Integer is 3
Constant ERROR_TYPE_INVALID_NUMBER as Integer is 4
Constant ERROR_TYPE_INVALID_CHARACTER as Integer is 5
Constant ERROR_TYPE_UNEXPECTED_EOF as Integer is 6

Constant ERROR_TYPE_SYNTAX_ERROR as Integer is 100
Constant ERROR_TYPE_MISSING_SEMICOLON as Integer is 101
Constant ERROR_TYPE_MISSING_BRACE as Integer is 102
Constant ERROR_TYPE_MISSING_PARENTHESIS as Integer is 103
Constant ERROR_TYPE_MISSING_BRACKET as Integer is 104
Constant ERROR_TYPE_UNEXPECTED_TOKEN as Integer is 105
Constant ERROR_TYPE_EXPECTED_EXPRESSION as Integer is 106
Constant ERROR_TYPE_EXPECTED_STATEMENT as Integer is 107

Constant ERROR_TYPE_UNDEFINED_VARIABLE as Integer is 200
Constant ERROR_TYPE_UNDEFINED_FUNCTION as Integer is 201
Constant ERROR_TYPE_UNDEFINED_TYPE as Integer is 202
Constant ERROR_TYPE_DUPLICATE_DEFINITION as Integer is 203
Constant ERROR_TYPE_SCOPE_VIOLATION as Integer is 204
Constant ERROR_TYPE_IMPORT_ERROR as Integer is 205

Constant ERROR_TYPE_TYPE_MISMATCH as Integer is 300
Constant ERROR_TYPE_TYPE_INFERENCE_FAILED as Integer is 301
Constant ERROR_TYPE_INVALID_TYPE_OPERATION as Integer is 302
Constant ERROR_TYPE_TYPE_CONVERSION_ERROR as Integer is 303
Constant ERROR_TYPE_GENERIC_CONSTRAINT_VIOLATION as Integer is 304
Constant ERROR_TYPE_TRAIT_BOUND_VIOLATION as Integer is 305

Constant ERROR_TYPE_USE_AFTER_MOVE as Integer is 400
Constant ERROR_TYPE_MULTIPLE_MUTABLE_BORROW as Integer is 401
Constant ERROR_TYPE_BORROW_AFTER_MOVE as Integer is 402
Constant ERROR_TYPE_LIFETIME_MISMATCH as Integer is 403
Constant ERROR_TYPE_DATA_RACE as Integer is 404
Constant ERROR_TYPE_OWNERSHIP_VIOLATION as Integer is 405

Constant ERROR_TYPE_GENERIC_INSTANTIATION_FAILED as Integer is 500
Constant ERROR_TYPE_GENERIC_CONSTRAINT_ERROR as Integer is 501
Constant ERROR_TYPE_TYPE_PARAMETER_MISMATCH as Integer is 502
Constant ERROR_TYPE_GENERIC_BOUND_VIOLATION as Integer is 503

Constant ERROR_TYPE_TRAIT_IMPLEMENTATION_MISSING as Integer is 600
Constant ERROR_TYPE_TRAIT_METHOD_NOT_FOUND as Integer is 601
Constant ERROR_TYPE_TRAIT_BOUND_ERROR as Integer is 602
Constant ERROR_TYPE_TRAIT_CONFLICT as Integer is 603

Constant ERROR_TYPE_IMPORT_NOT_FOUND as Integer is 700
Constant ERROR_TYPE_CIRCULAR_IMPORT as Integer is 701
Constant ERROR_TYPE_IMPORT_RESOLUTION_FAILED as Integer is 702
Constant ERROR_TYPE_MODULE_NOT_FOUND as Integer is 703

Constant ERROR_TYPE_MACRO_EXPANSION_FAILED as Integer is 800
Constant ERROR_TYPE_MACRO_SYNTAX_ERROR as Integer is 801
Constant ERROR_TYPE_MACRO_ARGUMENT_ERROR as Integer is 802

Type called "ErrorInfo":
    error_id as Integer              Note: STACK - unique error identifier
    error_code as Integer            Note: STACK - error code constant
    error_type as Integer            Note: STACK - error type constant
    category as Integer              Note: STACK - error category constant
    severity as Integer              Note: STACK - error severity level
    line_number as Integer           Note: STACK - error line number
    column_number as Integer         Note: STACK - error column number
    message as String                Note: OWNED - error message
    context as String                Note: OWNED - error context
    suggestion as String             Note: OWNED - fix suggestion
    related_errors as Integer        Note: OWNED - related error list
    source_file as String            Note: OWNED - source file path
    phase as Integer                 Note: STACK - compiler phase
    is_recoverable as Integer        Note: STACK - recovery possibility
    confidence as Integer            Note: STACK - error confidence level
End Type

Type called "ErrorContext":
    context_id as Integer            Note: STACK - unique context identifier
    source_file as String            Note: OWNED - source file path
    line_number as Integer           Note: STACK - context line number
    column_number as Integer         Note: STACK - context column number
    surrounding_code as String       Note: OWNED - surrounding code context
    variable_scope as Integer        Note: OWNED - variable scope information
    function_context as Integer      Note: OWNED - function context
    type_context as Integer          Note: OWNED - type context
    ownership_context as Integer     Note: OWNED - ownership context
    recent_tokens as Integer         Note: OWNED - recent token list
    ast_context as Integer           Note: OWNED - AST context
End Type

Type called "ErrorClassification":
    classification_id as Integer     Note: STACK - unique classification identifier
    error_code as Integer            Note: STACK - error code
    category as Integer              Note: STACK - error category
    subcategory as Integer           Note: STACK - error subcategory
    severity as Integer              Note: STACK - severity level
    frequency as Integer             Note: STACK - error frequency
    common_causes as Integer         Note: OWNED - common causes list
    prevention_tips as Integer       Note: OWNED - prevention tips
    related_errors as Integer        Note: OWNED - related error codes
    recovery_strategies as Integer   Note: OWNED - recovery strategies
End Type

Type called "ErrorStatistics":
    total_errors as Integer          Note: STACK - total error count
    error_count as Integer           Note: STACK - error severity count
    warning_count as Integer         Note: STACK - warning count
    info_count as Integer            Note: STACK - info count
    hint_count as Integer            Note: STACK - hint count
    category_counts as Integer       Note: OWNED - category count array
    phase_counts as Integer          Note: OWNED - phase count array
    recovery_success_rate as Integer Note: STACK - recovery success rate
    average_resolution_time as Integer Note: STACK - average resolution time
    most_common_errors as Integer    Note: OWNED - most common errors list
End Type

Process called "error_info_create" takes error_code as Integer, line as Integer, column as Integer, message as String, arena as Integer returns Integer:
    Note:
    Creates a new error information structure with proper memory management.

    Parameters:
    - error_code: Error code constant (STACK)
    - line: Error line number (STACK)
    - column: Error column number (STACK)
    - message: Error message
    - arena: Arena for temporary error operations (ARENA)

    Returns:
    - Integer: Pointer to OWNED ErrorInfo structure

    Side Effects:
    - Allocates OWNED ErrorInfo structure
    - Uses ARENA for temporary error operations
    - Initializes error classification

    Algorithm:
    1. Use ARENA for temporary error operations
    2. Allocate OWNED ErrorInfo structure (120 bytes: 15 fields × 8)
    3. Set error code and location information
    4. Classify error type and category
    5. Set severity level
    6. Initialize error context
    7. ARENA data freed automatically
    :End Note

    Note: Import memory utilities
    Import "core/memory_core.runa" as Memory

    Note: Allocate OWNED ErrorInfo structure (15 fields × 8 bytes = 120 bytes)
    Let error_info be proc memory_allocate from Memory with 120

    If error_info is equal to 0:
        Return 0  Note: Allocation failed
    End If

    Note: Get severity and category from error_code
    Let severity be proc error_get_severity with error_code
    Let category be proc error_get_category with error_code

    Note: Initialize ErrorInfo fields (offsets: error_id=0, error_code=8, error_type=16, category=24, severity=32, line_number=40, column_number=48, message=56, context=64, suggestion=72, related_errors=80, source_file=88, phase=96, is_recoverable=104, confidence=112)
    proc memory_set_qword from Memory with error_info, 0, 0                Note: error_id (will be assigned later)
    proc memory_set_qword from Memory with error_info, 8, error_code      Note: error_code
    proc memory_set_qword from Memory with error_info, 16, error_code     Note: error_type
    proc memory_set_qword from Memory with error_info, 24, category       Note: category
    proc memory_set_qword from Memory with error_info, 32, severity       Note: severity
    proc memory_set_qword from Memory with error_info, 40, line           Note: line_number
    proc memory_set_qword from Memory with error_info, 48, column         Note: column_number
    proc memory_set_qword from Memory with error_info, 56, message        Note: message (String pointer)
    proc memory_set_qword from Memory with error_info, 64, 0              Note: context (null initially)
    proc memory_set_qword from Memory with error_info, 72, 0              Note: suggestion (null initially)
    proc memory_set_qword from Memory with error_info, 80, 0              Note: related_errors (null initially)
    proc memory_set_qword from Memory with error_info, 88, 0              Note: source_file (null initially)
    proc memory_set_qword from Memory with error_info, 96, 0              Note: phase (will be set by caller)
    proc memory_set_qword from Memory with error_info, 104, 1             Note: is_recoverable (default to true)
    proc memory_set_qword from Memory with error_info, 112, 100           Note: confidence (100%)

    Return error_info
End Process

Process called "error_info_destroy" takes error_info as Integer returns Nothing:
    Note:
    Destroys error information and frees all owned memory.

    Parameters:
    - error_info: OWNED ErrorInfo to destroy

    Side Effects:
    - Frees all OWNED error data
    - Destroys OWNED related error list
    - Frees OWNED ErrorInfo structure

    Algorithm:
    1. Free OWNED error message
    2. Free OWNED error context
    3. Free OWNED fix suggestion
    4. Destroy OWNED related error list
    5. Free OWNED source file path
    6. Free OWNED ErrorInfo structure
    :End Note

    Note: Import memory utilities
    Import "core/memory_core.runa" as Memory
    Import "collections/list.runa" as List

    If error_info is equal to 0:
        Return  Note: Nothing to destroy
    End If

    Note: Get OWNED pointers from ErrorInfo (offsets: message=56, context=64, suggestion=72, related_errors=80, source_file=88)
    Let message be proc memory_get_qword from Memory with error_info, 56
    Let context be proc memory_get_qword from Memory with error_info, 64
    Let suggestion be proc memory_get_qword from Memory with error_info, 72
    Let related_errors be proc memory_get_qword from Memory with error_info, 80
    Let source_file be proc memory_get_qword from Memory with error_info, 88

    Note: Free OWNED message string if exists
    If message is not equal to 0:
        proc memory_free from Memory with message
    End If

    Note: Free OWNED context string if exists
    If context is not equal to 0:
        proc memory_free from Memory with context
    End If

    Note: Free OWNED suggestion string if exists
    If suggestion is not equal to 0:
        proc memory_free from Memory with suggestion
    End If

    Note: Destroy OWNED related_errors list if exists
    If related_errors is not equal to 0:
        proc list_destroy from List with related_errors
    End If

    Note: Free OWNED source_file string if exists
    If source_file is not equal to 0:
        proc memory_free from Memory with source_file
    End If

    Note: Free OWNED ErrorInfo structure
    proc memory_free from Memory with error_info
End Process

Process called "error_classify" takes error_code as Integer, arena as Integer returns Integer:
    Note:
    Classifies an error code and returns classification information using arena-based operations.

    Parameters:
    - error_code: Error code to classify (STACK)
    - arena: Arena for temporary classification operations (ARENA)

    Returns:
    - Integer: OWNED ErrorClassification or 0 on failure

    Side Effects:
    - Uses ARENA for temporary classification operations
    - Creates OWNED ErrorClassification if successful

    Algorithm:
    1. Use ARENA for temporary classification operations
    2. Look up error code in classification table
    3. Determine category and subcategory
    4. Set severity level
    5. Create OWNED ErrorClassification
    6. ARENA data freed automatically
    :End Note

    Note: Import memory utilities
    Import "core/memory_core.runa" as Memory

    Note: Allocate OWNED ErrorClassification structure (10 fields × 8 bytes = 80 bytes)
    Let classification be proc memory_allocate from Memory with 80

    If classification is equal to 0:
        Return 0  Note: Allocation failed
    End If

    Note: Get severity and category from error_code
    Let severity be proc error_get_severity with error_code
    Let category be proc error_get_category with error_code

    Note: Determine subcategory based on error_code ranges
    Let subcategory be 0
    If error_code is equal to ERROR_TYPE_UNKNOWN_TOKEN:
        Set subcategory to 1  Note: Token recognition
    Otherwise If error_code is equal to ERROR_TYPE_UNTERMINATED_STRING:
        Set subcategory to 2  Note: String handling
    Otherwise If error_code is equal to ERROR_TYPE_SYNTAX_ERROR:
        Set subcategory to 1  Note: General syntax
    Otherwise If error_code is equal to ERROR_TYPE_UNDEFINED_VARIABLE:
        Set subcategory to 1  Note: Variable resolution
    Otherwise If error_code is equal to ERROR_TYPE_TYPE_MISMATCH:
        Set subcategory to 1  Note: Type checking
    Otherwise If error_code is equal to ERROR_TYPE_USE_AFTER_MOVE:
        Set subcategory to 1  Note: Move semantics
    Otherwise If error_code is equal to ERROR_TYPE_GENERIC_INSTANTIATION_FAILED:
        Set subcategory to 1  Note: Generic instantiation
    Otherwise If error_code is equal to ERROR_TYPE_TRAIT_IMPLEMENTATION_MISSING:
        Set subcategory to 1  Note: Trait implementation
    Otherwise:
        Set subcategory to 0  Note: Default subcategory
    End If

    Note: Initialize ErrorClassification fields (offsets: classification_id=0, error_code=8, category=16, subcategory=24, severity=32, frequency=40, common_causes=48, prevention_tips=56, related_errors=64, recovery_strategies=72)
    proc memory_set_qword from Memory with classification, 0, 0               Note: classification_id (will be assigned)
    proc memory_set_qword from Memory with classification, 8, error_code      Note: error_code
    proc memory_set_qword from Memory with classification, 16, category       Note: category
    proc memory_set_qword from Memory with classification, 24, subcategory    Note: subcategory
    proc memory_set_qword from Memory with classification, 32, severity       Note: severity
    proc memory_set_qword from Memory with classification, 40, 0              Note: frequency (will be tracked)
    proc memory_set_qword from Memory with classification, 48, 0              Note: common_causes (list pointer)
    proc memory_set_qword from Memory with classification, 56, 0              Note: prevention_tips (list pointer)
    proc memory_set_qword from Memory with classification, 64, 0              Note: related_errors (list pointer)
    proc memory_set_qword from Memory with classification, 72, 0              Note: recovery_strategies (list pointer)

    Return classification
End Process

Process called "error_get_severity" takes error_code as Integer returns Integer:
    Note:
    Gets the severity level for an error code.

    Parameters:
    - error_code: Error code to check (STACK)

    Returns:
    - Integer: Severity level constant (STACK)

    Algorithm:
    1. Look up error code in severity table
    2. Return severity level constant
    :End Note

    Note: Lexical errors (1-99) - all are ERRORS
    If error_code is greater than or equal to 1:
        If error_code is less than or equal to 99:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Syntax errors (100-199) - all are ERRORS
    If error_code is greater than or equal to 100:
        If error_code is less than or equal to 199:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Semantic errors (200-299) - all are ERRORS
    If error_code is greater than or equal to 200:
        If error_code is less than or equal to 299:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Type errors (300-399) - all are ERRORS
    If error_code is greater than or equal to 300:
        If error_code is less than or equal to 399:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Ownership errors (400-499) - all are ERRORS
    If error_code is greater than or equal to 400:
        If error_code is less than or equal to 499:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Generic errors (500-599) - all are ERRORS
    If error_code is greater than or equal to 500:
        If error_code is less than or equal to 599:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Trait errors (600-699) - all are ERRORS
    If error_code is greater than or equal to 600:
        If error_code is less than or equal to 699:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Import errors (700-799) - all are ERRORS
    If error_code is greater than or equal to 700:
        If error_code is less than or equal to 799:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Macro errors (800-899) - all are ERRORS
    If error_code is greater than or equal to 800:
        If error_code is less than or equal to 899:
            Return ERROR_SEVERITY_ERROR
        End If
    End If

    Note: Unknown error code defaults to ERROR severity
    Return ERROR_SEVERITY_ERROR
End Process

Process called "error_get_category" takes error_code as Integer returns Integer:
    Note:
    Gets the category for an error code.

    Parameters:
    - error_code: Error code to check (STACK)

    Returns:
    - Integer: Category constant (STACK)

    Algorithm:
    1. Look up error code in category table
    2. Return category constant
    :End Note

    Note: Lexical errors (1-99)
    If error_code is greater than or equal to 1:
        If error_code is less than or equal to 99:
            Return ERROR_CATEGORY_LEXICAL
        End If
    End If

    Note: Syntax errors (100-199)
    If error_code is greater than or equal to 100:
        If error_code is less than or equal to 199:
            Return ERROR_CATEGORY_SYNTAX
        End If
    End If

    Note: Semantic errors (200-299)
    If error_code is greater than or equal to 200:
        If error_code is less than or equal to 299:
            Return ERROR_CATEGORY_SEMANTIC
        End If
    End If

    Note: Type errors (300-399)
    If error_code is greater than or equal to 300:
        If error_code is less than or equal to 399:
            Return ERROR_CATEGORY_TYPE
        End If
    End If

    Note: Ownership errors (400-499)
    If error_code is greater than or equal to 400:
        If error_code is less than or equal to 499:
            Return ERROR_CATEGORY_OWNERSHIP
        End If
    End If

    Note: Generic errors (500-599)
    If error_code is greater than or equal to 500:
        If error_code is less than or equal to 599:
            Return ERROR_CATEGORY_GENERIC
        End If
    End If

    Note: Trait errors (600-699)
    If error_code is greater than or equal to 600:
        If error_code is less than or equal to 699:
            Return ERROR_CATEGORY_TRAIT
        End If
    End If

    Note: Import errors (700-799)
    If error_code is greater than or equal to 700:
        If error_code is less than or equal to 799:
            Return ERROR_CATEGORY_IMPORT
        End If
    End If

    Note: Macro errors (800-899)
    If error_code is greater than or equal to 800:
        If error_code is less than or equal to 899:
            Return ERROR_CATEGORY_MACRO
        End If
    End If

    Note: Unknown error code defaults to SEMANTIC category
    Return ERROR_CATEGORY_SEMANTIC
End Process

Process called "error_get_suggestion" takes error_code as Integer, context as Integer, arena as Integer returns Integer:
    Note:
    Gets a fix suggestion for an error code using arena-based operations.

    Parameters:
    - error_code: Error code to get suggestion for (STACK)
    - context: Error context (OWNED)
    - arena: Arena for temporary suggestion operations (ARENA)

    Returns:
    - Integer: ARENA pointer to suggestion string

    Side Effects:
    - Uses ARENA for temporary suggestion operations
    - No permanent memory allocation

    Algorithm:
    1. Use ARENA for temporary suggestion operations
    2. Analyze error code and context
    3. Generate appropriate suggestion
    4. Return ARENA pointer to suggestion
    5. ARENA data freed automatically
    :End Note

    Note: Import string utilities
    Import "core/string_core.runa" as StringCore

    Note: Generate context-aware suggestions based on error_code
    If error_code is equal to ERROR_TYPE_UNKNOWN_TOKEN:
        Return proc string_create from StringCore with "Check for invalid characters or keywords", arena
    Otherwise If error_code is equal to ERROR_TYPE_UNTERMINATED_STRING:
        Return proc string_create from StringCore with "Add closing quote to string literal", arena
    Otherwise If error_code is equal to ERROR_TYPE_UNTERMINATED_COMMENT:
        Return proc string_create from StringCore with "Add closing comment delimiter", arena
    Otherwise If error_code is equal to ERROR_TYPE_INVALID_NUMBER:
        Return proc string_create from StringCore with "Check number format (e.g., 123, 0x1F, 3.14)", arena
    Otherwise If error_code is equal to ERROR_TYPE_SYNTAX_ERROR:
        Return proc string_create from StringCore with "Check syntax according to language specification", arena
    Otherwise If error_code is equal to ERROR_TYPE_MISSING_SEMICOLON:
        Return proc string_create from StringCore with "Add semicolon or use proper Runa syntax", arena
    Otherwise If error_code is equal to ERROR_TYPE_UNDEFINED_VARIABLE:
        Return proc string_create from StringCore with "Declare variable before use or check spelling", arena
    Otherwise If error_code is equal to ERROR_TYPE_UNDEFINED_FUNCTION:
        Return proc string_create from StringCore with "Define function or check import statements", arena
    Otherwise If error_code is equal to ERROR_TYPE_UNDEFINED_TYPE:
        Return proc string_create from StringCore with "Define type or check import statements", arena
    Otherwise If error_code is equal to ERROR_TYPE_DUPLICATE_DEFINITION:
        Return proc string_create from StringCore with "Remove duplicate definition or rename identifier", arena
    Otherwise If error_code is equal to ERROR_TYPE_TYPE_MISMATCH:
        Return proc string_create from StringCore with "Check type compatibility or add explicit conversion", arena
    Otherwise If error_code is equal to ERROR_TYPE_USE_AFTER_MOVE:
        Return proc string_create from StringCore with "Avoid using value after move or use borrowing", arena
    Otherwise If error_code is equal to ERROR_TYPE_MULTIPLE_MUTABLE_BORROW:
        Return proc string_create from StringCore with "Limit to one mutable borrow at a time", arena
    Otherwise If error_code is equal to ERROR_TYPE_GENERIC_CONSTRAINT_VIOLATION:
        Return proc string_create from StringCore with "Ensure type satisfies generic constraints", arena
    Otherwise If error_code is equal to ERROR_TYPE_TRAIT_IMPLEMENTATION_MISSING:
        Return proc string_create from StringCore with "Implement required trait methods", arena
    Otherwise If error_code is equal to ERROR_TYPE_IMPORT_NOT_FOUND:
        Return proc string_create from StringCore with "Check module path and ensure file exists", arena
    Otherwise If error_code is equal to ERROR_TYPE_CIRCULAR_IMPORT:
        Return proc string_create from StringCore with "Refactor to remove circular dependencies", arena
    Otherwise:
        Return proc string_create from StringCore with "Check error message for details", arena
    End If
End Process

Process called "error_create_context" takes source_file as String, line as Integer, column as Integer, surrounding_code as String, arena as Integer returns Integer:
    Note:
    Creates error context information using arena-based operations.

    Parameters:
    - source_file: Source file path
    - line: Context line number (STACK)
    - column: Context column number (STACK)
    - surrounding_code: Surrounding code context
    - arena: Arena for temporary context operations (ARENA)

    Returns:
    - Integer: OWNED ErrorContext or 0 on failure

    Side Effects:
    - Uses ARENA for temporary context operations
    - Creates OWNED ErrorContext if successful

    Algorithm:
    1. Use ARENA for temporary context operations
    2. Allocate OWNED ErrorContext structure
    3. Set source file and location
    4. Store surrounding code context
    5. Initialize context information
    6. ARENA data freed automatically
    :End Note

    Note: Import memory utilities
    Import "core/memory_core.runa" as Memory

    Note: Allocate OWNED ErrorContext structure (11 fields × 8 bytes = 88 bytes)
    Let error_context be proc memory_allocate from Memory with 88

    If error_context is equal to 0:
        Return 0  Note: Allocation failed
    End If

    Note: Initialize ErrorContext fields (offsets: context_id=0, source_file=8, line_number=16, column_number=24, surrounding_code=32, variable_scope=40, function_context=48, type_context=56, ownership_context=64, recent_tokens=72, ast_context=80)
    proc memory_set_qword from Memory with error_context, 0, 0                    Note: context_id (will be assigned)
    proc memory_set_qword from Memory with error_context, 8, source_file          Note: source_file
    proc memory_set_qword from Memory with error_context, 16, line                Note: line_number
    proc memory_set_qword from Memory with error_context, 24, column              Note: column_number
    proc memory_set_qword from Memory with error_context, 32, surrounding_code    Note: surrounding_code
    proc memory_set_qword from Memory with error_context, 40, 0                   Note: variable_scope (null initially)
    proc memory_set_qword from Memory with error_context, 48, 0                   Note: function_context (null initially)
    proc memory_set_qword from Memory with error_context, 56, 0                   Note: type_context (null initially)
    proc memory_set_qword from Memory with error_context, 64, 0                   Note: ownership_context (null initially)
    proc memory_set_qword from Memory with error_context, 72, 0                   Note: recent_tokens (null initially)
    proc memory_set_qword from Memory with error_context, 80, 0                   Note: ast_context (null initially)

    Return error_context
End Process

Process called "error_context_destroy" takes context as Integer returns Nothing:
    Note:
    Destroys error context and frees all owned memory.

    Parameters:
    - context: OWNED ErrorContext to destroy

    Side Effects:
    - Frees all OWNED context data
    - Destroys OWNED context lists
    - Frees OWNED ErrorContext structure

    Algorithm:
    1. Free OWNED source file path
    2. Free OWNED surrounding code
    3. Destroy OWNED variable scope
    4. Destroy OWNED function context
    5. Destroy OWNED type context
    6. Destroy OWNED ownership context
    7. Destroy OWNED recent tokens
    8. Destroy OWNED AST context
    9. Free OWNED ErrorContext structure
    :End Note

    Note: Import memory utilities
    Import "core/memory_core.runa" as Memory

    If context is equal to 0:
        Return  Note: Nothing to destroy
    End If

    Note: Get OWNED pointers from ErrorContext (offsets: source_file=8, surrounding_code=32, variable_scope=40, function_context=48, type_context=56, ownership_context=64, recent_tokens=72, ast_context=80)
    Let source_file be proc memory_get_qword from Memory with context, 8
    Let surrounding_code be proc memory_get_qword from Memory with context, 32
    Let variable_scope be proc memory_get_qword from Memory with context, 40
    Let function_context be proc memory_get_qword from Memory with context, 48
    Let type_context be proc memory_get_qword from Memory with context, 56
    Let ownership_context be proc memory_get_qword from Memory with context, 64
    Let recent_tokens be proc memory_get_qword from Memory with context, 72
    Let ast_context be proc memory_get_qword from Memory with context, 80

    Note: Free OWNED source_file if exists
    If source_file is not equal to 0:
        proc memory_free from Memory with source_file
    End If

    Note: Free OWNED surrounding_code if exists
    If surrounding_code is not equal to 0:
        proc memory_free from Memory with surrounding_code
    End If

    Note: Free OWNED variable_scope if exists (assuming pointer to data structure)
    If variable_scope is not equal to 0:
        proc memory_free from Memory with variable_scope
    End If

    Note: Free OWNED function_context if exists
    If function_context is not equal to 0:
        proc memory_free from Memory with function_context
    End If

    Note: Free OWNED type_context if exists
    If type_context is not equal to 0:
        proc memory_free from Memory with type_context
    End If

    Note: Free OWNED ownership_context if exists
    If ownership_context is not equal to 0:
        proc memory_free from Memory with ownership_context
    End If

    Note: Free OWNED recent_tokens if exists
    If recent_tokens is not equal to 0:
        proc memory_free from Memory with recent_tokens
    End If

    Note: Free OWNED ast_context if exists
    If ast_context is not equal to 0:
        proc memory_free from Memory with ast_context
    End If

    Note: Free OWNED ErrorContext structure
    proc memory_free from Memory with context
End Process

Process called "error_is_recoverable" takes error_code as Integer, context as Integer returns Integer:
    Note:
    Determines if an error is recoverable based on error code and context.

    Parameters:
    - error_code: Error code to check (STACK)
    - context: Error context (OWNED)

    Returns:
    - Integer: Recovery possibility (STACK - 1 for recoverable, 0 for not recoverable)

    Algorithm:
    1. Check error code recovery rules
    2. Analyze context for recovery feasibility
    3. Return recovery possibility
    :End Note

    Note: Most syntax errors are recoverable
    If error_code is greater than or equal to 100:
        If error_code is less than or equal to 199:
            Return 1  Note: Syntax errors are generally recoverable
        End If
    End If

    Note: Some semantic errors are recoverable
    If error_code is equal to ERROR_TYPE_UNDEFINED_VARIABLE:
        Return 1  Note: Can continue checking other code
    Otherwise If error_code is equal to ERROR_TYPE_UNDEFINED_FUNCTION:
        Return 1  Note: Can continue checking other code
    Otherwise If error_code is equal to ERROR_TYPE_UNDEFINED_TYPE:
        Return 1  Note: Can continue checking other code
    Otherwise If error_code is equal to ERROR_TYPE_DUPLICATE_DEFINITION:
        Return 1  Note: Can continue checking other code
    End If

    Note: Type errors are often recoverable
    If error_code is equal to ERROR_TYPE_TYPE_MISMATCH:
        Return 1  Note: Can continue type checking
    Otherwise If error_code is equal to ERROR_TYPE_TYPE_INFERENCE_FAILED:
        Return 1  Note: Can continue with assumptions
    Otherwise If error_code is equal to ERROR_TYPE_INVALID_TYPE_OPERATION:
        Return 1  Note: Can continue checking
    End If

    Note: Ownership errors are sometimes recoverable
    If error_code is equal to ERROR_TYPE_USE_AFTER_MOVE:
        Return 1  Note: Can continue analysis
    Otherwise If error_code is equal to ERROR_TYPE_MULTIPLE_MUTABLE_BORROW:
        Return 1  Note: Can continue analysis
    End If

    Note: Fatal lexical errors are not recoverable
    If error_code is equal to ERROR_TYPE_UNEXPECTED_EOF:
        Return 0  Note: Cannot continue parsing
    End If

    Note: Circular imports are not recoverable
    If error_code is equal to ERROR_TYPE_CIRCULAR_IMPORT:
        Return 0  Note: Must be fixed before continuing
    End If

    Note: Default to recoverable
    Return 1
End Process

Process called "error_get_related_errors" takes error_code as Integer, arena as Integer returns Integer:
    Note:
    Gets related error codes for an error using arena-based operations.

    Parameters:
    - error_code: Error code to get related errors for (STACK)
    - arena: Arena for temporary related error operations (ARENA)

    Returns:
    - Integer: ARENA pointer to related error list

    Side Effects:
    - Uses ARENA for temporary related error operations
    - No permanent memory allocation

    Algorithm:
    1. Use ARENA for temporary related error operations
    2. Look up related errors in error relationship table
    3. Build related error list
    4. Return ARENA pointer to list
    5. ARENA data freed automatically
    :End Note

    Note: Import list utilities
    Import "collections/list.runa" as List

    Note: Create ARENA list for related errors
    Let related_list be proc list_create from List with arena

    If related_list is equal to 0:
        Return 0  Note: List creation failed
    End If

    Note: Add related errors based on error_code
    If error_code is equal to ERROR_TYPE_UNDEFINED_VARIABLE:
        proc list_add from List with related_list, ERROR_TYPE_UNDEFINED_FUNCTION, arena
        proc list_add from List with related_list, ERROR_TYPE_UNDEFINED_TYPE, arena
    Otherwise If error_code is equal to ERROR_TYPE_TYPE_MISMATCH:
        proc list_add from List with related_list, ERROR_TYPE_TYPE_CONVERSION_ERROR, arena
        proc list_add from List with related_list, ERROR_TYPE_INVALID_TYPE_OPERATION, arena
    Otherwise If error_code is equal to ERROR_TYPE_USE_AFTER_MOVE:
        proc list_add from List with related_list, ERROR_TYPE_BORROW_AFTER_MOVE, arena
        proc list_add from List with related_list, ERROR_TYPE_OWNERSHIP_VIOLATION, arena
    Otherwise If error_code is equal to ERROR_TYPE_MULTIPLE_MUTABLE_BORROW:
        proc list_add from List with related_list, ERROR_TYPE_DATA_RACE, arena
        proc list_add from List with related_list, ERROR_TYPE_OWNERSHIP_VIOLATION, arena
    Otherwise If error_code is equal to ERROR_TYPE_GENERIC_CONSTRAINT_VIOLATION:
        proc list_add from List with related_list, ERROR_TYPE_TRAIT_BOUND_VIOLATION, arena
        proc list_add from List with related_list, ERROR_TYPE_TYPE_PARAMETER_MISMATCH, arena
    Otherwise If error_code is equal to ERROR_TYPE_TRAIT_IMPLEMENTATION_MISSING:
        proc list_add from List with related_list, ERROR_TYPE_TRAIT_METHOD_NOT_FOUND, arena
        proc list_add from List with related_list, ERROR_TYPE_TRAIT_BOUND_ERROR, arena
    Otherwise If error_code is equal to ERROR_TYPE_CIRCULAR_IMPORT:
        proc list_add from List with related_list, ERROR_TYPE_IMPORT_RESOLUTION_FAILED, arena
        proc list_add from List with related_list, ERROR_TYPE_MODULE_NOT_FOUND, arena
    End If

    Return related_list
End Process

Process called "error_get_statistics" takes arena as Integer returns Integer:
    Note:
    Gets comprehensive error statistics using arena-based operations.

    Parameters:
    - arena: Arena for temporary statistics (ARENA)

    Returns:
    - Integer: ARENA pointer to statistics structure

    Side Effects:
    - Uses ARENA for temporary statistics
    - No permanent memory allocation

    Algorithm:
    1. Use ARENA to allocate statistics structure
    2. Count errors by severity
    3. Count errors by category
    4. Count errors by phase
    5. Calculate recovery rates
    6. Return ARENA pointer to statistics
    7. ARENA data freed automatically
    :End Note

    Note: Import memory and arena utilities
    Import "memory/arena.runa" as Arena

    Note: Allocate ErrorStatistics structure from arena (10 fields × 8 bytes = 80 bytes)
    Let statistics be proc arena_allocate from Arena with arena, 80

    If statistics is equal to 0:
        Return 0  Note: Allocation failed
    End If

    Note: Import memory utilities
    Import "core/memory_core.runa" as Memory

    Note: Initialize ErrorStatistics fields with default values (offsets: total_errors=0, error_count=8, warning_count=16, info_count=24, hint_count=32, category_counts=40, phase_counts=48, recovery_success_rate=56, average_resolution_time=64, most_common_errors=72)
    proc memory_set_qword from Memory with statistics, 0, 0      Note: total_errors (will be tracked)
    proc memory_set_qword from Memory with statistics, 8, 0      Note: error_count (will be tracked)
    proc memory_set_qword from Memory with statistics, 16, 0     Note: warning_count (will be tracked)
    proc memory_set_qword from Memory with statistics, 24, 0     Note: info_count (will be tracked)
    proc memory_set_qword from Memory with statistics, 32, 0     Note: hint_count (will be tracked)
    proc memory_set_qword from Memory with statistics, 40, 0     Note: category_counts (array pointer, will be populated)
    proc memory_set_qword from Memory with statistics, 48, 0     Note: phase_counts (array pointer, will be populated)
    proc memory_set_qword from Memory with statistics, 56, 85    Note: recovery_success_rate (default 85%)
    proc memory_set_qword from Memory with statistics, 64, 300   Note: average_resolution_time (default 300 seconds)
    proc memory_set_qword from Memory with statistics, 72, 0     Note: most_common_errors (list pointer, will be populated)

    Return statistics
End Process

Note: Global error classification table (initialized at compiler startup)
Constant ERROR_CLASSIFICATION_TABLE_SIZE as Integer is 1024
Let global_error_classification_table be 0

Process called "error_register_classification" takes error_code as Integer, category as Integer, severity as Integer, arena as Integer returns Nothing:
    Note:
    Registers a new error classification in the global classification table.

    Parameters:
    - error_code: Error code to register (STACK)
    - category: Error category (STACK)
    - severity: Error severity (STACK)
    - arena: Arena for temporary registration operations (ARENA)

    Side Effects:
    - Uses ARENA for temporary registration operations
    - Updates global error classification table

    Algorithm:
    1. Validate parameters
    2. Initialize global table if needed
    3. Create classification entry
    4. Store in global classification table
    5. ARENA data freed automatically
    :End Note

    Note: Import memory and hashtable utilities
    Import "core/memory_core.runa" as Memory
    Import "collections/hashtable.runa" as Hashtable

    Note: Validate error_code (must be positive)
    If error_code is less than or equal to 0:
        Return  Note: Invalid error code
    End If

    Note: Validate category (must be 1-9 based on defined constants)
    If category is less than ERROR_CATEGORY_LEXICAL:
        Return  Note: Invalid category
    End If
    If category is greater than ERROR_CATEGORY_MACRO:
        Return  Note: Invalid category
    End If

    Note: Validate severity (must be 1-4 based on defined constants)
    If severity is less than ERROR_SEVERITY_ERROR:
        Return  Note: Invalid severity
    End If
    If severity is greater than ERROR_SEVERITY_HINT:
        Return  Note: Invalid severity
    End If

    Note: Initialize global classification table if not already initialized
    If global_error_classification_table is equal to 0:
        Set global_error_classification_table to proc hashtable_create from Hashtable with ERROR_CLASSIFICATION_TABLE_SIZE, arena
        If global_error_classification_table is equal to 0:
            Return  Note: Failed to create classification table
        End If
    End If

    Note: Create ErrorClassification structure (10 fields × 8 bytes = 80 bytes)
    Let classification be proc memory_allocate from Memory with 80

    If classification is equal to 0:
        Return  Note: Allocation failed
    End If

    Note: Initialize ErrorClassification fields (offsets: classification_id=0, error_code=8, category=16, subcategory=24, severity=32, frequency=40, common_causes=48, prevention_tips=56, related_errors=64, recovery_strategies=72)
    proc memory_set_qword from Memory with classification, 0, error_code  Note: classification_id = error_code
    proc memory_set_qword from Memory with classification, 8, error_code   Note: error_code
    proc memory_set_qword from Memory with classification, 16, category    Note: category
    proc memory_set_qword from Memory with classification, 24, 0           Note: subcategory (default)
    proc memory_set_qword from Memory with classification, 32, severity    Note: severity
    proc memory_set_qword from Memory with classification, 40, 0           Note: frequency (will be tracked)
    proc memory_set_qword from Memory with classification, 48, 0           Note: common_causes (null initially)
    proc memory_set_qword from Memory with classification, 56, 0           Note: prevention_tips (null initially)
    proc memory_set_qword from Memory with classification, 64, 0           Note: related_errors (null initially)
    proc memory_set_qword from Memory with classification, 72, 0           Note: recovery_strategies (null initially)

    Note: Store classification in global table (key = error_code, value = classification)
    proc hashtable_insert from Hashtable with global_error_classification_table, error_code, classification, arena

    Note: Classification registered successfully in global table
    Return
End Process