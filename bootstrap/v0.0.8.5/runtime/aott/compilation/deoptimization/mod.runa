Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file defines the data structures that represent the "escape plan" for deoptimization.

DEOPTIMIZATION METADATA GENERATION - AOTT Compilation Producer
- Process deoptimization metadata creation and management for AOTT compilation system
- Handle state mapping between optimized machine state and logical Runa state
- Manage deoptimization metadata builder for optimization passes
- Process deoptimization metadata validation and optimization for AOTT performance
- Handle integration with AOTT compilation phases for deoptimization metadata generation

This file is essential because of the following reasons:
- Deoptimization metadata enables comprehensive speculation failure handling and safe deoptimization
- Proper deoptimization metadata ensures correct program execution during optimization failures
- Deoptimization metadata support enables Runa AOTT compilation for advanced speculative optimization workflows

This file consists of the following functions/features/operation types:
- Deoptimization metadata structure definition and management
- State mapping between optimized and logical execution states
- Deoptimization metadata builder for optimization passes
- Deoptimization metadata validation and optimization
- Integration with AOTT compilation phases for metadata generation

Dependencies:
- Imports state_mapper.runa for state mapping operations
- Imports arena_utils.runa for arena-based metadata allocation
- Imports owned_utils.runa for owned metadata management
:End Note

Import "compiler/internal/arena_utils.runa" as ArenaUtils
Import "compiler/internal/owned_utils.runa" as OwnedUtils
Import "compiler/internal/memory_safety.runa" as MemorySafety

Note: ============================================================================
Note: Deoptimization Metadata Structures
Note: ============================================================================

Type called "DeoptMetadata":
    bailout_point as Integer    Note: Original source location or IR instruction index to bail out to
    state_mappings as Integer   Note: Pointer to list of StateMapping objects
    mapping_count as Integer    Note: Number of state mappings
    guard_location as Integer   Note: Location of the failing guard
    optimization_tier as Integer Note: Tier from which we're deoptimizing
    target_tier as Integer      Note: Tier to which we're deoptimizing
    is_valid as Integer         Note: Boolean: 1 if metadata is valid
    arena as Integer           Note: Pointer to arena for allocation
    is_owned as Integer         Note: Boolean: 1 if owned, 0 if arena-allocated

Type called "StateMapping":
    variable_name as Integer    Note: Pointer to logical variable name
    variable_type as Integer    Note: Type of the variable
    physical_location as Integer Note: Physical location in optimized code
    location_type as Integer    Note: Type of location (REGISTER, STACK, CONSTANT)
    register_number as Integer  Note: CPU register number (if in register)
    stack_offset as Integer     Note: Stack offset (if on stack)
    constant_value as Integer   Note: Constant value (if constant)
    is_live as Integer          Note: Boolean: 1 if variable is live
    next as Integer            Note: Pointer to next state mapping

Type called "DeoptMetadataBuilder":
    metadata as Integer         Note: Pointer to DeoptMetadata being built
    current_mapping as Integer  Note: Pointer to current state mapping
    optimization_pass as Integer Note: Current optimization pass
    is_building as Integer      Note: Boolean: 1 if currently building
    arena as Integer           Note: Pointer to arena for allocation
    is_owned as Integer         Note: Boolean: 1 if owned, 0 if arena-allocated

Note: ============================================================================
Note: Deoptimization Metadata Constants
Note: ============================================================================

Define constant LOCATION_TYPE_REGISTER as 0
Define constant LOCATION_TYPE_STACK as 1
Define constant LOCATION_TYPE_CONSTANT as 2
Define constant LOCATION_TYPE_MEMORY as 3

Define constant OPTIMIZATION_TIER_BYTECODE as 0
Define constant OPTIMIZATION_TIER_LIGHTNING as 1
Define constant OPTIMIZATION_TIER_NATIVE as 2
Define constant OPTIMIZATION_TIER_OPTIMIZED as 3
Define constant OPTIMIZATION_TIER_SPECULATIVE as 4

Define constant DEOPT_METADATA_SUCCESS as 0
Define constant DEOPT_METADATA_FAILED as -1
Define constant DEOPT_METADATA_INVALID as -2
Define constant DEOPT_METADATA_MEMORY_ERROR as -3

Note: ============================================================================
Note: Deoptimization Metadata Creation
Note: ============================================================================

Process called "deopt_metadata_create" takes bailout_point as Integer, guard_location as Integer, arena as Integer returns Integer:
    Note: Create new deoptimization metadata
    Note: Returns pointer to DeoptMetadata structure
    Note: Initializes metadata with default settings
End Process

Process called "deopt_metadata_destroy" takes metadata as Integer returns Nothing:
    Note: Destroy deoptimization metadata
    Note: Frees all metadata data
    Note: Validates memory safety before destruction
End Process

Process called "deopt_metadata_validate" takes metadata as Integer returns Integer:
    Note: Validate deoptimization metadata
    Note: Returns 1 if valid, 0 if invalid
    Note: Checks metadata integrity and consistency
End Process

Process called "deopt_metadata_clone" takes source_metadata as Integer returns Integer:
    Note: Create copy of deoptimization metadata
    Note: Returns pointer to new DeoptMetadata structure
    Note: Copies all metadata data and settings
End Process

Note: ============================================================================
Note: State Mapping Operations
Note: ============================================================================

Process called "state_mapping_create" takes variable_name as Integer, variable_type as Integer, arena as Integer returns Integer:
    Note: Create new state mapping
    Note: Returns pointer to StateMapping structure
    Note: Initializes mapping with default settings
End Process

Process called "state_mapping_destroy" takes mapping as Integer returns Nothing:
    Note: Destroy state mapping
    Note: Frees all mapping data
    Note: Validates memory safety before destruction
End Process

Process called "state_mapping_set_register" takes mapping as Integer, register_number as Integer returns Integer:
    Note: Set variable location to register
    Note: Returns 1 if successful, 0 if failed
    Note: Updates mapping to register location
End Process

Process called "state_mapping_set_stack" takes mapping as Integer, stack_offset as Integer returns Integer:
    Note: Set variable location to stack
    Note: Returns 1 if successful, 0 if failed
    Note: Updates mapping to stack location
End Process

Process called "state_mapping_set_constant" takes mapping as Integer, constant_value as Integer returns Integer:
    Note: Set variable location to constant
    Note: Returns 1 if successful, 0 if failed
    Note: Updates mapping to constant location
End Process

Process called "state_mapping_set_memory" takes mapping as Integer, memory_address as Integer returns Integer:
    Note: Set variable location to memory
    Note: Returns 1 if successful, 0 if failed
    Note: Updates mapping to memory location
End Process

Note: ============================================================================
Note: Deoptimization Metadata Builder
Note: ============================================================================

Process called "deopt_metadata_builder_create" takes arena as Integer returns Integer:
    Note: Create new deoptimization metadata builder
    Note: Returns pointer to DeoptMetadataBuilder structure
    Note: Initializes builder with default settings
End Process

Process called "deopt_metadata_builder_destroy" takes builder as Integer returns Nothing:
    Note: Destroy deoptimization metadata builder
    Note: Frees all builder data
    Note: Validates memory safety before destruction
End Process

Process called "deopt_metadata_builder_start" takes builder as Integer, bailout_point as Integer, guard_location as Integer returns Integer:
    Note: Start building deoptimization metadata
    Note: Returns 1 if successful, 0 if failed
    Note: Initializes metadata building process
End Process

Process called "deopt_metadata_builder_add_mapping" takes builder as Integer, mapping as Integer returns Integer:
    Note: Add state mapping to metadata
    Note: Returns 1 if successful, 0 if failed
    Note: Adds mapping to current metadata
End Process

Process called "deopt_metadata_builder_finish" takes builder as Integer returns Integer:
    Note: Finish building deoptimization metadata
    Note: Returns pointer to completed DeoptMetadata structure
    Note: Finalizes metadata building process
End Process

Process called "deopt_metadata_builder_reset" takes builder as Integer returns Integer:
    Note: Reset deoptimization metadata builder
    Note: Returns 1 if successful, 0 if failed
    Note: Resets builder to initial state
End Process

Note: ============================================================================
Note: Deoptimization Metadata Query Operations
Note: ============================================================================

Process called "deopt_metadata_get_bailout_point" takes metadata as Integer returns Integer:
    Note: Get bailout point from metadata
    Note: Returns bailout point
End Process

Process called "deopt_metadata_get_state_mappings" takes metadata as Integer returns Integer:
    Note: Get state mappings from metadata
    Note: Returns pointer to list of state mappings
End Process

Process called "deopt_metadata_get_mapping_count" takes metadata as Integer returns Integer:
    Note: Get number of state mappings
    Note: Returns mapping count
End Process

Process called "deopt_metadata_get_guard_location" takes metadata as Integer returns Integer:
    Note: Get guard location from metadata
    Note: Returns guard location
End Process

Process called "deopt_metadata_get_optimization_tier" takes metadata as Integer returns Integer:
    Note: Get optimization tier from metadata
    Note: Returns optimization tier
End Process

Process called "deopt_metadata_get_target_tier" takes metadata as Integer returns Integer:
    Note: Get target tier from metadata
    Note: Returns target tier
End Process

Process called "deopt_metadata_is_valid" takes metadata as Integer returns Integer:
    Note: Check if metadata is valid
    Note: Returns 1 if valid, 0 if invalid
End Process

Note: ============================================================================
Note: Deoptimization Metadata Optimization
Note: ============================================================================

Process called "deopt_metadata_optimize" takes metadata as Integer returns Integer:
    Note: Optimize deoptimization metadata
    Note: Returns 1 if successful, 0 if failed
    Note: Applies metadata optimizations
End Process

Process called "deopt_metadata_compress" takes metadata as Integer returns Integer:
    Note: Compress deoptimization metadata
    Note: Returns 1 if successful, 0 if failed
    Note: Reduces metadata size
End Process

Process called "deopt_metadata_validate_mappings" takes metadata as Integer returns Integer:
    Note: Validate state mappings in metadata
    Note: Returns 1 if valid, 0 if invalid
    Note: Checks mapping consistency
End Process

Process called "deopt_metadata_export" takes metadata as Integer, filename as Integer returns Integer:
    Note: Export deoptimization metadata to file
    Note: Returns 1 if successful, 0 if failed
    Note: Saves metadata to file
End Process

Process called "deopt_metadata_import" takes filename as Integer returns Integer:
    Note: Import deoptimization metadata from file
    Note: Returns pointer to DeoptMetadata structure
    Note: Loads metadata from file
End Process

Note: TODO - Implement deoptimization metadata generation functionality
