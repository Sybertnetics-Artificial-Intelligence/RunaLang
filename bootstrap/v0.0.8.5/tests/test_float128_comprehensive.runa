Note: Comprehensive Float128 test for v0.0.8.5 production compiler
Note: Tests all implemented softfloat operations with known values

Process called "print_test_header" takes name_ptr as Integer:
    print_string("=== ")
    print_string(name_ptr)
    print_string(" ===")
    print_newline()
End Process

Process called "print_pass":
    print_string("  ✓ PASS")
    print_newline()
End Process

Process called "print_fail":
    print_string("  ✗ FAIL")
    print_newline()
End Process

Process called "float128_to_double_approx" takes f128_ptr as Integer returns Float64:
    Note: Extract components for approximate conversion to Float64
    Let word0 be memory_get_int64(f128_ptr, 0)
    Let word1 be memory_get_int64(f128_ptr, 8)

    Note: Extract sign (bit 63 of word0)
    Let sign be right_shift(word0, 63)

    Note: Extract exponent (bits 62-48 of word0, biased by 16383)
    Let exp_mask be 9223372036854775807
    Let exp_bits be bitwise_and(word0, exp_mask)
    Set exp_bits to right_shift(exp_bits, 48)

    Note: Check for special values
    If exp_bits is equal to 32767:
        Note: Infinity or NaN
        If word1 is equal to 0:
            If sign is equal to 1:
                Return -1.0e308
            Otherwise:
                Return 1.0e308
            End If
        Otherwise:
            Return 0.0  Note: NaN representation
        End If
    End If

    If exp_bits is equal to 0:
        If word1 is equal to 0:
            If sign is equal to 1:
                Return -0.0
            Otherwise:
                Return 0.0
            End If
        End If
    End If

    Note: For general values, approximate mantissa contribution
    Let unbiased_exp be exp_bits minus 16383
    Let power be float64_pow(2.0, int_to_float64(unbiased_exp))

    Note: Extract mantissa high bits (top 52 bits of 112)
    Let mant_mask be 281474976710655
    Let mant_high_48 be bitwise_and(word0, mant_mask)
    Let mant_frac be int_to_float64(mant_high_48)
    Set mant_frac to mant_frac / 281474976710656.0

    Let result be power multiplied by (1.0 plus mant_frac)

    If sign is equal to 1:
        Set result to 0.0 minus result
    End If

    Return result
End Process

Process called "test_float128_constants":
    print_test_header("Float128 Constants")

    Note: Test creating zero
    Let zero be allocate(16)
    float128_from_int64(0, zero)

    If float128_is_zero(zero) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    deallocate(zero)

    Note: Test creating one
    Let one be allocate(16)
    float128_from_int64(1, one)

    If float128_is_zero(one) is equal to 0:
        print_pass()
    Otherwise:
        print_fail()
    End If

    deallocate(one)

    Note: Test creating negative values
    Let neg_five be allocate(16)
    float128_from_int64(-5, neg_five)

    Let approx be float128_to_double_approx(neg_five)
    If approx is less than -4.5:
        If approx is greater than -5.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(neg_five)
End Process

Process called "test_float128_addition":
    print_test_header("Float128 Addition")

    Note: Test 2 + 3 = 5
    Let a be allocate(16)
    Let b be allocate(16)
    Let result be allocate(16)

    float128_from_int64(2, a)
    float128_from_int64(3, b)
    float128_add(a, b, result)

    Let approx be float128_to_double_approx(result)
    If approx is greater than 4.5:
        If approx is less than 5.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    Note: Test 100 + (-50) = 50
    float128_from_int64(100, a)
    float128_from_int64(-50, b)
    float128_add(a, b, result)

    Set approx to float128_to_double_approx(result)
    If approx is greater than 49.5:
        If approx is less than 50.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(b)
    deallocate(result)
End Process

Process called "test_float128_subtraction":
    print_test_header("Float128 Subtraction")

    Note: Test 10 - 3 = 7
    Let a be allocate(16)
    Let b be allocate(16)
    Let result be allocate(16)

    float128_from_int64(10, a)
    float128_from_int64(3, b)
    float128_subtract(a, b, result)

    Let approx be float128_to_double_approx(result)
    If approx is greater than 6.5:
        If approx is less than 7.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    Note: Test 5 - 10 = -5
    float128_from_int64(5, a)
    float128_from_int64(10, b)
    float128_subtract(a, b, result)

    Set approx to float128_to_double_approx(result)
    If approx is less than -4.5:
        If approx is greater than -5.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(b)
    deallocate(result)
End Process

Process called "test_float128_multiplication":
    print_test_header("Float128 Multiplication")

    Note: Test 6 * 7 = 42
    Let a be allocate(16)
    Let b be allocate(16)
    Let result be allocate(16)

    float128_from_int64(6, a)
    float128_from_int64(7, b)
    float128_multiply(a, b, result)

    Let approx be float128_to_double_approx(result)
    If approx is greater than 41.5:
        If approx is less than 42.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    Note: Test 8 * (-4) = -32
    float128_from_int64(8, a)
    float128_from_int64(-4, b)
    float128_multiply(a, b, result)

    Set approx to float128_to_double_approx(result)
    If approx is less than -31.5:
        If approx is greater than -32.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(b)
    deallocate(result)
End Process

Process called "test_float128_division":
    print_test_header("Float128 Division")

    Note: Test 100 / 4 = 25
    Let a be allocate(16)
    Let b be allocate(16)
    Let result be allocate(16)

    float128_from_int64(100, a)
    float128_from_int64(4, b)
    float128_divide(a, b, result)

    Let approx be float128_to_double_approx(result)
    If approx is greater than 24.5:
        If approx is less than 25.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    Note: Test 50 / 8 = 6.25
    float128_from_int64(50, a)
    float128_from_int64(8, b)
    float128_divide(a, b, result)

    Set approx to float128_to_double_approx(result)
    If approx is greater than 6.0:
        If approx is less than 6.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(b)
    deallocate(result)
End Process

Process called "test_float128_sqrt":
    print_test_header("Float128 Square Root")

    Note: Test sqrt(64) = 8
    Let a be allocate(16)
    Let result be allocate(16)

    float128_from_int64(64, a)
    float128_sqrt(a, result)

    Let approx be float128_to_double_approx(result)
    If approx is greater than 7.5:
        If approx is less than 8.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    Note: Test sqrt(100) = 10
    float128_from_int64(100, a)
    float128_sqrt(a, result)

    Set approx to float128_to_double_approx(result)
    If approx is greater than 9.5:
        If approx is less than 10.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(result)
End Process

Process called "test_float128_comparisons":
    print_test_header("Float128 Comparisons")

    Let a be allocate(16)
    Let b be allocate(16)

    Note: Test 5 < 10
    float128_from_int64(5, a)
    float128_from_int64(10, b)

    If float128_less_than(a, b) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test 10 > 5
    If float128_greater_than(b, a) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test 5 == 5
    float128_from_int64(5, b)
    If float128_equal(a, b) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test 5 <= 5
    If float128_less_than_or_equal(a, b) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test 5 >= 5
    If float128_greater_than_or_equal(a, b) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test 5 != 10
    float128_from_int64(10, b)
    If float128_not_equal(a, b) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(b)
End Process

Process called "test_float128_special_values":
    print_test_header("Float128 Special Values")

    Let zero be allocate(16)
    Let inf be allocate(16)
    Let nan be allocate(16)

    Note: Test zero detection
    float128_from_int64(0, zero)
    If float128_is_zero(zero) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test infinity creation
    memory_set_int64(inf, 0, 9223090561878065152)
    memory_set_int64(inf, 8, 0)

    If float128_is_infinity(inf) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Test NaN creation
    memory_set_int64(nan, 0, 9223090561878065152)
    memory_set_int64(nan, 8, 1)

    If float128_is_nan(nan) is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    deallocate(zero)
    deallocate(inf)
    deallocate(nan)
End Process

Process called "test_float128_rounding_modes":
    print_test_header("Float128 Rounding Modes")

    Note: Test rounding mode setting and getting
    float128_set_rounding_mode(0)
    If float128_get_rounding_mode() is equal to 0:
        print_pass()
    Otherwise:
        print_fail()
    End If

    float128_set_rounding_mode(1)
    If float128_get_rounding_mode() is equal to 1:
        print_pass()
    Otherwise:
        print_fail()
    End If

    float128_set_rounding_mode(2)
    If float128_get_rounding_mode() is equal to 2:
        print_pass()
    Otherwise:
        print_fail()
    End If

    float128_set_rounding_mode(3)
    If float128_get_rounding_mode() is equal to 3:
        print_pass()
    Otherwise:
        print_fail()
    End If

    Note: Reset to default
    float128_set_rounding_mode(0)
End Process

Process called "test_float128_fma":
    print_test_header("Float128 FMA (Fused Multiply-Add)")

    Note: Test (3 * 4) + 5 = 17
    Let a be allocate(16)
    Let b be allocate(16)
    Let c be allocate(16)
    Let result be allocate(16)

    float128_from_int64(3, a)
    float128_from_int64(4, b)
    float128_from_int64(5, c)
    float128_fma(a, b, c, result)

    Let approx be float128_to_double_approx(result)
    If approx is greater than 16.5:
        If approx is less than 17.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    Note: Test (10 * 2) + (-5) = 15
    float128_from_int64(10, a)
    float128_from_int64(2, b)
    float128_from_int64(-5, c)
    float128_fma(a, b, c, result)

    Set approx to float128_to_double_approx(result)
    If approx is greater than 14.5:
        If approx is less than 15.5:
            print_pass()
        Otherwise:
            print_fail()
        End If
    Otherwise:
        print_fail()
    End If

    deallocate(a)
    deallocate(b)
    deallocate(c)
    deallocate(result)
End Process

Process called "main" returns Integer:
    print_string("Float128 Comprehensive Test Suite")
    print_newline()
    print_string("=================================")
    print_newline()
    print_newline()

    test_float128_constants()
    print_newline()

    test_float128_addition()
    print_newline()

    test_float128_subtraction()
    print_newline()

    test_float128_multiplication()
    print_newline()

    test_float128_division()
    print_newline()

    test_float128_sqrt()
    print_newline()

    test_float128_comparisons()
    print_newline()

    test_float128_special_values()
    print_newline()

    test_float128_rounding_modes()
    print_newline()

    test_float128_fma()
    print_newline()

    print_string("=================================")
    print_newline()
    print_string("All Float128 tests completed!")
    print_newline()

    Return 0
End Process
