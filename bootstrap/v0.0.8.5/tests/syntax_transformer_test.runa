Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
This file contains comprehensive tests for Developer syntax to Canonical syntax transformation.

Test Coverage:
- Bitwise operators (&, |, ^, ~)
- Shift operators (<<, >>)
- Mixed syntax (Canonical and Developer in same file)
- Edge cases and operator precedence
:End Note

Import "runtime/io/console/console.runa" as Console
Import "runtime/io/console/format.runa" as Format

Note: ============================================================================
Note: Test 1: Bitwise AND Operator
Note: ============================================================================

Process called "test_bitwise_and" returns Integer:
    Note:
    Test bitwise AND operator transformation.

    Developer: a & b
    Canonical: a bitwise and b

    Both should produce identical AST and results.
    :End Note

    Note: Test with Developer syntax
    Let a be 12  Note: Binary: 1100
    Let b be 10  Note: Binary: 1010
    Let result_dev be a & b  Note: Developer syntax: should become "a bitwise and b"

    Note: Test with Canonical syntax
    Let c be 12
    Let d be 10
    Let result_canon be c bitwise and d  Note: Canonical syntax

    Note: Results should be identical (1100 AND 1010 = 1000 = 8)
    If result_dev is equal to result_canon:
        If result_dev is equal to 8:
            proc println from Console with "✓ Test bitwise AND: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test bitwise AND: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 2: Bitwise OR Operator
Note: ============================================================================

Process called "test_bitwise_or" returns Integer:
    Note:
    Test bitwise OR operator transformation.

    Developer: a | b
    Canonical: a bitwise or b
    :End Note

    Note: Test with Developer syntax
    Let a be 12  Note: Binary: 1100
    Let b be 10  Note: Binary: 1010
    Let result_dev be a | b  Note: Developer syntax

    Note: Test with Canonical syntax
    Let c be 12
    Let d be 10
    Let result_canon be c bitwise or d  Note: Canonical syntax

    Note: Results should be identical (1100 OR 1010 = 1110 = 14)
    If result_dev is equal to result_canon:
        If result_dev is equal to 14:
            proc println from Console with "✓ Test bitwise OR: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test bitwise OR: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 3: Bitwise XOR Operator
Note: ============================================================================

Process called "test_bitwise_xor" returns Integer:
    Note:
    Test bitwise XOR operator transformation.

    Developer: a ^ b
    Canonical: a bitwise xor b
    :End Note

    Note: Test with Developer syntax
    Let a be 12  Note: Binary: 1100
    Let b be 10  Note: Binary: 1010
    Let result_dev be a ^ b  Note: Developer syntax

    Note: Test with Canonical syntax
    Let c be 12
    Let d be 10
    Let result_canon be c bitwise xor d  Note: Canonical syntax

    Note: Results should be identical (1100 XOR 1010 = 0110 = 6)
    If result_dev is equal to result_canon:
        If result_dev is equal to 6:
            proc println from Console with "✓ Test bitwise XOR: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test bitwise XOR: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 4: Bitwise NOT Operator
Note: ============================================================================

Process called "test_bitwise_not" returns Integer:
    Note:
    Test bitwise NOT operator transformation.

    Developer: ~a
    Canonical: bitwise not a

    Note: Bitwise NOT inverts all bits. For 8-bit signed integers:
    NOT 5 (00000101) = -6 (11111010 in two's complement)
    :End Note

    Note: Test with Developer syntax
    Let a be 5
    Let result_dev be ~a  Note: Developer syntax

    Note: Test with Canonical syntax
    Let b be 5
    Let result_canon be bitwise not b  Note: Canonical syntax

    Note: Results should be identical
    If result_dev is equal to result_canon:
        proc println from Console with "✓ Test bitwise NOT: PASSED"
        Return 1
    End If

    proc println from Console with "✗ Test bitwise NOT: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 5: Left Shift Operator
Note: ============================================================================

Process called "test_shift_left" returns Integer:
    Note:
    Test left shift operator transformation.

    Developer: a << 2
    Canonical: a shifted left by 2

    Left shift by N is equivalent to multiplying by 2^N.
    5 << 2 = 5 * 4 = 20
    :End Note

    Note: Test with Developer syntax
    Let a be 5
    Let result_dev be a << 2  Note: Developer syntax

    Note: Test with Canonical syntax
    Let b be 5
    Let result_canon be b shifted left by 2  Note: Canonical syntax

    Note: Results should be identical (5 << 2 = 20)
    If result_dev is equal to result_canon:
        If result_dev is equal to 20:
            proc println from Console with "✓ Test shift left: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test shift left: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 6: Right Shift Operator
Note: ============================================================================

Process called "test_shift_right" returns Integer:
    Note:
    Test right shift operator transformation.

    Developer: a >> 2
    Canonical: a shifted right by 2

    Right shift by N is equivalent to dividing by 2^N (integer division).
    20 >> 2 = 20 / 4 = 5
    :End Note

    Note: Test with Developer syntax
    Let a be 20
    Let result_dev be a >> 2  Note: Developer syntax

    Note: Test with Canonical syntax
    Let b be 20
    Let result_canon be b shifted right by 2  Note: Canonical syntax

    Note: Results should be identical (20 >> 2 = 5)
    If result_dev is equal to result_canon:
        If result_dev is equal to 5:
            proc println from Console with "✓ Test shift right: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test shift right: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 7: Combined Operations (Mixed Syntax)
Note: ============================================================================

Process called "test_combined_operations" returns Integer:
    Note:
    Test complex expression with multiple operators.

    Developer: (a & b) | (c ^ d)
    Canonical: (a bitwise and b) bitwise or (c bitwise xor d)

    This tests operator precedence and grouping.
    :End Note

    Note: Test with Developer syntax
    Let a be 12  Note: 1100
    Let b be 10  Note: 1010
    Let c be 6   Note: 0110
    Let d be 4   Note: 0100

    Note: (a & b) = (1100 & 1010) = 1000 = 8
    Note: (c ^ d) = (0110 ^ 0100) = 0010 = 2
    Note: 8 | 2 = (1000 | 0010) = 1010 = 10
    Let result_dev be (a & b) | (c ^ d)  Note: Developer syntax

    Note: Test with Canonical syntax
    Let e be 12
    Let f be 10
    Let g be 6
    Let h be 4
    Let result_canon be (e bitwise and f) bitwise or (g bitwise xor h)  Note: Canonical

    Note: Results should be identical (should be 10)
    If result_dev is equal to result_canon:
        If result_dev is equal to 10:
            proc println from Console with "✓ Test combined operations: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test combined operations: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Test 8: Shift with Bitwise Operations
Note: ============================================================================

Process called "test_shift_with_bitwise" returns Integer:
    Note:
    Test shift operators combined with bitwise operations.

    Developer: (a << 1) & b
    Canonical: (a shifted left by 1) bitwise and b
    :End Note

    Note: Test with Developer syntax
    Let a be 5   Note: 0101
    Let b be 14  Note: 1110

    Note: (5 << 1) = 10 (1010)
    Note: 10 & 14 = (1010 & 1110) = 1010 = 10
    Let result_dev be (a << 1) & b  Note: Developer syntax

    Note: Test with Canonical syntax
    Let c be 5
    Let d be 14
    Let result_canon be (c shifted left by 1) bitwise and d  Note: Canonical

    Note: Results should be identical (should be 10)
    If result_dev is equal to result_canon:
        If result_dev is equal to 10:
            proc println from Console with "✓ Test shift with bitwise: PASSED"
            Return 1
        End If
    End If

    proc println from Console with "✗ Test shift with bitwise: FAILED"
    Return 0
End Process

Note: ============================================================================
Note: Main Test Runner
Note: ============================================================================

Process called "main" returns Integer:
    Note:
    Run all syntax transformation tests.

    Returns:
      0 if all tests pass
      Non-zero count of failed tests
    :End Note

    proc println from Console with "============================================"
    proc println from Console with "Developer Syntax Transformation Test Suite"
    proc println from Console with "============================================"
    proc println from Console with ""

    Let failed_count be 0

    Note: Run bitwise operator tests
    Let test1 be proc test_bitwise_and
    If test1 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Let test2 be proc test_bitwise_or
    If test2 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Let test3 be proc test_bitwise_xor
    If test3 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Let test4 be proc test_bitwise_not
    If test4 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Note: Run shift operator tests
    Let test5 be proc test_shift_left
    If test5 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Let test6 be proc test_shift_right
    If test6 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Note: Run combined operation tests
    Let test7 be proc test_combined_operations
    If test7 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Let test8 be proc test_shift_with_bitwise
    If test8 is equal to 0:
        Set failed_count to failed_count plus 1
    End If

    Note: Print summary
    proc println from Console with ""
    proc println from Console with "============================================"

    If failed_count is equal to 0:
        proc println from Console with "✓ ALL TESTS PASSED (8/8)"
        proc println from Console with "============================================"
        Return 0
    Otherwise:
        Let passed_count be 8 minus failed_count
        Let summary be proc format from Format with "✗ TESTS FAILED: {}/{} passed", passed_count, 8
        proc println from Console with summary
        proc println from Console with "============================================"
        Return failed_count
    End If
End Process
