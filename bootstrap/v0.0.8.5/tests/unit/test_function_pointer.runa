Note: Comprehensive test for function pointers
Note: Syntax: $function_name to get a pointer to a function

Note: Test helper functions
Process called "add" takes a as Integer, b as Integer returns Integer:
    Return a plus b
End Process

Process called "subtract" takes a as Integer, b as Integer returns Integer:
    Return a minus b
End Process

Process called "multiply" takes a as Integer, b as Integer returns Integer:
    Return a multiplied by b
End Process

Process called "apply_operation" takes op as Integer, x as Integer, y as Integer returns Integer:
    Note: This function takes a function pointer and applies it
    Note: In the future we'll have proper function pointer types, for now we use Integer
    Return 0  Note: Placeholder - will call through pointer at call site
End Process

Process called "main" returns Integer:
    Display "Testing function pointers...\n\n"

    Note: Test 1: Store function pointer in variable
    Display "Test 1: Store function pointer:\n"
    Let add_ptr be $add
    Display "  Stored pointer to 'add' function\n"
    Display "  add_ptr value (address): "
    Display add_ptr
    Display "\n\n"

    Note: Test 2: Call function through pointer syntax
    Display "Test 2: Direct function pointer call:\n"
    Let result2 be $add(5, 3)
    Display "  $add(5, 3) = "
    Display result2
    Display "\n  Expected: 8\n\n"

    Note: Test 3: Multiple direct function pointer calls
    Display "Test 3: Multiple function pointer calls:\n"
    Let sub_result be $subtract(10, 4)
    Let mul_result be $multiply(6, 7)
    Display "  $subtract(10, 4) = "
    Display sub_result
    Display "\n  $multiply(6, 7) = "
    Display mul_result
    Display "\n  Expected: 6, 42\n\n"

    Note: Test 4: Store multiple function pointers
    Display "Test 4: Store multiple pointers:\n"
    Let sub_ptr be $subtract
    Let mul_ptr be $multiply
    Display "  Stored subtract_ptr and multiply_ptr\n"
    Display "  subtract_ptr: "
    Display sub_ptr
    Display "\n  multiply_ptr: "
    Display mul_ptr
    Display "\n\n"

    Note: Test 5: Use function pointers with expressions
    Display "Test 5: Function pointers with expressions:\n"
    Let x be 12
    Let y be 3
    Let sum be $add(x, y)
    Let diff be $subtract(x, y)
    Let prod be $multiply(x, y)
    Display "  x=12, y=3\n"
    Display "  $add(x,y)="
    Display sum
    Display ", $subtract(x,y)="
    Display diff
    Display ", $multiply(x,y)="
    Display prod
    Display "\n  Expected: 15, 9, 36\n\n"

    Note: Test 6: Nested function pointer calls
    Display "Test 6: Nested calls:\n"
    Let nested_result be $add($multiply(2, 3), $subtract(10, 5))
    Display "  $add($multiply(2,3), $subtract(10,5)) = "
    Display nested_result
    Display "\n  Expected: 11 (6 + 5)\n\n"

    Display "All function pointer tests completed!\n"

    Return 0
End Process
