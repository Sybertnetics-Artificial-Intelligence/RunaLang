Note: Comprehensive test for ternary conditional expressions
Note: Syntax: value If condition Otherwise other_value

Process called "main" returns Integer:
    Display "Testing ternary conditional expressions...\n\n"

    Note: Test 1: Basic ternary with true condition
    Display "Test 1: Basic ternary (true condition):\n"
    Let condition1 be 1
    Let result1 be 100 If condition1 is equal to 1 Otherwise 200
    Display "  Result: "
    Display result1
    Display "\n  Expected: 100\n\n"

    Note: Test 2: Basic ternary with false condition
    Display "Test 2: Basic ternary (false condition):\n"
    Let condition2 be 0
    Let result2 be 100 If condition2 is equal to 1 Otherwise 200
    Display "  Result: "
    Display result2
    Display "\n  Expected: 200\n\n"

    Note: Test 3: Ternary with comparison in condition
    Display "Test 3: Ternary with comparison:\n"
    Let x be 10
    Let y be 20
    Let max be x If x is greater than y Otherwise y
    Display "  max(10, 20) = "
    Display max
    Display "\n  Expected: 20\n\n"

    Note: Test 4: Ternary with expressions in branches
    Display "Test 4: Ternary with expressions:\n"
    Let a be 5
    Let b be 3
    Let result4 be (a plus b) If a is greater than b Otherwise (a minus b)
    Display "  Result: "
    Display result4
    Display "\n  Expected: 8 (5+3)\n\n"

    Note: Test 5: Nested ternary (inner ternary in true branch)
    Display "Test 5: Nested ternary (true branch):\n"
    Let val be 15
    Let result5 be (100 If val is less than 10 Otherwise 200) If val is greater than 0 Otherwise 300
    Display "  Result: "
    Display result5
    Display "\n  Expected: 200 (val > 0 true, val < 10 false)\n\n"

    Note: Test 6: Ternary in variable assignment
    Display "Test 6: Sign function:\n"
    Let num be minus 5
    Let sign be 1 If num is greater than 0 Otherwise minus 1
    Display "  sign(-5) = "
    Display sign
    Display "\n  Expected: -1\n\n"

    Note: Test 7: Ternary in function call context
    Display "Test 7: Absolute value:\n"
    Let neg_num be minus 42
    Let abs_value be neg_num If neg_num is greater than 0 Otherwise (0 minus neg_num)
    Display "  abs(-42) = "
    Display abs_value
    Display "\n  Expected: 42\n\n"

    Note: Test 8: Ternary with zero/non-zero
    Display "Test 8: Zero check:\n"
    Let zero_val be 0
    Let non_zero_val be 5
    Let result8a be 1 If zero_val Otherwise 0
    Let result8b be 1 If non_zero_val Otherwise 0
    Display "  If 0 -> "
    Display result8a
    Display ", If 5 -> "
    Display result8b
    Display "\n  Expected: 0, 1\n\n"

    Display "All ternary expression tests completed!\n"

    Return 0
End Process
