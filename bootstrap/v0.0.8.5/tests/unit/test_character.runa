Note: Comprehensive test for character literal feature
Note: Tests basic characters, escape sequences, comparisons, and arithmetic
Note: Returns 0 on success, non-zero error code on failure

Process called "main" returns Integer:
    Note: Test basic character literals
    Let char_a be 'a'
    Let char_z be 'z'
    Let char_A be 'A'
    Let char_0 be '0'
    Let char_9 be '9'

    Note: Test escape sequences
    Let newline be '\n'
    Let tab be '\t'
    Let carriage_return be '\r'
    Let null_char be '\0'
    Let backslash be '\\'
    Let single_quote be '\''

    Note: Verify basic character values (ASCII)
    If char_a is not equal to 97:
        Return 1  Note: Failed: 'a' should be 97
    End If

    If char_z is not equal to 122:
        Return 2  Note: Failed: 'z' should be 122
    End If

    If char_A is not equal to 65:
        Return 3  Note: Failed: 'A' should be 65
    End If

    If char_0 is not equal to 48:
        Return 4  Note: Failed: '0' should be 48
    End If

    If char_9 is not equal to 57:
        Return 5  Note: Failed: '9' should be 57
    End If

    Note: Verify escape sequences
    If newline is not equal to 10:
        Return 6  Note: Failed: '\n' should be 10
    End If

    If tab is not equal to 9:
        Return 7  Note: Failed: '\t' should be 9
    End If

    If carriage_return is not equal to 13:
        Return 8  Note: Failed: '\r' should be 13
    End If

    If null_char is not equal to 0:
        Return 9  Note: Failed: '\0' should be 0
    End If

    If backslash is not equal to 92:
        Return 10  Note: Failed: '\\' should be 92
    End If

    If single_quote is not equal to 39:
        Return 11  Note: Failed: '\'' should be 39
    End If

    Note: Test character comparisons
    If char_a is greater than char_z:
        Return 12  Note: Failed: 'a' should be less than 'z'
    End If

    If char_A is greater than char_a:
        Return 13  Note: Failed: 'A' should be less than 'a' in ASCII
    End If

    If char_0 is greater than char_9:
        Return 14  Note: Failed: '0' should be less than '9'
    End If

    Note: Test character arithmetic
    Let char_b be char_a plus 1
    If char_b is not equal to 98:
        Return 15  Note: Failed: 'a' + 1 should be 98 ('b')
    End If

    Let char_diff be char_z minus char_a
    If char_diff is not equal to 25:
        Return 16  Note: Failed: 'z' - 'a' should be 25
    End If

    Note: Test character in conditional expressions
    Let is_lowercase be 0
    If char_a is greater than or equal to 97:
        If char_a is less than or equal to 122:
            Set is_lowercase to 1
        End If
    End If

    If is_lowercase is not equal to 1:
        Return 17  Note: Failed: lowercase detection
    End If

    Note: Test character storage and retrieval
    Let char_array be allocate(8)
    memory_set_byte(char_array, 0, char_a)
    memory_set_byte(char_array, 1, char_b)
    memory_set_byte(char_array, 2, char_z)

    Let retrieved_a be memory_get_byte(char_array, 0)
    Let retrieved_b be memory_get_byte(char_array, 1)
    Let retrieved_z be memory_get_byte(char_array, 2)

    If retrieved_a is not equal to 97:
        deallocate(char_array)
        Return 18  Note: Failed: stored/retrieved character mismatch
    End If

    If retrieved_b is not equal to 98:
        deallocate(char_array)
        Return 19  Note: Failed: stored/retrieved character mismatch
    End If

    If retrieved_z is not equal to 122:
        deallocate(char_array)
        Return 20  Note: Failed: stored/retrieved character mismatch
    End If

    deallocate(char_array)

    Note: All tests passed
    Return 0
End Process
