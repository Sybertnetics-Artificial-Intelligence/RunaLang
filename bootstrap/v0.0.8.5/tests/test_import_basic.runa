Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note:
==============================================================================
BASIC IMPORT SYSTEM TESTS v0.0.8.5
==============================================================================

This test suite validates the basic functionality of the world-class import system:
- File I/O operations
- Path resolution
- Alias extraction
- Basic import processing
- Error handling

These tests ensure the foundation of the import system works correctly.
:End Note

Process called "main" returns Integer:
    Note: Main test runner for basic import functionality

    print_string("==============================================================================")
    print_string("BASIC IMPORT SYSTEM TESTS")
    print_string("==============================================================================")
    print_string("")

    Let test_count be 0
    Let passed_count be 0

    Note: Test 1: File I/O Operations
    Set test_count to test_count plus 1
    print_string("Test 1: File I/O Operations")
    Let test1_result be test_file_io_operations()
    If test1_result is equal to 1:
        print_string("  ✓ PASSED")
        Set passed_count to passed_count plus 1
    Else:
        print_string("  ✗ FAILED")
    End If
    print_string("")

    Note: Test 2: Path Resolution
    Set test_count to test_count plus 1
    print_string("Test 2: Path Resolution")
    Let test2_result be test_path_resolution()
    If test2_result is equal to 1:
        print_string("  ✓ PASSED")
        Set passed_count to passed_count plus 1
    Else:
        print_string("  ✗ FAILED")
    End If
    print_string("")

    Note: Test 3: Alias Extraction
    Set test_count to test_count plus 1
    print_string("Test 3: Alias Extraction")
    Let test3_result be test_alias_extraction()
    If test3_result is equal to 1:
        print_string("  ✓ PASSED")
        Set passed_count to passed_count plus 1
    Else:
        print_string("  ✗ FAILED")
    End If
    print_string("")

    Note: Test 4: Basic Import Processing
    Set test_count to test_count plus 1
    print_string("Test 4: Basic Import Processing")
    Let test4_result be test_basic_import_processing()
    If test4_result is equal to 1:
        print_string("  ✓ PASSED")
        Set passed_count to passed_count plus 1
    Else:
        print_string("  ✗ FAILED")
    End If
    print_string("")

    Note: Test 5: Error Handling
    Set test_count to test_count plus 1
    print_string("Test 5: Error Handling")
    Let test5_result be test_error_handling()
    If test5_result is equal to 1:
        print_string("  ✓ PASSED")
        Set passed_count to passed_count plus 1
    Else:
        print_string("  ✗ FAILED")
    End If
    print_string("")

    Note: Test 6: Security Validation
    Set test_count to test_count plus 1
    print_string("Test 6: Security Validation")
    Let test6_result be test_security_validation()
    If test6_result is equal to 1:
        print_string("  ✓ PASSED")
        Set passed_count to passed_count plus 1
    Else:
        print_string("  ✗ FAILED")
    End If
    print_string("")

    Note: Print test results
    print_string("==============================================================================")
    print_string("TEST RESULTS")
    print_string("==============================================================================")
    print_string("Total tests: ")
    print_integer(test_count)
    print_string("")
    print_string("Passed: ")
    print_integer(passed_count)
    print_string("")
    print_string("Failed: ")
    print_integer(test_count minus passed_count)
    print_string("")
    print_string("Success rate: ")
    If test_count is greater than 0:
        Let success_rate be passed_count multiplied by 100 divided by test_count
        print_integer(success_rate)
        print_string("%")
    End If
    print_string("")
    print_string("==============================================================================")

    If passed_count is equal to test_count:
        Return 0
    Else:
        Return 1
    End If
End Process

Process called "test_file_io_operations" returns Integer:
    Note: Test file I/O operations

    Note: Test file existence check
    Let test_file be "test_file.txt"
    Let create_result be create_test_file(test_file, "Hello, World!")
    If create_result is equal to 0:
        Return 0
    End If

    Let exists_result be file_exists(test_file)
    If exists_result is not equal to 1:
        delete_file(test_file)
        Return 0
    End If

    Note: Test file reading
    Let read_result be read_file_internal(test_file)
    If read_result is equal to 0:
        delete_file(test_file)
        Return 0
    End If

    Let content_str be string_to_cstring(read_result)
    If string_equals(content_str, "Hello, World!") is not equal to 1:
        deallocate(read_result)
        delete_file(test_file)
        Return 0
    End If

    Note: Test file size
    Let size_result be get_file_size(test_file)
    If size_result is not equal to 13:
        deallocate(read_result)
        delete_file(test_file)
        Return 0
    End If

    Note: Test file modification time
    Let mtime_result be get_file_modification_time(test_file)
    If mtime_result is equal to 0:
        deallocate(read_result)
        delete_file(test_file)
        Return 0
    End If

    deallocate(read_result)
    delete_file(test_file)
    Return 1
End Process

Process called "test_path_resolution" returns Integer:
    Note: Test path resolution functionality

    Let arena be create_test_arena()
    If arena is equal to 0:
        Return 0
    End If

    Let context be import_context_create(arena)
    If context is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test relative path resolution
    Let relative_path be "./test_module.runa"
    Let resolved_path be resolve_relative_path(relative_path, context, arena)
    If resolved_path is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test path normalization
    Let complex_path be "./../test/./module.runa"
    Let normalized_path be normalize_path(complex_path, arena)
    If normalized_path is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    destroy_test_arena(arena)
    Return 1
End Process

Process called "test_alias_extraction" returns Integer:
    Note: Test alias extraction functionality

    Let arena be create_test_arena()
    If arena is equal to 0:
        Return 0
    End If

    Note: Test simple filename
    Let simple_path be "module.runa"
    Let simple_alias be extract_import_alias(simple_path, arena)
    If simple_alias is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    If string_equals(simple_alias, "module") is not equal to 1:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test path with directory
    Let path_with_dir be "path/to/module.runa"
    Let dir_alias be extract_import_alias(path_with_dir, arena)
    If dir_alias is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    If string_equals(dir_alias, "module") is not equal to 1:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test file without extension
    Let no_ext_path be "module"
    Let no_ext_alias be extract_import_alias(no_ext_path, arena)
    If no_ext_alias is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    If string_equals(no_ext_alias, "module") is not equal to 1:
        destroy_test_arena(arena)
        Return 0
    End If

    destroy_test_arena(arena)
    Return 1
End Process

Process called "test_basic_import_processing" returns Integer:
    Note: Test basic import processing

    Let arena be create_test_arena()
    If arena is equal to 0:
        Return 0
    End If

    Note: Create test program with imports
    Let test_program be create_test_program_with_imports(arena)
    If test_program is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Create test import files
    Let import_file1 be create_test_import_file("test_import1.runa", "Process called \"test_func1\" returns Integer: Return 42 End Process")
    If import_file1 is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Let import_file2 be create_test_import_file("test_import2.runa", "Process called \"test_func2\" returns Integer: Return 84 End Process")
    If import_file2 is equal to 0:
        delete_file("test_import1.runa")
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Process imports
    Let process_result be process_imports_recursive(test_program, arena)
    If process_result is not equal to 0:
        delete_file("test_import1.runa")
        delete_file("test_import2.runa")
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Verify functions were merged
    Let func_count be memory_get_int32(test_program, 8)
    If func_count is less than 2:
        delete_file("test_import1.runa")
        delete_file("test_import2.runa")
        destroy_test_arena(arena)
        Return 0
    End If

    delete_file("test_import1.runa")
    delete_file("test_import2.runa")
    destroy_test_arena(arena)
    Return 1
End Process

Process called "test_error_handling" returns Integer:
    Note: Test error handling functionality

    Let arena be create_test_arena()
    If arena is equal to 0:
        Return 0
    End If

    Note: Test non-existent file
    Let non_existent be "non_existent_file.runa"
    Let read_result be read_file_internal(non_existent)
    If read_result is not equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test invalid path
    Let invalid_path be "../invalid/../path.runa"
    Let context be import_context_create(arena)
    If context is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Let security_result be validate_path_security(invalid_path, context)
    If security_result is not equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    destroy_test_arena(arena)
    Return 1
End Process

Process called "test_security_validation" returns Integer:
    Note: Test security validation functionality

    Let arena be create_test_arena()
    If arena is equal to 0:
        Return 0
    End If

    Let context be import_context_create(arena)
    If context is equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test path traversal attack
    Let malicious_path be "../../../etc/passwd"
    Let security_result be validate_path_security(malicious_path, context)
    If security_result is not equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test absolute path restriction
    Let absolute_path be "/etc/passwd"
    Let absolute_result be validate_path_security(absolute_path, context)
    If absolute_result is not equal to 0:
        destroy_test_arena(arena)
        Return 0
    End If

    Note: Test valid relative path
    Let valid_path be "./valid_module.runa"
    Let valid_result be validate_path_security(valid_path, context)
    If valid_result is not equal to 1:
        destroy_test_arena(arena)
        Return 0
    End If

    destroy_test_arena(arena)
    Return 1
End Process

Note: ============================================================================
Note: Test Helper Functions
Note: ============================================================================

Process called "create_test_file" takes filename as Integer, content as Integer returns Integer:
    Note: Create test file with content

    Let file_handle be open_file(filename, "w")
    If file_handle is equal to 0:
        Return 0
    End If

    Let content_str be string_to_cstring(content)
    Let content_len be string_length(content)
    Let write_result be write_file_data(file_handle, content_str, content_len)
    close_file(file_handle)

    If write_result is not equal to content_len:
        Return 0
    End If

    Return 1
End Process

Process called "create_test_arena" returns Integer:
    Note: Create test arena for testing

    Let arena be allocate(1024)
    Return arena
End Process

Process called "destroy_test_arena" takes arena as Integer returns Integer:
    Note: Destroy test arena

    If arena is not equal to 0:
        deallocate(arena)
    End If

    Return 1
End Process

Process called "create_test_program_with_imports" takes arena as Integer returns Integer:
    Note: Create test program with import statements

    Let program be arena_allocate(arena, 64)
    If program is equal to 0:
        Return 0
    End If

    Note: Initialize program structure
    memory_set_pointer(program, 0, 0)   Note: functions = null
    memory_set_int32(program, 8, 0)     Note: function_count = 0
    memory_set_pointer(program, 16, 0)  Note: variables = null
    memory_set_int32(program, 24, 0)    Note: variable_count = 0
    memory_set_pointer(program, 32, 0)  Note: imports = null
    memory_set_int32(program, 40, 0)    Note: import_count = 0
    memory_set_pointer(program, 48, 0)  Note: types = null
    memory_set_int32(program, 56, 0)   Note: type_count = 0

    Note: Create import statements
    Let import_count be 2
    Let imports be arena_allocate(arena, import_count multiplied by 8)
    If imports is equal to 0:
        Return 0
    End If

    Let import1 be create_import_statement("test_import1.runa", arena)
    If import1 is equal to 0:
        Return 0
    End If

    Let import2 be create_import_statement("test_import2.runa", arena)
    If import2 is equal to 0:
        Return 0
    End If

    memory_set_pointer(imports, 0, import1)
    memory_set_pointer(imports, 8, import2)

    memory_set_pointer(program, 32, imports)
    memory_set_int32(program, 40, import_count)

    Return program
End Process

Process called "create_import_statement" takes filename as Integer, arena as Integer returns Integer:
    Note: Create import statement structure

    Let import_stmt be arena_allocate(arena, 16)
    If import_stmt is equal to 0:
        Return 0
    End If

    memory_set_pointer(import_stmt, 0, filename)
    memory_set_pointer(import_stmt, 8, 0)  Note: alias = null

    Return import_stmt
End Process

Process called "create_test_import_file" takes filename as Integer, content as Integer returns Integer:
    Note: Create test import file

    Let create_result be create_test_file(filename, content)
    Return create_result
End Process
