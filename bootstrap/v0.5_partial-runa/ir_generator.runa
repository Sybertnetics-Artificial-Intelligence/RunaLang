Note: Simplified IR builder for bootstrap compiler compatibility
Note: Uses external Rust functions to avoid complex type initialization issues

Note: =====================================================================
Note: EXTERNAL RUST FUNCTIONS FOR IR BUILDING
Note: =====================================================================

External Process called "rust_build_ir_module" that takes ast as Integer, symbol_table as Integer returns Integer
External Process called "rust_build_ir_function" that takes func_ast as Integer, symbol_table as Integer returns Integer  
External Process called "rust_create_basic_block" that takes block_id as Integer returns Integer
External Process called "rust_generate_temp_var" that takes func as Integer, var_type as String returns String
External Process called "rust_emit_assignment" that takes block as Integer, target as String, value as String, var_type as String returns Integer
External Process called "rust_emit_binary_op" that takes block as Integer, op as String, left as String, right as String, result_type as String returns String
External Process called "rust_emit_function_call" that takes block as Integer, func_name as String, args as Integer, return_type as String returns String
External Process called "rust_emit_branch" that takes block as Integer, condition as String, true_block as Integer, false_block as Integer returns Integer
External Process called "rust_emit_return" that takes block as Integer, value as String, return_type as String returns Integer
External Process called "rust_emit_inline_assembly" that takes block as Integer, asm_string as String returns Integer
External Process called "rust_transform_statement" that takes stmt as Integer, func as Integer, current_block as Integer returns Integer
External Process called "rust_transform_expression" that takes expr as Integer, func as Integer, block as Integer returns String
External Process called "rust_transform_control_flow" that takes control as Integer, func as Integer, current_block as Integer returns Integer
External Process called "rust_convert_to_ssa" that takes func as Integer returns Integer
External Process called "rust_insert_phi_nodes" that takes func as Integer, var_name as String returns Integer
External Process called "rust_rename_variables" that takes func as Integer returns Integer
External Process called "rust_fold_constants" that takes block as Integer returns Integer
External Process called "rust_eliminate_dead_code" that takes func as Integer returns Integer
External Process called "rust_create_ir_module" that takes name as String returns Integer
External Process called "rust_add_function_to_module" that takes ir_module as Integer, func as Integer returns Boolean

Note: =====================================================================
Note: IR BUILDER API
Note: =====================================================================

Process called "build_ir_module" that takes ast as Integer, symbol_table as Integer returns Integer:
    Note: Main entry point for IR generation
    Return rust_build_ir_module(ast, symbol_table)
End Process

Process called "build_ir_function" that takes func_ast as Integer, symbol_table as Integer returns Integer:
    Note: Transform function AST to IR representation
    Return rust_build_ir_function(func_ast, symbol_table)
End Process

Process called "create_basic_block" that takes block_id as Integer returns Integer:
    Note: Create a new empty basic block
    Return rust_create_basic_block(block_id)
End Process

Process called "generate_temp_var" that takes func as Integer, var_type as String returns String:
    Note: Generate unique temporary variable name
    Return rust_generate_temp_var(func, var_type)
End Process

Process called "emit_assignment" that takes block as Integer, target as String, value as String, var_type as String returns Integer:
    Note: Emit assignment instruction to block
    Return rust_emit_assignment(block, target, value, var_type)
End Process

Process called "emit_binary_op" that takes block as Integer, op as String, left as String, right as String, result_type as String returns String:
    Note: Emit binary operation instruction
    Return rust_emit_binary_op(block, op, left, right, result_type)
End Process

Process called "emit_function_call" that takes block as Integer, func_name as String, args as Integer, return_type as String returns String:
    Note: Emit function call instruction
    Return rust_emit_function_call(block, func_name, args, return_type)
End Process

Process called "emit_branch" that takes block as Integer, condition as String, true_block as Integer, false_block as Integer returns Integer:
    Note: Emit conditional or unconditional branch
    Return rust_emit_branch(block, condition, true_block, false_block)
End Process

Process called "emit_return" that takes block as Integer, value as String, return_type as String returns Integer:
    Note: Emit return instruction
    Return rust_emit_return(block, value, return_type)
End Process

Process called "emit_inline_assembly" that takes block as Integer, asm_string as String returns Integer:
    Note: Emit inline assembly instruction
    Return rust_emit_inline_assembly(block, asm_string)
End Process

Process called "transform_statement" that takes stmt as Integer, func as Integer, current_block as Integer returns Integer:
    Note: Transform AST statement to IR instructions
    Return rust_transform_statement(stmt, func, current_block)
End Process

Process called "transform_expression" that takes expr as Integer, func as Integer, block as Integer returns String:
    Note: Transform expression to IR and get result
    Return rust_transform_expression(expr, func, block)
End Process

Process called "transform_control_flow" that takes control as Integer, func as Integer, current_block as Integer returns Integer:
    Note: Transform if/while/for to basic blocks
    Return rust_transform_control_flow(control, func, current_block)
End Process

Process called "convert_to_ssa" that takes func as Integer returns Integer:
    Note: Convert function to SSA form
    Return rust_convert_to_ssa(func)
End Process

Process called "insert_phi_nodes" that takes func as Integer, var_name as String returns Integer:
    Note: Insert phi nodes for variable at join points
    Return rust_insert_phi_nodes(func, var_name)
End Process

Process called "rename_variables" that takes func as Integer returns Integer:
    Note: Rename variables for SSA form
    Return rust_rename_variables(func)
End Process

Process called "fold_constants" that takes block as Integer returns Integer:
    Note: Perform constant folding in basic block
    Return rust_fold_constants(block)
End Process

Process called "eliminate_dead_code" that takes func as Integer returns Integer:
    Note: Remove unreachable code and dead assignments
    Return rust_eliminate_dead_code(func)
End Process

Note: =====================================================================
Note: UTILITY FUNCTIONS
Note: =====================================================================

Process called "create_ir_module" that takes name as String returns Integer:
    Note: Create a new empty IR module
    Return rust_create_ir_module(name)
End Process

Process called "add_function_to_module" that takes ir_module as Integer, func as Integer returns Boolean:
    Note: Add a function to an IR module
    Return rust_add_function_to_module(ir_module, func)
End Process

Process called "create_empty_block" returns Integer:
    Note: Create an empty basic block with auto-generated ID
    Return create_basic_block(0)
End Process

Process called "create_entry_block" returns Integer:
    Note: Create an entry basic block
    Let block be create_basic_block(1)
    Return block
End Process

Process called "create_exit_block" returns Integer:
    Note: Create an exit basic block
    Let block be create_basic_block(9999)
    Return block
End Process