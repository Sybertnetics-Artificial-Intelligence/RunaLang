Note: Simplified type system for bootstrap compiler compatibility
Note: Uses external Rust functions to avoid complex type initialization issues

Note: =====================================================================
Note: EXTERNAL RUST FUNCTIONS FOR TYPE SYSTEM
Note: =====================================================================

External Process called "rust_infer_type" that takes ast_node as Integer, env as Integer returns Integer
External Process called "rust_check_type" that takes ast_node as Integer, expected_type as Integer, env as Integer returns Integer
External Process called "rust_unify_types" that takes t1 as Integer, t2 as Integer, env as Integer returns Integer
External Process called "rust_resolve_generics" that takes type_ref as Integer, env as Integer returns Integer
External Process called "rust_instantiate_generic" that takes generic_type as Integer, type_args as Integer returns Integer
External Process called "rust_type_check_program" that takes ast as Integer returns Integer
External Process called "rust_validate_function_signature" that takes func_node as Integer, env as Integer returns Integer
External Process called "rust_check_trait_implementation" that takes impl_node as Integer, trait_type as Integer, env as Integer returns Integer
External Process called "rust_can_coerce" that takes from_type as Integer, to_type as Integer returns Boolean
External Process called "rust_apply_coercion" that takes value_node as Integer, target_type as Integer returns Integer
External Process called "rust_format_type_error" that takes expected as Integer, actual as Integer, context as Integer returns String
External Process called "rust_create_type_environment" returns Integer
External Process called "rust_create_primitive_type" that takes name as String returns Integer

Note: =====================================================================
Note: TYPE SYSTEM API
Note: =====================================================================

Process called "infer_type" that takes node as Integer, env as Integer returns Integer:
    Note: Infer type of AST node using bidirectional type checking
    Return rust_infer_type(node, env)
End Process

Process called "check_type" that takes node as Integer, expected as Integer, env as Integer returns Integer:
    Note: Check if node matches expected type
    Return rust_check_type(node, expected, env)
End Process

Process called "unify_types" that takes t1 as Integer, t2 as Integer, env as Integer returns Integer:
    Note: Unify two types to find common type
    Return rust_unify_types(t1, t2, env)
End Process

Process called "resolve_generics" that takes t as Integer, env as Integer returns Integer:
    Note: Resolve generic type parameters to concrete types
    Return rust_resolve_generics(t, env)
End Process

Process called "instantiate_generic" that takes generic_type as Integer, type_args as Integer returns Integer:
    Note: Instantiate generic type with concrete type arguments
    Return rust_instantiate_generic(generic_type, type_args)
End Process

Process called "type_check_program" that takes ast as Integer returns Integer:
    Note: Type check entire program AST
    Return rust_type_check_program(ast)
End Process

Process called "validate_function_signature" that takes func_node as Integer, env as Integer returns Integer:
    Note: Validate function parameter and return types
    Return rust_validate_function_signature(func_node, env)
End Process

Process called "check_trait_implementation" that takes impl_node as Integer, trait_type as Integer, env as Integer returns Integer:
    Note: Verify trait implementation completeness
    Return rust_check_trait_implementation(impl_node, trait_type, env)
End Process

Process called "can_coerce" that takes from_type as Integer, to_type as Integer returns Boolean:
    Note: Check if type can be safely coerced
    Return rust_can_coerce(from_type, to_type)
End Process

Process called "apply_coercion" that takes value_node as Integer, target_type as Integer returns Integer:
    Note: Apply type coercion to AST node
    Return rust_apply_coercion(value_node, target_type)
End Process

Process called "format_type_error" that takes expected as Integer, actual as Integer, context as Integer returns String:
    Note: Format type error message with context
    Return rust_format_type_error(expected, actual, context)
End Process

Process called "create_type_environment" returns Integer:
    Note: Create a new type environment for type checking
    Return rust_create_type_environment()
End Process

Process called "create_primitive_type" that takes name as String returns Integer:
    Note: Create a primitive type by name
    Return rust_create_primitive_type(name)
End Process

Note: =====================================================================
Note: UTILITY FUNCTIONS
Note: =====================================================================

Process called "get_integer_type" returns Integer:
    Note: Get the Integer primitive type
    Return create_primitive_type("Integer")
End Process

Process called "get_string_type" returns Integer:
    Note: Get the String primitive type
    Return create_primitive_type("String")
End Process

Process called "get_boolean_type" returns Integer:
    Note: Get the Boolean primitive type
    Return create_primitive_type("Boolean")
End Process

Process called "get_void_type" returns Integer:
    Note: Get the Void/Unit type
    Return create_primitive_type("Void")
End Process