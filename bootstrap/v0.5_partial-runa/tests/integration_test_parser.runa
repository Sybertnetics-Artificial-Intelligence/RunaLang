Note: Integration test for parser_frontend.runa
Note: Tests that we can parse simple Runa programs correctly

Import module "../parser_frontend" as Parser
Import module "../core_libs" as Core

External Process called "rust_print_string" that takes text as String

Process called "test_simple_function_parsing" returns Boolean:
    Note: Test parsing a simple function definition
    
    rust_print_string("[TEST] Simple Function Parsing\n")
    
    Let test_program be "Process called \"hello\" returns Nothing:\n    rust_print_string(\"Hello, World!\")\nEnd Process"
    
    Let parse_result be Parser.parse_program(test_program)
    
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Failed to parse simple function\n")
        For Each error in parse_result.errors:
            rust_print_string("    Error: ")
            rust_print_string(error)
            rust_print_string("\n")
        End For
        Return false
    End If
    
    rust_print_string("  ✓ Simple function parsed successfully\n")
    Return true
End Process

Process called "test_variable_declaration_parsing" returns Boolean:
    Note: Test parsing variable declarations
    
    rust_print_string("[TEST] Variable Declaration Parsing\n")
    
    Let test_program be "Process called \"test\" returns Nothing:\n    Let x be 42\n    Let name be \"Runa\"\nEnd Process"
    
    Let parse_result be Parser.parse_program(test_program)
    
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Failed to parse variable declarations\n")
        Return false
    End If
    
    rust_print_string("  ✓ Variable declarations parsed successfully\n")
    Return true
End Process

Process called "test_control_structure_parsing" returns Boolean:
    Note: Test parsing control structures
    
    rust_print_string("[TEST] Control Structure Parsing\n")
    
    Let test_program be "Process called \"test\" returns Nothing:\n    If true:\n        rust_print_string(\"True branch\")\n    End If\nEnd Process"
    
    Let parse_result be Parser.parse_program(test_program)
    
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Failed to parse control structures\n")
        Return false
    End If
    
    rust_print_string("  ✓ Control structures parsed successfully\n")
    Return true
End Process

Process called "test_type_definition_parsing" returns Boolean:
    Note: Test parsing type definitions
    
    rust_print_string("[TEST] Type Definition Parsing\n")
    
    Let test_program be "Type called \"Person\":\n    name as String\n    age as Integer\nEnd Type"
    
    Let parse_result be Parser.parse_program(test_program)
    
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Failed to parse type definition\n")
        Return false
    End If
    
    rust_print_string("  ✓ Type definition parsed successfully\n")
    Return true
End Process

Process called "test_external_declaration_parsing" returns Boolean:
    Note: Test parsing external process declarations
    
    rust_print_string("[TEST] External Declaration Parsing\n")
    
    Let test_program be "External Process called \"rust_print_string\" that takes text as String"
    
    Let parse_result be Parser.parse_program(test_program)
    
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Failed to parse external declaration\n")
        Return false
    End If
    
    rust_print_string("  ✓ External declaration parsed successfully\n")
    Return true
End Process

Process called "test_malformed_program_parsing" returns Boolean:
    Note: Test that malformed programs are properly rejected
    
    rust_print_string("[TEST] Malformed Program Rejection\n")
    
    Let test_program be "Process called hello returns Nothing:\n    Let x be\nEnd Process"  Note: Missing value
    
    Let parse_result be Parser.parse_program(test_program)
    
    If parse_result.success is equal to true:
        rust_print_string("  ✗ Malformed program was incorrectly accepted\n")
        Return false
    End If
    
    rust_print_string("  ✓ Malformed program correctly rejected\n")
    Return true
End Process

Process called "run_all_parser_tests" returns Boolean:
    Note: Run all parser integration tests
    
    Let tests_passed be 0
    Let tests_failed be 0
    
    If test_simple_function_parsing():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_variable_declaration_parsing():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_control_structure_parsing():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_type_definition_parsing():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_external_declaration_parsing():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_malformed_program_parsing():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    rust_print_string("\n=== PARSER INTEGRATION TEST RESULTS ===\n")
    rust_print_string("Passed: ")
    rust_print_string(Core.integer_to_string(tests_passed))
    rust_print_string("\nFailed: ")
    rust_print_string(Core.integer_to_string(tests_failed))
    rust_print_string("\n")
    
    If tests_failed is equal to 0:
        rust_print_string("✓ ALL PARSER TESTS PASSED\n")
        Return true
    Otherwise:
        rust_print_string("✗ SOME PARSER TESTS FAILED\n")
        Return false
    End If
End Process

Process called "main":
    rust_print_string("=== PARSER FRONTEND INTEGRATION TEST ===\n\n")
    run_all_parser_tests()
End Process