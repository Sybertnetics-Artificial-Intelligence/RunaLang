Note: Integration test for IR builder with type system
Note: Tests the complete flow from typed AST to IR generation

External Process called "rust_print_string" that takes text as String

Note: Simulate external functions for testing
External Process called "rust_create_typed_ast" that takes program as String returns Integer
External Process called "rust_create_symbol_table" returns Integer
External Process called "rust_build_ir_from_ast" that takes ast as Integer, symbols as Integer returns Integer
External Process called "rust_verify_ir_structure" that takes ir_module as Integer returns Boolean
External Process called "rust_count_basic_blocks" that takes ir_module as Integer returns Integer
External Process called "rust_count_instructions" that takes ir_module as Integer returns Integer
External Process called "rust_has_ssa_form" that takes ir_module as Integer returns Boolean

Process called "test_simple_function_ir_generation" returns Boolean:
    Note: Test IR generation for simple function
    
    rust_print_string("TESTING: Simple function IR generation\n")
    
    Note: Simulate typed AST for: Process add(x as Integer, y as Integer) returns Integer
    Let simple_function_ast be rust_create_typed_ast("function add")
    Let symbol_table be rust_create_symbol_table()
    
    Note: Generate IR from typed AST
    Let ir_module be rust_build_ir_from_ast(simple_function_ast, symbol_table)
    
    If ir_module is equal to 0:
        rust_print_string("FAIL: IR module generation failed\n")
        Return false
    End If
    
    Note: Verify IR structure
    Let is_valid be rust_verify_ir_structure(ir_module)
    If is_valid is equal to false:
        rust_print_string("FAIL: IR structure is invalid\n")
        Return false
    End If
    
    rust_print_string("‚úì Simple function IR generated successfully\n")
    Return true
End Process

Process called "test_control_flow_ir_generation" returns Boolean:
    Note: Test IR generation for control flow structures
    
    rust_print_string("TESTING: Control flow IR generation\n")
    
    Note: Simulate typed AST with if-else control flow
    Let control_flow_ast be rust_create_typed_ast("if-else statement")
    Let symbol_table be rust_create_symbol_table()
    
    Note: Generate IR with control flow
    Let ir_module be rust_build_ir_from_ast(control_flow_ast, symbol_table)
    
    If ir_module is equal to 0:
        rust_print_string("FAIL: Control flow IR generation failed\n")
        Return false
    End If
    
    Note: Check that multiple basic blocks were created
    Let block_count be rust_count_basic_blocks(ir_module)
    If block_count is less than 3:
        rust_print_string("FAIL: Expected at least 3 basic blocks for if-else\n")
        Return false
    End If
    
    rust_print_string("‚úì Control flow IR with multiple basic blocks generated\n")
    Return true
End Process

Process called "test_loop_ir_generation" returns Boolean:
    Note: Test IR generation for loop structures
    
    rust_print_string("TESTING: Loop IR generation\n")
    
    Note: Simulate typed AST with while loop
    Let loop_ast be rust_create_typed_ast("while loop")
    Let symbol_table be rust_create_symbol_table()
    
    Note: Generate IR with loop
    Let ir_module be rust_build_ir_from_ast(loop_ast, symbol_table)
    
    If ir_module is equal to 0:
        rust_print_string("FAIL: Loop IR generation failed\n")
        Return false
    End If
    
    Note: Verify loop structure in IR
    Let block_count be rust_count_basic_blocks(ir_module)
    If block_count is less than 3:
        rust_print_string("FAIL: Loop should create header, body, and exit blocks\n")
        Return false
    End If
    
    rust_print_string("‚úì Loop IR with proper block structure generated\n")
    Return true
End Process

Process called "test_ssa_form_conversion" returns Boolean:
    Note: Test SSA form conversion
    
    rust_print_string("TESTING: SSA form conversion\n")
    
    Note: Create AST with variable reassignment
    Let reassignment_ast be rust_create_typed_ast("variable reassignment")
    Let symbol_table be rust_create_symbol_table()
    
    Note: Generate IR and convert to SSA
    Let ir_module be rust_build_ir_from_ast(reassignment_ast, symbol_table)
    
    If ir_module is equal to 0:
        rust_print_string("FAIL: IR generation for SSA test failed\n")
        Return false
    End If
    
    Note: Verify SSA form
    Let has_ssa be rust_has_ssa_form(ir_module)
    If has_ssa is equal to false:
        rust_print_string("FAIL: IR not in SSA form\n")
        Return false
    End If
    
    rust_print_string("‚úì SSA form conversion successful\n")
    Return true
End Process

Process called "test_complex_program_ir_generation" returns Boolean:
    Note: Test IR generation for complex program
    
    rust_print_string("TESTING: Complex program IR generation\n")
    
    Note: Simulate complex program with multiple functions and control flow
    Let complex_ast be rust_create_typed_ast("complex program")
    Let symbol_table be rust_create_symbol_table()
    
    Note: Generate IR for complex program
    Let ir_module be rust_build_ir_from_ast(complex_ast, symbol_table)
    
    If ir_module is equal to 0:
        rust_print_string("FAIL: Complex program IR generation failed\n")
        Return false
    End If
    
    Note: Verify complexity metrics
    Let block_count be rust_count_basic_blocks(ir_module)
    Let instruction_count be rust_count_instructions(ir_module)
    
    If block_count is less than 5:
        rust_print_string("FAIL: Complex program should have many basic blocks\n")
        Return false
    End If
    
    If instruction_count is less than 10:
        rust_print_string("FAIL: Complex program should have many instructions\n")
        Return false
    End If
    
    rust_print_string("‚úì Complex program IR generated with proper complexity\n")
    Return true
End Process

Process called "main" returns Integer:
    Note: Run IR builder integration tests
    
    rust_print_string("üîß IR BUILDER INTEGRATION TESTS üîß\n")
    rust_print_string("Testing AST to IR transformation pipeline\n\n")
    
    Let tests_passed be 0
    Let total_tests be 5
    
    If test_simple_function_ir_generation() is equal to true:
        rust_print_string("‚úÖ Simple function test PASSED\n")
        Set tests_passed to tests_passed plus 1
    Otherwise:
        rust_print_string("‚ùå Simple function test FAILED\n")
    End If
    
    If test_control_flow_ir_generation() is equal to true:
        rust_print_string("‚úÖ Control flow test PASSED\n")
        Set tests_passed to tests_passed plus 1
    Otherwise:
        rust_print_string("‚ùå Control flow test FAILED\n")
    End If
    
    If test_loop_ir_generation() is equal to true:
        rust_print_string("‚úÖ Loop test PASSED\n")
        Set tests_passed to tests_passed plus 1
    Otherwise:
        rust_print_string("‚ùå Loop test FAILED\n")
    End If
    
    If test_ssa_form_conversion() is equal to true:
        rust_print_string("‚úÖ SSA form test PASSED\n")
        Set tests_passed to tests_passed plus 1
    Otherwise:
        rust_print_string("‚ùå SSA form test FAILED\n")
    End If
    
    If test_complex_program_ir_generation() is equal to true:
        rust_print_string("‚úÖ Complex program test PASSED\n")
        Set tests_passed to tests_passed plus 1
    Otherwise:
        rust_print_string("‚ùå Complex program test FAILED\n")
    End If
    
    rust_print_string("\nüèÅ IR BUILDER TEST RESULTS üèÅ\n")
    
    If tests_passed is equal to total_tests:
        rust_print_string("üéâ ALL IR BUILDER TESTS PASSED! üéâ\n")
        rust_print_string("‚úÖ AST to IR transformation works\n")
        rust_print_string("‚úÖ Basic blocks created properly\n")
        rust_print_string("‚úÖ Control flow handled correctly\n")
        rust_print_string("‚úÖ SSA form conversion works\n")
        rust_print_string("‚úÖ Complex programs handled\n")
        rust_print_string("‚úÖ Ready for code_generator integration\n")
        Return 0
    Otherwise:
        rust_print_string("‚ùå SOME IR BUILDER TESTS FAILED\n")
        rust_print_string("Fix issues before proceeding to code_generator\n")
        Return 1
    End If
End Process