Note: Test suite for diagnostic_system.runa
Note: Tests all core functionality including error reporting, formatting, and recovery

Import module "core_libs" as Core
Import module "diagnostic_system" as Diag

Process called "test_diagnostic_context_creation" returns Boolean:
    Note: Test basic diagnostic context creation
    
    Let context be Diag.create_diagnostic_context()
    
    If context.error_count is not equal to 0:
        Core.print_string("FAIL: Initial error count should be 0\n")
        Return false
    End If
    
    If context.warning_count is not equal to 0:
        Core.print_string("FAIL: Initial warning count should be 0\n")
        Return false
    End If
    
    If context.max_errors is not equal to 100:
        Core.print_string("FAIL: Max errors should be 100\n")
        Return false
    End If
    
    If context.color_output is not equal to true:
        Core.print_string("FAIL: Color output should be enabled by default\n")
        Return false
    End If
    
    Core.print_string("PASS: Diagnostic context creation\n")
    Return true
End Process

Process called "test_source_location_creation" returns Boolean:
    Note: Test source location creation and validation
    
    Let loc be Diag.create_source_location("test.runa", 10, 5, 3)
    
    If Core.string_compare(loc.file_path, "test.runa") is not equal to 0:
        Core.print_string("FAIL: File path not set correctly\n")
        Return false
    End If
    
    If loc.line is not equal to 10:
        Core.print_string("FAIL: Line number not set correctly\n")
        Return false
    End If
    
    If loc.column is not equal to 5:
        Core.print_string("FAIL: Column number not set correctly\n")
        Return false
    End If
    
    If loc.length is not equal to 3:
        Core.print_string("FAIL: Length not set correctly\n")
        Return false
    End If
    
    Core.print_string("PASS: Source location creation\n")
    Return true
End Process

Process called "test_source_location_validation" returns Boolean:
    Note: Test source location input validation
    
    Note: Test invalid line number
    Try:
        Let invalid_loc be Diag.create_source_location("test.runa", 0, 5, 3)
        Core.print_string("FAIL: Should have thrown error for line 0\n")
        Return false
    Catch error as Core.ValueError:
        Note: Expected error for invalid line
    End Try
    
    Note: Test invalid column number  
    Try:
        Let invalid_loc be Diag.create_source_location("test.runa", 1, 0, 3)
        Core.print_string("FAIL: Should have thrown error for column 0\n")
        Return false
    Catch error as Core.ValueError:
        Note: Expected error for invalid column
    End Try
    
    Note: Test negative length
    Try:
        Let invalid_loc be Diag.create_source_location("test.runa", 1, 1, -1)
        Core.print_string("FAIL: Should have thrown error for negative length\n")
        Return false
    Catch error as Core.ValueError:
        Note: Expected error for negative length
    End Try
    
    Core.print_string("PASS: Source location validation\n")
    Return true
End Process

Process called "test_error_reporting" returns Boolean:
    Note: Test error reporting functionality
    
    Let context be Diag.create_diagnostic_context()
    Let location be Diag.create_source_location("test.runa", 5, 10, 7)
    
    Let diagnostic be Diag.report_error(context, "E001", "Test error message", location)
    
    If Core.string_compare(diagnostic.severity, "error") is not equal to 0:
        Core.print_string("FAIL: Diagnostic severity should be 'error'\n")
        Return false
    End If
    
    If Core.string_compare(diagnostic.code, "E001") is not equal to 0:
        Core.print_string("FAIL: Diagnostic code should be 'E001'\n")
        Return false
    End If
    
    If Core.string_compare(diagnostic.message, "Test error message") is not equal to 0:
        Core.print_string("FAIL: Diagnostic message incorrect\n")
        Return false
    End If
    
    If context.error_count is not equal to 1:
        Core.print_string("FAIL: Context error count should be 1\n")
        Return false
    End If
    
    Core.print_string("PASS: Error reporting\n")
    Return true
End Process

Process called "test_warning_reporting" returns Boolean:
    Note: Test warning reporting functionality
    
    Let context be Diag.create_diagnostic_context()
    Let location be Diag.create_source_location("test.runa", 3, 8, 5)
    
    Let diagnostic be Diag.report_warning(context, "W001", "Test warning message", location)
    
    If Core.string_compare(diagnostic.severity, "warning") is not equal to 0:
        Core.print_string("FAIL: Diagnostic severity should be 'warning'\n")
        Return false
    End If
    
    If context.warning_count is not equal to 1:
        Core.print_string("FAIL: Context warning count should be 1\n")
        Return false
    End If
    
    If context.error_count is not equal to 0:
        Core.print_string("FAIL: Context error count should remain 0\n")
        Return false
    End If
    
    Core.print_string("PASS: Warning reporting\n")
    Return true
End Process

Process called "test_diagnostic_notes" returns Boolean:
    Note: Test adding notes to diagnostics
    
    Let context be Diag.create_diagnostic_context()
    Let location be Diag.create_source_location("test.runa", 1, 1, 1)
    
    Let diagnostic be Diag.report_error(context, "E002", "Test error", location)
    Let updated be Diag.add_note(diagnostic, "This is a helpful note", null)
    
    If Core.list_length(updated.notes) is not equal to 1:
        Core.print_string("FAIL: Should have 1 note\n")
        Return false
    End If
    
    Let note be Core.list_get(updated.notes, 0)
    If Core.string_compare(note, "This is a helpful note") is not equal to 0:
        Core.print_string("FAIL: Note content incorrect\n")
        Return false
    End If
    
    Core.print_string("PASS: Diagnostic notes\n")
    Return true
End Process

Process called "test_diagnostic_formatting" returns Boolean:
    Note: Test diagnostic formatting with colors
    
    Let context be Diag.create_diagnostic_context()
    Let location be Diag.create_source_location("test.runa", 5, 10, 3)
    
    Let diagnostic be Diag.report_error(context, "E003", "Formatting test", location)
    Let formatted be Diag.format_diagnostic(diagnostic, context)
    
    If Core.string_contains(formatted, "error[E003]") is equal to false:
        Core.print_string("FAIL: Formatted output should contain error code\n")
        Return false
    End If
    
    If Core.string_contains(formatted, "Formatting test") is equal to false:
        Core.print_string("FAIL: Formatted output should contain message\n")
        Return false
    End If
    
    If Core.string_contains(formatted, "test.runa:5:10") is equal to false:
        Core.print_string("FAIL: Formatted output should contain location\n")
        Return false
    End If
    
    Core.print_string("PASS: Diagnostic formatting\n")
    Return true
End Process

Process called "test_json_formatting" returns Boolean:
    Note: Test JSON diagnostic formatting
    
    Let context be Diag.create_diagnostic_context()
    Let location be Diag.create_source_location("test.runa", 2, 4, 6)
    
    Let diagnostic be Diag.report_warning(context, "W002", "JSON test", location)
    Let json_output be Diag.format_json_diagnostic(diagnostic)
    
    If Core.string_contains(json_output, "\"severity\":\"warning\"") is equal to false:
        Core.print_string("FAIL: JSON should contain severity\n")
        Return false
    End If
    
    If Core.string_contains(json_output, "\"code\":\"W002\"") is equal to false:
        Core.print_string("FAIL: JSON should contain code\n")
        Return false
    End If
    
    If Core.string_contains(json_output, "\"message\":\"JSON test\"") is equal to false:
        Core.print_string("FAIL: JSON should contain message\n")
        Return false
    End If
    
    If Core.string_contains(json_output, "\"line\":2") is equal to false:
        Core.print_string("FAIL: JSON should contain line number\n")
        Return false
    End If
    
    Core.print_string("PASS: JSON formatting\n")
    Return true
End Process

Process called "test_compilation_continuation" returns Boolean:
    Note: Test compilation continuation logic
    
    Let context be Diag.create_diagnostic_context()
    
    Note: Empty context should allow continuation
    If Diag.should_continue_compilation(context) is not equal to true:
        Core.print_string("FAIL: Empty context should allow continuation\n")
        Return false
    End If
    
    Note: Add warnings - should still continue
    Let location be Diag.create_source_location("test.runa", 1, 1, 1)
    Let warning be Diag.report_warning(context, "W003", "Warning", location)
    
    If Diag.should_continue_compilation(context) is not equal to true:
        Core.print_string("FAIL: Warnings should not stop compilation\n")
        Return false
    End If
    
    Note: Add recoverable error - should still continue
    Let error be Diag.report_error(context, "E004", "Recoverable error", location)
    
    If Diag.should_continue_compilation(context) is not equal to true:
        Core.print_string("FAIL: Recoverable errors should allow continuation\n")
        Return false
    End If
    
    Core.print_string("PASS: Compilation continuation\n")
    Return true
End Process

Process called "test_error_recovery" returns Boolean:
    Note: Test error recovery assessment
    
    Let context be Diag.create_diagnostic_context()
    Let location be Diag.create_source_location("test.runa", 1, 1, 1)
    
    Note: Test recoverable error
    Let recoverable be Diag.report_error(context, "E005", "Syntax error", location)
    If Diag.can_recover_from(recoverable) is not equal to true:
        Core.print_string("FAIL: Syntax errors should be recoverable\n")
        Return false
    End If
    
    Note: Test fatal error
    Let fatal be Diag.report_error(context, "F001", "Fatal error", location)
    If Diag.can_recover_from(fatal) is not equal to false:
        Core.print_string("FAIL: Fatal errors should not be recoverable\n")
        Return false
    End If
    
    Note: Test internal compiler error
    Let internal be Diag.report_error(context, "E001", "Internal error", location)
    If Diag.can_recover_from(internal) is not equal to false:
        Core.print_string("FAIL: Internal errors should not be recoverable\n")
        Return false
    End If
    
    Core.print_string("PASS: Error recovery\n")
    Return true
End Process

Process called "run_all_diagnostic_tests" returns Boolean:
    Note: Run comprehensive test suite
    
    Core.print_string("=== Diagnostic System Test Suite ===\n")
    
    Let all_passed be true
    
    If test_diagnostic_context_creation() is equal to false:
        Set all_passed to false
    End If
    
    If test_source_location_creation() is equal to false:
        Set all_passed to false
    End If
    
    If test_source_location_validation() is equal to false:
        Set all_passed to false
    End If
    
    If test_error_reporting() is equal to false:
        Set all_passed to false
    End If
    
    If test_warning_reporting() is equal to false:
        Set all_passed to false
    End If
    
    If test_diagnostic_notes() is equal to false:
        Set all_passed to false
    End If
    
    If test_diagnostic_formatting() is equal to false:
        Set all_passed to false
    End If
    
    If test_json_formatting() is equal to false:
        Set all_passed to false
    End If
    
    If test_compilation_continuation() is equal to false:
        Set all_passed to false
    End If
    
    If test_error_recovery() is equal to false:
        Set all_passed to false
    End If
    
    If all_passed is equal to true:
        Core.print_string("=== ALL TESTS PASSED ===\n")
    Otherwise:
        Core.print_string("=== SOME TESTS FAILED ===\n")
    End If
    
    Return all_passed
End Process

Process called "main" returns Integer:
    Note: Main test entry point
    
    Let success be run_all_diagnostic_tests()
    
    If success is equal to true:
        Return 0
    Otherwise:
        Return 1
    End If
End Process