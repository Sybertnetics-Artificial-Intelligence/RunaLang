Note: Test parser frontend interfaces for compiler integration
Note: Validates tokenization, parsing, and AST manipulation

Import module "core_libs" as Core
Import module "parser_frontend" as Parser

Process called "test_tokenization" returns Boolean:
    Note: Test tokenization functionality
    
    Let simple_source be "Let x be 42"
    Let token_stream be Parser.tokenize(simple_source)
    
    Note: Verify token stream structure
    If token_stream.tokens is null:
        Core.print_string("FAIL: TokenStream.tokens is null\n")
        Return false
    End If
    
    If token_stream.current_index is not equal to 0:
        Core.print_string("FAIL: TokenStream.current_index not initialized to 0\n")
        Return false
    End If
    
    If token_stream.source_file is null:
        Core.print_string("FAIL: TokenStream.source_file is null\n")
        Return false
    End If
    
    Note: Verify we have tokens
    If Core.array_length(token_stream.tokens) is equal to 0:
        Core.print_string("FAIL: No tokens produced\n")
        Return false
    End If
    
    Core.print_string("PASS: Tokenization\n")
    Return true
End Process

Process called "test_parsing" returns Boolean:
    Note: Test basic parsing functionality
    
    Let simple_source be "Let x be 42"
    Let token_stream be Parser.tokenize(simple_source)
    Let ast be Parser.parse(token_stream)
    
    Note: Verify AST structure
    If ast.node_type is null:
        Core.print_string("FAIL: AST.node_type is null\n")
        Return false
    End If
    
    If ast.children is null:
        Core.print_string("FAIL: AST.children is null\n")
        Return false
    End If
    
    If ast.start_token is null:
        Core.print_string("FAIL: AST.start_token is null\n")
        Return false
    End If
    
    If ast.end_token is null:
        Core.print_string("FAIL: AST.end_token is null\n")
        Return false
    End If
    
    Core.print_string("PASS: Parsing\n")
    Return true
End Process

Process called "test_ast_validation" returns Boolean:
    Note: Test AST validation functionality
    
    Let simple_source be "Let x be 42"
    Let token_stream be Parser.tokenize(simple_source)
    Let ast be Parser.parse(token_stream)
    Let result be Parser.validate_ast(ast)
    
    Note: Verify validation result structure
    If result.success is null:
        Core.print_string("FAIL: ValidationResult.success is null\n")
        Return false
    End If
    
    Note: For simple valid AST, should succeed
    If result.success is not equal to true:
        Core.print_string("FAIL: Valid AST failed validation\n")
        Return false
    End If
    
    Core.print_string("PASS: AST validation\n")
    Return true
End Process

Process called "test_ast_optimization" returns Boolean:
    Note: Test AST optimization functionality
    
    Let simple_source be "Let x be 42"
    Let token_stream be Parser.tokenize(simple_source)
    Let ast be Parser.parse(token_stream)
    Let optimized_ast be Parser.optimize_ast(ast)
    
    Note: Verify optimized AST has same structure
    If optimized_ast.node_type is null:
        Core.print_string("FAIL: Optimized AST.node_type is null\n")
        Return false
    End If
    
    If optimized_ast.children is null:
        Core.print_string("FAIL: Optimized AST.children is null\n")
        Return false
    End If
    
    Core.print_string("PASS: AST optimization\n")
    Return true
End Process

Process called "test_error_handling" returns Boolean:
    Note: Test parser error handling
    
    Let invalid_source be "Let x be"  Note: Incomplete statement
    Let token_stream be Parser.tokenize(invalid_source)
    Let ast be Parser.parse(token_stream)
    
    Note: Parser should handle errors gracefully
    If ast is null:
        Core.print_string("FAIL: Parser returned null for invalid input\n")
        Return false
    End If
    
    Note: Should have some error indication
    Note: For bootstrap, we accept that parsing continues with errors
    
    Core.print_string("PASS: Error handling\n")
    Return true
End Process

Process called "main" returns Integer:
    Note: Run interface validation tests
    
    Core.print_string("=== Parser Interface Tests ===\n")
    
    Let all_passed be true
    
    If test_tokenization() is equal to false:
        Set all_passed to false
    End If
    
    If test_parsing() is equal to false:
        Set all_passed to false
    End If
    
    If test_ast_validation() is equal to false:
        Set all_passed to false
    End If
    
    If test_ast_optimization() is equal to false:
        Set all_passed to false
    End If
    
    If test_error_handling() is equal to false:
        Set all_passed to false
    End If
    
    If all_passed is equal to true:
        Core.print_string("=== ALL PARSER INTERFACE TESTS PASSED ===\n")
        Return 0
    Otherwise:
        Core.print_string("=== PARSER INTERFACE TESTS FAILED ===\n")
        Return 1
    End If
End Process