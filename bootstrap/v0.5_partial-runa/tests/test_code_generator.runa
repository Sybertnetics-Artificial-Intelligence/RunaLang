Note: Tests for code_generator.runa
Note: Validates code generation interface and backend integration

Import module "../code_generator" as CodeGen
Import module "../ir_generator" as IR
Import module "../core_libs" as Core

External Process called "rust_print_string" that takes text as String

Note: Mock functions for testing
External Process called "mock_create_ir_module" returns Integer
External Process called "mock_verify_codegen" that takes backend as Integer returns Boolean

Process called "test_target_platform_creation" returns Boolean:
    Note: Test target platform creation and parsing
    
    rust_print_string("[TEST] Target Platform Creation\n")
    
    Note: Test native target detection
    Let native_target be CodeGen.get_native_target()
    
    If native_target.architecture is equal to "":
        rust_print_string("  ✗ Failed to detect native target\n")
        Return false
    End If
    
    rust_print_string("  ✓ Native target detected: ")
    rust_print_string(native_target.architecture)
    rust_print_string("-")
    rust_print_string(native_target.operating_system)
    rust_print_string("\n")
    
    Note: Test target triple parsing
    Let test_triple be "x86_64-unknown-linux-gnu"
    Let parsed_target be CodeGen.parse_target_triple(test_triple)
    
    If parsed_target.architecture is not equal to "x86_64":
        rust_print_string("  ✗ Failed to parse architecture from triple\n")
        Return false
    End If
    
    If parsed_target.operating_system is not equal to "linux":
        rust_print_string("  ✗ Failed to parse OS from triple\n")
        Return false
    End If
    
    rust_print_string("  ✓ Target triple parsed correctly\n")
    
    Note: Test target validation
    Let validation_errors be CodeGen.validate_target(parsed_target)
    If Core.list_length(validation_errors) is greater than 0:
        rust_print_string("  ✗ Valid target failed validation\n")
        Return false
    End If
    
    rust_print_string("  ✓ Target validation passed\n")
    Return true
End Process

Process called "test_codegen_context_creation" returns Boolean:
    Note: Test code generation context setup
    
    rust_print_string("[TEST] Codegen Context Creation\n")
    
    Note: Create target platform
    Let target be CodeGen.TargetPlatform with
        architecture as "x86_64",
        operating_system as "linux",
        abi as "gnu",
        cpu_features as Core.create_list(),
        pointer_size as 8,
        endianness as "little",
        calling_convention as "cdecl"
    
    Note: Create codegen options
    Let options be CodeGen.CodegenOptions with
        optimization_level as 2,
        debug_info as true,
        output_type as "object",
        pic as false,
        link_time_optimization as false,
        target_features as Core.create_list(),
        code_model as "small"
    
    Note: Create context
    Let context be CodeGen.create_codegen_context(target, options)
    
    If context.target.architecture is not equal to "x86_64":
        rust_print_string("  ✗ Context target not set correctly\n")
        Return false
    End If
    
    If context.options.optimization_level is not equal to 2:
        rust_print_string("  ✗ Context options not set correctly\n")
        Return false
    End If
    
    rust_print_string("  ✓ Codegen context created successfully\n")
    Return true
End Process

Process called "test_backend_selection" returns Boolean:
    Note: Test backend selection logic
    
    rust_print_string("[TEST] Backend Selection\n")
    
    Note: Test LLVM backend selection for native
    Let native_target be CodeGen.TargetPlatform with
        architecture as "x86_64",
        operating_system as "linux",
        abi as "",
        cpu_features as Core.create_list(),
        pointer_size as 8,
        endianness as "little",
        calling_convention as "cdecl"
    
    Let backend be CodeGen.select_backend(native_target)
    If backend is not equal to "llvm":
        rust_print_string("  ✗ Wrong backend selected for native target\n")
        Return false
    End If
    rust_print_string("  ✓ LLVM backend selected for native\n")
    
    Note: Test WASM backend selection
    Let wasm_target be CodeGen.TargetPlatform with
        architecture as "wasm32",
        operating_system as "wasi",
        abi as "",
        cpu_features as Core.create_list(),
        pointer_size as 4,
        endianness as "little",
        calling_convention as "cdecl"
    
    Let wasm_backend be CodeGen.select_backend(wasm_target)
    If wasm_backend is not equal to "wasm":
        rust_print_string("  ✗ Wrong backend selected for WASM target\n")
        Return false
    End If
    rust_print_string("  ✓ WASM backend selected for wasm32\n")
    
    Return true
End Process

Process called "test_code_generation" returns Boolean:
    Note: Test basic code generation flow
    
    rust_print_string("[TEST] Code Generation\n")
    
    Note: Create target and options
    Let target be CodeGen.get_native_target()
    Let options be CodeGen.CodegenOptions with
        optimization_level as 0,
        debug_info as false,
        output_type as "llvm-ir",
        pic as false,
        link_time_optimization as false,
        target_features as Core.create_list(),
        code_model as "small"
    
    Note: Create context
    Let context be CodeGen.create_codegen_context(target, options)
    Set context.output_path to "/tmp/test_output"
    
    Note: Create mock IR module
    Let ir_module be mock_create_ir_module()
    
    Note: Generate code
    Let result be CodeGen.generate_code(ir_module, context)
    
    If result.success is equal to false:
        rust_print_string("  ✗ Code generation failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ Code generation completed\n")
    Return true
End Process

Process called "test_optimization_control" returns Boolean:
    Note: Test optimization control
    
    rust_print_string("[TEST] Optimization Control\n")
    
    Note: Create mock backend handle
    Let backend be 12345
    
    Note: Test optimization level setting
    Let opt_result be CodeGen.apply_backend_optimizations(backend, 2)
    If opt_result is equal to false:
        rust_print_string("  ✗ Failed to apply optimizations\n")
        Return false
    End If
    rust_print_string("  ✓ Optimizations applied\n")
    
    Note: Test size optimization
    Let size_result be CodeGen.optimize_for_size(backend)
    If size_result is equal to false:
        rust_print_string("  ✗ Failed to optimize for size\n")
        Return false
    End If
    rust_print_string("  ✓ Size optimization configured\n")
    
    Return true
End Process

Process called "test_debug_info_generation" returns Boolean:
    Note: Test debug information generation
    
    rust_print_string("[TEST] Debug Info Generation\n")
    
    Let backend be 54321
    Let context be CodeGen.create_codegen_context(
        CodeGen.get_native_target(),
        CodeGen.CodegenOptions with
            optimization_level as 0,
            debug_info as true,
            output_type as "object",
            pic as false,
            link_time_optimization as false,
            target_features as Core.create_list(),
            code_model as "small"
    )
    
    Note: Generate debug context
    Let debug_ctx be CodeGen.generate_debug_info(backend, context)
    
    If debug_ctx.source_files is equal to Core.null():
        rust_print_string("  ✗ Debug context not created\n")
        Return false
    End If
    rust_print_string("  ✓ Debug context created\n")
    
    Note: Test source mapping
    Let map_result be CodeGen.emit_source_mapping(100, 42, debug_ctx)
    If map_result is equal to false:
        rust_print_string("  ✗ Source mapping failed\n")
        Return false
    End If
    rust_print_string("  ✓ Source mapping recorded\n")
    
    Return true
End Process

Process called "test_target_triple_roundtrip" returns Boolean:
    Note: Test target triple creation and parsing
    
    rust_print_string("[TEST] Target Triple Roundtrip\n")
    
    Let original_target be CodeGen.TargetPlatform with
        architecture as "aarch64",
        operating_system as "macos",
        abi as "darwin",
        cpu_features as Core.create_list(),
        pointer_size as 8,
        endianness as "little",
        calling_convention as "aapcs"
    
    Note: Create triple from target
    Let triple be CodeGen.create_target_triple(original_target)
    rust_print_string("  Generated triple: ")
    rust_print_string(triple)
    rust_print_string("\n")
    
    Note: Parse it back
    Let parsed be CodeGen.parse_target_triple(triple)
    
    If parsed.architecture is not equal to original_target.architecture:
        rust_print_string("  ✗ Architecture mismatch in roundtrip\n")
        Return false
    End If
    
    If parsed.operating_system is not equal to original_target.operating_system:
        rust_print_string("  ✗ OS mismatch in roundtrip\n")
        Return false
    End If
    
    rust_print_string("  ✓ Target triple roundtrip successful\n")
    Return true
End Process

Process called "print_test_summary" that takes passed as Integer, failed as Integer returns Nothing:
    rust_print_string("\n=====================================\n")
    rust_print_string("CODEGEN INTERFACE TEST RESULTS:\n")
    rust_print_string("  Passed: ")
    rust_print_string(Core.integer_to_string(passed))
    rust_print_string("\n  Failed: ")
    rust_print_string(Core.integer_to_string(failed))
    rust_print_string("\n")
    
    If failed is equal to 0:
        rust_print_string("\n✓✓✓ ALL TESTS PASSED ✓✓✓\n")
    Otherwise:
        rust_print_string("\n✗✗✗ SOME TESTS FAILED ✗✗✗\n")
    End If
    rust_print_string("=====================================\n")
End Process

Process called "main" returns Nothing:
    Note: Main test runner
    
    rust_print_string("=====================================\n")
    rust_print_string("   CODEGEN INTERFACE TEST SUITE\n")
    rust_print_string("   Testing partial-runa/code_generator.runa\n")
    rust_print_string("=====================================\n\n")
    
    Let tests_passed be 0
    Let tests_failed be 0
    
    Note: Run each test
    If test_target_platform_creation() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_codegen_context_creation() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_backend_selection() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_code_generation() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_optimization_control() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_debug_info_generation() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_target_triple_roundtrip() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    print_test_summary(tests_passed, tests_failed)
End Process