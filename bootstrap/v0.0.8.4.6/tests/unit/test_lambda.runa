Note: Lambda Expression Test Suite
Note: Comprehensive test covering all lambda phases
Note: This file will be expanded as new phases are implemented

Process called "main" returns Integer:
    Note: Phase 1-2: Lambda creation (parsing and codegen)
    Let double be lambda x: x multiplied by 2
    Let add_ten be lambda n: n plus 10
    Let constant be lambda y: 42

    Note: Phase 3: Lambda invocation with single parameter
    Let result1 be double with 4
    If result1 is not equal to 8:
        Return 1
    End If

    Let result2 be add_ten with 5
    If result2 is not equal to 15:
        Return 2
    End If

    Let result3 be constant with 0
    If result3 is not equal to 42:
        Return 3
    End If

    Note: Phase 4: Multi-parameter lambdas
    Let add be lambda x, y: x plus y
    Let result4 be add with 3 and 5
    If result4 is not equal to 8:
        Return 4
    End If

    Let multiply be lambda a, b: a multiplied by b
    Let result5 be multiply with 7 and 6
    If result5 is not equal to 42:
        Return 5
    End If

    Let subtract be lambda m, n: m minus n
    Let result6 be subtract with 10 and 3
    If result6 is not equal to 7:
        Return 6
    End If

    Note: Phase 5: Closure capture - single variable
    Let x be 10
    Let add_x be lambda y: y plus x
    Let result7 be add_x with 5
    If result7 is not equal to 15:
        Return 7
    End If

    Let base be 100
    Let add_base be lambda val: val plus base
    Let result8 be add_base with 23
    If result8 is not equal to 123:
        Return 8
    End If

    Note: Phase 6: Closure capture - multiple variables
    Let a be 3
    Let b be 4
    Let multiply_and_add be lambda z: z multiplied by a plus b
    Let result9 be multiply_and_add with 2
    If result9 is not equal to 10:
        Return 9
    End If

    Let factor be 5
    Let offset be 7
    Let compute be lambda n: n multiplied by factor minus offset
    Let result10 be compute with 4
    If result10 is not equal to 13:
        Return 10
    End If

    Note: Phase 7: Nested closures - lambda capturing another lambda's variables
    Let outer_x be 10
    Let outer_lambda be lambda inner_y: inner_y plus outer_x
    Let result11 be outer_lambda with 5
    If result11 is not equal to 15:
        Return 11
    End If

    Note: Phase 8: Multiple lambdas sharing same closure variables
    Let shared_base be 1000
    Let add_base_1 be lambda v1: v1 plus shared_base
    Let add_base_2 be lambda v2: v2 plus shared_base
    Let result12 be add_base_1 with 23
    Let result13 be add_base_2 with 77
    If result12 is not equal to 1023:
        Return 12
    End If
    If result13 is not equal to 1077:
        Return 13
    End If

    Note: Phase 9: Multi-param lambda with closure capture
    Let multiplier be 2
    Let adder be 10
    Let compute_complex be lambda x, y: x multiplied by multiplier plus y plus adder
    Let result14 be compute_complex with 5 and 3
    If result14 is not equal to 23:
        Return 14
    End If

    Note: Phase 10: Type inference with lambdas
    Let inferred_double be lambda n: n multiplied by 2
    Let result15 be inferred_double with 21
    If result15 is not equal to 42:
        Return 15
    End If

    Note: All tests passed - comprehensive lambda and closure support
    Return 0
End Process
