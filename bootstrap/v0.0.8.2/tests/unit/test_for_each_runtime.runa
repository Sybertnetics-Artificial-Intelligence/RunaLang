Note: Test for-each loops with runtime list functions
Note: Tests Phase 3 codegen: STMT_FOR_EACH

Process called "main" returns Integer:
    Note: Test 1: Basic for-each over list literal
    Let numbers be a list containing 1, 2, 3, 4, 5
    Let sum be 0

    For each num in numbers:
        Set sum to sum plus num
    End For

    If sum is equal to 15:
        Display("PASS: For-each sum is 15 (1+2+3+4+5)")
    Otherwise:
        Display("FAIL: For-each sum")
    End If

    Note: Test 2: For-each with Display
    Display("For-each elements:")
    For each n in numbers:
        Display(integer_to_string(n))
    End For

    Note: Test 3: For-each over created list
    Let fruits be list_create()
    list_append(fruits, 100)
    list_append(fruits, 200)
    list_append(fruits, 300)

    Let product be 1
    For each val in fruits:
        Set product to product multiplied by val
    End For

    If product is equal to 6000000:
        Display("PASS: For-each product is 6000000 (100*200*300)")
    Otherwise:
        Display("FAIL: For-each product")
    End If

    Note: Test 4: For-each with modification
    Let doubles be a list containing 1, 2, 3
    Let i be 0
    For each elem in doubles:
        Let doubled be elem multiplied by 2
        list_set(doubles, i, doubled)
        Set i to i plus 1
    End For

    Let d1 be list_get(doubles, 0)
    Let d2 be list_get(doubles, 1)
    Let d3 be list_get(doubles, 2)

    If d1 is equal to 2:
        If d2 is equal to 4:
            If d3 is equal to 6:
                Display("PASS: For-each modification [2, 4, 6]")
            Otherwise:
                Display("FAIL: Third double")
            End If
        Otherwise:
            Display("FAIL: Second double")
        End If
    Otherwise:
        Display("FAIL: First double")
    End If

    Note: Test 5: Nested for-each
    Let matrix be a list containing 10, 20, 30
    Let total be 0

    For each row in matrix:
        For each col in matrix:
            Set total to total plus row plus col
        End For
    End For

    Note: Expected: (10+10) + (10+20) + (10+30) + (20+10) + (20+20) + (20+30) + (30+10) + (30+20) + (30+30)
    Note:         = 20 + 30 + 40 + 30 + 40 + 50 + 40 + 50 + 60 = 360
    If total is equal to 360:
        Display("PASS: Nested for-each total is 360")
    Otherwise:
        Display("FAIL: Nested for-each")
    End If

    Return 0
End Process
