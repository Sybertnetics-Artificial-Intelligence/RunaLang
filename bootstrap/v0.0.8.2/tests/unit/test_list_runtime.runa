Note: Test list runtime implementation
Note: Tests all list operations: create, append, get, set, insert, remove

Process called "main" returns Integer:
    Note: Test 1: Create empty list
    Let list be list_create()
    Let len be list_length(list)
    If len is equal to 0:
        Display("PASS: Empty list has length 0")
    Otherwise:
        Display("FAIL: Empty list has wrong length")
    End If

    Note: Test 2: Append elements
    Let result be list_append(list, 10)
    Set result to list_append(list, 20)
    Set result to list_append(list, 30)

    Set len to list_length(list)
    If len is equal to 3:
        Display("PASS: List length after 3 appends")
    Otherwise:
        Display("FAIL: Wrong length after appends")
    End If

    Note: Test 3: Get elements
    Let val be list_get(list, 0)
    If val is equal to 10:
        Display("PASS: Get element at index 0")
    Otherwise:
        Display("FAIL: Wrong value at index 0")
    End If

    Set val to list_get(list, 1)
    If val is equal to 20:
        Display("PASS: Get element at index 1")
    Otherwise:
        Display("FAIL: Wrong value at index 1")
    End If

    Set val to list_get(list, 2)
    If val is equal to 30:
        Display("PASS: Get element at index 2")
    Otherwise:
        Display("FAIL: Wrong value at index 2")
    End If

    Note: Test 4: Set elements
    Set result to list_set(list, 1, 25)
    Set val to list_get(list, 1)
    If val is equal to 25:
        Display("PASS: Set element at index 1")
    Otherwise:
        Display("FAIL: Set element failed")
    End If

    Note: Test 5: Insert element
    Set result to list_insert(list, 1, 15)
    Set len to list_length(list)
    If len is equal to 4:
        Display("PASS: Length after insert")
    Otherwise:
        Display("FAIL: Wrong length after insert")
    End If

    Set val to list_get(list, 0)
    If val is equal to 10:
        Display("PASS: Element 0 after insert")
    Otherwise:
        Display("FAIL: Element 0 wrong after insert")
    End If

    Set val to list_get(list, 1)
    If val is equal to 15:
        Display("PASS: Inserted element at index 1")
    Otherwise:
        Display("FAIL: Inserted element wrong")
    End If

    Set val to list_get(list, 2)
    If val is equal to 25:
        Display("PASS: Element 2 shifted correctly")
    Otherwise:
        Display("FAIL: Element 2 wrong after insert")
    End If

    Set val to list_get(list, 3)
    If val is equal to 30:
        Display("PASS: Element 3 shifted correctly")
    Otherwise:
        Display("FAIL: Element 3 wrong after insert")
    End If

    Note: Test 6: Remove element
    Set val to list_remove(list, 1)
    If val is equal to 15:
        Display("PASS: Removed element returned correctly")
    Otherwise:
        Display("FAIL: Removed element wrong value")
    End If

    Set len to list_length(list)
    If len is equal to 3:
        Display("PASS: Length after remove")
    Otherwise:
        Display("FAIL: Wrong length after remove")
    End If

    Set val to list_get(list, 0)
    If val is equal to 10:
        Display("PASS: Element 0 after remove")
    Otherwise:
        Display("FAIL: Element 0 wrong after remove")
    End If

    Set val to list_get(list, 1)
    If val is equal to 25:
        Display("PASS: Element 1 shifted left")
    Otherwise:
        Display("FAIL: Element 1 wrong after remove")
    End If

    Set val to list_get(list, 2)
    If val is equal to 30:
        Display("PASS: Element 2 shifted left")
    Otherwise:
        Display("FAIL: Element 2 wrong after remove")
    End If

    Note: Test 7: Test auto-resize by adding many elements
    Set result to list_clear(list)
    Set len to list_length(list)
    If len is equal to 0:
        Display("PASS: Clear operation")
    Otherwise:
        Display("FAIL: Clear operation failed")
    End If

    Note: Add 20 elements to trigger resize (capacity starts at 8)
    Let i be 0
    While i is less than 20:
        Set result to list_append(list, i)
        Set i to i plus 1
    End While

    Set len to list_length(list)
    If len is equal to 20:
        Display("PASS: Length after 20 appends (auto-resize)")
    Otherwise:
        Display("FAIL: Wrong length after auto-resize")
    End If

    Note: Verify all elements
    Set i to 0
    Let all_correct be 1
    While i is less than 20:
        Set val to list_get(list, i)
        If val is equal to i:
            Note: Correct
        Otherwise:
            Set all_correct to 0
        End If
        Set i to i plus 1
    End While

    If all_correct is equal to 1:
        Display("PASS: All 20 elements correct after resize")
    Otherwise:
        Display("FAIL: Some elements wrong after resize")
    End If

    Note: Test 8: Clean up
    Set result to list_destroy(list)
    Display("PASS: List destroyed successfully")

    Return 0
End Process
