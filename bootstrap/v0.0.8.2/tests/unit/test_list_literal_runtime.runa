Note: Test list literals with runtime list functions
Note: Tests Phase 3 codegen: EXPR_LIST_LITERAL now uses list_create()/list_append()

Process called "main" returns Integer:
    Note: Test 1: Simple list literal
    Let numbers be a list containing 10, 20, 30
    Let len be list_length(numbers)
    If len is equal to 3:
        Display("PASS: List literal has length 3")
    Otherwise:
        Display("FAIL: List literal length (expected 3)")
    End If

    Note: Test 2: Access list elements
    Let first be list_get(numbers, 0)
    If first is equal to 10:
        Display("PASS: First element is 10")
    Otherwise:
        Display("FAIL: First element")
    End If

    Let second be list_get(numbers, 1)
    If second is equal to 20:
        Display("PASS: Second element is 20")
    Otherwise:
        Display("FAIL: Second element")
    End If

    Let third be list_get(numbers, 2)
    If third is equal to 30:
        Display("PASS: Third element is 30")
    Otherwise:
        Display("FAIL: Third element")
    End If

    Note: Test 3: Single element list
    Let single be a list containing 42
    Let single_len be list_length(single)
    If single_len is equal to 1:
        Display("PASS: Single element list has length 1")
    Otherwise:
        Display("FAIL: Single element list length")
    End If

    Let single_val be list_get(single, 0)
    If single_val is equal to 42:
        Display("PASS: Single element value is 42")
    Otherwise:
        Display("FAIL: Single element value")
    End If

    Note: Test 4: List with expressions
    Let x be 5
    Let y be 10
    Let computed be a list containing x, y, x plus y
    Let comp_len be list_length(computed)
    If comp_len is equal to 3:
        Display("PASS: Computed list has length 3")
    Otherwise:
        Display("FAIL: Computed list length")
    End If

    Let comp_val be list_get(computed, 2)
    If comp_val is equal to 15:
        Display("PASS: Computed element (5+10=15)")
    Otherwise:
        Display("FAIL: Computed element")
    End If

    Note: Test 5: Modify list after creation
    list_append(numbers, 40)
    Let new_len be list_length(numbers)
    If new_len is equal to 4:
        Display("PASS: List append increases length to 4")
    Otherwise:
        Display("FAIL: List append length")
    End If

    Let fourth be list_get(numbers, 3)
    If fourth is equal to 40:
        Display("PASS: Appended element is 40")
    Otherwise:
        Display("FAIL: Appended element")
    End If

    Return 0
End Process
