Note: Comprehensive test of all v0.1 features needed for v0.2 compilation
Note: This test verifies that v0.1 can compile the constructs v0.2 will use

Type called CompilerState:
    version as Integer
    phase as String
End Type

Process called test_string_ops returns Integer:
    Let hello be "Hello"
    Let world be " World"
    Let greeting be string_concat(hello, world)
    Let len be string_length(greeting)
    Let first_char be string_char_at(greeting, 0)
    Let sub be string_substring(greeting, 0, 5)

    Let result be 0
    If len is equal to 11:
        Set result to 1
    End If
    Return result
End Process

Process called test_collections returns Integer:
    Let numbers be a list containing 10, 20, 30
    Add 40 to end of numbers

    Let size be length of numbers
    Let first be numbers at index 0
    Let last be numbers at index 3

    Let result be 0
    If size is equal to 4:
        If first is equal to 10:
            If last is equal to 40:
                Set result to 1
            End If
        End If
    End If
    Return result
End Process

Process called test_control_flow returns Integer:
    Let counter be 0

    Note: Test While loop
    While counter is less than 5:
        Set counter to counter plus 1
    End While

    Note: Test For Each loop
    Let sum be 0
    Let values be a list containing 1, 2, 3, 4, 5
    For Each val in values:
        Set sum to sum plus val
    End For

    Note: Test Match expression
    Let result be 0
    Match sum:
        When 10:
            Set result to 0
        When 15:
            Set counter to 100
        When 20:
            Set result to 0
    End Match

    If counter is equal to 100:
        Set result to 1
    End If
    Return result
End Process

Process called test_file_io returns Integer:
    Let test_content be "Test file content with escape: \n\t\"quoted\""
    WriteFile test_content to "test_v01.txt"

    Let read_content be ReadFile("test_v01.txt")
    Let read_len be string_length(read_content)

    Let result be 0
    If read_len is greater than 0:
        Set result to 1
    End If
    Return result
End Process

Process called test_types returns Integer:
    Let state be a value of Type CompilerState with
        version as 1,
        phase as "bootstrap"

    Note: Field access deferred but type instantiation works
    Return 1
End Process

Process called helper_function that takes x as Integer, y as Integer returns Integer:
    Return x plus y
End Process

Process called test_functions returns Integer:
    Let result be helper_function(10, 20)
    Let test_result be 0
    If result is equal to 30:
        Set test_result to 1
    End If
    Return test_result
End Process

Process called test_character_ops returns Integer:
    Let digit_char be 53  Note: ASCII '5'
    Let letter_char be 65  Note: ASCII 'A'

    Let is_d be is_digit(digit_char)
    Let is_l be is_letter(letter_char)

    Let result be 0
    If is_d:
        If is_l:
            Set result to 1
        End If
    End If
    Return result
End Process

Process called main returns Integer:
    Let tests_passed be 0

    Note: Run all feature tests
    Set tests_passed to tests_passed plus test_string_ops()
    Set tests_passed to tests_passed plus test_collections()
    Set tests_passed to tests_passed plus test_control_flow()
    Set tests_passed to tests_passed plus test_file_io()
    Set tests_passed to tests_passed plus test_types()
    Set tests_passed to tests_passed plus test_functions()
    Set tests_passed to tests_passed plus test_character_ops()

    Note: All 7 tests should pass
    Return tests_passed
End Process