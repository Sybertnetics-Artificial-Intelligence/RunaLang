Note:
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note

Note: Test for simple import system functionality

Process called "test_basic_import" returns Integer:
    Note: Test basic import functionality
    
    print_string("[TEST] Testing basic import system...")
    
    Note: Create test arena
    Let arena be arena_create(4096)
    If arena is equal to 0:
        print_string("[TEST ERROR] Failed to create arena")
        Return 1
    End If
    
    Note: Create a simple program structure
    Let program be arena_allocate(arena, 64)
    If program is equal to 0:
        print_string("[TEST ERROR] Failed to allocate program")
        arena_destroy(arena)
        Return 1
    End If
    
    Note: Initialize program structure
    memory_set_pointer(program, 0, 0)  Note: functions = null
    memory_set_int32(program, 8, 0)   Note: function_count = 0
    memory_set_pointer(program, 32, 0)  Note: imports = null
    memory_set_int32(program, 40, 0)   Note: import_count = 0
    memory_set_pointer(program, 40, 0)  Note: types = null
    memory_set_int32(program, 32, 0)   Note: type_count = 0
    
    Note: Test import context creation
    Let context be import_context_create(arena)
    If context is equal to 0:
        print_string("[TEST ERROR] Failed to create import context")
        arena_destroy(arena)
        Return 1
    End If
    
    print_string("[TEST SUCCESS] Import context created successfully")
    
    Note: Test visited file tracking
    Let test_filename be "test_file.runa"
    Let is_visited be import_context_is_visited(context, test_filename)
    If is_visited is not equal to 0:
        print_string("[TEST ERROR] File should not be visited yet")
        arena_destroy(arena)
        Return 1
    End If
    
    Note: Mark file as visited
    Let mark_result be import_context_mark_visited(context, test_filename, arena)
    If mark_result is equal to 0:
        print_string("[TEST ERROR] Failed to mark file as visited")
        arena_destroy(arena)
        Return 1
    End If
    
    Note: Check if file is now visited
    Let is_visited_after be import_context_is_visited(context, test_filename)
    If is_visited_after is equal to 0:
        print_string("[TEST ERROR] File should be visited now")
        arena_destroy(arena)
        Return 1
    End If
    
    print_string("[TEST SUCCESS] Visited file tracking works correctly")
    
    Note: Test import stack operations
    Let push_result be import_context_push_stack(context, test_filename, arena)
    If push_result is equal to 0:
        print_string("[TEST ERROR] Failed to push to import stack")
        arena_destroy(arena)
        Return 1
    End If
    
    Note: Check if file is in stack
    Let is_in_stack be import_context_is_in_stack(context, test_filename)
    If is_in_stack is equal to 0:
        print_string("[TEST ERROR] File should be in import stack")
        arena_destroy(arena)
        Return 1
    End If
    
    Note: Pop from stack
    Let pop_result be import_context_pop_stack(context)
    If pop_result is equal to 0:
        print_string("[TEST ERROR] Failed to pop from import stack")
        arena_destroy(arena)
        Return 1
    End If
    
    print_string("[TEST SUCCESS] Import stack operations work correctly")
    
    Note: Test circular dependency detection
    Let push_result2 be import_context_push_stack(context, test_filename, arena)
    If push_result2 is equal to 0:
        print_string("[TEST ERROR] Failed to push to import stack for cycle test")
        arena_destroy(arena)
        Return 1
    End If
    
    Let is_in_stack_after be import_context_is_in_stack(context, test_filename)
    If is_in_stack_after is equal to 0:
        print_string("[TEST ERROR] File should be in import stack for cycle test")
        arena_destroy(arena)
        Return 1
    End If
    
    print_string("[TEST SUCCESS] Circular dependency detection works correctly")
    
    Note: Cleanup
    arena_destroy(arena)
    
    print_string("[TEST SUCCESS] All basic import system tests passed!")
    Return 0
End Process

Process called "main" returns Integer:
    Note: Main test runner
    
    print_string("=== Simple Import System Tests ===")
    
    Let result be test_basic_import()
    If result is not equal to 0:
        print_string("[TEST FAILURE] Basic import test failed")
        Return 1
    End If
    
    print_string("=== All Tests Passed ===")
    Return 0
End Process
