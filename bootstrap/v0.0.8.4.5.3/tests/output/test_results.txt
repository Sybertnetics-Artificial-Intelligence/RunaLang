Test Results - Wed Oct 22 22:48:32 EDT 2025
========================================
PASSED: debug_import
Output:
8

PASSED: test_adt_explicit
Output:

PASSED: test_adt_multi_variant
Output:

PASSED: test_arithmetic_ops
Output:
25
15
100
4
2

PASSED: test_array_indexing
Output:
10
30
50

PASSED: test_basic_types
Output:
42
Hello Runa
65

PASSED: test_bitwise_ops
Output:
4
13
9
48
3

PASSED: test_boolean_literals
Output:
PASS: true literal
PASS: false literal
PASS: comparison result is true

PASSED: test_break_continue
Output:
25
5

PASSED: test_collections_dictionaries
Output:
PASS: All dictionary tests

PASSED: test_collections_for_each
Output:
PASS: All for-each tests

PASSED: test_collections_lists
Output:
PASS: All list tests

PASSED: test_collections_sets
Output:
PASS: All set tests

PASSED: test_comments
Output:
10
20

PASSED: test_comparison_ops
Output:
PASS: is equal to
PASS: is not equal to
PASS: is less than
PASS: is greater than
PASS: is less than or equal to
PASS: is greater than or equal to
PASS: is not less than
PASS: is not greater than

PASSED: test_compound_assignment
Output:
15
23
20
35
12
12
10
20

PASSED: test_control_flow
Output:
PASS: If condition true
PASS: If condition false
PASS: Simple Otherwise If - first condition (got 100)
PASS: Simple Otherwise If - second condition (got 200)
PASS: Simple Otherwise If - default Otherwise (got 999)
PASS: Multi Otherwise If - condition 1
PASS: Multi Otherwise If - condition 3
PASS: Multi Otherwise If - condition 5
PASS: Multi Otherwise If - default Otherwise
PASS: Nested Otherwise If - (1,1)
PASS: Nested Otherwise If - (1,2)
PASS: Nested Otherwise If - (2,1)
PASS: Nested Otherwise If - (2,2)
PASS: Nested Otherwise If - (9,9) default
PASS: Complex conditions - less than 10
PASS: Complex conditions - 10-19
PASS: Complex conditions - 20-29
PASS: Complex conditions - 30+
PASS: No Otherwise - condition 1
PASS: No Otherwise - condition 2
PASS: No Otherwise - fall through
PASS: While loop sum

PASSED: test_deep_recursion
Output:

PASSED: test_division_by_zero
Output:

PASSED: test_field_access
Output:
10
20
200
450

PASSED: test_for_loops
Output:
15
30
45

PASSED: test_for_minimal
Output:
ok

PASSED: test_for_mixed
Output:

PASSED: test_functions
Output:
15
12
27

PASSED: test_import_syntax
Output:
Import syntax test passed

PASSED: test_imports
Output:
15
12
10

PASSED: test_inline_assembly
Output:

PASSED: test_integer_overflow
Output:

PASSED: test_lambda
Output:

PASSED: test_large_numbers
Output:

PASSED: test_logical_ops
Output:
PASS: and (both true)
PASS: and (first false)
PASS: and (second false)
PASS: or (both true)
PASS: or (first true)
PASS: or (second true)
PASS: or (both false)

PASSED: test_match
Output:
Phase 1: Minimal Match Test
  ✓ Minimal match works
Phase 2: Literal Pattern Matching
  ✓ Exact match (5 = 5)
  ✓ Wildcard catches non-matching value (99)
  ✓ Matched 42 correctly
Phase 3: Wildcard Pattern Tests
  ✓ Wildcard catches unmatched literal (100)
  ✓ Wildcard-only pattern catches everything
  ✓ Exact match (7) takes precedence over wildcard
Phase 4: Basic Variant Pattern Matching
  ✓ Matched None variant
  ✓ Matched Some variant with data
Phase 5: Multi-Variant Pattern Matching
  ✓ First matched First
  ✓ Second matched Second
  ✓ One matched One (tag 0)
  ✓ Two matched Two (tag 1)
  ✓ Three matched Three (tag 2)
Phase 6: Type Pattern Matching
  ✓ Matched Integer type
  ✓ Correctly rejected Integer type for variant
  ✓ Matched Integer type in mixed pattern
Phase 7: Exhaustiveness Testing
  Test 7.1: Non-exhaustive Option (missing Some)
    ✓ Matched None (but Some is missing)
  Test 7.2: Exhaustive Option match (no warning expected)
    ✓ Matched None
  Test 7.3: Non-exhaustive Result (missing Error and Pending)
All match statement tests passed successfully

PASSED: test_memory_safety
Output:

PASSED: test_negate_variable
Output:

PASSED: test_negative_numbers
Output:
18446744073709551611
18446744073709551609
18446744073709551611
18446744073709551604
PASS: negative is less than 0

PASSED: test_parentheses
Output:
30
27
20
15

FAILED: test_simple_import (linking error)
/usr/bin/ld: /mnt/d/SybertneticsUmbrella/SybertneticsAISolutions/MonoRepo/runa/bootstrap/v0.0.8.4.5.3/tests/output/test_simple_import/test_simple_import.o: in function `test_basic_import':
(.text+0x102): undefined reference to `arena_create'
/usr/bin/ld: (.text+0x152): undefined reference to `arena_allocate'
/usr/bin/ld: (.text+0x18b): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x252): undefined reference to `import_context_create'
/usr/bin/ld: (.text+0x28b): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x2c3): undefined reference to `import_context_is_visited'
/usr/bin/ld: (.text+0x2fc): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x321): undefined reference to `import_context_mark_visited'
/usr/bin/ld: (.text+0x35a): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x379): undefined reference to `import_context_is_visited'
/usr/bin/ld: (.text+0x3b2): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x3e5): undefined reference to `import_context_push_stack'
/usr/bin/ld: (.text+0x41e): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x43d): undefined reference to `import_context_is_in_stack'
/usr/bin/ld: (.text+0x476): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x48f): undefined reference to `import_context_pop_stack'
/usr/bin/ld: (.text+0x4c8): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x4fb): undefined reference to `import_context_push_stack'
/usr/bin/ld: (.text+0x534): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x553): undefined reference to `import_context_is_in_stack'
/usr/bin/ld: (.text+0x58c): undefined reference to `arena_destroy'
/usr/bin/ld: (.text+0x5b3): undefined reference to `arena_destroy'
collect2: error: ld returned 1 exit status

PASSED: test_stack_safety
Output:
=== STACK SAFETY TEST SUITE ===



TEST 1: Direct Recursion (factorial)

factorial(5) = 
120



TEST 2: Tail Recursion (factorial_tail)

factorial_tail(5, 1) = 
120



TEST 3: Mutual Recursion (is_even/is_odd)

is_even(10) = 
1


is_odd(10) = 




TEST 4: Deep Recursion

deep_recursion(100) = 
101



TEST 5: Non-Recursive Function

simple_add(10, 20) = 
30



TEST 6: Indirect Recursion (3-way)

func_a(5) = 
2



TEST 7: Fibonacci (Multiple Recursive Calls)

fibonacci(8) = 
21



TEST 8: Nested Function Calls (Non-Recursive)

main_func(5) = 
20



TEST 9: Conditional Recursion

conditional_recursion(10, 1) = 




TEST 10: Ackermann Function

ackermann(2, 2) = 
7



=== ALL TESTS COMPLETE ===


Expected Compiler Warnings:

- factorial: direct recursion

- factorial_tail: direct recursion (tail-recursive)

- is_even/is_odd: mutual recursion

- deep_recursion: direct recursion

- func_a/func_b/func_c: mutual recursion (3-way)

- fibonacci: direct recursion

- conditional_recursion: direct recursion

- ackermann: direct recursion


NO warnings expected for:

- simple_add

- helper_one/helper_two/main_func


PASSED: test_struct_features
Output:
10
20
100
200
5
10
50
25
100
75
7500

PASSED: test_structs
Output:
10
20

PASSED: test_variables
Output:
10
20
30
40
35


========================================
Summary
========================================
Total:   41
Passed:  40
Failed:  1
Skipped: 1
