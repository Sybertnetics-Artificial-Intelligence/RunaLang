Note: Comprehensive test of all basic features

Process called "main" takes argc as Integer, argv as Integer returns Integer:
    print_string("=== Testing All Language Features ===")

    Note: Basic types
    Let int_val be 42
    Let str_val be "hello world"
    print_string("Integer type")
    print_string("String type")

    Note: Variables
    Let x be 10
    Set x to 20
    print_string("Let statement")
    print_string("Set statement")

    Note: Arithmetic operators
    Let a be 10
    Let b be 3
    Let sum be a plus b
    Let diff be a minus b
    Let prod be a multiplied by b
    Let quot be a divided by b
    Let rem be a modulo by b
    print_string("Arithmetic: plus, minus, multiplied by, divided by, modulo by")

    Note: Comparison operators
    If a is equal to 10:
        print_string("is equal to")
    End If
    If a is not equal to b:
        print_string("is not equal to")
    End If
    If a is greater than b:
        print_string("is greater than")
    End If
    If b is less than a:
        print_string("is less than")
    End If
    If a is greater than or equal to 10:
        print_string("is greater than or equal to")
    End If
    If b is less than or equal to 3:
        print_string("is less than or equal to")
    End If

    Note: Logical operators
    If a is equal to 10 and b is equal to 3:
        print_string("and operator")
    End If
    If a is equal to 10 or b is equal to 99:
        print_string("or operator")
    End If
    If not b is equal to 99:
        print_string("not operator")
    End If

    Note: Bitwise operators
    Let bit_and_result be 12 bit_and 10
    Let bit_or_result be 12 bit_or 10
    Let bit_xor_result be 12 bit_xor 10
    Let bit_shl_result be 5 bit_shift_left 2
    Let bit_shr_result be 20 bit_shift_right 2
    print_string("bit_and, bit_or, bit_xor, bit_shift_left, bit_shift_right")

    Note: Control flow - If/Otherwise
    If 1 is equal to 1:
        print_string("If statement")
    Otherwise:
        print_string("If failed")
    End If

    Note: While loop
    Let i be 0
    Let while_sum be 0
    While i is less than 3:
        Increase while_sum by i
        Set i to i plus 1
    End While
    print_string("While loop")

    Note: For loops
    Let for_sum be 0
    For j from 1 to 3:
        Increase for_sum by j
    End For
    print_string("For loop (from-to)")

    Set for_sum to 0
    For k from 0 to 6 by 2:
        Increase for_sum by k
    End For
    print_string("For loop (from-to-by)")

    Note: Break and Continue
    Let loop_i be 0
    Let break_test be 0
    While loop_i is less than 10:
        Set loop_i to loop_i plus 1
        If loop_i is equal to 3:
            Continue
        End If
        If loop_i is equal to 6:
            Break
        End If
        Increase break_test by 1
    End While
    print_string("Break statement")
    print_string("Continue statement")

    Note: Negative numbers
    Let neg be -42
    print_string("Negative numbers")

    Note: Boolean literals
    Let t be true
    Let f be false
    If t is equal to 1:
        If f is equal to 0:
            print_string("Boolean literals (true/false)")
        End If
    End If

    Note: Parentheses
    Let paren_result be (2 plus 3) multiplied by 4
    print_string("Parentheses for grouping")

    Note: Compound assignment
    Let comp be 10
    Increase comp by 5
    Decrease comp by 3
    Multiply comp by 2
    Divide comp by 4
    print_string("Compound assignment (Increase/Decrease/Multiply/Divide by)")

    Note: Comments
    print_string("Single-line comments (Note:)")

    print_string("=== All Basic Features Verified ===")
    Return 0
End Process
