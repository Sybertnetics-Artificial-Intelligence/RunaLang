Note: 
Copyright 2025 Sybertnetics Artificial Intelligence Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
:End Note


Note: Process to read entire file contents into memory
Note: Equivalent to C static char* read_file(const char *filename)
Process called "read_file_internal" takes filename as Integer returns Integer:
    Note: Read entire file using runtime function (handles file open failure internally)
    Let content be runtime_read_file(filename)

    Note: Check if reading failed (equivalent to fopen() returning NULL)
    If content is equal to 0:
        Note: print_string(error message (equivalent to fprintf(stderr, "[MAIN ERROR] Could not open input file '%s'\n", filename))
        Let error_msg_temp be string_concat("[MAIN ERROR] Could not open input file '", filename)
        Let error_msg be string_concat(error_msg_temp, "'")
        deallocate(error_msg_temp)
        print_string(error_msg)
        deallocate(error_msg)
        Return 0
    End If

    Return content
End Process

Note: Process imports: load and merge imported files
Note: Takes arena and program pointer, returns 0 on success, 1 on failure
Process called "process_imports" takes arena as Integer, program as Integer returns Integer:
    Note: Get import count and imports array
    Let import_count be memory_get_int32(program, 40)  Note: PROGRAM_IMPORT_COUNT

    If import_count is equal to 0:
        Return 0  Note: No imports to process
    End If

    Let imports be memory_get_pointer(program, 32)  Note: PROGRAM_IMPORTS

    Note: Iterate through each import
    Let i be 0
    While i is less than import_count:
        Note: Get import statement pointer
        Let ptr_size be 8
        Let import_offset be i multiplied by ptr_size
        Let import_ptr be imports plus import_offset
        Let import_stmt be memory_get_pointer(import_ptr, 0)

        Note: Get filename from import statement (offset 0 is filename)
        Let import_filename be memory_get_pointer(import_stmt, 0)

        Note: Read the imported file
        Let import_source be read_file_internal(import_filename)
        If import_source is equal to 0:
            Let error_msg_temp be string_concat("[IMPORT ERROR] Failed to read import file: ", import_filename)
            print_string(error_msg_temp)
            deallocate(error_msg_temp)
            Return 1
        End If

        Note: Create lexer for imported file (using arena)
        Let import_lexer be lexer_create(arena, import_source)

        Note: Create parser for imported file
        Let import_parser be parser_create(arena, import_lexer)

        Note: Parse the imported file
        Let import_program be parser_parse_program(import_parser)

        If import_program is equal to 0:
            Let error_msg_temp be string_concat("[IMPORT ERROR] Failed to parse import file: ", import_filename)
            print_string(error_msg_temp)
            deallocate(error_msg_temp)
            Note: import_parser allocated from arena
            Note: import_lexer allocated from arena
            deallocate(import_source)
            Return 1
        End If

        Note: Merge functions from imported program into main program
        Let import_func_count be memory_get_int32(import_program, 8)  Note: function_count
        Let import_functions be memory_get_pointer(import_program, 0)  Note: functions array

        Let j be 0
        While j is less than import_func_count:
            Let func_offset be j multiplied by ptr_size
            Let func_ptr be import_functions plus func_offset
            Let func be memory_get_pointer(func_ptr, 0)
            program_add_function(program, func)
            Set j to j plus 1
        End While

        Note: Merge types from imported program into main program
        Let import_type_count be memory_get_int32(import_program, 32)  Note: type_count
        Let import_types be memory_get_pointer(import_program, 40)  Note: types array

        Let k be 0
        While k is less than import_type_count:
            Let type_offset be k multiplied by ptr_size
            Let type_ptr be import_types plus type_offset
            Let type_def be memory_get_pointer(type_ptr, 0)
            program_add_type(program, type_def)
            Set k to k plus 1
        End While

        Note: Cleanup import parsing resources (but not the AST nodes - they're now in main program)
        Note: import_parser allocated from arena
        Note: import_lexer allocated from arena
        deallocate(import_source)

        Set i to i plus 1
    End While

    Return 0
End Process

Note: Main compiler entry point
Note: Equivalent to C int main(int argc, char **argv)
Process called "main" takes argc as Integer, argv as Integer returns Integer:
    Note: Check command line arguments (argc != 3)
    If argc is not equal to 3:
        Note: print_string(usage message (equivalent to fprintf(stderr, "Usage: %s <input.runa> <output.s>\n", argv[0]))
        Let prog_name be get_command_line_arg(0)
        Let usage_msg_temp be string_concat("Usage: ", prog_name)
        Let usage_msg be string_concat(usage_msg_temp, " <input.runa> <output.s>")
        deallocate(usage_msg_temp)
        print_string(usage_msg)
        deallocate(usage_msg)
        deallocate(prog_name)
        Return 1
    End If

    Note: Get command line arguments (equivalent to input_filename = argv[1])
    Let input_filename be get_command_line_arg(1)
    Let output_filename be get_command_line_arg(2)

    Note: ========================================================================
    Note: Create arena allocator for compilation
    Note: All AST nodes, tokens, and temporary data will be allocated from arena
    Note: Arena provides O(1) deterministic allocation and simple cleanup
    Note: ========================================================================
    Let arena_capacity be 50000000  Note: 50MB arena for compilation
    Let arena be arena_create(arena_capacity)

    If arena is equal to 0:
        print_string("[ERROR] Failed to create compilation arena")
        deallocate(input_filename)
        deallocate(output_filename)
        Return 1
    End If

    Note: Read source file (equivalent to char *source = read_file(input_filename))
    Let source be read_file_internal(input_filename)

    Note: Check if reading failed (equivalent to !source)
    If source is equal to 0:
        print_string("[ERROR] Failed to read source file")
        deallocate(input_filename)
        deallocate(output_filename)
        Return 1
    End If

    Note: Create lexer with arena (all tokens allocated from arena)
    Let lexer be lexer_create(arena, source)

    Note: Create parser (equivalent to Parser *parser = parser_create(lexer))
    Let parser be parser_create(arena, lexer)

    Note: Parse program (equivalent to Program *program = parser_parse_program(parser))
    Let program be parser_parse_program(parser)

    Note: Check if parsing failed (equivalent to !program)
    If program is equal to 0:
        print_string("[ERROR] main: Parsing failed - program is NULL")
        Note: Cleanup parser and lexer before returning
        Note: parser allocated from arena
        Note: lexer allocated from arena
        deallocate(source)
        deallocate(input_filename)
        deallocate(output_filename)
        Return 1
    End If

    Note: Process imports: load and merge imported files (using arena)
    Let import_result be process_imports(arena, program)
    If import_result is not equal to 0:
        Note: Import processing failed
        Note: program allocated from arena
        Note: parser allocated from arena
        Note: lexer allocated from arena
        deallocate(source)
        deallocate(input_filename)
        deallocate(output_filename)
        Return 1
    End If

    Note: Create code generator (equivalent to CodeGenerator *codegen = codegen_create(output_filename))
    Let codegen be codegen_create(arena, output_filename)

    Note: Check if codegen creation failed (equivalent to !codegen)
    If codegen is equal to 0:
        Note: Cleanup resources before returning
        Note: program allocated from arena
        Note: parser allocated from arena
        Note: lexer allocated from arena
        deallocate(source)
        deallocate(input_filename)
        deallocate(output_filename)
        Return 1
    End If

    Note: Generate code (equivalent to codegen_generate(codegen, program))
    codegen_generate(codegen, program)

    Note: Close output file to ensure content is written (flushes buffer)
    Let output_file be memory_get_integer(codegen, 0)
    file_close_buffered(output_file)

    Note: Print success message (using arena - no manual deallocation needed)
    Let success_msg_temp be arena_string_concat(arena, "Successfully compiled '", input_filename)
    Let success_msg_temp2 be arena_string_concat(arena, success_msg_temp, "' to '")
    Let success_msg be arena_string_concat(arena, success_msg_temp2, output_filename)
    Let success_msg_final be arena_string_concat(arena, success_msg, "'")
    print_string(success_msg_final)
    Note: No deallocate needed - arena_destroy will free everything

    Note: Cleanup resources
    Note: Arena-allocated resources (lexer, parser, program, codegen) freed by arena_destroy
    Note: Only free non-arena allocations:
    deallocate(source)           Note: Allocated by runtime_read_file (not from arena)
    deallocate(input_filename)   Note: Allocated by get_command_line_arg (not from arena)
    deallocate(output_filename)  Note: Allocated by get_command_line_arg (not from arena)

    Note: ========================================================================
    Note: Destroy arena - frees ALL compilation memory at once
    Note: This single free replaces hundreds of individual deallocations
    Note: O(1) cleanup of all AST nodes, tokens, symbols, etc.
    Note: ========================================================================
    arena_destroy(arena)

    Return 0
End Process