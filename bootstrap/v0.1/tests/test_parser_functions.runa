// Test parsing function definitions with various parameter counts
fn test_no_params() -> i64 {
    return 42;
}

fn test_one_param(x: i64) -> i64 {
    return x;
}

fn test_two_params(x: i64, y: i64) -> i64 {
    return x + y;
}

fn test_three_params(x: i64, y: i64, z: i64) -> i64 {
    return x + y + z;
}

// Test nested function calls
fn add(a: i64, b: i64) -> i64 {
    return a + b;
}

fn multiply(a: i64, b: i64) -> i64 {
    return a * b;
}

fn test_nested_calls() -> i64 {
    return add(multiply(2, 3), multiply(4, 5));
}

fn main() -> i64 {
    let result: i64 = test_no_params();
    if (result != 42) {
        return 1;
    }

    result = test_one_param(100);
    if (result != 100) {
        return 2;
    }

    result = test_two_params(10, 20);
    if (result != 30) {
        return 3;
    }

    result = test_three_params(1, 2, 3);
    if (result != 6) {
        return 4;
    }

    result = test_nested_calls();
    if (result != 26) {
        return 5;
    }

    return 0;
}