// Test variable declarations and assignments
fn test_simple_variables() -> i64 {
    let x: i64 = 10;
    if (x != 10) {
        return 1;
    }

    x = 20;
    if (x != 20) {
        return 2;
    }

    let y: i64 = x + 5;
    if (y != 25) {
        return 3;
    }

    return 0;
}

// Test multiple variables
fn test_multiple_vars() -> i64 {
    let a: i64 = 1;
    let b: i64 = 2;
    let c: i64 = 3;
    let d: i64 = 4;
    let e: i64 = 5;

    let sum: i64 = a + b + c + d + e;
    if (sum != 15) {
        return 1;
    }

    a = 10;
    b = a + 1;
    c = b + 1;
    d = c + 1;
    e = d + 1;

    sum = a + b + c + d + e;
    if (sum != 60) {
        return 2;
    }

    return 0;
}

// Test variable scoping
fn test_scoping() -> i64 {
    let x: i64 = 100;

    if (1 == 1) {
        let y: i64 = 200;
        x = x + y;
    }

    if (x != 300) {
        return 1;
    }

    for (let i: i64 = 0; i < 5; i = i + 1) {
        x = x + 1;
    }

    if (x != 305) {
        return 2;
    }

    return 0;
}

// Test assignment expressions in complex contexts
fn test_complex_assignments() -> i64 {
    let x: i64 = 0;
    let y: i64 = 0;
    let z: i64 = 0;

    x = y = z = 10;
    if (x != 10) {
        return 1;
    }
    if (y != 10) {
        return 2;
    }
    if (z != 10) {
        return 3;
    }

    x = (y = 20) + (z = 30);
    if (x != 50) {
        return 4;
    }
    if (y != 20) {
        return 5;
    }
    if (z != 30) {
        return 6;
    }

    return 0;
}

fn main() -> i64 {
    let result: i64 = test_simple_variables();
    if (result != 0) {
        return result;
    }

    result = test_multiple_vars();
    if (result != 0) {
        return 10 + result;
    }

    result = test_scoping();
    if (result != 0) {
        return 20 + result;
    }

    result = test_complex_assignments();
    if (result != 0) {
        return 30 + result;
    }

    return 0;
}