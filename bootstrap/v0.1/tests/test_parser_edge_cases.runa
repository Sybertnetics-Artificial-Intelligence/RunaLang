// Test empty function body
fn test_empty() -> i64 {
}

// Test deeply nested structures
fn test_deep_nesting() -> i64 {
    let a: i64 = 1;
    if (a == 1) {
        let b: i64 = 2;
        if (b == 2) {
            let c: i64 = 3;
            if (c == 3) {
                let d: i64 = 4;
                if (d == 4) {
                    return 100;
                }
            }
        }
    }
    return 0;
}

// Test single-line statements
fn test_single_line() -> i64 {
    let x: i64 = 10; x = x + 1; x = x * 2; return x;
}

// Test parenthesized expressions
fn test_parentheses() -> i64 {
    let a: i64 = ((((10))));
    let b: i64 = (((5 + 5)));
    let c: i64 = ((a) + (b));
    return ((c));
}

// Test chained operations
fn test_chains() -> i64 {
    let result: i64 = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;
    if (result != 55) {
        return 1;
    }

    result = 100 - 10 - 10 - 10 - 10 - 10;
    if (result != 50) {
        return 2;
    }

    return 0;
}

// Test assignment as expression
fn test_assignment_expr() -> i64 {
    let x: i64 = 0;
    let y: i64 = 0;

    if ((x = 5) == 5) {
        if ((y = x + 5) == 10) {
            return 0;
        }
    }
    return 1;
}

// Test maximum nesting for loops
fn test_nested_loops() -> i64 {
    let sum: i64 = 0;
    for (let i: i64 = 0; i < 3; i = i + 1) {
        for (let j: i64 = 0; j < 3; j = j + 1) {
            for (let k: i64 = 0; k < 3; k = k + 1) {
                sum = sum + 1;
            }
        }
    }
    return sum;
}

fn main() -> i64 {
    let result: i64 = test_deep_nesting();
    if (result != 100) {
        return 1;
    }

    result = test_single_line();
    if (result != 22) {
        return 2;
    }

    result = test_parentheses();
    if (result != 20) {
        return 3;
    }

    result = test_chains();
    if (result != 0) {
        return 4;
    }

    result = test_assignment_expr();
    if (result != 0) {
        return 5;
    }

    result = test_nested_loops();
    if (result != 27) {
        return 6;
    }

    return 0;
}