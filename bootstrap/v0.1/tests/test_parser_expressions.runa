// Test arithmetic expressions with precedence
fn test_arithmetic() -> i64 {
    let a: i64 = 10 + 20 * 3;
    if (a != 70) {
        return 1;
    }

    let b: i64 = (10 + 20) * 3;
    if (b != 90) {
        return 2;
    }

    let c: i64 = 100 - 50 / 2;
    if (c != 75) {
        return 3;
    }

    let d: i64 = 10 % 3;
    if (d != 1) {
        return 4;
    }

    return 0;
}

// Test comparison operators
fn test_comparisons() -> i64 {
    if (5 < 10) {
        if (10 > 5) {
            if (5 <= 5) {
                if (10 >= 10) {
                    if (5 == 5) {
                        if (5 != 10) {
                            return 0;
                        }
                    }
                }
            }
        }
    }
    return 1;
}

// Test unary operators
fn test_unary() -> i64 {
    let a: i64 = -10;
    if (a != -10) {
        return 1;
    }

    let b: i64 = !0;
    if (b != 1) {
        return 2;
    }

    let c: i64 = !1;
    if (c != 0) {
        return 3;
    }

    let d: i64 = -(-5);
    if (d != 5) {
        return 4;
    }

    return 0;
}

// Test complex nested expressions
fn test_complex() -> i64 {
    let result: i64 = (10 + 20) * (30 - 10) / (2 + 3);
    if (result != 120) {
        return 1;
    }

    let x: i64 = 5;
    let y: i64 = 10;
    let z: i64 = x * (y + 3) - (x + y);
    if (z != 50) {
        return 2;
    }

    return 0;
}

fn main() -> i64 {
    let result: i64 = test_arithmetic();
    if (result != 0) {
        return result;
    }

    result = test_comparisons();
    if (result != 0) {
        return 10 + result;
    }

    result = test_unary();
    if (result != 0) {
        return 20 + result;
    }

    result = test_complex();
    if (result != 0) {
        return 30 + result;
    }

    return 0;
}