// Test control flow statements
fn test_if_true() -> i64 {
    if (1 == 1) {
        return 10;
    }
    return 20;
}

fn test_if_false() -> i64 {
    if (1 == 2) {
        return 10;
    }
    return 20;
}

fn test_if_else() -> i64 {
    if (5 > 10) {
        return 1;
    } else {
        return 2;
    }
}

fn test_nested_if() -> i64 {
    let x: i64 = 5;
    if (x > 0) {
        if (x < 10) {
            return 1;
        } else {
            return 2;
        }
    } else {
        return 3;
    }
}

fn test_while() -> i64 {
    let i: i64 = 0;
    let sum: i64 = 0;
    while (i < 5) {
        sum = sum + i;
        i = i + 1;
    }
    return sum;  // Should be 0+1+2+3+4 = 10
}

fn test_nested_while() -> i64 {
    let i: i64 = 0;
    let j: i64 = 0;
    let sum: i64 = 0;
    while (i < 3) {
        j = 0;
        while (j < 3) {
            sum = sum + 1;
            j = j + 1;
        }
        i = i + 1;
    }
    return sum;  // Should be 9
}

fn main() -> i64 {
    if (test_if_true() != 10) {
        return 1;
    }
    if (test_if_false() != 20) {
        return 2;
    }
    if (test_if_else() != 2) {
        return 3;
    }
    if (test_nested_if() != 1) {
        return 4;
    }
    if (test_while() != 10) {
        return 5;
    }
    if (test_nested_while() != 9) {
        return 6;
    }
    return 0;
}