// Test pointer operations
fn test_address_of() -> i64 {
    let x: i64 = 42;
    let ptr: i64 = &x;
    return *ptr;
}

fn test_dereference_assignment() -> i64 {
    let x: i64 = 10;
    let ptr: i64 = &x;
    *ptr = 20;
    return x;
}

fn test_pointer_arithmetic() -> i64 {
    let x: i64 = 100;
    let y: i64 = 200;
    let ptr1: i64 = &x;
    let ptr2: i64 = &y;

    // Swap using pointers
    let temp: i64 = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;

    return x;  // Should be 200 after swap
}

fn modify_through_pointer(ptr: i64) -> i64 {
    *ptr = *ptr + 10;
    return *ptr;
}

fn test_pointer_param() -> i64 {
    let x: i64 = 5;
    let result: i64 = modify_through_pointer(&x);
    if (result != 15) {
        return 1;
    }
    if (x != 15) {
        return 2;
    }
    return 0;
}

fn main() -> i64 {
    if (test_address_of() != 42) {
        return 1;
    }
    if (test_dereference_assignment() != 20) {
        return 2;
    }
    if (test_pointer_arithmetic() != 200) {
        return 3;
    }
    if (test_pointer_param() != 0) {
        return 4;
    }
    return 0;
}