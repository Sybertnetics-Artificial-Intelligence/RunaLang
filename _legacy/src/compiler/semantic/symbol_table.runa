Note:
Runa Symbol Table: Scope Management and Symbol Resolution

This module implements comprehensive symbol table management with:
- Scope hierarchy and resolution
- Symbol declaration and lookup
- Import resolution and module management
- LSP integration for symbol navigation
- Performance optimization with caching
:End Note

Note: Import dependencies
Import "ast.runa"
Import "type_checker.runa"
Import "diagnostics.runa"

Note: Symbol Table Core Types
Type Symbol is Dictionary with:
    name as String
    kind as String  Note: "variable", "function", "type", "module", "parameter"
    type as Optional[RunaType]
    scope as Scope
    declaration_location as SourceLocation
    usage_locations as List[SourceLocation]
    is_exported as Boolean
    is_imported as Boolean
    metadata as Dictionary[String, Any]

Type Scope is Dictionary with:
    name as String
    parent as Optional[Scope]
    symbols as Dictionary[String, Symbol]
    children as List[Scope]
    kind as String  Note: "global", "function", "block", "module"
    start_location as SourceLocation
    end_location as Optional[SourceLocation]
    metadata as Dictionary[String, Any]

Type SymbolTable is Dictionary with:
    global_scope as Scope
    current_scope as Scope
    scope_stack as List[Scope]
    imported_modules as Dictionary[String, ModuleInfo]
    symbol_cache as Dictionary[String, Symbol]
    performance_metrics as Dictionary[String, Any]
    
    analyzer as SemanticAnalyzer

Type ModuleInfo is Dictionary with:
    name as String
    file_path as String
    symbols as Dictionary[String, Symbol]
    exports as List[String]
    dependencies as List[String]
    metadata as Dictionary[String, Any]

Note: Symbol Table Creation
Process called "create_symbol_table" returns SymbolTable:
    Note: Create a new symbol table with global scope
    Let global_scope be create_global_scope
    Let imported_modules be dictionary containing
    Let symbol_cache be dictionary containing
    
    Let performance_metrics be dictionary containing:
        "symbol_lookups" as 0
        "scope_creations" as 0
        "cache_hits" as 0
        "cache_misses" as 0
        "import_resolutions" as 0
    
    Return SymbolTable with:
        global_scope as global_scope
        current_scope as global_scope
        scope_stack as list containing global_scope
        imported_modules as imported_modules
        symbol_cache as symbol_cache
        performance_metrics as performance_metrics
        analyzer as None  Note: Will be set by semantic analyzer

Note: Global Scope Creation
Process called "create_global_scope" returns Scope:
    Note: Create the global scope with built-in symbols
    Let built_in_symbols be create_built_in_symbols
    Let children be list containing
    
    Return Scope with:
        name as "global"
        parent as None
        symbols as built_in_symbols
        children as children
        kind as "global"
        start_location as SourceLocation with file_path as "" and line as 1 and column as 1
        end_location as None
        metadata as dictionary containing

Note: Built-in Symbols Creation
Process called "create_built_in_symbols" returns Dictionary[String, Symbol]:
    Note: Create built-in symbols available in global scope
    Return dictionary containing:
        "Display" as Symbol with:
            name as "Display"
            kind as "function"
            type as None  Note: Will be set by type checker
            scope as None  Note: Will be set by scope creation
            declaration_location as SourceLocation with file_path as "builtin" and line as 1 and column as 1
            usage_locations as list containing
            is_exported as true
            is_imported as false
            metadata as dictionary containing "builtin" as true
        "Return" as Symbol with:
            name as "Return"
            kind as "keyword"
            type as None
            scope as None
            declaration_location as SourceLocation with file_path as "builtin" and line as 1 and column as 1
            usage_locations as list containing
            is_exported as true
            is_imported as false
            metadata as dictionary containing "builtin" as true
        "Let" as Symbol with:
            name as "Let"
            kind as "keyword"
            type as None
            scope as None
            declaration_location as SourceLocation with file_path as "builtin" and line as 1 and column as 1
            usage_locations as list containing
            is_exported as true
            is_imported as false
            metadata as dictionary containing "builtin" as true
        "Process" as Symbol with:
            name as "Process"
            kind as "keyword"
            type as None
            scope as None
            declaration_location as SourceLocation with file_path as "builtin" and line as 1 and column as 1
            usage_locations as list containing
            is_exported as true
            is_imported as false
            metadata as dictionary containing "builtin" as true
        "If" as Symbol with:
            name as "If"
            kind as "keyword"
            type as None
            scope as None
            declaration_location as SourceLocation with file_path as "builtin" and line as 1 and column as 1
            usage_locations as list containing
            is_exported as true
            is_imported as false
            metadata as dictionary containing "builtin" as true
        "Otherwise" as Symbol with:
            name as "Otherwise"
            kind as "keyword"
            type as None
            scope as None
            declaration_location as SourceLocation with file_path as "builtin" and line as 1 and column as 1
            usage_locations as list containing
            is_exported as true
            is_imported as false
            metadata as dictionary containing "builtin" as true

Note: Symbol Creation
Process called "create_symbol" that takes name as String and type as Optional[RunaType] and scope as Scope returns Symbol:
    Note: Create a new symbol
    Return Symbol with:
        name as name
        kind as "variable"  Note: Default kind, can be updated
        type as type
        scope as scope
        declaration_location as SourceLocation with file_path as "" and line as 1 and column as 1
        usage_locations as list containing
        is_exported as false
        is_imported as false
        metadata as dictionary containing

Note: Symbol Table Operations
Process called "add_symbol" that takes table as SymbolTable and symbol as Symbol:
    Note: Add symbol to current scope
    Set symbol.scope to table.current_scope
    Set table.current_scope.symbols at key symbol.name to symbol
    
    Note: Update cache
    Let cache_key be create_symbol_cache_key with symbol as symbol
    Set table.symbol_cache at key cache_key to symbol
    
    Set table.performance_metrics.symbol_lookups to table.performance_metrics.symbol_lookups plus 1

Process called "resolve_symbol" that takes table as SymbolTable and name as String returns Optional[Symbol]:
    Note: Resolve symbol by name in current scope hierarchy
    Set table.performance_metrics.symbol_lookups to table.performance_metrics.symbol_lookups plus 1
    
    Note: Check cache first
    Let cache_key be "symbol_" plus name
    If cache_key is in table.symbol_cache:
        Set table.performance_metrics.cache_hits to table.performance_metrics.cache_hits plus 1
        Return table.symbol_cache at key cache_key
    
    Set table.performance_metrics.cache_misses to table.performance_metrics.cache_misses plus 1
    
    Note: Search in current scope and parent scopes
    Let current_scope be table.current_scope
    While current_scope is not None:
        If name is in current_scope.symbols:
            Let symbol be current_scope.symbols at key name
            Set table.symbol_cache at key cache_key to symbol
            Return symbol
        Set current_scope to current_scope.parent
    
    Note: Check imported modules
    Let imported_symbol be resolve_imported_symbol with table as table and name as name
    If imported_symbol is not None:
        Set table.symbol_cache at key cache_key to imported_symbol
        Return imported_symbol
    
    Return None

Process called "resolve_symbol_in_scope" that takes table as SymbolTable and name as String and scope as Scope returns Optional[Symbol]:
    Note: Resolve symbol in specific scope only
    If name is in scope.symbols:
        Return scope.symbols at key name
    Return None

Note: Scope Management
Process called "enter_scope" that takes table as SymbolTable and scope_name as String and scope_kind as String and start_location as SourceLocation:
    Note: Enter a new scope
    Let new_scope be Scope with:
        name as scope_name
        parent as table.current_scope
        symbols as dictionary containing
        children as list containing
        kind as scope_kind
        start_location as start_location
        end_location as None
        metadata as dictionary containing
    
    Add new_scope to table.current_scope.children
    Add new_scope to table.scope_stack
    Set table.current_scope to new_scope
    
    Set table.performance_metrics.scope_creations to table.performance_metrics.scope_creations plus 1

Process called "exit_scope" that takes table as SymbolTable and end_location as SourceLocation:
    Note: Exit current scope
    Set table.current_scope.end_location to end_location
    
    Remove last item from table.scope_stack
    If length of table.scope_stack is greater than 0:
        Set table.current_scope to table.scope_stack at index (length of table.scope_stack minus 1)
    Otherwise:
        Set table.current_scope to table.global_scope

Process called "get_current_scope" that takes table as SymbolTable returns Scope:
    Note: Get current scope
    Return table.current_scope

Process called "get_scope_hierarchy" that takes table as SymbolTable returns List[Scope]:
    Note: Get scope hierarchy from current scope to global
    Let hierarchy be list containing
    Let current_scope be table.current_scope
    
    While current_scope is not None:
        Add current_scope to hierarchy
        Set current_scope to current_scope.parent
    
    Return hierarchy

Note: Import Resolution
Process called "resolve_imported_symbol" that takes table as SymbolTable and name as String returns Optional[Symbol]:
    Note: Resolve symbol from imported modules
    Set table.performance_metrics.import_resolutions to table.performance_metrics.import_resolutions plus 1
    
    For each module_name in table.imported_modules:
        Let module_info be table.imported_modules at key module_name
        If name is in module_info.symbols:
            Let symbol be module_info.symbols at key name
            If symbol.is_exported:
                Return symbol
    
    Return None

Process called "add_imported_module" that takes table as SymbolTable and module_name as String and module_info as ModuleInfo:
    Note: Add imported module to symbol table
    Set table.imported_modules at key module_name to module_info

Process called "resolve_module_symbol" that takes table as SymbolTable and module_name as String and symbol_name as String returns Optional[Symbol]:
    Note: Resolve symbol from specific module
    If module_name is in table.imported_modules:
        Let module_info be table.imported_modules at key module_name
        If symbol_name is in module_info.symbols:
            Return module_info.symbols at key symbol_name
    
    Return None

Note: Symbol Usage Tracking
Process called "add_symbol_usage" that takes table as SymbolTable and symbol as Symbol and location as SourceLocation:
    Note: Add usage location to symbol
    Add location to symbol.usage_locations

Process called "get_symbol_usages" that takes table as SymbolTable and symbol_name as String returns List[SourceLocation]:
    Note: Get all usage locations for a symbol
    Let symbol be resolve_symbol with table as table and name as symbol_name
    If symbol is None:
        Return list containing
    
    Return symbol.usage_locations

Process called "get_symbol_definition" that takes table as SymbolTable and symbol_name as String returns Optional[SourceLocation]:
    Note: Get definition location for a symbol
    Let symbol be resolve_symbol with table as table and name as symbol_name
    If symbol is None:
        Return None
    
    Return symbol.declaration_location

Note: LSP Integration Methods
Process called "get_scope_symbols" that takes table as SymbolTable and scope as Scope returns List[Symbol]:
    Note: Get all symbols in a scope for LSP
    Let symbols be list containing
    For each symbol_name in scope.symbols:
        Add scope.symbols at key symbol_name to symbols
    Return symbols

Process called "get_document_symbols" that takes table as SymbolTable and file_path as String returns List[Symbol]:
    Note: Get all symbols in a document for LSP outline
    Let symbols be list containing
    
    Note: Get symbols from global scope and all child scopes
    Let all_scopes be get_all_scopes with table as table
    For each scope in all_scopes:
        For each symbol_name in scope.symbols:
            Let symbol be scope.symbols at key symbol_name
            If symbol.declaration_location.file_path is equal to file_path:
                Add symbol to symbols
    
    Return symbols

Process called "find_symbols_by_kind" that takes table as SymbolTable and kind as String returns List[Symbol]:
    Note: Find all symbols of a specific kind
    Let symbols be list containing
    Let all_scopes be get_all_scopes with table as table
    
    For each scope in all_scopes:
        For each symbol_name in scope.symbols:
            Let symbol be scope.symbols at key symbol_name
            If symbol.kind is equal to kind:
                Add symbol to symbols
    
    Return symbols

Process called "get_symbols_in_range" that takes table as SymbolTable and start_location as SourceLocation and end_location as SourceLocation returns List[Symbol]:
    Note: Get symbols defined in a specific range for LSP
    Let symbols be list containing
    Let all_scopes be get_all_scopes with table as table
    
    For each scope in all_scopes:
        For each symbol_name in scope.symbols:
            Let symbol be scope.symbols at key symbol_name
            If is_location_in_range with location as symbol.declaration_location and start as start_location and end as end_location:
                Add symbol to symbols
    
    Return symbols

Note: Utility Functions
Process called "create_symbol_cache_key" that takes symbol as Symbol returns String:
    Note: Create cache key for symbol
    Return "symbol_" plus symbol.name plus "_" plus symbol.scope.name

Process called "get_all_scopes" that takes table as SymbolTable returns List[Scope]:
    Note: Get all scopes in the symbol table
    Let all_scopes be list containing
    Add table.global_scope to all_scopes
    
    Note: Recursively add all child scopes
    Let add_child_scopes be process that takes scope as Scope:
        For each child in scope.children:
            Add child to all_scopes
            Call add_child_scopes with scope as child
    
    Call add_child_scopes with scope as table.global_scope
    Return all_scopes

Process called "is_location_in_range" that takes location as SourceLocation and start as SourceLocation and end as SourceLocation returns Boolean:
    Note: Check if location is within range
    If location.file_path is not equal to start.file_path:
        Return false
    
    If location.line is greater than start.line and location.line is less than end.line:
        Return true
    
    If location.line is equal to start.line and location.column is greater than or equal to start.column:
        Return true
    
    If location.line is equal to end.line and location.column is less than or equal to end.column:
        Return true
    
    Return false

Process called "get_symbol_kind_display_name" that takes symbol as Symbol returns String:
    Note: Get display name for symbol kind
    Match symbol.kind:
        When "variable":
            Return "Variable"
        When "function":
            Return "Function"
        When "type":
            Return "Type"
        When "module":
            Return "Module"
        When "parameter":
            Return "Parameter"
        When "keyword":
            Return "Keyword"
        Otherwise:
            Return "Symbol"

Process called "get_symbol_table_performance_metrics" that takes table as SymbolTable returns Dictionary[String, Any]:
    Note: Get performance metrics from symbol table
    Return table.performance_metrics

Process called "clear_symbol_table_cache" that takes table as SymbolTable:
    Note: Clear symbol cache
    Set table.symbol_cache to dictionary containing 