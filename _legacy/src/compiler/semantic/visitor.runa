Note:
Runa AST Visitor Pattern: Core Traversal Engine

This module implements the visitor pattern for AST traversal, which is the heart
of semantic analysis. It provides a robust, extensible framework for traversing
AST nodes and performing semantic analysis operations.

Key Features:
- Generic visitor pattern with type safety
- Recursive traversal with cycle detection
- Context preservation across visits
- Performance optimization with caching
- Error recovery and graceful degradation
:End Note

Note: Import dependencies
Import "../parser/ast.runa"
Import "diagnostics.runa"

Note: Visitor Pattern Core Types
Type ASTVisitor is Protocol with:
    Note: Core visitor methods for each AST node type
    visit_program as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_statement as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_expression as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_declaration as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    
    Note: Expression-specific visitors
    visit_literal as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_identifier as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_binary_operation as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_function_call as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_variable_declaration as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_process_declaration as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_if_statement as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_import_statement as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]
    visit_export_statement as Optional[Process that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult]

Type ASTVisitorState is Dictionary with:
    Note: Visitor state and configuration
    depth as Integer
    max_depth as Integer
    visited_nodes as Set[String]
    context_stack as List[Dictionary[String, Any]]
    performance_metrics as Dictionary[String, Any]
    error_recovery_mode as Boolean

Type VisitResult is Success with result as Any and context_updates as Dictionary[String, Any] | Failure with diagnostics as List[SemanticError] and warnings as List[String]

Note: Visitor Creation
Process called "create_ast_visitor" returns ASTVisitor:
    Note: Create a new AST visitor with default configuration
    Let visitor_state be ASTVisitorState with:
        depth as 0
        max_depth as 1000
        visited_nodes as set containing
        context_stack as list containing
        performance_metrics as dictionary containing:
            "nodes_visited" as 0
            "cache_hits" as 0
            "cache_misses" as 0
            "max_depth_reached" as 0
            "visit_time_ms" as 0
        error_recovery_mode as false
    
    Return ASTVisitor with:
        visit_program as None
        visit_statement as None
        visit_expression as None
        visit_declaration as None
        visit_literal as None
        visit_identifier as None
        visit_binary_operation as None
        visit_function_call as None
        visit_variable_declaration as None
        visit_process_declaration as None
        visit_if_statement as None
        visit_import_statement as None
        visit_export_statement as None
        state as visitor_state

Note: Core AST Traversal Engine
Process called "visit_ast" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Main AST traversal engine with comprehensive error handling and performance optimization
    Let start_time be get_current_time_ms
    Let state be visitor.state
    
    Note: Check for cycle detection
    Let node_id be create_node_id with node as node
    If node_id is in state.visited_nodes:
        Set state.performance_metrics.cache_hits to state.performance_metrics.cache_hits plus 1
        Return Success with result as None and context_updates as dictionary containing
    
    Note: Check depth limit
    If state.depth is greater than or equal to state.max_depth:
        Set state.performance_metrics.max_depth_reached to state.performance_metrics.max_depth_reached plus 1
        Return Failure with diagnostics as list containing create_visitor_error with message as "Maximum AST depth exceeded" and location as node.location and warnings as list containing
    
    Add node_id to state.visited_nodes
    Set state.performance_metrics.nodes_visited to state.performance_metrics.nodes_visited plus 1
    Set state.performance_metrics.cache_misses to state.performance_metrics.cache_misses plus 1
    
    Note: Push context and increment depth
    Add context to state.context_stack
    Set state.depth to state.depth plus 1
    
    Note: Dispatch to appropriate visitor method based on node type
    Let result be dispatch_visitor_method with visitor as visitor and node as node and context as context
    
    Note: Pop context and decrement depth
    Remove last item from state.context_stack
    Set state.depth to state.depth minus 1
    
    Let end_time be get_current_time_ms
    Set state.performance_metrics.visit_time_ms to end_time minus start_time
    
    Return result

Note: Visitor Method Dispatch
Process called "dispatch_visitor_method" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Dispatch to the appropriate visitor method based on node type
    Try:
        Match node.type:
            When "Program":
                If visitor.visit_program is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_program and node as node and context as context
                Otherwise:
                    Return visit_program_default with visitor as visitor and node as node and context as context
            
            When "Statement":
                If visitor.visit_statement is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_statement and node as node and context as context
                Otherwise:
                    Return visit_statement_default with visitor as visitor and node as node and context as context
            
            When "Expression":
                If visitor.visit_expression is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_expression and node as node and context as context
                Otherwise:
                    Return visit_expression_default with visitor as visitor and node as node and context as context
            
            When "Literal":
                If visitor.visit_literal is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_literal and node as node and context as context
                Otherwise:
                    Return visit_literal_default with visitor as visitor and node as node and context as context
            
            When "Identifier":
                If visitor.visit_identifier is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_identifier and node as node and context as context
                Otherwise:
                    Return visit_identifier_default with visitor as visitor and node as node and context as context
            
            When "BinaryOperation":
                If visitor.visit_binary_operation is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_binary_operation and node as node and context as context
                Otherwise:
                    Return visit_binary_operation_default with visitor as visitor and node as node and context as context
            
            When "FunctionCall":
                If visitor.visit_function_call is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_function_call and node as node and context as context
                Otherwise:
                    Return visit_function_call_default with visitor as visitor and node as node and context as context
            
            When "VariableDeclaration":
                If visitor.visit_variable_declaration is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_variable_declaration and node as node and context as context
                Otherwise:
                    Return visit_variable_declaration_default with visitor as visitor and node as node and context as context
            
            When "ProcessDeclaration":
                If visitor.visit_process_declaration is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_process_declaration and node as node and context as context
                Otherwise:
                    Return visit_process_declaration_default with visitor as visitor and node as node and context as context
            
            When "IfStatement":
                If visitor.visit_if_statement is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_if_statement and node as node and context as context
                Otherwise:
                    Return visit_if_statement_default with visitor as visitor and node as node and context as context
            
            When "ImportStatement":
                If visitor.visit_import_statement is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_import_statement and node as node and context as context
                Otherwise:
                    Return visit_import_statement_default with visitor as visitor and node as node and context as context
            
            When "ExportStatement":
                If visitor.visit_export_statement is not None:
                    Return call_visitor_method with visitor as visitor and method as visitor.visit_export_statement and node as node and context as context
                Otherwise:
                    Return visit_export_statement_default with visitor as visitor and node as node and context as context
            
            Otherwise:
                Return Failure with diagnostics as list containing create_visitor_error with message as "Unknown AST node type: " plus node.type and location as node.location and warnings as list containing
    
    Catch error:
        If visitor.state.error_recovery_mode:
            Return Failure with diagnostics as list containing create_visitor_error with message as "Visitor error: " plus error.message and location as node.location and warnings as list containing "Error recovery mode enabled"
        Otherwise:
            Return Failure with diagnostics as list containing create_visitor_error with message as "Visitor error: " plus error.message and location as node.location and warnings as list containing

Note: Visitor Method Call Wrapper
Process called "call_visitor_method" that takes visitor as ASTVisitor and method as Process and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Safely call a visitor method with error handling
    Try:
        Let result be method with visitor as visitor and node as node and context as context
        Return Success with result as result and context_updates as dictionary containing
    Catch error:
        Return Failure with diagnostics as list containing create_visitor_error with message as "Method execution error: " plus error.message and location as node.location and warnings as list containing

Note: Default Visitor Implementations
Process called "visit_program_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default program visitor implementation
    Let errors be list containing
    Let warnings be list containing
    Let context_updates be dictionary containing
    
    Note: Visit all statements in the program
    If node.statements is not None:
        For each statement in node.statements:
            Let statement_result be visit_ast with visitor as visitor and node as statement and context as context
            Match statement_result:
                When Success with result as result and context_updates as updates:
                    Add all items from updates to context_updates
                When Failure with diagnostics as diagnostics and warnings as stmt_warnings:
                    Add all items from diagnostics to errors
                    Add all items from stmt_warnings to warnings
    
    If length of errors is equal to 0:
        Return Success with result as None and context_updates as context_updates
    Otherwise:
        Return Failure with diagnostics as errors and warnings as warnings

Process called "visit_statement_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default statement visitor implementation
    Let errors be list containing
    Let warnings be list containing
    Let context_updates be dictionary containing
    
    Note: Visit the statement content
    If node.content is not None:
        Let content_result be visit_ast with visitor as visitor and node as node.content and context as context
        If not content_result.success:
            Add all items from content_result.errors to errors
        Add all items from content_result.warnings to warnings
        Add all items from content_result.context_updates to context_updates
    
    Return VisitResult with:
        success as length of errors is equal to 0
        result as None
        errors as errors
        warnings as warnings
        context_updates as context_updates

Process called "visit_expression_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default expression visitor implementation
    Let errors be list containing
    Let warnings be list containing
    Let context_updates be dictionary containing
    
    Note: Visit expression components
    If node.left is not None:
        Let left_result be visit_ast with visitor as visitor and node as node.left and context as context
        If not left_result.success:
            Add all items from left_result.errors to errors
        Add all items from left_result.warnings to warnings
        Add all items from left_result.context_updates to context_updates
    
    If node.right is not None:
        Let right_result be visit_ast with visitor as visitor and node as node.right and context as context
        If not right_result.success:
            Add all items from right_result.errors to errors
        Add all items from right_result.warnings to warnings
        Add all items from right_result.context_updates to context_updates
    
    Return VisitResult with:
        success as length of errors is equal to 0
        result as None
        errors as errors
        warnings as warnings
        context_updates as context_updates

Process called "visit_literal_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default literal visitor implementation
    Return Success with result as node.value and context_updates as dictionary containing

Process called "visit_identifier_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default identifier visitor implementation
    Return Success with result as node.value and context_updates as dictionary containing

Process called "visit_binary_operation_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default binary operation visitor implementation
    Let errors be list containing
    Let warnings be list containing
    Let context_updates be dictionary containing
    Let left_result as Any
    Let right_result as Any
    
    Note: Visit left operand
    If node.left is not None:
        Let left_visit_result be visit_ast with visitor as visitor and node as node.left and context as context
        Match left_visit_result:
            When Success with result as result and context_updates as updates:
                Set left_result to result
                Add all items from updates to context_updates
            When Failure with diagnostics as diagnostics and warnings as stmt_warnings:
                Add all items from diagnostics to errors
                Add all items from stmt_warnings to warnings
    
    Note: Visit right operand
    If node.right is not None:
        Let right_visit_result be visit_ast with visitor as visitor and node as node.right and context as context
        Match right_visit_result:
            When Success with result as result and context_updates as updates:
                Set right_result to result
                Add all items from updates to context_updates
            When Failure with diagnostics as diagnostics and warnings as stmt_warnings:
                Add all items from diagnostics to errors
                Add all items from stmt_warnings to warnings
    
    If length of errors is equal to 0:
        Return Success with result as dictionary containing "operator" as node.operator and "left" as left_result and "right" as right_result and context_updates as context_updates
    Otherwise:
        Return Failure with diagnostics as errors and warnings as warnings

Process called "visit_function_call_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default function call visitor implementation
    Let errors be list containing
    Let warnings as list containing
    Let context_updates as dictionary containing
    
    Note: Visit function expression
    If node.function is not None:
        Let function_result be visit_ast with visitor as visitor and node as node.function and context as context
        If not function_result.success:
            Add all items from function_result.errors to errors
        Add all items from function_result.warnings to warnings
        Add all items from function_result.context_updates to context_updates
    
    Note: Visit arguments
    Let argument_results be list containing
    If node.arguments is not None:
        For each argument in node.arguments:
            Let arg_result be visit_ast with visitor as visitor and node as argument and context as context
            If not arg_result.success:
                Add all items from arg_result.errors to errors
            Add all items from arg_result.warnings to warnings
            Add all items from arg_result.context_updates to context_updates
            Add arg_result.result to argument_results
    
    Return VisitResult with:
        success as length of errors is equal to 0
        result as dictionary containing "function" as function_result.result and "arguments" as argument_results
        errors as errors
        warnings as warnings
        context_updates as context_updates

Process called "visit_variable_declaration_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default variable declaration visitor implementation
    Let errors be list containing
    Let warnings as list containing
    Let context_updates as dictionary containing
    
    Note: Visit initial value if present
    If node.initial_value is not None:
        Let value_result be visit_ast with visitor as visitor and node as node.initial_value and context as context
        If not value_result.success:
            Add all items from value_result.errors to errors
        Add all items from value_result.warnings to warnings
        Add all items from value_result.context_updates to context_updates
    
    Return VisitResult with:
        success as length of errors is equal to 0
        result as dictionary containing "name" as node.name and "type" as node.type_annotation and "value" as value_result.result
        errors as errors
        warnings as warnings
        context_updates as context_updates

Process called "visit_process_declaration_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default process declaration visitor implementation
    Let errors be list containing
    Let warnings as list containing
    Let context_updates as dictionary containing
    
    Note: Visit parameters
    Let parameter_results be list containing
    If node.parameters is not None:
        For each parameter in node.parameters:
            Let param_result be visit_ast with visitor as visitor and node as parameter and context as context
            If not param_result.success:
                Add all items from param_result.errors to errors
            Add all items from param_result.warnings to warnings
            Add all items from param_result.context_updates to context_updates
            Add param_result.result to parameter_results
    
    Note: Visit body
    If node.body is not None:
        Let body_result be visit_ast with visitor as visitor and node as node.body and context as context
        If not body_result.success:
            Add all items from body_result.errors to errors
        Add all items from body_result.warnings to warnings
        Add all items from body_result.context_updates to context_updates
    
    Return VisitResult with:
        success as length of errors is equal to 0
        result as dictionary containing "name" as node.name and "parameters" as parameter_results and "return_type" as node.return_type and "body" as body_result.result
        errors as errors
        warnings as warnings
        context_updates as context_updates

Process called "visit_if_statement_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default if statement visitor implementation
    Let errors be list containing
    Let warnings as list containing
    Let context_updates as dictionary containing
    
    Note: Visit condition
    If node.condition is not None:
        Let condition_result be visit_ast with visitor as visitor and node as node.condition and context as context
        If not condition_result.success:
            Add all items from condition_result.errors to errors
        Add all items from condition_result.warnings to warnings
        Add all items from condition_result.context_updates to context_updates
    
    Note: Visit then branch
    If node.then_branch is not None:
        Let then_result be visit_ast with visitor as visitor and node as node.then_branch and context as context
        If not then_result.success:
            Add all items from then_result.errors to errors
        Add all items from then_result.warnings to warnings
        Add all items from then_result.context_updates to context_updates
    
    Note: Visit else branch if present
    If node.else_branch is not None:
        Let else_result be visit_ast with visitor as visitor and node as node.else_branch and context as context
        If not else_result.success:
            Add all items from else_result.errors to errors
        Add all items from else_result.warnings to warnings
        Add all items from else_result.context_updates to context_updates
    
    Return VisitResult with:
        success as length of errors is equal to 0
        result as dictionary containing "condition" as condition_result.result and "then" as then_result.result and "else" as else_result.result
        errors as errors
        warnings as warnings
        context_updates as context_updates

Process called "visit_import_statement_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default import statement visitor implementation
    Return VisitResult with:
        success as true
        result as dictionary containing "module" as node.module_name and "symbols" as node.imported_symbols
        errors as list containing
        warnings as list containing
        context_updates as dictionary containing

Process called "visit_export_statement_default" that takes visitor as ASTVisitor and node as ASTNode and context as Dictionary[String, Any] returns VisitResult:
    Note: Default export statement visitor implementation
    Return VisitResult with:
        success as true
        result as dictionary containing "symbols" as node.exported_symbols
        errors as list containing
        warnings as list containing
        context_updates as dictionary containing

Note: Utility Functions
Process called "create_visitor_error" that takes message as String and location as SourceLocation returns SemanticError:
    Note: Create a visitor-specific error
    Return SemanticError with:
        code as "V001"
        message as message
        severity as "error"
        location as location
        context as dictionary containing
        suggestions as list containing
        related_locations as list containing

Process called "create_node_id" that takes node as ASTNode returns String:
    Note: Create unique identifier for AST node
    Return node.type plus "_" plus node.line plus "_" plus node.column

Process called "get_current_context" that takes visitor as ASTVisitor returns Dictionary[String, Any]:
    Note: Get current context from visitor stack
    Let state be visitor.state
    If length of state.context_stack is greater than 0:
        Return state.context_stack at index (length of state.context_stack minus 1)
    Otherwise:
        Return dictionary containing

Process called "push_context" that takes visitor as ASTVisitor and context as Dictionary[String, Any]:
    Note: Push context onto visitor stack
    Let state be visitor.state
    Add context to state.context_stack

Process called "pop_context" that takes visitor as ASTVisitor returns Dictionary[String, Any]:
    Note: Pop context from visitor stack
    Let state be visitor.state
    If length of state.context_stack is greater than 0:
        Let context be state.context_stack at index (length of state.context_stack minus 1)
        Remove last item from state.context_stack
        Return context
    Otherwise:
        Return dictionary containing

Process called "get_visitor_performance_metrics" that takes visitor as ASTVisitor returns Dictionary[String, Any]:
    Note: Get performance metrics from visitor
    Return visitor.state.performance_metrics

Process called "clear_visitor_cache" that takes visitor as ASTVisitor:
    Note: Clear visitor cache and reset state
    Let state be visitor.state
    Set state.visited_nodes to set containing
    Set state.depth to 0
    Set state.context_stack to list containing
    Set state.performance_metrics to dictionary containing:
        "nodes_visited" as 0
        "cache_hits" as 0
        "cache_misses" as 0
        "max_depth_reached" as 0
        "visit_time_ms" as 0 