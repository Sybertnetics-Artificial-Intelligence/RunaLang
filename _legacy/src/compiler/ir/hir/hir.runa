Note: Runa Compiler: High-Level IR (HIR)
Note: Preserves Runa semantics with explicit scopes and resolved names

Import "../../parser/ast.runa"
Import "../types/types.runa"
Import "../ir_context.runa"

Note: High-Level IR (HIR) - Close to AST with Explicit Semantics
Type HIRNode is Dictionary with:
    node_type as String
    location as SourceLocation
    scope as Optional[String]
    metadata as Dictionary[String, Any]

Type HIRExpression is:
    | HIRLiteral with value as Any and literal_type as String and inferred_type as IRType
    | HIRIdentifier with name as String and resolved_symbol as Optional[String] and inferred_type as IRType
    | HIRBinaryOperation with left as HIRExpression and operator as String and right as HIRExpression and inferred_type as IRType
    | HIRUnaryOperation with operator as String and operand as HIRExpression and inferred_type as IRType
    | HIRFunctionCall with function as HIRExpression and arguments as List[HIRExpression] and inferred_type as IRType
    | HIRMethodCall with object as HIRExpression and method as String and arguments as List[HIRExpression] and inferred_type as IRType
    | HIRFieldAccess with object as HIRExpression and field as String and inferred_type as IRType
    | HIRIndexAccess with object as HIRExpression and index as HIRExpression and inferred_type as IRType
    | HIRParenthesizedExpression with expression as HIRExpression and inferred_type as IRType
    | HIRListLiteral with elements as List[HIRExpression] and inferred_type as IRType
    | HIRDictionaryLiteral with keys as List[HIRExpression] and values as List[HIRExpression] and inferred_type as IRType
    | HIRMatchExpression with value as HIRExpression and cases as List[HIRMatchCase] and inferred_type as IRType
    | HIRIfExpression with condition as HIRExpression and then_expr as HIRExpression and else_expr as Optional[HIRExpression] and inferred_type as IRType

Type HIRStatement is:
    | HIRExpressionStatement with expression as HIRExpression
    | HIRVariableDeclaration with name as String and type_annotation as Optional[IRType] and initializer as Optional[HIRExpression] and is_mutable as Boolean
    | HIRAssignment with target as HIRExpression and value as HIRExpression
    | HIRIfStatement with condition as HIRExpression and then_block as List[HIRStatement] and else_block as Optional[List[HIRStatement]]
    | HIRForLoop with iterator as String and collection as HIRExpression and body as List[HIRStatement]
    | HIRWhileLoop with condition as HIRExpression and body as List[HIRStatement]
    | HIRReturnStatement with value as Optional[HIRExpression]
    | HIRBreakStatement
    | HIRContinueStatement
    | HIRMatchStatement with value as HIRExpression and cases as List[HIRMatchCase]
    | HIRTryStatement with try_block as List[HIRStatement] and catch_blocks as List[HIRCatchBlock]
    | HIRThrowStatement with value as HIRExpression
    | HIRImportStatement with module as String and alias as Optional[String]
    | HIRExportStatement with items as List[HIRExportItem]
    | HIRCommentStatement with content as String and is_multiline as Boolean

Type HIRDeclaration is:
    | HIRProcessDeclaration with name as String and parameters as List[HIRParameter] and return_type as Optional[IRType] and body as List[HIRStatement] and is_function as Boolean
    | HIRTypeDeclaration with name as String and fields as List[HIRTypeField] and methods as List[HIRProcessDeclaration]
    | HIRModuleDeclaration with name as String and body as List[HIRStatement]

Type HIRParameter is Dictionary with:
    name as String
    type_annotation as Optional[IRType]
    default_value as Optional[HIRExpression]
    is_mutable as Boolean

Type HIRTypeField is Dictionary with:
    name as String
    type_annotation as IRType
    is_mutable as Boolean
    default_value as Optional[HIRExpression]

Type HIRMatchCase is Dictionary with:
    pattern as HIRPattern
    guard as Optional[HIRExpression]
    body as List[HIRStatement]

Type HIRPattern is:
    | HIRLiteralPattern with value as Any
    | HIRIdentifierPattern with name as String
    | HIRWildcardPattern
    | HIRStructPattern with type_name as String and fields as List[HIRFieldPattern]
    | HIRTuplePattern with elements as List[HIRPattern]
    | HIRListPattern with elements as List[HIRPattern]

Type HIRFieldPattern is Dictionary with:
    field_name as String
    pattern as HIRPattern

Type HIRCatchBlock is Dictionary with:
    exception_type as Optional[IRType]
    exception_name as String
    body as List[HIRStatement]

Type HIRExportItem is Dictionary with:
    name as String
    alias as Optional[String]

Note: HIR Module - Complete HIR Representation
Type HIRModule is Dictionary with:
    name as String
    declarations as List[HIRDeclaration]
    statements as List[HIRStatement]
    imports as List[HIRImportStatement]
    exports as List[HIRExportStatement]
    scope_tree as List[Scope]
    symbol_table as SymbolTable
    type_table as TypeTable
    metadata as Dictionary[String, Any]

Process called "create_hir_module" that takes name as String returns HIRModule:
    Note: Create a new HIR module
    Return HIRModule with:
        name as name
        declarations as list containing
        statements as list containing
        imports as list containing
        exports as list containing
        scope_tree as list containing
        symbol_table be create_symbol_table with parent as None and scope_level as 0
        type_table be create_type_table with parent as None and scope_level as 0
        metadata as dictionary containing

Note: HIR Node Creation Utilities
Process called "create_hir_literal" that takes value as Any and literal_type as String and inferred_type as IRType and location as SourceLocation returns HIRExpression:
    Note: Create a HIR literal expression
    Return HIRLiteral with value as value and literal_type as literal_type and inferred_type as inferred_type

Process called "create_hir_identifier" that takes name as String and resolved_symbol as Optional[String] and inferred_type as IRType and location as SourceLocation returns HIRExpression:
    Note: Create a HIR identifier expression
    Return HIRIdentifier with name as name and resolved_symbol as resolved_symbol and inferred_type as inferred_type

Process called "create_hir_binary_operation" that takes left as HIRExpression and operator as String and right as HIRExpression and inferred_type as IRType and location as SourceLocation returns HIRExpression:
    Note: Create a HIR binary operation expression
    Return HIRBinaryOperation with left as left and operator as operator and right as right and inferred_type as inferred_type

Process called "create_hir_function_call" that takes function as HIRExpression and arguments as List[HIRExpression] and inferred_type as IRType and location as SourceLocation returns HIRExpression:
    Note: Create a HIR function call expression
    Return HIRFunctionCall with function as function and arguments as arguments and inferred_type as inferred_type

Process called "create_hir_variable_declaration" that takes name as String and type_annotation as Optional[IRType] and initializer as Optional[HIRExpression] and is_mutable as Boolean and location as SourceLocation returns HIRStatement:
    Note: Create a HIR variable declaration statement
    Return HIRVariableDeclaration with name as name and type_annotation as type_annotation and initializer as initializer and is_mutable as is_mutable

Process called "create_hir_process_declaration" that takes name as String and parameters as List[HIRParameter] and return_type as Optional[IRType] and body as List[HIRStatement] and is_function as Boolean and location as SourceLocation returns HIRDeclaration:
    Note: Create a HIR process declaration
    Return HIRProcessDeclaration with name as name and parameters as parameters and return_type as return_type and body as body and is_function as is_function

Note: HIR Analysis Utilities
Process called "get_hir_node_type" that takes node as HIRExpression returns String:
    Note: Get the type of a HIR expression node
    Match node:
        When HIRLiteral with value as value and literal_type as literal_type and inferred_type as inferred_type:
            Return "literal"
        When HIRIdentifier with name as name and resolved_symbol as resolved_symbol and inferred_type as inferred_type:
            Return "identifier"
        When HIRBinaryOperation with left as left and operator as operator and right as right and inferred_type as inferred_type:
            Return "binary_operation"
        When HIRFunctionCall with function as function and arguments as arguments and inferred_type as inferred_type:
            Return "function_call"
        When HIRMethodCall with object as object and method as method and arguments as arguments and inferred_type as inferred_type:
            Return "method_call"
        When HIRFieldAccess with object as object and field as field and inferred_type as inferred_type:
            Return "field_access"
        When HIRIndexAccess with object as object and index as index and inferred_type as inferred_type:
            Return "index_access"
        When HIRParenthesizedExpression with expression as expression and inferred_type as inferred_type:
            Return "parenthesized_expression"
        When HIRListLiteral with elements as elements and inferred_type as inferred_type:
            Return "list_literal"
        When HIRDictionaryLiteral with keys as keys and values as values and inferred_type as inferred_type:
            Return "dictionary_literal"
        When HIRMatchExpression with value as value and cases as cases and inferred_type as inferred_type:
            Return "match_expression"
        When HIRIfExpression with condition as condition and then_expr as then_expr and else_expr as else_expr and inferred_type as inferred_type:
            Return "if_expression"

Process called "is_hir_literal" that takes node as HIRExpression returns Boolean:
    Note: Check if a HIR node is a literal
    Return get_hir_node_type with node as node is equal to "literal"

Process called "is_hir_identifier" that takes node as HIRExpression returns Boolean:
    Note: Check if a HIR node is an identifier
    Return get_hir_node_type with node as node is equal to "identifier"

Process called "get_hir_inferred_type" that takes node as HIRExpression returns IRType:
    Note: Get the inferred type of a HIR expression
    Match node:
        When HIRLiteral with value as value and literal_type as literal_type and inferred_type as inferred_type:
            Return inferred_type
        When HIRIdentifier with name as name and resolved_symbol as resolved_symbol and inferred_type as inferred_type:
            Return inferred_type
        When HIRBinaryOperation with left as left and operator as operator and right as right and inferred_type as inferred_type:
            Return inferred_type
        When HIRFunctionCall with function as function and arguments as arguments and inferred_type as inferred_type:
            Return inferred_type
        When HIRMethodCall with object as object and method as method and arguments as arguments and inferred_type as inferred_type:
            Return inferred_type
        When HIRFieldAccess with object as object and field as field and inferred_type as inferred_type:
            Return inferred_type
        When HIRIndexAccess with object as object and index as index and inferred_type as inferred_type:
            Return inferred_type
        When HIRParenthesizedExpression with expression as expression and inferred_type as inferred_type:
            Return inferred_type
        When HIRListLiteral with elements as elements and inferred_type as inferred_type:
            Return inferred_type
        When HIRDictionaryLiteral with keys as keys and values as values and inferred_type as inferred_type:
            Return inferred_type
        When HIRMatchExpression with value as value and cases as cases and inferred_type as inferred_type:
            Return inferred_type
        When HIRIfExpression with condition as condition and then_expr as then_expr and else_expr as else_expr and inferred_type as inferred_type:
            Return inferred_type

Note: HIR Traversal Utilities
Process called "get_all_hir_identifiers" that takes node as HIRExpression returns List[String]:
    Note: Get all identifiers in a HIR expression
    Let identifiers be list containing
    
    Match node:
        When HIRIdentifier with name as name and resolved_symbol as resolved_symbol and inferred_type as inferred_type:
            Add name to identifiers
        When HIRBinaryOperation with left as left and operator as operator and right as right and inferred_type as inferred_type:
            Add all (get_all_hir_identifiers with node as left) to identifiers
            Add all (get_all_hir_identifiers with node as right) to identifiers
        When HIRFunctionCall with function as function and arguments as arguments and inferred_type as inferred_type:
            Add all (get_all_hir_identifiers with node as function) to identifiers
            For each arg in arguments:
                Add all (get_all_hir_identifiers with node as arg) to identifiers
        When HIRMethodCall with object as object and method as method and arguments as arguments and inferred_type as inferred_type:
            Add all (get_all_hir_identifiers with node as object) to identifiers
            For each arg in arguments:
                Add all (get_all_hir_identifiers with node as arg) to identifiers
        When HIRFieldAccess with object as object and field as field and inferred_type as inferred_type:
            Add all (get_all_hir_identifiers with node as object) to identifiers
        When HIRIndexAccess with object as object and index as index and inferred_type as inferred_type:
            Add all (get_all_hir_identifiers with node as object) to identifiers
            Add all (get_all_hir_identifiers with node as index) to identifiers
        When HIRParenthesizedExpression with expression as expression and inferred_type as inferred_type:
            Add all (get_all_hir_identifiers with node as expression) to identifiers
        When HIRListLiteral with elements as elements and inferred_type as inferred_type:
            For each element in elements:
                Add all (get_all_hir_identifiers with node as element) to identifiers
        When HIRDictionaryLiteral with keys as keys and values as values and inferred_type as inferred_type:
            For each key in keys:
                Add all (get_all_hir_identifiers with node as key) to identifiers
            For each value in values:
                Add all (get_all_hir_identifiers with node as value) to identifiers
        Otherwise:
            Note: No identifiers in other node types
            Return identifiers
    
    Return identifiers

Process called "get_all_hir_literals" that takes node as HIRExpression returns List[Any]:
    Note: Get all literals in a HIR expression
    Let literals be list containing
    
    Match node:
        When HIRLiteral with value as value and literal_type as literal_type and inferred_type as inferred_type:
            Add value to literals
        When HIRBinaryOperation with left as left and operator as operator and right as right and inferred_type as inferred_type:
            Add all (get_all_hir_literals with node as left) to literals
            Add all (get_all_hir_literals with node as right) to literals
        When HIRFunctionCall with function as function and arguments as arguments and inferred_type as inferred_type:
            Add all (get_all_hir_literals with node as function) to literals
            For each arg in arguments:
                Add all (get_all_hir_literals with node as arg) to literals
        When HIRListLiteral with elements as elements and inferred_type as inferred_type:
            For each element in elements:
                Add all (get_all_hir_literals with node as element) to literals
        When HIRDictionaryLiteral with keys as keys and values as values and inferred_type as inferred_type:
            For each key in keys:
                Add all (get_all_hir_literals with node as key) to literals
            For each value in values:
                Add all (get_all_hir_literals with node as value) to literals
        Otherwise:
            Note: No literals in other node types
            Return literals
    
    Return literals

Note: HIR Validation
Process called "validate_hir_expression" that takes node as HIRExpression returns Dictionary[String, Any]:
    Note: Validate a HIR expression
    Let errors be list containing
    Let warnings be list containing
    
    Match node:
        When HIRIdentifier with name as name and resolved_symbol as resolved_symbol and inferred_type as inferred_type:
            If resolved_symbol is None:
                Add "Unresolved identifier: " plus name to errors
            If inferred_type is IRUnknownType:
                Add "Unknown type for identifier: " plus name to warnings
        When HIRBinaryOperation with left as left and operator as operator and right as right and inferred_type as inferred_type:
            Let left_result be validate_hir_expression with node as left
            Let right_result be validate_hir_expression with node as right
            Add all left_result.errors to errors
            Add all right_result.errors to errors
            Add all left_result.warnings to warnings
            Add all right_result.warnings to warnings
        When HIRFunctionCall with function as function and arguments as arguments and inferred_type as inferred_type:
            Let function_result be validate_hir_expression with node as function
            Add all function_result.errors to errors
            Add all function_result.warnings to warnings
            For each arg in arguments:
                Let arg_result be validate_hir_expression with node as arg
                Add all arg_result.errors to errors
                Add all arg_result.warnings to warnings
        Otherwise:
            Note: Other node types are generally valid
            Return dictionary containing "valid" as true and "errors" as errors and "warnings" as warnings
    
    Return dictionary containing:
        "valid" as (length of errors is equal to 0)
        "errors" as errors
        "warnings" as warnings

Note: HIR Statistics
Process called "get_hir_statistics" that takes hir_module as HIRModule returns Dictionary[String, Any]:
    Note: Get statistics about a HIR module
    Let expression_count be 0
    Let statement_count be 0
    Let declaration_count be 0
    Let identifier_count be 0
    Let literal_count be 0
    
    Note: Count expressions in statements
    For each statement in hir_module.statements:
        Set statement_count to statement_count plus 1
        Note: This is a simplified count - in a real implementation, you'd traverse the statement structure
    
    Note: Count declarations
    Set declaration_count to length of hir_module.declarations
    
    Note: Count imports and exports
    Let import_count be length of hir_module.imports
    Let export_count be length of hir_module.exports
    
    Return dictionary containing:
        "expression_count" as expression_count
        "statement_count" as statement_count
        "declaration_count" as declaration_count
        "identifier_count" as identifier_count
        "literal_count" as literal_count
        "import_count" as import_count
        "export_count" as export_count
        "function_count" as declaration_count
        "instruction_count" as (expression_count plus statement_count) 