Note:
Runa Lexer: Next-Generation Diagnostic System

This module provides the advanced diagnostic engine for the Runa lexer,
offering world-class error reporting, AI-friendly suggestions, and intelligent recovery.

Key Features:
- Unified diagnostic objects with rich context
- AI-native structured output
- Intelligent suggestion generation
- Graceful error recovery strategies
- Professional error formatting
:End Note

Note: Import dependencies
Import "token.runa"
Import "internal/utilities.runa"

Note: Enhanced Lexer Error Types with Mathematical Symbol Enforcement
Type LexerError is:
    | UnexpectedCharacter with char as String and location as SourceLocation and expected as Optional[String]
    | UnterminatedString with location as SourceLocation and quote_type as String
    | InvalidNumber with value as String and location as SourceLocation and reason as String
    | InvalidIdentifier with value as String and location as SourceLocation and reason as String
    | IndentationError with expected as Integer and actual as Integer and location as SourceLocation
    | InvalidOperator with value as String and location as SourceLocation and suggestions as List[String]
    | InvalidMathematicalSymbolUsage with value as String and location as SourceLocation and suggestions as List[String]
    | UnknownMathematicalSymbol with value as String and location as SourceLocation and suggestions as List[String]
    | UnknownOperator with value as String and location as SourceLocation and suggestions as List[String]
    | DeprecationWarning with phrase as String and replacement as String and location as SourceLocation
    | UnterminatedComment with location as SourceLocation
    | InvalidEscapeSequence with sequence as String and location as SourceLocation
    | FileNotFound with file_path as String
    | EncodingError with file_path as String and encoding as String

Note: Error Severity Levels
Type DiagnosticSeverity is:
    | HINT     Note: Suggestions for style or best practices.
    | WARNING  Note: Potential issues that don't stop compilation.
    | ERROR    Note: A definite error that stops compilation.
    | FATAL    Note: An unrecoverable error (e.g., file not found).

Note: Suggested Fix with Confidence
Type SuggestedFix is Dictionary with:
    description as String         Note: "Replace 'multipliedd' with 'multiplied by'."
    replacement as String         Note: The code to insert.
    confidence as Float           Note: A score from 0.0 to 1.0.

Note: Rich Diagnostic Object
Type Diagnostic is Dictionary with:
    error_type as LexerError
    severity as DiagnosticSeverity
    message as String             Note: The primary, human-readable message.
    location as SourceLocation
    source_context as List[String] Note: The line with the error, plus lines before and after.
    suggestions as List[SuggestedFix]
    error_code as String          Note: e.g., "L001", for stable identification and documentation lookup.
    help_url as String            Note: "https://runa-lang.org/docs/errors/L001"

Note: Recovery Token Types for Error Recovery
Type RecoveryToken is:
    | EndString
    | Newline
    | ErrorRecovery
    | SkipToDelimiter with delimiter as String

Note: The Main Diagnostic Engine
Type DiagnosticEngine is Dictionary with:
    source_lines as List[String]
    file_path as String
    diagnostics as List[Diagnostic]
    max_errors as Integer

Note: Diagnostic Engine Creation and Management
Process called "create_engine" that takes source_code as String and file_path as String returns DiagnosticEngine:
    Note: Create a new diagnostic engine for a file
    Return DiagnosticEngine with:
        source_lines as split_string_with_delimiter with string as source_code and delimiter as "\n"
        file_path as file_path
        diagnostics as list containing
        max_errors as 20

Process called "report" that takes engine as DiagnosticEngine and error as LexerError and location as SourceLocation:
    Note: Report an error to the diagnostic engine
    If length of engine.diagnostics is greater than or equal to engine.max_errors:
        Return  Note: Stop reporting after too many errors to prevent spam.

    Let message be generate_message with error as error
    Let source_context be extract_source_context with engine as engine and location as location
    Let suggestions be generate_suggestions with error as error and context as source_context
    Let error_code be get_error_code with error as error
    Let help_url be "https://runa-lang.org/docs/errors/" plus error_code

    Let diagnostic be Diagnostic with:
        error_type as error
        severity as get_severity with error as error
        message as message
        location as location
        source_context as source_context
        suggestions as suggestions
        error_code as error_code
        help_url as help_url
    
    Add diagnostic to engine.diagnostics

Process called "has_errors" that takes engine as DiagnosticEngine returns Boolean:
    Note: Check if the engine has any errors
    Return length of engine.diagnostics is greater than 0

Process called "get_error_count" that takes engine as DiagnosticEngine returns Integer:
    Note: Get the number of errors
    Return length of engine.diagnostics

Note: Diagnostic Rendering and Formatting
Process called "render_all_diagnostics" that takes engine as DiagnosticEngine returns String:
    Note: Format all collected diagnostics into a beautiful, readable report
    Let output be ""
    For each diagnostic in engine.diagnostics:
        Set output to output plus render_diagnostic with diagnostic as diagnostic plus "\n\n"
    Return output

Process called "render_diagnostic" that takes diagnostic as Diagnostic returns String:
    Note: Create the final, formatted string for a single diagnostic
    Let header be diagnostic.severity plus ": " plus diagnostic.message plus " [" plus diagnostic.error_code plus "]"
    
    Let location_str be diagnostic.location.file plus ":" plus diagnostic.location.line
    
    Let context_str be ""
    For each line in diagnostic.source_context:
        Set context_str to context_str plus line plus "\n"
    
    Let marker be repeat_string with string as " " and count as (diagnostic.location.column minus 1) plus "^"
    
    Let suggestion_str be ""
    For each fix in diagnostic.suggestions:
        Set suggestion_str to suggestion_str plus "    Suggestion: " plus fix.description plus "\n"

    Return header plus "\n" plus
           "  --> " plus location_str plus "\n" plus
           context_str plus
           marker plus "\n" plus
           suggestion_str plus
           "    For more information, visit: " plus diagnostic.help_url

Note: Message Generation Functions
Process called "generate_message" that takes error as LexerError returns String:
    Note: Generate human-readable error messages
    Match error:
        When UnexpectedCharacter with char as char and location as location and expected as expected:
            If expected is not None:
                Return "Unexpected character '" plus char plus "' at " plus format_location with location as location plus ". Expected " plus expected
            Otherwise:
                Return "Unexpected character '" plus char plus "' at " plus format_location with location as location
        When UnterminatedString with location as location and quote_type as quote_type:
            Return "Unterminated string literal starting with '" plus quote_type plus "' at " plus format_location with location as location
        When InvalidNumber with value as value and location as location and reason as reason:
            Return "Invalid number '" plus value plus "' at " plus format_location with location as location plus ": " plus reason
        When InvalidIdentifier with value as value and location as location and reason as reason:
            Return "Invalid identifier '" plus value plus "' at " plus format_location with location as location plus ": " plus reason
        When IndentationError with expected as expected and actual as actual and location as location:
            Return "Indentation error at " plus format_location with location as location plus ": expected " plus expected plus " spaces, got " plus actual
        When InvalidOperator with value as value and location as location and suggestions as suggestions:
            Return "Invalid operator '" plus value plus "' at " plus format_location with location as location
        When DeprecationWarning with phrase as phrase and replacement as replacement and location as location:
            Return "Deprecated syntax '" plus phrase plus "' at " plus format_location with location as location plus ". Use '" plus replacement plus "' instead."
        When UnterminatedComment with location as location:
            Return "Unterminated comment at " plus format_location with location as location
        When InvalidEscapeSequence with sequence as sequence and location as location:
            Return "Invalid escape sequence '" plus sequence plus "' at " plus format_location with location as location
        When FileNotFound with file_path as file_path:
            Return "File not found: " plus file_path
        When EncodingError with file_path as file_path and encoding as encoding:
            Return "Encoding error reading file " plus file_path plus " with encoding " plus encoding

Process called "format_location" that takes location as SourceLocation returns String:
    Note: Format location information for error messages
    Return location.file plus ":" plus location.line plus ":" plus location.column

Process called "extract_source_context" that takes engine as DiagnosticEngine and location as SourceLocation returns List[String]:
    Note: Extract source code context around the error location
    Let context be list containing
    Let line_number be location.line
    Let max_lines be length of engine.source_lines
    
    Note: Add previous line if available
    If line_number is greater than 1:
        Add (engine.source_lines at index (line_number minus 2)) to context
    
    Note: Add current line
    If line_number is less than or equal to max_lines:
        Add (engine.source_lines at index (line_number minus 1)) to context
    
    Note: Add next line if available
    If line_number is less than max_lines:
        Add (engine.source_lines at index line_number) to context
    
    Return context

Process called "get_error_code" that takes error as LexerError returns String:
    Note: Generate error codes for documentation lookup
    Match error:
        When UnexpectedCharacter with char as char and location as location and expected as expected:
            Return "L001"
        When UnterminatedString with location as location and quote_type as quote_type:
            Return "L002"
        When InvalidNumber with value as value and location as location and reason as reason:
            Return "L003"
        When InvalidIdentifier with value as value and location as location and reason as reason:
            Return "L004"
        When IndentationError with expected as expected and actual as actual and location as location:
            Return "L005"
        When InvalidOperator with value as value and location as location and suggestions as suggestions:
            Return "L006"
        When DeprecationWarning with phrase as phrase and replacement as replacement and location as location:
            Return "L011"
        When UnterminatedComment with location as location:
            Return "L007"
Note: Severity mapping helper for diagnostics
Process called "get_severity" that takes error as LexerError returns DiagnosticSeverity:
    Match error:
        When DeprecationWarning with phrase as phrase and replacement as replacement and location as location:
            Return WARNING
        Otherwise:
            Return ERROR

        When InvalidEscapeSequence with sequence as sequence and location as location:
            Return "L008"
        When FileNotFound with file_path as file_path:
            Return "L009"
        When EncodingError with file_path as file_path and encoding as encoding:
            Return "L010"

Note: Advanced Suggestion Generation
Process called "generate_suggestions" that takes error as LexerError and context as List[String] returns List[SuggestedFix]:
    Note: Generate intelligent suggestions for fixing errors
    Match error:
        When UnexpectedCharacter with char as char and location as location and expected as expected:
            If char is equal to "{" and context contains "start_of_block":
                Return list containing SuggestedFix with:
                    description as "Runa uses indentation for blocks, not curly braces. Replace '{' with a newline and an indent."
                    replacement as "\n    "
                    confidence as 0.95
            Otherwise if char is equal to "}":
                Return list containing SuggestedFix with:
                    description as "Runa uses indentation for blocks, not curly braces. Remove '}' and adjust indentation."
                    replacement as ""
                    confidence as 0.95
            Return list containing
        
        When InvalidOperator with value as op and location as location and suggestions as suggestions:
            Let valid_operators be list containing "plus", "minus", "multiplied by", "divided by", "is equal to", "is greater than", "is less than"
            Let best_match be find_closest_string with query as op and candidates as valid_operators
            
            If best_match.distance is less than 3:
                Return list containing SuggestedFix with:
                    description as "Did you mean '" plus best_match.candidate plus "'?"
                    replacement as best_match.candidate
                    confidence as 0.9
            Return list containing

        When UnterminatedString with location as location and quote_type as quote_type:
            Return list containing SuggestedFix with:
                description as "Add a closing quote '" plus quote_type plus "' to the end of the line."
                replacement as quote_type
                confidence as 0.99
        
        When IndentationError with expected as expected and actual as actual and location as location:
            Let suggestion be ""
            If actual is greater than expected:
                Set suggestion to "Remove " plus (actual minus expected) plus " spaces from the beginning of this line."
            Otherwise:
                Set suggestion to "Add " plus (expected minus actual) plus " spaces to the beginning of this line."
            
            Return list containing SuggestedFix with:
                description as suggestion
                replacement as ""
                confidence as 0.95
        
        Otherwise:
            Return list containing

Note: Error Collection and Reporting
Process called "get_error_summary" that takes engine as DiagnosticEngine returns String:
    Note: Get a summary of all errors and warnings
    Let summary be "Lexer completed with "
    Let error_count be length of engine.diagnostics
    
    Set summary to summary plus error_count plus " errors"
    
    If error_count is greater than 0:
        Set summary to summary plus "\n\nErrors:"
        For each diagnostic in engine.diagnostics:
            Set summary to summary plus "\n- " plus diagnostic.message
    
    Return summary

Note: AI-Friendly Error Messages
Process called "create_ai_friendly_message" that takes error as LexerError returns String:
    Note: Create an AI-friendly error message with suggestions
    Let base_message be generate_message with error as error
    Let ai_suggestion be get_ai_suggestion with error as error
    
    Return base_message plus "\n\nAI Suggestion: " plus ai_suggestion

Process called "get_ai_suggestion" that takes error as LexerError returns String:
    Note: Get AI-friendly suggestions for fixing errors
    Match error:
        When UnexpectedCharacter with char as char and location as location and expected as expected:
            Return "Check for typos or missing characters. Ensure proper syntax for Runa language constructs."
        When UnterminatedString with location as location and quote_type as quote_type:
            Return "Add the missing closing quote '" plus quote_type plus "' to complete the string literal."
        When InvalidNumber with value as value and location as location and reason as reason:
            Return "Use a valid number format. For decimals, use a period (e.g., 3.14). For integers, avoid leading zeros."
        When InvalidIdentifier with value as value and location as location and reason as reason:
            Return "Use only letters, numbers, and underscores for identifiers. Start with a letter or underscore."
        When IndentationError with expected as expected and actual as actual and location as location:
            Return "Use consistent indentation (spaces or tabs, but not mixed). Check your editor's tab settings."
        When InvalidOperator with value as value and location as location and suggestions as suggestions:
            Return "Use a valid Runa operator. Common operators include 'is greater than', 'plus', 'multiplied by'."
        When UnterminatedComment with location as location:
            Return "Complete your comment with proper syntax or remove the incomplete comment."
        When InvalidEscapeSequence with sequence as sequence and location as location:
            Return "Use valid escape sequences like '\\n', '\\t', '\\\"' in string literals."
        Otherwise:
            Return "Review the syntax and ensure it follows Runa language rules." 