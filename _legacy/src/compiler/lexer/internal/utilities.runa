Note:
Runa Lexer: Internal Utilities - Shared Pure Functions

This module contains pure, stateless utility functions that are used
by multiple parts of the lexer system to prevent code duplication.

Key Features:
- Shared utility functions for string operations
- String similarity and edit distance calculations
- Pure functions with no side effects
:End Note

Note: String Similarity and Edit Distance Functions
Process called "calculate_edit_distance" that takes str1 as String and str2 as String returns Integer:
    Note: Calculate Levenshtein edit distance between two strings
    Let len1 be length of str1
    Let len2 be length of str2
    
    If len1 is equal to 0:
        Return len2
    If len2 is equal to 0:
        Return len1
    
    Let matrix be create_matrix with rows as (len1 plus 1) and cols as (len2 plus 1)
    
    For i from 0 to len1:
        Set matrix at row i and column 0 to i
    
    For j from 0 to len2:
        Set matrix at row 0 and column j to j
    
    For i from 1 to len1:
        For j from 1 to len2:
            Let cost be 0
            If character_at with string as str1 and index as (i minus 1) is not equal to character_at with string as str2 and index as (j minus 1):
                Set cost to 1
            
            Let deletion be (matrix at row (i minus 1) and column j) plus 1
            Let insertion be (matrix at row i and column (j minus 1)) plus 1
            Let substitution be (matrix at row (i minus 1) and column (j minus 1)) plus cost
            
            Set matrix at row i and column j to minimum with values as list containing deletion, insertion, substitution
    
    Return matrix at row len1 and column len2

Process called "create_matrix" that takes rows as Integer and cols as Integer returns List[List[Integer]]:
    Note: Create a 2D matrix initialized with zeros
    Let matrix be list containing
    
    For i from 0 to rows minus 1:
        Let row be list containing
        For j from 0 to cols minus 1:
            Add 0 to row
        Add row to matrix
    
    Return matrix

Process called "calculate_string_similarity" that takes str1 as String and str2 as String returns Float:
    Note: Calculate similarity between two strings (0.0 to 1.0)
    Let max_length be maximum with a as length of str1 and b as length of str2
    If max_length is equal to 0:
        Return 1.0
    
    Let distance be calculate_edit_distance with str1 as str1 and str2 as str2
    Return (max_length minus distance) divided by max_length

Process called "find_closest_string" that takes query as String and candidates as List[String] returns Dictionary[String, Any]:
    Note: Find the closest string match using edit distance
    Let best_match be dictionary containing:
        "candidate" as ""
        "distance" as 999999
    
    For each candidate in candidates:
        Let distance be calculate_edit_distance with str1 as query and str2 as candidate
        If distance is less than best_match.distance:
            Set best_match.candidate to candidate
            Set best_match.distance to distance
    
    Return best_match

Note: String Manipulation Functions
Process called "split_string_with_delimiter" that takes string as String and delimiter as String returns List[String]:
    Note: Split string by delimiter
    Let result be list containing
    Let current be ""
    
    For i from 0 to length of string minus 1:
        Let char be character_at with string as string and index as i
        If char is equal to delimiter:
            Add current to result
            Set current to ""
        Otherwise:
            Set current to current plus char
    
    Add current to result
    Return result

Process called "repeat_string" that takes string as String and count as Integer returns String:
    Note: Repeat a string a specified number of times
    Let result be ""
    For i from 0 to count minus 1:
        Set result to result plus string
    Return result

Process called "substring" that takes string as String and start as Integer and end as Integer returns String:
    Note: Extract substring from string
    Let result be ""
    For i from start to end minus 1:
        If i is less than length of string:
            Set result to result plus character_at with string as string and index as i
    Return result

Process called "find_substring" that takes string as String and substring as String and start as Integer returns Integer:
    Note: Find substring in string starting from position
    Let sub_length be length of substring
    Let str_length be length of string
    
    For i from start to (str_length minus sub_length):
        Let match be true
        For j from 0 to sub_length minus 1:
            If character_at with string as string and index as (i plus j) is not equal to character_at with string as substring and index as j:
                Set match to false
                Break
        If match:
            Return i
    
    Return -1

Process called "starts_with" that takes string as String and prefix as String returns Boolean:
    Note: Check if string starts with prefix
    If length of prefix is greater than length of string:
        Return false
    
    For i from 0 to length of prefix minus 1:
        If character_at with string as string and index as i is not equal to character_at with string as prefix and index as i:
            Return false
    
    Return true

Process called "ends_with" that takes string as String and suffix as String returns Boolean:
    Note: Check if string ends with suffix
    If length of suffix is greater than length of string:
        Return false
    
    Let start_pos be length of string minus length of suffix
    
    For i from 0 to length of suffix minus 1:
        If character_at with string as string and index as (start_pos plus i) is not equal to character_at with string as suffix and index as i:
            Return false
    
    Return true

Note: Character Classification Functions
Process called "is_digit" that takes char as String returns Boolean:
    Note: Check if character is a digit
    Return char is greater than or equal to "0" and char is less than or equal to "9"

Process called "is_whitespace" that takes char as String returns Boolean:
    Note: Check if character is whitespace (but not newline)
    Return char is equal to " " or char is equal to "\t" or char is equal to "\r"

Process called "is_newline" that takes char as String returns Boolean:
    Note: Check if character is a newline
    Return char is equal to "\n"

Process called "is_identifier_start" that takes char as String returns Boolean:
    Note: Check if character can start an identifier
    Return (char is greater than or equal to "a" and char is less than or equal to "z") or
           (char is greater than or equal to "A" and char is less than or equal to "Z") or
           char is equal to "_"

Process called "is_identifier_continue" that takes char as String returns Boolean:
    Note: Check if character can continue an identifier
    Return is_identifier_start with char as char or
           (char is greater than or equal to "0" and char is less than or equal to "9") or
           char is equal to " "

Note: Normalization Functions
Process called "normalize_identifier" that takes text as String returns String:
    Note: Normalize identifiers for case-insensitive comparison
    Note: Preserve separators (spaces, underscores) but lowercase everything
    Return to_lowercase with text as text

Process called "to_lowercase" that takes text as String returns String:
    Note: Convert string to lowercase
    Let result be ""
    For i from 0 to length of text minus 1:
        Let char be character_at with string as text and index as i
        If char is greater than or equal to "A" and char is less than or equal to "Z":
            Set char to character_at with string as "abcdefghijklmnopqrstuvwxyz" and index as (char minus "A")
        Set result to result plus char
    Return result

Note: Mathematical Utility Functions
Process called "minimum" that takes values as List[Integer] returns Integer:
    Note: Find minimum value in list
    If length of values is equal to 0:
        Return 0
    
    Let min_val be values at index 0
    For i from 1 to length of values minus 1:
        If (values at index i) is less than min_val:
            Set min_val to values at index i
    
    Return min_val

Process called "maximum" that takes a as Integer and b as Integer returns Integer:
    Note: Find maximum of two values
    If a is greater than b:
        Return a
    Otherwise:
        Return b 