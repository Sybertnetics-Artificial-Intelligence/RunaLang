Process SimpleCompiler
    Takes source_code
    Returns compiled_bytecode
    
    Let tokens = Tokenize(source_code)
    Let ast = Parse(tokens)
    Let bytecode = Generate(ast)
    Return bytecode

Process Tokenize
    Takes source
    Returns tokens
    
    Let tokens = []
    Let current = 0
    Let line = 1
    
    While current < Length(source)
        Let char = GetChar(source, current)
        
        If char == " "
            current = current + 1
        Otherwise If char == "\n"
            AddToList(tokens, "NEWLINE")
            line = line + 1
            current = current + 1
        Otherwise If char == "("
            AddToList(tokens, "LPAREN")
            current = current + 1
        Otherwise If char == ")"
            AddToList(tokens, "RPAREN")
            current = current + 1
        Otherwise If char == "="
            AddToList(tokens, "ASSIGN")
            current = current + 1
        Otherwise If char == "+"
            AddToList(tokens, "PLUS")
            current = current + 1
        Otherwise If char == "-"
            AddToList(tokens, "MINUS")
            current = current + 1
        Otherwise If char == "*"
            AddToList(tokens, "MULTIPLY")
            current = current + 1
        Otherwise If char == "/"
            AddToList(tokens, "DIVIDE")
            current = current + 1
        Otherwise If IsDigit(char)
            Let number = ReadNumber(source, current)
            AddToList(tokens, "NUMBER:" + number)
            current = current + Length(number)
        Otherwise If IsLetter(char)
            Let identifier = ReadIdentifier(source, current)
            AddToList(tokens, "ID:" + identifier)
            current = current + Length(identifier)
        Otherwise
            current = current + 1
    
    Return tokens

Process Parse
    Takes tokens
    Returns ast
    
    Let statements = []
    Let current = 0
    
    While current < Length(tokens)
        Let token = GetToken(tokens, current)
        
        If StartsWith(token, "ID:")
            Let name = ExtractName(token)
            current = current + 1
            
            If current < Length(tokens)
                Let next_token = GetToken(tokens, current)
                If next_token == "ASSIGN"
                    current = current + 1
                    Let value = ParseExpression(tokens, current)
                    Let statement = CreateAssignment(name, value)
                    AddToList(statements, statement)
                Otherwise
                    Let statement = CreateVariable(name)
                    AddToList(statements, statement)
            Otherwise
                Let statement = CreateVariable(name)
                AddToList(statements, statement)
        Otherwise
            current = current + 1
    
    Return statements

Process ParseExpression
    Takes tokens, start
    Returns expression
    
    Let current = start
    Let token = GetToken(tokens, current)
    
    If StartsWith(token, "NUMBER:")
        Let value = ExtractNumber(token)
        current = current + 1
        
        If current < Length(tokens)
            Let next_token = GetToken(tokens, current)
            If next_token == "PLUS" || next_token == "MINUS" || next_token == "MULTIPLY" || next_token == "DIVIDE"
                Let operator = next_token
                current = current + 1
                Let right = ParseExpression(tokens, current)
                Return CreateBinaryExpression(value, operator, right)
        
        Return CreateLiteral(value)
    Otherwise If StartsWith(token, "ID:")
        Let name = ExtractName(token)
        Return CreateVariable(name)
    
    Return CreateLiteral("0")

Process Generate
    Takes ast
    Returns bytecode
    
    Let bytecode = []
    
    For statement in ast
        If IsAssignment(statement)
            Let name = GetAssignmentName(statement)
            Let value = GetAssignmentValue(statement)
            AddToList(bytecode, "CONSTANT:" + value)
            AddToList(bytecode, "SETLOCAL:" + name)
        Otherwise If IsVariable(statement)
            Let name = GetVariableName(statement)
            AddToList(bytecode, "GETLOCAL:" + name)
    
    AddToList(bytecode, "RETURN")
    Return bytecode

Process IsDigit
    Takes char
    Returns boolean
    
    Return char >= "0" And char <= "9"

Process IsLetter
    Takes char
    Returns boolean
    
    Return (char >= "a" And char <= "z") Or (char >= "A" And char <= "Z")

Process ReadNumber
    Takes source, start
    Returns number
    
    Let current = start
    Let number = ""
    
    While current < Length(source) And IsDigit(GetChar(source, current))
        number = number + GetChar(source, current)
        current = current + 1
    
    Return number

Process ReadIdentifier
    Takes source, start
    Returns identifier
    
    Let current = start
    Let identifier = ""
    
    While current < Length(source) And (IsLetter(GetChar(source, current)) Or IsDigit(GetChar(source, current)))
        identifier = identifier + GetChar(source, current)
        current = current + 1
    
    Return identifier

Process Length
    Takes string
    Returns number
    
    Let count = 0
    For char in string
        count = count + 1
    Return count

Process GetChar
    Takes string, index
    Returns char
    
    Let current = 0
    For char in string
        If current == index
            Return char
        current = current + 1
    Return ""

Process AddToList
    Takes list, item
    
    Let new_list = []
    For element in list
        AddToList(new_list, element)
    AddToList(new_list, item)
    list = new_list

Process GetToken
    Takes tokens, index
    Returns token
    
    Let current = 0
    For token in tokens
        If current == index
            Return token
        current = current + 1
    Return ""

Process StartsWith
    Takes string, prefix
    Returns boolean
    
    Let prefix_length = Length(prefix)
    Let string_length = Length(string)
    
    If string_length < prefix_length
        Return false
    
    Let current = 0
    While current < prefix_length
        If GetChar(string, current) != GetChar(prefix, current)
            Return false
        current = current + 1
    
    Return true

Process ExtractName
    Takes token
    Returns name
    
    Let name = ""
    Let current = 3  # Skip "ID:"
    While current < Length(token)
        name = name + GetChar(token, current)
        current = current + 1
    Return name

Process ExtractNumber
    Takes token
    Returns number
    
    Let number = ""
    Let current = 7  # Skip "NUMBER:"
    While current < Length(token)
        number = number + GetChar(token, current)
        current = current + 1
    Return number

Process CreateAssignment
    Takes name, value
    Returns assignment
    
    Return "ASSIGN:" + name + "=" + value

Process CreateVariable
    Takes name
    Returns variable
    
    Return "VAR:" + name

Process CreateLiteral
    Takes value
    Returns literal
    
    Return "LITERAL:" + value

Process CreateBinaryExpression
    Takes left, operator, right
    Returns expression
    
    Return "BINARY:" + left + operator + right

Process IsAssignment
    Takes statement
    Returns boolean
    
    Return StartsWith(statement, "ASSIGN:")

Process IsVariable
    Takes statement
    Returns boolean
    
    Return StartsWith(statement, "VAR:")

Process GetAssignmentName
    Takes assignment
    Returns name
    
    Let name = ""
    Let current = 7  # Skip "ASSIGN:"
    While current < Length(assignment) And GetChar(assignment, current) != "="
        name = name + GetChar(assignment, current)
        current = current + 1
    Return name

Process GetAssignmentValue
    Takes assignment
    Returns value
    
    Let value = ""
    Let current = 7  # Skip "ASSIGN:"
    Let found_equals = false
    
    While current < Length(assignment)
        If GetChar(assignment, current) == "="
            found_equals = true
        Otherwise If found_equals
            value = value + GetChar(assignment, current)
        current = current + 1
    
    Return value

Process GetVariableName
    Takes variable
    Returns name
    
    Let name = ""
    Let current = 4  # Skip "VAR:"
    While current < Length(variable)
        name = name + GetChar(variable, current)
        current = current + 1
    Return name

Note: Test the self-hosting compiler
:End Note
Let test_source = "x = 42\ny = 10\nz = x + y"
Let compiler = SimpleCompiler
Let result = compiler(test_source)

Print "Self-hosting compiler result:"
Print result 