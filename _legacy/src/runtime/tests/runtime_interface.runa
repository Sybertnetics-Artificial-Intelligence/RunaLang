Note: Runa Core Runtime Interface
This module defines the essential runtime calls that must be implemented by the Runa runtime.
These are the minimal set of system calls needed to support the entire Runa standard library.

The runtime interface follows these principles:
1. Minimal dependencies - Only essential operations that cannot be implemented in pure Runa
2. Cross-platform compatibility - Works on Windows, Linux, macOS, and other platforms
3. Error handling - All calls have proper error handling and fallbacks
4. Performance - Direct system calls for maximum performance
5. Security - Safe operations with proper validation
:End Note

Note: Core Types for Runtime Interface
Type FileHandle is Integer

Type ProcessResult is Dictionary with:
    success as Boolean
    exit_code as Integer
    stdout as String
    stderr as String
    pid as Integer

Type StackFrame is Dictionary with:
    function_name as String
    module_name as String
    file_path as String
    line_number as Integer
    column_number as Integer

Type SourceLocation is Dictionary with:
    file_path as String
    line_number as Integer
    column_number as Integer

Type Address is Integer

Type Bytes is List[Integer]

Note: File System Core Operations
Process called "system_call_file_open" that takes path as String and mode as String returns FileHandle:
    Note: Open a file and return a file handle
    Note: Mode can be "r" (read), "w" (write), "a" (append), "r+" (read/write)
    Note: Returns -1 on error, positive integer handle on success
    Note: Runtime implementation required
    Return -1

Process called "system_call_file_read" that takes handle as FileHandle and offset as Integer and length as Integer returns Bytes:
    Note: Read bytes from file at specified offset
    Note: Length of -1 means read to end of file
    Note: Returns empty list on error
    Note: Runtime implementation required
    Return list containing

Process called "system_call_file_write" that takes handle as FileHandle and offset as Integer and data as Bytes returns Boolean:
    Note: Write bytes to file at specified offset
    Note: Returns true on success, false on error
    Note: Runtime implementation required
    Return false

Process called "system_call_file_close" that takes handle as FileHandle returns Boolean:
    Note: Close a file handle
    Note: Returns true on success, false on error
    Note: Runtime implementation required
    Return false

Process called "system_call_file_create" that takes path as String and mode as Integer returns Boolean:
    Note: Create a new file with specified permissions
    Note: Returns true on success, false on error
    Note: Runtime implementation required
    Return false

Process called "system_call_file_delete" that takes path as String returns Boolean:
    Note: Delete a file
    Note: Returns true on success, false on error
    Note: Runtime implementation required
    Return false

Process called "system_call_directory_create" that takes path as String returns Boolean:
    Note: Create a directory
    Note: Returns true on success, false on error
    Note: Runtime implementation required
    Return false

Process called "system_call_directory_list" that takes path as String returns List[String]:
    Note: List directory contents
    Note: Returns empty list on error
    Note: Runtime implementation required
    Return list containing

Note: Process & OS Core Operations
Process called "system_call_process_execute" that takes command as String and args as List[String] and env as Dictionary[String, String] returns ProcessResult:
    Note: Execute a process with given command, arguments, and environment
    Note: Returns process result with success status, exit code, stdout, stderr, and PID
    Note: Runtime implementation required
    Return ProcessResult with:
        success as false
        exit_code as -1
        stdout as ""
        stderr as "Runtime not implemented"
        pid as -1

Process called "system_call_process_exit" that takes code as Integer returns Never:
    Note: Exit the current process with specified exit code
    Note: This function never returns
    Note: Runtime implementation required
    Throw "Runtime not implemented"

Process called "system_call_time_current" returns Float:
    Note: Get current system time in seconds since Unix epoch
    Note: Returns 0.0 if runtime not implemented
    Note: Runtime implementation required
    Return 0.0

Process called "system_call_time_high_res" returns Integer:
    Note: Get high-resolution timestamp in nanoseconds
    Note: Returns 0 if runtime not implemented
    Note: Runtime implementation required
    Return 0

Process called "system_call_environment_get" that takes name as String returns Optional[String]:
    Note: Get environment variable value
    Note: Returns None if variable not found or runtime not implemented
    Note: Runtime implementation required
    Return None

Process called "system_call_environment_set" that takes name as String and value as String returns Boolean:
    Note: Set environment variable
    Note: Returns true on success, false on error
    Note: Runtime implementation required
    Return false

Process called "system_call_memory_allocate" that takes size as Integer returns Address:
    Note: Allocate memory of specified size
    Note: Returns 0 on error, memory address on success
    Note: Runtime implementation required
    Return 0

Process called "system_call_object_address" that takes obj as Any returns Address:
    Note: Get memory address of object
    Note: Returns 0 if runtime not implemented
    Note: Runtime implementation required
    Return 0

Note: Reflection Core Operations
Process called "system_call_type_name" that takes obj as Any returns String:
    Note: Get type name of object
    Note: Returns "Unknown" if runtime not implemented
    Note: Runtime implementation required
    Return "Unknown"

Process called "system_call_object_size" that takes obj as Any returns Integer:
    Note: Get size of object in bytes
    Note: Returns 0 if runtime not implemented
    Note: Runtime implementation required
    Return 0

Process called "system_call_call_stack" returns List[StackFrame]:
    Note: Get current call stack
    Note: Returns empty list if runtime not implemented
    Note: Runtime implementation required
    Return list containing

Process called "system_call_function_name" that takes func as Any returns String:
    Note: Get function name
    Note: Returns "Unknown" if runtime not implemented
    Note: Runtime implementation required
    Return "Unknown"

Process called "system_call_module_name" that takes obj as Any returns String:
    Note: Get module name of object
    Note: Returns "Unknown" if runtime not implemented
    Note: Runtime implementation required
    Return "Unknown"

Process called "system_call_source_location" that takes func as Any returns SourceLocation:
    Note: Get source location of function
    Note: Returns default location if runtime not implemented
    Note: Runtime implementation required
    Return SourceLocation with:
        file_path as "unknown"
        line_number as 0
        column_number as 0

Process called "system_call_reflection_get_type_info" that takes obj as Any returns Optional[Dictionary[String, Any]]:
    Note: Get comprehensive type information for an object
    Note: Returns dictionary with keys: name, module, is_callable, object_id, size, attributes, static_methods, instance_methods
    Note: Runtime implementation required
    Return None

Process called "system_call_reflection_get_call_stack" that takes depth as Integer returns List[Dictionary[String, Any]]:
    Note: Get call stack information up to specified depth
    Note: Returns list of StackFrame dictionaries
    Note: Runtime implementation required
    Return list containing

Process called "system_call_object_to_string" that takes obj as Any returns String:
    Note: Convert object to string representation
    Note: Runtime implementation required
    Return ""

Process called "system_call_character_at" that takes string as String and index as Integer returns String:
    Note: Get character at specific index in string
    Note: Runtime implementation required
    Return ""

Process called "system_call_process_get_info" returns Dictionary[String, Any]:
    Note: Get current process information
    Note: Returns dictionary with keys: pid, tid, context_switches
    Note: Runtime implementation required
    Return dictionary containing:
        "pid" as 0
        "tid" as 0
        "context_switches" as 0

Process called "system_call_memory_get_info" returns Dictionary[String, Any]:
    Note: Get memory information
    Note: Returns dictionary with keys: usage_bytes, heap_base, code_base
    Note: Runtime implementation required
    Return dictionary containing:
        "usage_bytes" as 0
        "heap_base" as 0
        "code_base" as 0

Process called "system_call_cpu_get_info" returns Dictionary[String, Any]:
    Note: Get CPU information
    Note: Returns dictionary with keys: features, cycle_count
    Note: Runtime implementation required
    Return dictionary containing:
        "features" as dictionary containing
        "cycle_count" as 0

Process called "system_call_cpu_get_register" that takes register as String returns Dictionary[String, Any]:
    Note: Get CPU register value
    Note: Returns dictionary with key: value
    Note: Runtime implementation required
    Return dictionary containing:
        "value" as 0

Note: Cryptography Core Operations
Process called "system_call_random_bytes" that takes count as Integer returns Bytes:
    Note: Generate random bytes
    Note: Returns empty list if runtime not implemented
    Note: Runtime implementation required
    Return list containing

Process called "system_call_crypto_hash" that takes data as Bytes and algorithm as String returns Bytes:
    Note: Compute cryptographic hash of data
    Note: Returns empty list if runtime not implemented
    Note: Runtime implementation required
    Return list containing

Process called "system_call_entropy_collect" returns Bytes:
    Note: Collect system entropy
    Note: Returns empty list if runtime not implemented
    Note: Runtime implementation required
    Return list containing

Note: Runtime Interface Validation
Process called "validate_runtime_interface" returns Dictionary[String, Boolean]:
    Note: Validate that all runtime calls are available
    Note: Returns dictionary with test results for each runtime call
    Let results be dictionary containing
    
    Note: Test file system operations
    Set results["file_open"] to test_file_open
    Set results["file_read"] to test_file_read
    Set results["file_write"] to test_file_write
    Set results["file_close"] to test_file_close
    Set results["file_create"] to test_file_create
    Set results["file_delete"] to test_file_delete
    Set results["directory_create"] to test_directory_create
    Set results["directory_list"] to test_directory_list
    
    Note: Test process operations
    Set results["process_execute"] to test_process_execute
    Set results["time_current"] to test_time_current
    Set results["time_high_res"] to test_time_high_res
    Set results["environment_get"] to test_environment_get
    Set results["environment_set"] to test_environment_set
    Set results["memory_allocate"] to test_memory_allocate
    Set results["object_address"] to test_object_address
    
    Note: Test reflection operations
    Set results["type_name"] to test_type_name
    Set results["object_size"] to test_object_size
    Set results["call_stack"] to test_call_stack
    Set results["function_name"] to test_function_name
    Set results["module_name"] to test_module_name
    Set results["source_location"] to test_source_location
    
    Note: Test cryptography operations
    Set results["random_bytes"] to test_random_bytes
    Set results["crypto_hash"] to test_crypto_hash
    Set results["entropy_collect"] to test_entropy_collect
    
    Return results

Note: Individual Runtime Call Tests
Process called "test_file_open" returns Boolean:
    Try:
        Let handle be system_call_file_open with path as "/dev/null" and mode as "r"
        Return handle is greater than or equal to 0
    Catch:
        Return false

Process called "test_file_read" returns Boolean:
    Try:
        Let handle be system_call_file_open with path as "/dev/null" and mode as "r"
        If handle is greater than or equal to 0:
            Let data be system_call_file_read with handle as handle and offset as 0 and length as 1
            Let close_result be system_call_file_close with handle as handle
            Return data is not None
        Return false
    Catch:
        Return false

Process called "test_file_write" returns Boolean:
    Try:
        Let handle be system_call_file_open with path as "/tmp/test_write" and mode as "w"
        If handle is greater than or equal to 0:
            Let write_result be system_call_file_write with handle as handle and offset as 0 and data as list containing 65
            Let close_result be system_call_file_close with handle as handle
            Return write_result
        Return false
    Catch:
        Return false

Process called "test_file_close" returns Boolean:
    Try:
        Let handle be system_call_file_open with path as "/dev/null" and mode as "r"
        If handle is greater than or equal to 0:
            Return system_call_file_close with handle as handle
        Return false
    Catch:
        Return false

Process called "test_file_create" returns Boolean:
    Try:
        Return system_call_file_create with path as "/tmp/test_create" and mode as 0644
    Catch:
        Return false

Process called "test_file_delete" returns Boolean:
    Try:
        Return system_call_file_delete with path as "/tmp/test_delete"
    Catch:
        Return false

Process called "test_directory_create" returns Boolean:
    Try:
        Return system_call_directory_create with path as "/tmp/test_dir"
    Catch:
        Return false

Process called "test_directory_list" returns Boolean:
    Try:
        Let entries be system_call_directory_list with path as "/tmp"
        Return entries is not None
    Catch:
        Return false

Process called "test_process_execute" returns Boolean:
    Try:
        Let result be system_call_process_execute with command as "echo" and args as list containing "test" and env as dictionary containing
        Return result is not None
    Catch:
        Return false

Process called "test_time_current" returns Boolean:
    Try:
        Let time be system_call_time_current
        Return time is greater than 0.0
    Catch:
        Return false

Process called "test_time_high_res" returns Boolean:
    Try:
        Let time be system_call_time_high_res
        Return time is greater than 0
    Catch:
        Return false

Process called "test_environment_get" returns Boolean:
    Try:
        Let value be system_call_environment_get with name as "PATH"
        Return value is not None
    Catch:
        Return false

Process called "test_environment_set" returns Boolean:
    Try:
        Return system_call_environment_set with name as "TEST_VAR" and value as "test_value"
    Catch:
        Return false

Process called "test_memory_allocate" returns Boolean:
    Try:
        Let address be system_call_memory_allocate with size as 1024
        Return address is greater than 0
    Catch:
        Return false

Process called "test_object_address" returns Boolean:
    Try:
        Let test_obj be "test"
        Let address be system_call_object_address with obj as test_obj
        Return address is greater than or equal to 0
    Catch:
        Return false

Process called "test_type_name" returns Boolean:
    Try:
        Let test_obj be "test"
        Let type_name be system_call_type_name with obj as test_obj
        Return type_name is not equal to "Unknown"
    Catch:
        Return false

Process called "test_object_size" returns Boolean:
    Try:
        Let test_obj be "test"
        Let size be system_call_object_size with obj as test_obj
        Return size is greater than or equal to 0
    Catch:
        Return false

Process called "test_call_stack" returns Boolean:
    Try:
        Let stack be system_call_call_stack
        Return stack is not None
    Catch:
        Return false

Process called "test_function_name" returns Boolean:
    Try:
        Let func_name be system_call_function_name with func as test_function_name
        Return func_name is not equal to "Unknown"
    Catch:
        Return false

Process called "test_module_name" returns Boolean:
    Try:
        Let test_obj be "test"
        Let module_name be system_call_module_name with obj as test_obj
        Return module_name is not equal to "Unknown"
    Catch:
        Return false

Process called "test_source_location" returns Boolean:
    Try:
        Let location be system_call_source_location with func as test_source_location
        Return location is not None
    Catch:
        Return false

Process called "test_random_bytes" returns Boolean:
    Try:
        Let bytes be system_call_random_bytes with count as 16
        Return length of bytes is equal to 16
    Catch:
        Return false

Process called "test_crypto_hash" returns Boolean:
    Try:
        Let data be list containing 65, 66, 67  Note: "ABC"
        Let hash be system_call_crypto_hash with data as data and algorithm as "sha256"
        Return length of hash is greater than 0
    Catch:
        Return false

Process called "test_entropy_collect" returns Boolean:
    Try:
        Let entropy be system_call_entropy_collect
        Return length of entropy is greater than 0
    Catch:
        Return false

Note: Runtime Interface Documentation
Process called "get_runtime_interface_documentation" returns Dictionary[String, Any]:
    Note: Get comprehensive documentation for the runtime interface
    Return dictionary containing:
        "version" as "1.0.0"
        "description" as "Runa Core Runtime Interface - 25 Essential System Calls"
        "total_functions" as 25
        "categories" as dictionary containing:
            "file_system" as 8
            "process_os" as 8
            "reflection" as 6
            "cryptography" as 3
        "principles" as list containing:
            "Minimal dependencies - Only essential operations"
            "Cross-platform compatibility"
            "Error handling with fallbacks"
            "Direct system calls for performance"
            "Safe operations with validation"
        "implementation_notes" as "All functions must be implemented by the Runa runtime for full functionality" 