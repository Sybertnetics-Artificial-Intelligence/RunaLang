Process called "SimpleCompiler" that takes source_code as String returns String:
    Let tokens be Tokenize(source_code)
    Let ast be Parse(tokens)
    Let bytecode be Generate(ast)
    Return bytecode

Process called "Tokenize" that takes source as String returns List:
    Let tokens be []
    Let current be 0
    Let line be 1
    
    While current is less than Length(source):
        Let char be GetChar(source, current)
        
        If char is equal to " ":
            current is current plus 1
        Otherwise If char is equal to "\n":
            AddToList(tokens, "NEWLINE")
            line is line plus 1
            current is current plus 1
        Otherwise If char is equal to "(":
            AddToList(tokens, "LPAREN")
            current is current plus 1
        Otherwise If char is equal to ")":
            AddToList(tokens, "RPAREN")
            current is current plus 1
        Otherwise If char is equal to "=":
            AddToList(tokens, "ASSIGN")
            current is current plus 1
        Otherwise If char is equal to "+":
            AddToList(tokens, "PLUS")
            current is current plus 1
        Otherwise If char is equal to "-":
            AddToList(tokens, "MINUS")
            current is current plus 1
        Otherwise If char is equal to "*":
            AddToList(tokens, "MULTIPLY")
            current is current plus 1
        Otherwise If char is equal to "/":
            AddToList(tokens, "DIVIDE")
            current is current plus 1
        Otherwise If IsDigit(char):
            Let number be ReadNumber(source, current)
            AddToList(tokens, "NUMBER:" + number)
            current is current plus Length(number)
        Otherwise If IsLetter(char):
            Let identifier be ReadIdentifier(source, current)
            AddToList(tokens, "ID:" + identifier)
            current is current plus Length(identifier)
        Otherwise:
            current is current plus 1
    
    Return tokens

Process called "IsDigit" that takes char as String returns Boolean:
    Return char is greater than or equal to "0" and char is less than or equal to "9"

Process called "IsLetter" that takes char as String returns Boolean:
    Return (char is greater than or equal to "a" and char is less than or equal to "z") or (char is greater than or equal to "A" and char is less than or equal to "Z")

Note: Test the compiler
:End Note
Let test_source be "x = 42\ny = 10\nz = x + y"
Let compiler be SimpleCompiler
Let result be compiler(test_source)

Display "Self-hosting compiler result:"
Display result 