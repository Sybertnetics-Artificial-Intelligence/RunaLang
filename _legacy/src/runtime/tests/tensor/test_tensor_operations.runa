Note: Unit tests for individual tensor operations
Note: Tests each tensor operation in isolation with edge cases and boundary conditions

Import "../../src/tensor/tensor_runtime" as TensorRuntime
Import "../../src/tensor/tensor_ops" as TensorOps

Type called "TensorOperationTest":
    test_name as String
    passed as Boolean
    error_message as String

Process called "test_tensor_creation_and_initialization" returns TensorOperationTest:
    Note: Test tensor creation with different shapes and data types
    Try:
        Note: Test basic tensor creation
        Let runtime be TensorRuntime::create_tensor_runtime()
        Let tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [3, 4, 5], "float32", "cpu")
        
        Note: Verify tensor properties
        Let shape be TensorRuntime::get_tensor_shape(tensor)
        If shape ≠ List[Integer] with [3, 4, 5]:
            Return TensorOperationTest with:
                test_name as "tensor_creation"
                passed as False
                error_message as "Tensor shape incorrect after creation"
        
        Note: Test tensor initialization
        Call TensorOps::tensor_fill(tensor, 42.5)
        Let data be TensorOps::tensor_to_array(tensor)
        
        If Math::abs(data[0] - 42.5) > 0.001:
            Return TensorOperationTest with:
                test_name as "tensor_creation"
                passed as False
                error_message as "Tensor initialization failed"
        
        Note: Test different data types
        Let int_tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 2], "int32", "cpu")
        Call TensorOps::tensor_fill(int_tensor, 10)
        
        Let bool_tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 2], "bool", "cpu")
        Call TensorOps::tensor_fill(bool_tensor, True)
        
        Return TensorOperationTest with:
            test_name as "tensor_creation"
            passed as True
            error_message as ""
            
    Catch error:
        Return TensorOperationTest with:
            test_name as "tensor_creation"
            passed as False
            error_message as String::format("Test failed: {}", error.message)

Process called "test_tensor_arithmetic_operations" returns TensorOperationTest:
    Note: Test basic arithmetic operations with edge cases
    Try:
        Let runtime be TensorRuntime::create_tensor_runtime()
        
        Note: Test addition
        Let a be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 3], "float32", "cpu")
        Let b be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 3], "float32", "cpu")
        
        Call TensorOps::tensor_fill(a, 1.5)
        Call TensorOps::tensor_fill(b, 2.5)
        
        Let add_result be TensorOps::tensor_add(a, b)
        Let add_data be TensorOps::tensor_to_array(add_result)
        
        If Math::abs(add_data[0] - 4.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "arithmetic_operations"
                passed as False
                error_message as String::format("Addition failed: expected 4.0, got {}", add_data[0])
        
        Note: Test subtraction
        Let sub_result be TensorOps::tensor_subtract(a, b)
        Let sub_data be TensorOps::tensor_to_array(sub_result)
        
        If Math::abs(sub_data[0] - (-1.0)) > 0.001:
            Return TensorOperationTest with:
                test_name as "arithmetic_operations"
                passed as False
                error_message as String::format("Subtraction failed: expected -1.0, got {}", sub_data[0])
        
        Note: Test multiplication
        Let mul_result be TensorOps::tensor_multiply(a, b)
        Let mul_data be TensorOps::tensor_to_array(mul_result)
        
        If Math::abs(mul_data[0] - 3.75) > 0.001:
            Return TensorOperationTest with:
                test_name as "arithmetic_operations"
                passed as False
                error_message as String::format("Multiplication failed: expected 3.75, got {}", mul_data[0])
        
        Note: Test division
        Let div_result be TensorOps::tensor_divide(a, b)
        Let div_data be TensorOps::tensor_to_array(div_result)
        
        If Math::abs(div_data[0] - 0.6) > 0.001:
            Return TensorOperationTest with:
                test_name as "arithmetic_operations"
                passed as False
                error_message as String::format("Division failed: expected 0.6, got {}", div_data[0])
        
        Note: Test division by zero handling
        Let zero_tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 3], "float32", "cpu")
        Call TensorOps::tensor_fill(zero_tensor, 0.0)
        
        Let div_zero_result be TensorOps::tensor_divide(a, zero_tensor)
        Let div_zero_data be TensorOps::tensor_to_array(div_zero_result)
        
        Note: Should result in infinity or NaN, not crash
        If Float::is_finite(div_zero_data[0]):
            Return TensorOperationTest with:
                test_name as "arithmetic_operations"
                passed as False
                error_message as "Division by zero should produce inf/nan, not finite number"
        
        Return TensorOperationTest with:
            test_name as "arithmetic_operations"
            passed as True
            error_message as ""
            
    Catch error:
        Return TensorOperationTest with:
            test_name as "arithmetic_operations"
            passed as False
            error_message as String::format("Test failed: {}", error.message)

Process called "test_tensor_mathematical_operations" returns TensorOperationTest:
    Note: Test mathematical functions like exp, log, sin, cos
    Try:
        Let runtime be TensorRuntime::create_tensor_runtime()
        Let tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [3, 3], "float32", "cpu")
        
        Note: Test exponential function
        Call TensorOps::tensor_fill(tensor, 1.0)
        Let exp_result be TensorOps::tensor_exp(tensor)
        Let exp_data be TensorOps::tensor_to_array(exp_result)
        
        Note: e^1 ≈ 2.718
        If Math::abs(exp_data[0] - 2.718) > 0.01:
            Return TensorOperationTest with:
                test_name as "mathematical_operations"
                passed as False
                error_message as String::format("Exponential failed: expected ~2.718, got {}", exp_data[0])
        
        Note: Test natural logarithm
        Call TensorOps::tensor_fill(tensor, 2.718)
        Let log_result be TensorOps::tensor_log(tensor)
        Let log_data be TensorOps::tensor_to_array(log_result)
        
        Note: ln(e) ≈ 1.0
        If Math::abs(log_data[0] - 1.0) > 0.01:
            Return TensorOperationTest with:
                test_name as "mathematical_operations"
                passed as False
                error_message as String::format("Logarithm failed: expected ~1.0, got {}", log_data[0])
        
        Note: Test trigonometric functions
        Call TensorOps::tensor_fill(tensor, 0.0)
        Let sin_result be TensorOps::tensor_sin(tensor)
        Let sin_data be TensorOps::tensor_to_array(sin_result)
        
        If Math::abs(sin_data[0] - 0.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "mathematical_operations"
                passed as False
                error_message as String::format("Sine failed: expected 0.0, got {}", sin_data[0])
        
        Let cos_result be TensorOps::tensor_cos(tensor)
        Let cos_data be TensorOps::tensor_to_array(cos_result)
        
        If Math::abs(cos_data[0] - 1.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "mathematical_operations"
                passed as False
                error_message as String::format("Cosine failed: expected 1.0, got {}", cos_data[0])
        
        Note: Test square root
        Call TensorOps::tensor_fill(tensor, 4.0)
        Let sqrt_result be TensorOps::tensor_sqrt(tensor)
        Let sqrt_data be TensorOps::tensor_to_array(sqrt_result)
        
        If Math::abs(sqrt_data[0] - 2.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "mathematical_operations"
                passed as False
                error_message as String::format("Square root failed: expected 2.0, got {}", sqrt_data[0])
        
        Note: Test power operation
        Let base be TensorRuntime::create_tensor(runtime, List[Integer] with [3, 3], "float32", "cpu")
        Let exponent be TensorRuntime::create_tensor(runtime, List[Integer] with [3, 3], "float32", "cpu")
        
        Call TensorOps::tensor_fill(base, 2.0)
        Call TensorOps::tensor_fill(exponent, 3.0)
        
        Let pow_result be TensorOps::tensor_pow(base, exponent)
        Let pow_data be TensorOps::tensor_to_array(pow_result)
        
        Note: 2^3 = 8
        If Math::abs(pow_data[0] - 8.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "mathematical_operations"
                passed as False
                error_message as String::format("Power failed: expected 8.0, got {}", pow_data[0])
        
        Return TensorOperationTest with:
            test_name as "mathematical_operations"
            passed as True
            error_message as ""
            
    Catch error:
        Return TensorOperationTest with:
            test_name as "mathematical_operations"
            passed as False
            error_message as String::format("Test failed: {}", error.message)

Process called "test_tensor_reduction_operations" returns TensorOperationTest:
    Note: Test reduction operations like sum, mean, max, min
    Try:
        Let runtime be TensorRuntime::create_tensor_runtime()
        
        Note: Create test tensor with known values
        Let tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 3], "float32", "cpu")
        Let test_data be List[Float] with [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
        Call TensorOps::tensor_from_array(tensor, test_data)
        
        Note: Test sum reduction
        Let sum_result be TensorOps::tensor_sum(tensor, None)  Note: Sum all elements
        Let sum_data be TensorOps::tensor_to_array(sum_result)
        
        Note: 1+2+3+4+5+6 = 21
        If Math::abs(sum_data[0] - 21.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "reduction_operations"
                passed as False
                error_message as String::format("Sum reduction failed: expected 21.0, got {}", sum_data[0])
        
        Note: Test mean reduction
        Let mean_result be TensorOps::tensor_mean(tensor, None)
        Let mean_data be TensorOps::tensor_to_array(mean_result)
        
        Note: 21/6 = 3.5
        If Math::abs(mean_data[0] - 3.5) > 0.001:
            Return TensorOperationTest with:
                test_name as "reduction_operations"
                passed as False
                error_message as String::format("Mean reduction failed: expected 3.5, got {}", mean_data[0])
        
        Note: Test max reduction
        Let max_result be TensorOps::tensor_max(tensor, None)
        Let max_data be TensorOps::tensor_to_array(max_result)
        
        If Math::abs(max_data[0] - 6.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "reduction_operations"
                passed as False
                error_message as String::format("Max reduction failed: expected 6.0, got {}", max_data[0])
        
        Note: Test min reduction
        Let min_result be TensorOps::tensor_min(tensor, None)
        Let min_data be TensorOps::tensor_to_array(min_result)
        
        If Math::abs(min_data[0] - 1.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "reduction_operations"
                passed as False
                error_message as String::format("Min reduction failed: expected 1.0, got {}", min_data[0])
        
        Note: Test axis-specific reductions
        Let sum_axis_0 be TensorOps::tensor_sum(tensor, Some(0))  Note: Sum along first axis
        Let sum_axis_0_data be TensorOps::tensor_to_array(sum_axis_0)
        
        Note: Should have shape [3] with values [5.0, 7.0, 9.0] (1+4, 2+5, 3+6)
        If Math::abs(sum_axis_0_data[0] - 5.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "reduction_operations"
                passed as False
                error_message as String::format("Axis reduction failed: expected 5.0, got {}", sum_axis_0_data[0])
        
        Return TensorOperationTest with:
            test_name as "reduction_operations"
            passed as True
            error_message as ""
            
    Catch error:
        Return TensorOperationTest with:
            test_name as "reduction_operations"
            passed as False
            error_message as String::format("Test failed: {}", error.message)

Process called "test_matrix_operations" returns TensorOperationTest:
    Note: Test matrix operations including multiplication, transpose, and decomposition
    Try:
        Let runtime be TensorRuntime::create_tensor_runtime()
        
        Note: Test matrix multiplication
        Let matrix_a be TensorRuntime::create_tensor(runtime, List[Integer] with [2, 3], "float32", "cpu")
        Let matrix_b be TensorRuntime::create_tensor(runtime, List[Integer] with [3, 2], "float32", "cpu")
        
        Note: Initialize matrices with known values
        Let a_data be List[Float] with [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
        Let b_data be List[Float] with [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
        
        Call TensorOps::tensor_from_array(matrix_a, a_data)
        Call TensorOps::tensor_from_array(matrix_b, b_data)
        
        Let matmul_result be TensorOps::tensor_matmul(matrix_a, matrix_b)
        Let result_data be TensorOps::tensor_to_array(matmul_result)
        
        Note: Matrix multiplication: [2x3] * [3x2] = [2x2]
        Note: First element: (1*1 + 2*3 + 3*5) = 1 + 6 + 15 = 22
        If Math::abs(result_data[0] - 22.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "matrix_operations"
                passed as False
                error_message as String::format("Matrix multiplication failed: expected 22.0, got {}", result_data[0])
        
        Note: Test matrix transpose
        Let transpose_result be TensorOps::tensor_transpose(matrix_a, List[Integer] with [1, 0])
        Let transpose_shape be TensorRuntime::get_tensor_shape(transpose_result)
        
        If transpose_shape ≠ List[Integer] with [3, 2]:
            Return TensorOperationTest with:
                test_name as "matrix_operations"
                passed as False
                error_message as "Matrix transpose shape incorrect"
        
        Note: Test dot product (1D case)
        Let vector_a be TensorRuntime::create_tensor(runtime, List[Integer] with [3], "float32", "cpu")
        Let vector_b be TensorRuntime::create_tensor(runtime, List[Integer] with [3], "float32", "cpu")
        
        Let vec_a_data be List[Float] with [1.0, 2.0, 3.0]
        Let vec_b_data be List[Float] with [4.0, 5.0, 6.0]
        
        Call TensorOps::tensor_from_array(vector_a, vec_a_data)
        Call TensorOps::tensor_from_array(vector_b, vec_b_data)
        
        Let dot_result be TensorOps::tensor_dot(vector_a, vector_b)
        Let dot_data be TensorOps::tensor_to_array(dot_result)
        
        Note: Dot product: 1*4 + 2*5 + 3*6 = 4 + 10 + 18 = 32
        If Math::abs(dot_data[0] - 32.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "matrix_operations"
                passed as False
                error_message as String::format("Dot product failed: expected 32.0, got {}", dot_data[0])
        
        Return TensorOperationTest with:
            test_name as "matrix_operations"
            passed as True
            error_message as ""
            
    Catch error:
        Return TensorOperationTest with:
            test_name as "matrix_operations"
            passed as False
            error_message as String::format("Test failed: {}", error.message)

Process called "test_activation_functions" returns TensorOperationTest:
    Note: Test neural network activation functions
    Try:
        Let runtime be TensorRuntime::create_tensor_runtime()
        Let tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [4], "float32", "cpu")
        
        Note: Test with values that cover positive, negative, and zero
        Let test_data be List[Float] with [-2.0, -1.0, 0.0, 2.0]
        Call TensorOps::tensor_from_array(tensor, test_data)
        
        Note: Test ReLU activation
        Let relu_result be TensorOps::tensor_relu(tensor)
        Let relu_data be TensorOps::tensor_to_array(relu_result)
        
        Note: ReLU should zero out negative values
        If relu_data[0] ≠ 0.0 or relu_data[1] ≠ 0.0:
            Return TensorOperationTest with:
                test_name as "activation_functions"
                passed as False
                error_message as "ReLU failed to zero negative values"
        
        If relu_data[2] ≠ 0.0 or relu_data[3] ≠ 2.0:
            Return TensorOperationTest with:
                test_name as "activation_functions"
                passed as False
                error_message as "ReLU failed for zero and positive values"
        
        Note: Test Sigmoid activation
        Let sigmoid_result be TensorOps::tensor_sigmoid(tensor)
        Let sigmoid_data be TensorOps::tensor_to_array(sigmoid_result)
        
        Note: Sigmoid should map to (0, 1) range
        For i from 0 to 3:
            If sigmoid_data[i] <= 0.0 or sigmoid_data[i] >= 1.0:
                Return TensorOperationTest with:
                    test_name as "activation_functions"
                    passed as False
                    error_message as "Sigmoid values outside (0,1) range"
        
        Note: Test Tanh activation
        Let tanh_result be TensorOps::tensor_tanh(tensor)
        Let tanh_data be TensorOps::tensor_to_array(tanh_result)
        
        Note: Tanh should map to (-1, 1) range
        For i from 0 to 3:
            If tanh_data[i] <= -1.0 or tanh_data[i] >= 1.0:
                Return TensorOperationTest with:
                    test_name as "activation_functions"
                    passed as False
                    error_message as "Tanh values outside (-1,1) range"
        
        Note: Test GELU activation
        Let gelu_result be TensorOps::tensor_gelu(tensor)
        Let gelu_data be TensorOps::tensor_to_array(gelu_result)
        
        Note: GELU(0) should be 0
        If Math::abs(gelu_data[2] - 0.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "activation_functions"
                passed as False
                error_message as "GELU(0) should be 0"
        
        Note: Test Softmax activation
        Let softmax_tensor be TensorRuntime::create_tensor(runtime, List[Integer] with [1, 4], "float32", "cpu")
        Call TensorOps::tensor_from_array(softmax_tensor, test_data)
        
        Let softmax_result be TensorOps::tensor_softmax(softmax_tensor, 1)
        Let softmax_data be TensorOps::tensor_to_array(softmax_result)
        
        Note: Softmax should sum to 1
        Let softmax_sum be 0.0
        For i from 0 to 3:
            Set softmax_sum to softmax_sum + softmax_data[i]
        
        If Math::abs(softmax_sum - 1.0) > 0.001:
            Return TensorOperationTest with:
                test_name as "activation_functions"
                passed as False
                error_message as String::format("Softmax sum incorrect: expected 1.0, got {}", softmax_sum)
        
        Return TensorOperationTest with:
            test_name as "activation_functions"
            passed as True
            error_message as ""
            
    Catch error:
        Return TensorOperationTest with:
            test_name as "activation_functions"
            passed as False
            error_message as String::format("Test failed: {}", error.message)

Process called "run_all_tensor_operation_tests" returns List[TensorOperationTest]:
    Note: Run all tensor operation unit tests
    Let results be List::empty[TensorOperationTest]()
    
    Call List::append(results, test_tensor_creation_and_initialization())
    Call List::append(results, test_tensor_arithmetic_operations())
    Call List::append(results, test_tensor_mathematical_operations())
    Call List::append(results, test_tensor_reduction_operations())
    Call List::append(results, test_matrix_operations())
    Call List::append(results, test_activation_functions())
    
    Return results

Process called "print_tensor_operation_test_report" that takes results as List[TensorOperationTest]:
    Note: Print unit test results
    Print("=== Tensor Operation Unit Tests ===")
    Print("")
    
    Let total_tests be List::length(results)
    Let passed_tests be 0
    
    For result in results:
        If result.passed:
            Set passed_tests to passed_tests + 1
            Print(String::format("✓ {}: PASSED", result.test_name))
        Else:
            Print(String::format("✗ {}: FAILED - {}", result.test_name, result.error_message))
    
    Print("")
    Print(String::format("Unit Tests: {}/{} passed", passed_tests, total_tests))
    
    If passed_tests = total_tests:
        Print("🎉 All tensor operation unit tests passed!")
    Else:
        Print("❌ Some unit tests failed. Please review the failures above.")

Process called "main":
    Note: Run tensor operation unit tests
    Let results be run_all_tensor_operation_tests()
    Call print_tensor_operation_test_report(results)

Note: Entry point for unit tests
Call main()