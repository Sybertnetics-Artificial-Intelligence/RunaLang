Note: Tests for compiler_bridge.runa
Note: Validates the compilation pipeline coordination

Import module "../compiler_bridge" as Bridge
Import module "../core_libs" as Core

External Process called "rust_print_string" that takes text as String

Process called "test_compile_to_native" returns Boolean:
    Note: Test native code compilation
    
    rust_print_string("[TEST] Native Compilation\n")
    
    Note: Create a simple test program
    Let test_source be "Process called \"main\" returns Nothing:\n    rust_print_string(\"Hello, Runa!\")\nEnd Process"
    
    Let target be Bridge.CompilationTarget with
        architecture as "x86_64",
        operating_system as "linux",
        optimization_level as 0,
        debug_info as true
    
    Let result be Bridge.compile_to_native(test_source, target)
    
    If result.success is equal to false:
        rust_print_string("  ✗ Compilation failed\n")
        For Each error in result.diagnostics:
            rust_print_string("    Error: ")
            rust_print_string(error)
            rust_print_string("\n")
        End For
        Return false
    End If
    
    rust_print_string("  ✓ Native compilation succeeded\n")
    Return true
End Process

Process called "test_compile_to_wasm" returns Boolean:
    Note: Test WASM compilation
    
    rust_print_string("[TEST] WASM Compilation\n")
    
    Let test_source be "Process called \"add\" that takes a as Integer, b as Integer returns Integer:\n    Return a plus b\nEnd Process"
    
    Let result be Bridge.compile_to_wasm(test_source, true)
    
    If result.success is equal to false:
        rust_print_string("  ✗ WASM compilation failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ WASM compilation succeeded\n")
    Return true
End Process

Process called "test_ffi_type_validation" returns Boolean:
    Note: Test FFI type validation
    
    rust_print_string("[TEST] FFI Type Validation\n")
    
    Note: Test basic types
    If Bridge.validate_ffi_types("Integer") is equal to false:
        rust_print_string("  ✗ Integer should be FFI-safe\n")
        Return false
    End If
    
    If Bridge.validate_ffi_types("String") is equal to false:
        rust_print_string("  ✗ String should be FFI-safe\n")
        Return false
    End If
    
    If Bridge.validate_ffi_types("Boolean") is equal to false:
        rust_print_string("  ✗ Boolean should be FFI-safe\n")
        Return false
    End If
    
    Note: Test complex type
    If Bridge.validate_ffi_types("CustomObject") is equal to true:
        rust_print_string("  ✗ CustomObject should not be FFI-safe\n")
        Return false
    End If
    
    rust_print_string("  ✓ FFI type validation works correctly\n")
    Return true
End Process

Process called "test_optimization_control" returns Boolean:
    Note: Test optimization level control
    
    rust_print_string("[TEST] Optimization Control\n")
    
    Note: Test valid optimization levels
    Bridge.set_optimization_level(0)
    Bridge.set_optimization_level(1)
    Bridge.set_optimization_level(2)
    Bridge.set_optimization_level(3)
    
    Note: Test invalid level (should show warning)
    Bridge.set_optimization_level(5)
    
    Note: Test LTO (should show not available message)
    Bridge.enable_link_time_optimization(true)
    
    rust_print_string("  ✓ Optimization control tested\n")
    Return true
End Process

Process called "test_memory_management" returns Boolean:
    Note: Test memory management functions
    
    rust_print_string("[TEST] Memory Management\n")
    
    Note: Allocate buffer
    Let buffer be Bridge.allocate_rust_buffer(1024)
    If buffer is equal to 0:
        rust_print_string("  ✗ Buffer allocation failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ Buffer allocated\n")
    
    Note: Free buffer
    Bridge.free_rust_buffer(buffer)
    rust_print_string("  ✓ Buffer freed\n")
    
    Note: Test null pointer safety
    Bridge.free_rust_buffer(0)
    rust_print_string("  ✓ Null pointer handled safely\n")
    
    Return true
End Process

Process called "test_compile_file" returns Boolean:
    Note: Test file compilation
    
    rust_print_string("[TEST] File Compilation\n")
    
    Note: Create a test file
    Let test_filename be "/tmp/test_program.runa"
    Let test_content be "Process called \"main\" returns Nothing:\n    rust_print_string(\"Test program\")\nEnd Process"
    
    Core.write_file(test_filename, test_content)
    
    Let output_file be "/tmp/test_program.o"
    Let success be Bridge.compile_file(test_filename, output_file)
    
    If success is equal to false:
        rust_print_string("  ✗ File compilation failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ File compiled successfully\n")
    Return true
End Process

Process called "print_test_summary" that takes passed as Integer, failed as Integer returns Nothing:
    rust_print_string("\n=====================================\n")
    rust_print_string("COMPILER BRIDGE TEST RESULTS:\n")
    rust_print_string("  Passed: ")
    rust_print_string(Core.integer_to_string(passed))
    rust_print_string("\n  Failed: ")
    rust_print_string(Core.integer_to_string(failed))
    rust_print_string("\n")
    
    If failed is equal to 0:
        rust_print_string("\n✓✓✓ ALL TESTS PASSED ✓✓✓\n")
    Otherwise:
        rust_print_string("\n✗✗✗ SOME TESTS FAILED ✗✗✗\n")
    End If
    rust_print_string("=====================================\n")
End Process

Process called "main" returns Nothing:
    Note: Main test runner
    
    rust_print_string("=====================================\n")
    rust_print_string("   COMPILER BRIDGE TEST SUITE\n")
    rust_print_string("   Testing partial-runa/compiler_bridge.runa\n")
    rust_print_string("=====================================\n\n")
    
    Let tests_passed be 0
    Let tests_failed be 0
    
    Note: Run each test
    If test_compile_to_native() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_compile_to_wasm() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_ffi_type_validation() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_optimization_control() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_memory_management() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_compile_file() is equal to true:
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    print_test_summary(tests_passed, tests_failed)
End Process