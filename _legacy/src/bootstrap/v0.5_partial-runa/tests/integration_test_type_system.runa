Note: Integration test for type_system.runa and semantic_analyzer.runa
Note: Tests that we can analyze and type-check parsed programs

Import module "../parser_frontend" as Parser
Import module "../semantic_analyzer" as Semantic
Import module "../type_system" as Types
Import module "../core_libs" as Core

External Process called "rust_print_string" that takes text as String

Process called "test_basic_type_checking" returns Boolean:
    Note: Test basic type checking functionality
    
    rust_print_string("[TEST] Basic Type Checking\n")
    
    Let test_program be "Process called \"test\" returns Integer:\n    Let x be 42\n    Return x\nEnd Process"
    
    Note: Parse the program first
    Let parse_result be Parser.parse_program(test_program)
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Parse failed (prerequisite)\n")
        Return false
    End If
    
    Note: Create symbol table
    Let symbol_table be Semantic.create_symbol_table()
    
    Note: Run semantic analysis
    Let semantic_result be Semantic.analyze_program(parse_result.ast, symbol_table)
    If semantic_result.success is equal to false:
        rust_print_string("  ✗ Semantic analysis failed\n")
        Return false
    End If
    
    Note: Run type checking
    Let type_result be Types.check_program(parse_result.ast, symbol_table)
    If type_result.success is equal to false:
        rust_print_string("  ✗ Type checking failed\n")
        For Each error in type_result.errors:
            rust_print_string("    Error: ")
            rust_print_string(error)
            rust_print_string("\n")
        End For
        Return false
    End If
    
    rust_print_string("  ✓ Basic type checking passed\n")
    Return true
End Process

Process called "test_variable_scope_analysis" returns Boolean:
    Note: Test variable scope analysis
    
    rust_print_string("[TEST] Variable Scope Analysis\n")
    
    Let test_program be "Process called \"test\" returns Nothing:\n    Let x be 42\n    If true:\n        Let y be x plus 1\n        rust_print_string(\"Inside block\")\n    End If\nEnd Process"
    
    Note: Parse and analyze
    Let parse_result be Parser.parse_program(test_program)
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Parse failed\n")
        Return false
    End If
    
    Let symbol_table be Semantic.create_symbol_table()
    Let semantic_result be Semantic.analyze_program(parse_result.ast, symbol_table)
    
    If semantic_result.success is equal to false:
        rust_print_string("  ✗ Scope analysis failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ Variable scope analysis passed\n")
    Return true
End Process

Process called "test_function_parameter_types" returns Boolean:
    Note: Test function parameter type checking
    
    rust_print_string("[TEST] Function Parameter Types\n")
    
    Let test_program be "Process called \"add\" that takes a as Integer, b as Integer returns Integer:\n    Return a plus b\nEnd Process"
    
    Let parse_result be Parser.parse_program(test_program)
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Parse failed\n")
        Return false
    End If
    
    Let symbol_table be Semantic.create_symbol_table()
    Let semantic_result be Semantic.analyze_program(parse_result.ast, symbol_table)
    If semantic_result.success is equal to false:
        rust_print_string("  ✗ Semantic analysis failed\n")
        Return false
    End If
    
    Let type_result be Types.check_program(parse_result.ast, symbol_table)
    If type_result.success is equal to false:
        rust_print_string("  ✗ Type checking failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ Function parameter types passed\n")
    Return true
End Process

Process called "test_type_definition_analysis" returns Boolean:
    Note: Test analysis of custom type definitions
    
    rust_print_string("[TEST] Type Definition Analysis\n")
    
    Let test_program be "Type called \"Person\":\n    name as String\n    age as Integer\nEnd Type\n\nProcess called \"create_person\" returns Person:\n    Return Person with name = \"Alice\", age = 30\nEnd Process"
    
    Let parse_result be Parser.parse_program(test_program)
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Parse failed\n")
        Return false
    End If
    
    Let symbol_table be Semantic.create_symbol_table()
    Let semantic_result be Semantic.analyze_program(parse_result.ast, symbol_table)
    If semantic_result.success is equal to false:
        rust_print_string("  ✗ Type definition analysis failed\n")
        Return false
    End If
    
    Let type_result be Types.check_program(parse_result.ast, symbol_table)
    If type_result.success is equal to false:
        rust_print_string("  ✗ Type checking failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ Type definition analysis passed\n")
    Return true
End Process

Process called "test_type_error_detection" returns Boolean:
    Note: Test that type errors are properly detected
    
    rust_print_string("[TEST] Type Error Detection\n")
    
    Let test_program be "Process called \"test\" returns Integer:\n    Let x be \"hello\"\n    Return x plus 42\nEnd Process"  Note: String + Integer should fail
    
    Let parse_result be Parser.parse_program(test_program)
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Parse failed\n")
        Return false
    End If
    
    Let symbol_table be Semantic.create_symbol_table()
    Let semantic_result be Semantic.analyze_program(parse_result.ast, symbol_table)
    If semantic_result.success is equal to false:
        rust_print_string("  ✓ Type error correctly detected at semantic level\n")
        Return true
    End If
    
    Let type_result be Types.check_program(parse_result.ast, symbol_table)
    If type_result.success is equal to true:
        rust_print_string("  ✗ Type error should have been detected\n")
        Return false
    End If
    
    rust_print_string("  ✓ Type error correctly detected\n")
    Return true
End Process

Process called "test_external_function_types" returns Boolean:
    Note: Test type checking of external function calls
    
    rust_print_string("[TEST] External Function Types\n")
    
    Let test_program be "External Process called \"rust_print_string\" that takes text as String\n\nProcess called \"test\" returns Nothing:\n    rust_print_string(\"Hello, World!\")\nEnd Process"
    
    Let parse_result be Parser.parse_program(test_program)
    If parse_result.success is equal to false:
        rust_print_string("  ✗ Parse failed\n")
        Return false
    End If
    
    Let symbol_table be Semantic.create_symbol_table()
    Let semantic_result be Semantic.analyze_program(parse_result.ast, symbol_table)
    If semantic_result.success is equal to false:
        rust_print_string("  ✗ Semantic analysis failed\n")
        Return false
    End If
    
    Let type_result be Types.check_program(parse_result.ast, symbol_table)
    If type_result.success is equal to false:
        rust_print_string("  ✗ Type checking failed\n")
        Return false
    End If
    
    rust_print_string("  ✓ External function types passed\n")
    Return true
End Process

Process called "run_all_type_system_tests" returns Boolean:
    Note: Run all type system integration tests
    
    Let tests_passed be 0
    Let tests_failed be 0
    
    If test_basic_type_checking():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_variable_scope_analysis():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_function_parameter_types():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_type_definition_analysis():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_type_error_detection():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    If test_external_function_types():
        Set tests_passed to tests_passed plus 1
    Otherwise:
        Set tests_failed to tests_failed plus 1
    End If
    
    rust_print_string("\n=== TYPE SYSTEM INTEGRATION TEST RESULTS ===\n")
    rust_print_string("Passed: ")
    rust_print_string(Core.integer_to_string(tests_passed))
    rust_print_string("\nFailed: ")
    rust_print_string(Core.integer_to_string(tests_failed))
    rust_print_string("\n")
    
    If tests_failed is equal to 0:
        rust_print_string("✓ ALL TYPE SYSTEM TESTS PASSED\n")
        Return true
    Otherwise:
        rust_print_string("✗ SOME TYPE SYSTEM TESTS FAILED\n")
        Return false
    End If
End Process

Process called "main":
    rust_print_string("=== TYPE SYSTEM INTEGRATION TEST ===\n\n")
    run_all_type_system_tests()
End Process