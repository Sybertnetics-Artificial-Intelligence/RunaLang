Note: Simple diagnostic system integration test
Note: Tests basic functionality needed for compiler integration

Import module "core_libs" as Core
Import module "diagnostic_system" as Diag

Process called "main" returns Integer:
    Note: Test basic diagnostic system functionality
    
    Core.print_string("Testing diagnostic system...\n")
    
    Note: Create diagnostic context
    Let context be Diag.create_diagnostic_context()
    Core.print_string("✓ Created diagnostic context\n")
    
    Note: Create source location
    Let location be Diag.create_source_location("example.runa", 15, 8, 5)
    Core.print_string("✓ Created source location\n")
    
    Note: Report an error
    Let error_diag be Diag.report_error(context, "E001", "Undefined variable 'foo'", location)
    Core.print_string("✓ Reported error\n")
    
    Note: Report a warning
    Let warn_location be Diag.create_source_location("example.runa", 20, 12, 3)
    Let warn_diag be Diag.report_warning(context, "W001", "Unused variable 'bar'", warn_location)
    Core.print_string("✓ Reported warning\n")
    
    Note: Add note to error
    Let noted_error be Diag.add_note(error_diag, "Variable 'foo' was not declared in this scope", null)
    Core.print_string("✓ Added note to diagnostic\n")
    
    Note: Format error for display
    Let formatted be Diag.format_diagnostic(error_diag, context)
    Core.print_string("✓ Formatted diagnostic\n")
    Core.print_string("Formatted output:\n")
    Core.print_string(formatted)
    
    Note: Check JSON formatting
    Let json_diag be Diag.format_json_diagnostic(warn_diag)
    Core.print_string("✓ Created JSON diagnostic\n")
    Core.print_string("JSON output: ")
    Core.print_string(json_diag)
    Core.print_string("\n")
    
    Note: Test compilation continuation
    Let should_continue be Diag.should_continue_compilation(context)
    If should_continue is equal to true:
        Core.print_string("✓ Compilation can continue despite errors\n")
    Otherwise:
        Core.print_string("✗ Compilation stopped\n")
    End If
    
    Note: Test error recovery
    Let can_recover be Diag.can_recover_from(error_diag)
    If can_recover is equal to true:
        Core.print_string("✓ Error is recoverable\n")
    Otherwise:
        Core.print_string("✗ Error is not recoverable\n")
    End If
    
    Note: Verify counts
    If context.error_count is equal to 1:
        Core.print_string("✓ Error count correct (1)\n")
    Otherwise:
        Core.print_string("✗ Error count incorrect\n")
        Return 1
    End If
    
    If context.warning_count is equal to 1:
        Core.print_string("✓ Warning count correct (1)\n")
    Otherwise:
        Core.print_string("✗ Warning count incorrect\n")
        Return 1
    End If
    
    Core.print_string("\n=== DIAGNOSTIC SYSTEM TEST PASSED ===\n")
    Return 0
End Process