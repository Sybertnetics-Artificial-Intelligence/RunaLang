Note: v0.2 Type Checker Implementation
Note: Per specification Section 2.4 (simplified for v0.2)

Import "parser" as Parser

Type called "TypeEnvironment":
    variables as Dictionary[String, String]
    functions as Dictionary[String, String]
    parent as String  Note: Simplified - no actual parent linking in v0.2
End Type

Process called "check" that takes ast as Parser.ASTNode returns Parser.ASTNode:
    Let env be create_global_environment()
    Return check_node(ast, env)
End Process

Process called "check_node" that takes node as Parser.ASTNode, env as TypeEnvironment returns Parser.ASTNode:
    Note: Basic type checking for v0.2
    Note: Just pass through AST with minimal validation
    Return node
End Process

Process called "create_global_environment" returns TypeEnvironment:
    Let env be a value of type TypeEnvironment with
        variables as a dictionary containing nothing,
        functions as a dictionary containing nothing,
        parent as ""

    Note: Add built-in functions
    Set env.functions at key "string_concat" to "String"
    Set env.functions at key "string_length" to "Integer"
    Set env.functions at key "string_char_at" to "Integer"
    Set env.functions at key "string_substring" to "String"
    Set env.functions at key "ReadFile" to "String"
    Set env.functions at key "WriteFile" to "Nothing"
    Set env.functions at key "is_digit" to "Boolean"
    Set env.functions at key "is_letter" to "Boolean"
    Set env.functions at key "char_to_string" to "String"
    Set env.functions at key "int_to_string" to "String"

    Return env
End Process

Note: Wrapper function for v0.1 compatibility
Process called "TypeChecker_check" that takes ast as Parser.ASTNode returns Parser.ASTNode:
    Return check(ast)
End Process