Note: v0.2 Runa Self-Hosted Compiler Main Entry Point
Note: This is the first compiler written in Runa itself
Note: Implements per specification Section 2.1

Import "lexer" as Lexer
Import "parser" as Parser
Import "type_checker" as TypeChecker
Import "codegen_x86" as CodeGen

Process called main that takes args as List[String] returns Integer:
    If length of args is less than 2:
        WriteFile "Usage: runac <input.runa> [-o output]" to "/dev/stderr"
        Return 1
    End If

    Let input_file be args at index 1
    Let output_file be get_output_filename(args)

    Let source be ReadFile(input_file)

    Note: Compilation pipeline
    Let tokens be Lexer.tokenize(source)
    Let ast be Parser.parse(tokens)
    Let typed_ast be TypeChecker.check(ast)
    Let assembly be CodeGen.generate(typed_ast)

    WriteFile assembly to output_file

    Note: Invoke system assembler
    Let object_file be string_concat(output_file, ".o")
    Let assemble_cmd be string_concat("as ", output_file)
    Let assemble_cmd2 be string_concat(assemble_cmd, " -o ")
    Let final_cmd be string_concat(assemble_cmd2, object_file)
    System(final_cmd)

    Return 0
End Process

Process called get_output_filename that takes args as List[String] returns String:
    Let i be 2
    While i is less than length of args:
        Let arg be args at index i
        If arg is equal to "-o":
            If i plus 1 is less than length of args:
                Return args at index (i plus 1)
            End If
        End If
        Set i to i plus 1
    End While

    Note: Default output filename with .s extension
    Let input be args at index 1
    Let dot_pos be string_length(input) minus 5  Note: Remove .runa
    Return string_concat(string_substring(input, 0, dot_pos), ".s")
End Process

Process called System that takes command as String returns Integer:
    Note: Bootstrap version - writes commands to build script
    Note: Full syscall implementation requires inline assembly (v0.3+)

    Let script_file be "build_commands.sh"
    Let existing_content be ReadFile(script_file)

    If existing_content is equal to "":
        WriteFile "#!/bin/bash\n" to script_file
    End If

    Let new_content be string_concat(existing_content, command)
    Set new_content to string_concat(new_content, "\n")
    WriteFile new_content to script_file

    Print("Command added to build_commands.sh: " plus command)
    Print("Run './build_commands.sh' after compilation to complete the build")

    Return 0
End Process