Note: SQLite Database Integration Examples
Note: This module demonstrates practical usage of Runa's SQLite database driver
Note: with real-world examples including CRUD operations, transactions, and best practices.

Import "database/sqlite" as sqlite
Import "database/sql" as sql
Import "database/connection_pool" as pool
Import "logging"
Import "datetime"

Note: Example 1: Basic Database Setup and CRUD Operations

Process called "example_basic_crud" that returns None:
    Note: Demonstrate basic Create, Read, Update, Delete operations
    Try:
        Display "=== Basic CRUD Operations Example ==="
        
        Note: Create SQLite configuration
        Let config be sqlite.SQLiteConfig with:
            database_path as "example_app.db"
            timeout as 30
            page_size as 4096
            cache_size as 2000
            temp_store as "memory"
            journal_mode as "WAL"
            synchronous as "NORMAL"
            foreign_keys as true
            recursive_triggers as false
            auto_vacuum as "incremental"
        
        Note: Create database driver
        Let driver be sqlite.create_sqlite_driver with config as config
        Display "✓ SQLite driver created successfully"
        
        Note: CREATE - Set up users table
        Let create_table_sql be "CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            age INTEGER,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )"
        
        Let create_result be sqlite.execute_query with 
            driver as driver and 
            query as create_table_sql and 
            parameters as empty list
        
        Display "✓ Users table created"
        
        Note: INSERT - Add new users
        Let insert_users be list containing:
            list containing "Alice Johnson" and "alice@example.com" and 28
            list containing "Bob Smith" and "bob@example.com" and 35
            list containing "Carol Davis" and "carol@example.com" and 42
        
        For each user_data in insert_users:
            Let insert_result be sqlite.execute_query with 
                driver as driver and 
                query as "INSERT INTO users (name, email, age) VALUES (?, ?, ?)" and 
                parameters as user_data
            
            Display "✓ Inserted user: " with message user_data at index 0 with message " (ID: " with message insert_result.last_insert_rowid as string with message ")"
        
        Note: READ - Query users
        Let select_result be sqlite.execute_query with 
            driver as driver and 
            query as "SELECT id, name, email, age, created_at FROM users ORDER BY name" and 
            parameters as empty list
        
        Display "✓ Found " with message select_result.row_count as string with message " users:"
        For each row in select_result.rows:
            Display "  - " with message row["name"] with message " (" with message row["email"] with message "), Age: " with message row["age"] as string
        
        Note: UPDATE - Modify user data
        Let update_result be sqlite.execute_query with 
            driver as driver and 
            query as "UPDATE users SET age = age + 1 WHERE name LIKE ?" and 
            parameters as list containing "Alice%"
        
        Display "✓ Updated " with message update_result.changes as string with message " user(s)"
        
        Note: DELETE - Remove users
        Let delete_result be sqlite.execute_query with 
            driver as driver and 
            query as "DELETE FROM users WHERE age > ?" and 
            parameters as list containing 40
        
        Display "✓ Deleted " with message delete_result.changes as string with message " user(s)"
        
        Note: Final count
        Let count_result be sqlite.execute_query with 
            driver as driver and 
            query as "SELECT COUNT(*) as total FROM users" and 
            parameters as empty list
        
        Let total_users be count_result.rows at index 0
        Display "✓ Total users remaining: " with message total_users["total"] as string
        
        Note: Cleanup
        Call sqlite.close_driver with driver as driver
        Display "✓ Database connection closed"
        
    Catch error as Exception:
        Display "❌ CRUD example failed: " with message error as string

Note: Example 2: Advanced Query Building with SQL Module

Process called "example_advanced_queries" that returns None:
    Note: Demonstrate advanced SQL query building and execution
    Try:
        Display "\n=== Advanced Query Building Example ==="
        
        Let config be sqlite.SQLiteConfig with:
            database_path as ":memory:"  Note: Use in-memory database
            timeout as 30
            foreign_keys as true
        
        Let driver be sqlite.create_sqlite_driver with config as config
        Display "✓ In-memory SQLite database created"
        
        Note: Create sample tables with relationships
        Let schema_queries be list containing:
            "CREATE TABLE departments (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                budget DECIMAL(10,2)
            )"
            "CREATE TABLE employees (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                department_id INTEGER,
                salary DECIMAL(10,2),
                hire_date TEXT,
                FOREIGN KEY (department_id) REFERENCES departments (id)
            )"
        
        For each schema_sql in schema_queries:
            Call sqlite.execute_query with driver as driver and query as schema_sql and parameters as empty list
        
        Display "✓ Schema created with foreign key relationships"
        
        Note: Insert sample data
        Let dept_data be list containing:
            list containing "Engineering" and 1000000
            list containing "Marketing" and 500000
            list containing "Sales" and 750000
        
        For each dept in dept_data:
            Call sqlite.execute_query with 
                driver as driver and 
                query as "INSERT INTO departments (name, budget) VALUES (?, ?)" and 
                parameters as dept
        
        Let emp_data be list containing:
            list containing "John Doe" and 1 and 75000 and "2023-01-15"
            list containing "Jane Smith" and 1 and 82000 and "2022-03-10"
            list containing "Mike Johnson" and 2 and 65000 and "2023-06-01"
            list containing "Sarah Wilson" and 3 and 70000 and "2023-02-20"
        
        For each emp in emp_data:
            Call sqlite.execute_query with 
                driver as driver and 
                query as "INSERT INTO employees (name, department_id, salary, hire_date) VALUES (?, ?, ?, ?)" and 
                parameters as emp
        
        Display "✓ Sample data inserted"
        
        Note: Build complex query using SQL module
        Let query_builder be sql.create_query_builder with dialect as sql.SQLDialect.sqlite
        
        Note: Build JOIN query with aggregation
        Let complex_query be "
            SELECT 
                d.name as department_name,
                d.budget,
                COUNT(e.id) as employee_count,
                AVG(e.salary) as avg_salary,
                MAX(e.salary) as max_salary,
                MIN(e.hire_date) as oldest_hire
            FROM departments d
            LEFT JOIN employees e ON d.id = e.department_id
            GROUP BY d.id, d.name, d.budget
            HAVING employee_count > 0
            ORDER BY avg_salary DESC
        "
        
        Let complex_result be sqlite.execute_query with 
            driver as driver and 
            query as complex_query and 
            parameters as empty list
        
        Display "✓ Complex JOIN query executed:"
        Display "  Columns: " with message join_list with list as complex_result.column_names and separator as ", "
        
        For each row in complex_result.rows:
            Display "  Department: " with message row["department_name"]
            Display "    Budget: $" with message row["budget"] as string
            Display "    Employees: " with message row["employee_count"] as string
            Display "    Avg Salary: $" with message row["avg_salary"] as string
            Display "    Max Salary: $" with message row["max_salary"] as string
            Display "    Oldest Hire: " with message row["oldest_hire"]
            Display ""
        
        Call sqlite.close_driver with driver as driver
        Display "✓ Advanced queries example completed"
        
    Catch error as Exception:
        Display "❌ Advanced queries example failed: " with message error as string

Note: Example 3: Transaction Management and Error Recovery

Process called "example_transaction_management" that returns None:
    Note: Demonstrate robust transaction handling and error recovery
    Try:
        Display "\n=== Transaction Management Example ==="
        
        Let config be sqlite.SQLiteConfig with:
            database_path as "transaction_example.db"
            timeout as 30
            foreign_keys as true
            journal_mode as "WAL"
            synchronous as "NORMAL"
        
        Let driver be sqlite.create_sqlite_driver with config as driver
        Display "✓ Database connection established"
        
        Note: Create accounts table for banking example
        Call sqlite.execute_query with 
            driver as driver and 
            query as "CREATE TABLE IF NOT EXISTS accounts (
                id INTEGER PRIMARY KEY,
                account_number TEXT UNIQUE NOT NULL,
                balance DECIMAL(10,2) NOT NULL CHECK (balance >= 0),
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )" and 
            parameters as empty list
        
        Note: Initialize accounts
        Let init_accounts be list containing:
            list containing "ACC001" and 1000.00
            list containing "ACC002" and 500.00
            list containing "ACC003" and 750.00
        
        For each account in init_accounts:
            Call sqlite.execute_query with 
                driver as driver and 
                query as "INSERT OR REPLACE INTO accounts (account_number, balance) VALUES (?, ?)" and 
                parameters as account
        
        Display "✓ Test accounts created"
        
        Note: Successful transaction example
        Display "\n--- Successful Money Transfer ---"
        
        Let transfer_queries be list containing:
            "UPDATE accounts SET balance = balance - 100.00 WHERE account_number = 'ACC001'"
            "UPDATE accounts SET balance = balance + 100.00 WHERE account_number = 'ACC002'"
            "INSERT INTO transaction_log (from_account, to_account, amount, timestamp) VALUES ('ACC001', 'ACC002', 100.00, datetime('now'))" if false otherwise ""
        
        Note: Remove empty query
        Let valid_transfer_queries be list containing:
            "UPDATE accounts SET balance = balance - 100.00 WHERE account_number = 'ACC001'"
            "UPDATE accounts SET balance = balance + 100.00 WHERE account_number = 'ACC002'"
        
        Let transfer_params be list containing:
            empty list
            empty list
        
        Let transfer_results be sqlite.execute_transaction with 
            driver as driver and 
            queries as valid_transfer_queries and 
            parameters as transfer_params and 
            transaction_type as "IMMEDIATE"
        
        Display "✓ Successfully transferred $100.00 from ACC001 to ACC002"
        
        Note: Show balances after successful transfer
        Let balance_result be sqlite.execute_query with 
            driver as driver and 
            query as "SELECT account_number, balance FROM accounts ORDER BY account_number" and 
            parameters as empty list
        
        For each account in balance_result.rows:
            Display "  " with message account["account_number"] with message ": $" with message account["balance"] as string
        
        Note: Failed transaction example (insufficient funds)
        Display "\n--- Failed Transaction Example ---"
        
        Let failed_queries be list containing:
            "UPDATE accounts SET balance = balance - 2000.00 WHERE account_number = 'ACC002'"
            "UPDATE accounts SET balance = balance + 2000.00 WHERE account_number = 'ACC003'"
        
        Let failed_params be list containing:
            empty list
            empty list
        
        Try:
            Let failed_results be sqlite.execute_transaction with 
                driver as driver and 
                queries as failed_queries and 
                parameters as failed_params and 
                transaction_type as "IMMEDIATE"
            
            Display "❌ Transaction should have failed due to insufficient funds"
            
        Catch expected_error as sqlite.SQLiteQueryError:
            Display "✓ Transaction correctly failed and rolled back: " with message expected_error as string
            
            Note: Verify balances unchanged
            Let verify_result be sqlite.execute_query with 
                driver as driver and 
                query as "SELECT account_number, balance FROM accounts ORDER BY account_number" and 
                parameters as empty list
            
            Display "✓ Account balances after failed transaction:"
            For each account in verify_result.rows:
                Display "  " with message account["account_number"] with message ": $" with message account["balance"] as string
        
        Call sqlite.close_driver with driver as driver
        Display "✓ Transaction management example completed"
        
    Catch error as Exception:
        Display "❌ Transaction management example failed: " with message error as string

Note: Example 4: Performance Optimization and Best Practices

Process called "example_performance_optimization" that returns None:
    Note: Demonstrate performance optimization techniques
    Try:
        Display "\n=== Performance Optimization Example ==="
        
        Let optimized_config be sqlite.SQLiteConfig with:
            database_path as "performance_test.db"
            timeout as 60
            page_size as 8192  Note: Larger page size for better performance
            cache_size as 10000  Note: More cache for better performance
            temp_store as "memory"  Note: Keep temp tables in memory
            journal_mode as "WAL"  Note: Write-Ahead Logging for concurrency
            synchronous as "NORMAL"  Note: Balance between safety and speed
            foreign_keys as true
            auto_vacuum as "incremental"
        
        Let driver be sqlite.create_sqlite_driver with config as optimized_config
        Display "✓ Database optimized for performance"
        
        Note: Create indexed table
        Let optimized_schema be list containing:
            "CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                price DECIMAL(10,2) NOT NULL,
                stock_quantity INTEGER NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )"
            "CREATE INDEX IF NOT EXISTS idx_products_category ON products(category)"
            "CREATE INDEX IF NOT EXISTS idx_products_price ON products(price)"
            "CREATE INDEX IF NOT EXISTS idx_products_name ON products(name)"
        
        For each schema_query in optimized_schema:
            Call sqlite.execute_query with driver as driver and query as schema_query and parameters as empty list
        
        Display "✓ Optimized schema with indexes created"
        
        Note: Batch insert for better performance
        Display "\n--- Batch Insert Performance ---"
        Let start_time be datetime.now
        
        Let batch_insert_queries be empty list
        Let batch_insert_params be empty list
        
        Note: Prepare batch of inserts
        For i from 1 to 100:
            Add "INSERT INTO products (name, category, price, stock_quantity) VALUES (?, ?, ?, ?)" to batch_insert_queries
            Add list containing ("Product " plus i as string) and "Category A" and (10.99 plus (i times 0.50)) and (100 plus i) to batch_insert_params
        
        Let batch_results be sqlite.execute_transaction with 
            driver as driver and 
            queries as batch_insert_queries and 
            parameters as batch_insert_params and 
            transaction_type as "IMMEDIATE"
        
        Let end_time be datetime.now
        Let batch_duration be (end_time minus start_time).total_seconds
        
        Display "✓ Inserted " with message length of batch_results as string with message " products in " with message batch_duration as string with message " seconds"
        Display "  Average: " with message ((batch_duration divided by length of batch_results) times 1000) as string with message " ms per insert"
        
        Note: Demonstrate query optimization
        Display "\n--- Query Optimization ---"
        
        Note: Inefficient query (without index usage)
        Set start_time to datetime.now
        
        Let slow_query_result be sqlite.execute_query with 
            driver as driver and 
            query as "SELECT * FROM products WHERE price > 15.00 AND stock_quantity > 120" and 
            parameters as empty list
        
        Set end_time to datetime.now
        Let slow_query_duration be (end_time minus start_time).total_seconds
        
        Display "✓ Query with conditions executed in " with message slow_query_duration as string with message " seconds"
        Display "  Found " with message slow_query_result.row_count as string with message " products"
        
        Note: Show query execution plan (if available)
        Let explain_result be sqlite.execute_query with 
            driver as driver and 
            query as "EXPLAIN QUERY PLAN SELECT * FROM products WHERE price > 15.00 AND stock_quantity > 120" and 
            parameters as empty list
        
        If explain_result.row_count is greater than 0:
            Display "✓ Query execution plan:"
            For each plan_row in explain_result.rows:
                Display "  " with message plan_row as string
        
        Note: Cleanup
        Call sqlite.execute_query with driver as driver and query as "DELETE FROM products" and parameters as empty list
        Call sqlite.close_driver with driver as driver
        
        Display "✓ Performance optimization example completed"
        
    Catch error as Exception:
        Display "❌ Performance optimization example failed: " plus error as string

Note: Main Example Runner

Process called "run_sqlite_examples" that returns None:
    Note: Run all SQLite database examples
    Display "🗄️  Runa SQLite Database Examples"
    Display "====================================\n"
    
    Note: Set up logging
    Call logging.set_level with level as "INFO"
    
    Note: Run examples in sequence
    Call example_basic_crud
    Call example_advanced_queries  
    Call example_transaction_management
    Call example_performance_optimization
    
    Display "\n✅ All SQLite examples completed successfully!"
    Display "Check the created database files for persistent data."

Note: Utility Functions

Process called "join_list" that takes list as List[String] and separator as String returns String:
    Note: Join list elements with separator
    Let result be ""
    Let i be 0
    While i is less than length of list:
        If i is greater than 0:
            Set result to result plus separator
        Set result to result plus (list at index i)
        Set i to i plus 1
    Return result

Process called "main" that returns None:
    Note: Main entry point for examples
    Call run_sqlite_examples