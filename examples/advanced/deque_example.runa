Note: Advanced Deque example using natural Runa syntax

Let dq be create_deque()
Let data be list containing 1, 2, 3, 4, 5, 6

Note: Add all elements to the back
:End Note
For each x in data:
    Call add_to_back with deque as dq and value as x

Display "Deque after adding to back:" with message dq

Note: Remove from front and back
:End Note
Let front_val be remove_from_front with deque as dq
Display "Removed from front:" with message front_val
Let back_val be remove_from_back with deque as dq
Display "Removed from back:" with message back_val
Display "Deque after removals:" with message dq

Note: Sliding window maximum (window size 3)
:End Note
Let window_size be 3
Let max_values be list containing
Let dq2 be create_deque()

For i from 0 to length of data minus 1:
    While dq2 is not empty and data[i] is greater than data[dq2[peek_back with deque as dq2]]:
        Call remove_from_back with deque as dq2
    Call add_to_back with deque as dq2 and value as i
    If dq2[peek_front with deque as dq2] is less than i minus window_size plus 1:
        Call remove_from_front with deque as dq2
    If i is greater than or equal to window_size minus 1:
        Add data[dq2[peek_front with deque as dq2]] to max_values

Display "Sliding window max values:" with message max_values 