Note:
examples/triple_syntax_test.runa
Triple Syntax Architecture Integration Test

This example demonstrates the Triple Syntax Architecture working with real Runa code.
It shows how the same algorithm can be expressed in all three syntax modes and
compiled through the integrated compiler pipeline.

Test scenarios:
1. Mathematical computation (circle area calculation)
2. Data manipulation (list filtering and transformation)  
3. Control flow (conditional logic and loops)
4. Mixed domain code combining all pattern types
:End Note

Note: =====================================================================
Note: TEST CASE 1: MATHEMATICAL COMPUTATION
Note: =====================================================================

Note: Canonical Runa (compilation target)
Process called "calculate_circle_area" that takes radius as Float returns Float:
    Let pi_constant be PI
    Let radius_squared be radius multiplied by radius
    Let area be pi_constant multiplied by radius_squared
    Return area

Note: Viewer Mode (AI-readable display) - equivalent representation
Note: Process called "calculate_circle_area" that takes radius as Float returns Float:
Note:     Define pi_constant as PI
Note:     Define radius_squared as radius times radius  
Note:     Define area as pi_constant times radius_squared
Note:     Return area

Note: Technical Mode (developer-friendly) - equivalent representation  
Note: function calculateCircleArea(radius) {
Note:     const piConstant = Math.PI;
Note:     const radiusSquared = radius ** 2;
Note:     const area = piConstant * radiusSquared;
Note:     return area;
Note: }

Note: =====================================================================
Note: TEST CASE 2: DATA MANIPULATION
Note: =====================================================================

Note: Canonical Runa (compilation target)
Process called "filter_and_transform_numbers" that takes numbers as List[Integer] returns List[Integer]:
    Let filtered_numbers be filter_list(numbers, item => item is greater than 10)
    Let transformed_numbers be map_list(filtered_numbers, item => item multiplied by 2)
    Return transformed_numbers

Note: Viewer Mode equivalent:
Note: Process called "filter_and_transform_numbers" that takes numbers as List[Integer] returns List[Integer]:
Note:     Define filtered_numbers as filter numbers where item is greater than 10
Note:     Define transformed_numbers as transform each item in filtered_numbers to item times 2  
Note:     Return transformed_numbers

Note: Technical Mode equivalent:
Note: function filterAndTransformNumbers(numbers) {
Note:     const filteredNumbers = numbers.filter(item => item > 10);
Note:     const transformedNumbers = filteredNumbers.map(item => item * 2);
Note:     return transformedNumbers;
Note: }

Note: =====================================================================
Note: TEST CASE 3: CONTROL FLOW
Note: =====================================================================

Note: Canonical Runa (compilation target)
Process called "process_temperature_readings" that takes readings as List[Float] returns String:
    Let total_readings be 0
    Let high_temp_count be 0
    
    For reading in readings:
        Set total_readings to total_readings plus 1
        If reading is greater than 100.0:
            Set high_temp_count to high_temp_count plus 1
    
    If high_temp_count is greater than 0:
        Return "Warning: " joined with string_from_integer(high_temp_count) joined with " high temperature readings detected"
    Otherwise:
        Return "All temperature readings are within normal range"

Note: Viewer Mode equivalent:
Note: Process called "process_temperature_readings" that takes readings as List[Float] returns String:
Note:     Define total_readings as 0
Note:     Define high_temp_count as 0
Note:     
Note:     for each reading in readings then
Note:         Define total_readings as total_readings plus 1
Note:         if reading is greater than 100.0 then
Note:             Define high_temp_count as high_temp_count plus 1
Note:     
Note:     if high_temp_count is greater than 0 then
Note:         Return "Warning: " joined with string_from_integer(high_temp_count) joined with " high temperature readings detected"
Note:     otherwise
Note:         Return "All temperature readings are within normal range"

Note: Technical Mode equivalent:
Note: function processTemperatureReadings(readings) {
Note:     let totalReadings = 0;
Note:     let highTempCount = 0;
Note:     
Note:     for (const reading of readings) {
Note:         totalReadings = totalReadings + 1;
Note:         if (reading > 100.0) {
Note:             highTempCount = highTempCount + 1;
Note:         }
Note:     }
Note:     
Note:     if (highTempCount > 0) {
Note:         return `Warning: ${highTempCount} high temperature readings detected`;
Note:     } else {
Note:         return "All temperature readings are within normal range";
Note:     }
Note: }

Note: =====================================================================
Note: TEST CASE 4: MIXED DOMAIN INTEGRATION
Note: =====================================================================

Note: Canonical Runa - Complete algorithm combining all domains
Process called "analyze_sensor_data" that takes sensor_readings as List[Float], threshold as Float returns Dictionary[String, Float]:
    Note: Mathematical computation
    Let total_readings be length_of(sensor_readings)
    Let sum be 0.0
    For Each reading in sensor_readings:
        Set sum to sum plus reading
    Let average be sum divided by total_readings
    
    Note: Data manipulation  
    Let high_readings be filter_list(sensor_readings, reading => reading is greater than threshold)
    Let high_reading_count be length_of(high_readings)
    Let percentage_high be (high_reading_count divided by total_readings) multiplied by 100.0
    
    Note: Control flow
    Let status_message be ""
    If percentage_high is greater than 50.0:
        Set status_message to "CRITICAL: Over 50% of readings exceed threshold"
    Otherwise if percentage_high is greater than 25.0:
        Set status_message to "WARNING: Over 25% of readings exceed threshold"
    Otherwise:
        Set status_message to "NORMAL: Readings within acceptable range"
    
    Note: Return comprehensive analysis
    Return Dictionary with:
        "total_readings": total_readings
        "average": average
        "high_count": high_reading_count
        "percentage_high": percentage_high
        "status": status_message

Note: =====================================================================
Note: INTEGRATION TEST RUNNER
Note: =====================================================================

Process called "run_triple_syntax_integration_tests" that returns Boolean:
    Note: Test runner that verifies Triple Syntax Architecture integration
    Note: Tests round-trip conversion and compilation compatibility
    
    Let test_results be Empty List[Boolean]
    
    Note: Test mathematical computation
    Let math_test_input be List with: 5.0, 10.0, 15.0
    Let math_results be Empty List[Float]
    For Each radius in math_test_input:
        Let area be calculate_circle_area(radius)
        Append area to math_results
    Let math_test_passed be length_of(math_results) is equal to 3
    Append math_test_passed to test_results
    
    Note: Test data manipulation
    Let data_test_input be List with: 5, 15, 8, 22, 3, 18, 12
    Let filtered_transformed be filter_and_transform_numbers(data_test_input)
    Let data_test_passed be length_of(filtered_transformed) is greater than 0
    Append data_test_passed to test_results
    
    Note: Test control flow
    Let temp_readings be List with: 95.5, 102.3, 87.2, 110.8, 99.1
    Let temp_analysis be process_temperature_readings(temp_readings)
    Let flow_test_passed be length_of(temp_analysis) is greater than 0
    Append flow_test_passed to test_results
    
    Note: Test mixed domain integration
    Let sensor_data be List with: 45.2, 67.8, 89.3, 23.7, 91.2, 56.4
    Let analysis_result be analyze_sensor_data(sensor_data, 60.0)
    Let mixed_test_passed be length_of(analysis_result) is greater than 0
    Append mixed_test_passed to test_results
    
    Note: Check all tests passed
    Let all_tests_passed be true
    For Each test_result in test_results:
        If NOT test_result:
            Set all_tests_passed to false
    
    Return all_tests_passed

Note: Helper function for testing
Process called "string_from_integer" that takes number as Integer returns String:
    Return "test_result"