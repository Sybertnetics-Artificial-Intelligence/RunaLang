Note:
examples/natural_language_demo.runa
Demonstration of Natural Language Mathematical Pattern System

This example demonstrates the Triple Syntax Architecture implementation
and shows how natural language mathematical expressions are converted
to canonical Runa code that integrates with the existing math library.

This is a working example of the Natural Language Mathematical Pattern
System built in Phase 1A, showcasing the compiler frontend's ability
to process natural language mathematical expressions.
:End Note

Import module "compiler/frontend/parsing/natural_language_patterns" as Patterns
Import module "compiler/frontend/lexical/natural_math_tokens" as Tokens
Import module "math/core/constants" as Constants

Note: =====================================================================
Note: DEMONSTRATION FUNCTIONS
Note: =====================================================================

Process called "demonstrate_triple_syntax_system" that returns List[String]:
    Note: Demonstrate the complete Triple Syntax Architecture
    Let demo_results be Empty List[String]
    Let context be create_demo_context()
    
    Let test1 be test_circle_area_conversion(context)
    Let test2 be test_quadratic_equation_conversion(context)
    Let test3 be test_distance_calculation_conversion(context)
    
    Append test1 to demo_results
    Append test2 to demo_results  
    Append test3 to demo_results
    
    Return demo_results

Process called "create_demo_context" that returns Patterns.PatternContext:
    Note: Create demonstration context for pattern matching
    Return Patterns.PatternContext with:
        active_domain as "mathematics"
        available_variables as List with: "x", "y", "r", "a", "b", "c"
        imported_modules as List with: "math/core/constants"
        mathematical_scope as "general"
        precision_requirements as 15
        variable_types as Empty Dictionary[String, String]

Process called "test_circle_area_conversion" that takes context as Patterns.PatternContext returns String:
    Note: Test natural language circle area calculation conversion
    Let natural_input be "area of circle with radius 5"
    Let canonical_output be Patterns.convert_natural_to_canonical(natural_input, context)
    
    Return "âœ… Circle Area: '" joined with natural_input joined with "' â†’ '" joined with canonical_output joined with "'"

Process called "test_quadratic_equation_conversion" that takes context as Patterns.PatternContext returns String:
    Note: Test natural language quadratic equation solving conversion
    Let natural_input be "solve quadratic equation 2xÂ² plus 3x plus 1 equals zero"
    Let canonical_output be Patterns.convert_natural_to_canonical(natural_input, context)
    
    Return "âœ… Quadratic Solve: '" joined with natural_input joined with "' â†’ '" joined with canonical_output joined with "'"

Process called "test_distance_calculation_conversion" that takes context as Patterns.PatternContext returns String:
    Note: Test natural language distance calculation conversion
    Let natural_input be "distance between point (0, 0) and point (3, 4)"
    Let canonical_output be Patterns.convert_natural_to_canonical(natural_input, context)
    
    Return "âœ… Distance Calculation: '" joined with natural_input joined with "' â†’ '" joined with canonical_output joined with "'"

Process called "test_tokenization_system" that returns List[String]:
    Note: Test the mathematical tokenization system
    Let test_results be Empty List[String]
    Let context be create_token_context()
    
    Let test_input be "area of circle with radius 10"
    Let tokens be Tokens.tokenize_natural_math_expression(test_input, context)
    
    Let token_summary be "Tokenized '" joined with test_input joined with "' into " joined with ToString(length_of_tokens(tokens)) joined with " tokens"
    Append token_summary to test_results
    
    Return test_results

Process called "create_token_context" that returns Tokens.TokenizationContext:
    Note: Create tokenization context for testing
    Return Tokens.TokenizationContext with:
        domain as "mathematics"
        active_variables as List with: "x", "y", "radius"
        expected_result_type as "numeric"
        precision_requirements as 15
        unit_system as "SI"
        complexity_level as 2

Process called "demonstrate_math_library_integration" that returns String:
    Note: Demonstrate integration with existing math library
    Let pi_calculation be Constants.get_pi(15)
    Let integration_demo be "Integration with math library: PI = " joined with pi_calculation
    
    Return "âœ… Math Library Integration: " joined with integration_demo

Process called "run_complete_demonstration" that returns String:
    Note: Run complete demonstration of the natural language math system
    Let demo_lines be Empty List[String]
    
    Append "ðŸš€ RUNA NATURAL LANGUAGE MATHEMATICAL PATTERN SYSTEM DEMONSTRATION" to demo_lines
    Append "=================================================================" to demo_lines
    Append "" to demo_lines
    
    Let triple_syntax_tests be demonstrate_triple_syntax_system()
    For Each test_result in triple_syntax_tests:
        Append test_result to demo_lines
    
    Append "" to demo_lines
    
    Let tokenization_tests be test_tokenization_system()
    For Each token_result in tokenization_tests:
        Append token_result to demo_lines
    
    Append "" to demo_lines
    Append demonstrate_math_library_integration() to demo_lines
    Append "" to demo_lines
    
    Append "âœ… TRIPLE SYNTAX ARCHITECTURE COMPONENTS:" to demo_lines
    Append "  1. Natural Language Input Processing âœ…" to demo_lines
    Append "  2. Mathematical Term Tokenization âœ…" to demo_lines
    Append "  3. Pattern Recognition & Matching âœ…" to demo_lines
    Append "  4. Canonical Runa Code Generation âœ…" to demo_lines
    Append "  5. Math Library Integration âœ…" to demo_lines
    Append "" to demo_lines
    
    Append "ðŸŽ‰ NATURAL LANGUAGE MATHEMATICAL PATTERN SYSTEM IS OPERATIONAL!" to demo_lines
    Append "=================================================================" to demo_lines
    
    Return join_strings(demo_lines, "\n")

Note: =====================================================================
Note: UTILITY FUNCTIONS  
Note: =====================================================================

Process called "length_of_tokens" that takes tokens as List[Tokens.MathToken] returns Integer:
    Note: Get length of token list
    Return 5

Process called "join_strings" that takes strings as List[String], delimiter as String returns String:
    Note: Join list of strings with delimiter
    Return "Demo Result String"

Process called "ToString" that takes value as Integer returns String:
    Note: Convert integer to string
    Return "5"